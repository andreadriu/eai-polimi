
ai_vibration_analysis_stwin_bm_custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f16c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000552f4  0801f340  0801f340  0002f340  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08074634  08074634  00090afc  2**0
                  CONTENTS
  4 .ARM          00000008  08074634  08074634  00084634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807463c  0807463c  00090afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807463c  0807463c  0008463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08074640  08074640  00084640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000afc  20000000  08074644  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003748  20000b00  08075140  00090b00  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20004248  08075140  00094248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090afc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00065ced  00000000  00000000  00090b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a810  00000000  00000000  000f6819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003fd8  00000000  00000000  00101030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003b50  00000000  00000000  00105008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004223c  00000000  00000000  00108b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004cc0a  00000000  00000000  0014ad94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001739de  00000000  00000000  0019799e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000140  00000000  00000000  0030b37c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00012634  00000000  00000000  0030b4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000822f  00000000  00000000  0031daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b00 	.word	0x20000b00
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801f314 	.word	0x0801f314

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000b04 	.word	0x20000b04
 80001fc:	0801f314 	.word	0x0801f314

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <HAL_GPIO_EXTI_Callback>:
{
	MemsEventDetected = 1;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]
	MemsEventDetected = 1;
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000dc4 	.word	0x20000dc4

08001048 <sensor_init>:
int32_t time_elapsed=0;
int32_t time_elapsed2=0;
int32_t post_FIFO_read;
int32_t pre_FIFO_read;

void sensor_init(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

	// init mems exti 8
	//set_mems_int_pin_a_exti();

	// init ism330dhcx sensor
	ret_uint = Sensor_IO_SPI_CS_Init_All();
 800104c:	f000 f92a 	bl	80012a4 <Sensor_IO_SPI_CS_Init_All>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b27      	ldr	r3, [pc, #156]	; (80010f4 <sensor_init+0xac>)
 8001056:	701a      	strb	r2, [r3, #0]
	ret = CUSTOM_MOTION_SENSOR_Init(CUSTOM_ISM330DHCX_0,MOTION_ACCELERO);
 8001058:	2102      	movs	r1, #2
 800105a:	2000      	movs	r0, #0
 800105c:	f014 fb0e 	bl	801567c <CUSTOM_MOTION_SENSOR_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <sensor_init+0xb0>)
 8001064:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_SetOutputDataRate(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO,ISM330DHCX_ACC_ODR);
 8001066:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80010fc <sensor_init+0xb4>
 800106a:	2102      	movs	r1, #2
 800106c:	2000      	movs	r0, #0
 800106e:	f014 fbd1 	bl	8015814 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>
 8001072:	4603      	mov	r3, r0
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <sensor_init+0xb0>)
 8001076:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_BDR( CUSTOM_ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_ACC_ODR);
 8001078:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80010fc <sensor_init+0xb4>
 800107c:	2102      	movs	r1, #2
 800107e:	2000      	movs	r0, #0
 8001080:	f014 fe92 	bl	8015da8 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR>
 8001084:	4603      	mov	r3, r0
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <sensor_init+0xb0>)
 8001088:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_SetFullScale( CUSTOM_ISM330DHCX_0,  MOTION_ACCELERO, ISM330DHCX_ACC_FS);
 800108a:	2210      	movs	r2, #16
 800108c:	2102      	movs	r1, #2
 800108e:	2000      	movs	r0, #0
 8001090:	f014 fc06 	bl	80158a0 <CUSTOM_MOTION_SENSOR_SetFullScale>
 8001094:	4603      	mov	r3, r0
 8001096:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <sensor_init+0xb0>)
 8001098:	6013      	str	r3, [r2, #0]

	// get sensor sensitivity
	ret = CUSTOM_MOTION_SENSOR_GetSensitivity(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO, &sensor_acc_sensitivity);
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <sensor_init+0xb8>)
 800109c:	2102      	movs	r1, #2
 800109e:	2000      	movs	r0, #0
 80010a0:	f014 fb74 	bl	801578c <CUSTOM_MOTION_SENSOR_GetSensitivity>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <sensor_init+0xb0>)
 80010a8:	6013      	str	r3, [r2, #0]

	// sensor fifo init
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(CUSTOM_ISM330DHCX_0, ENABLE);
 80010aa:	2101      	movs	r1, #1
 80010ac:	2000      	movs	r0, #0
 80010ae:	f014 fd95 	bl	8015bdc <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <sensor_init+0xb0>)
 80010b6:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level( CUSTOM_ISM330DHCX_0, INPUT_BUFFER_SIZE);
 80010b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010bc:	2000      	movs	r0, #0
 80010be:	f014 fdb5 	bl	8015c2c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <sensor_init+0xb0>)
 80010c6:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(CUSTOM_ISM330DHCX_0,  ENABLE);
 80010c8:	2101      	movs	r1, #1
 80010ca:	2000      	movs	r0, #0
 80010cc:	f014 fdd6 	bl	8015c7c <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <sensor_init+0xb0>)
 80010d4:	6013      	str	r3, [r2, #0]
	ret = CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(CUSTOM_ISM330DHCX_0,  ISM330DHCX_STREAM_MODE);
 80010d6:	2106      	movs	r1, #6
 80010d8:	2000      	movs	r0, #0
 80010da:	f014 fdf7 	bl	8015ccc <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <sensor_init+0xb0>)
 80010e2:	6013      	str	r3, [r2, #0]

	// AI init
	aiInit();
 80010e4:	f014 f830 	bl	8015148 <aiInit>
	// PRE PROCESSING init
	pre_processing_init(&pre_processing_data);
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <sensor_init+0xbc>)
 80010ea:	f002 f983 	bl	80033f4 <pre_processing_init>

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000b40 	.word	0x20000b40
 80010f8:	20000b3c 	.word	0x20000b3c
 80010fc:	44d04000 	.word	0x44d04000
 8001100:	20000dc0 	.word	0x20000dc0
 8001104:	20000b44 	.word	0x20000b44

08001108 <sensor_process>:

void sensor_process(void){
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af04      	add	r7, sp, #16

	if (MemsEventDetected == 1){
 800110e:	4b5c      	ldr	r3, [pc, #368]	; (8001280 <sensor_process+0x178>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	f040 80ac 	bne.w	8001270 <sensor_process+0x168>

		//pre_FIFO_read = BSP_GetTick();

		MemsEventDetected = 0;
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <sensor_process+0x178>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]

		for(int jj=0;jj<INPUT_BUFFER_SIZE;jj++){
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	e075      	b.n	8001210 <sensor_process+0x108>
			CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word(CUSTOM_ISM330DHCX_0, MOTION_ACCELERO, DataOut);
 8001124:	4a57      	ldr	r2, [pc, #348]	; (8001284 <sensor_process+0x17c>)
 8001126:	2102      	movs	r1, #2
 8001128:	2000      	movs	r0, #0
 800112a:	f014 fdf7 	bl	8015d1c <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word>
			sensor_acc[jj].x = ((float)DataOut[0])*sensor_acc_sensitivity*0.001; // from [mg] to [g]
 800112e:	4b55      	ldr	r3, [pc, #340]	; (8001284 <sensor_process+0x17c>)
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113c:	4b52      	ldr	r3, [pc, #328]	; (8001288 <sensor_process+0x180>)
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001146:	ee17 0a90 	vmov	r0, s15
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	a34a      	add	r3, pc, #296	; (adr r3, 8001278 <sensor_process+0x170>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa68 	bl	8000628 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd5a 	bl	8000c18 <__aeabi_d2f>
 8001164:	4601      	mov	r1, r0
 8001166:	4849      	ldr	r0, [pc, #292]	; (800128c <sensor_process+0x184>)
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4403      	add	r3, r0
 8001174:	6019      	str	r1, [r3, #0]
			sensor_acc[jj].y = ((float)DataOut[1])*sensor_acc_sensitivity*0.001;
 8001176:	4b43      	ldr	r3, [pc, #268]	; (8001284 <sensor_process+0x17c>)
 8001178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001184:	4b40      	ldr	r3, [pc, #256]	; (8001288 <sensor_process+0x180>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	ee17 0a90 	vmov	r0, s15
 8001192:	f7ff f9f1 	bl	8000578 <__aeabi_f2d>
 8001196:	a338      	add	r3, pc, #224	; (adr r3, 8001278 <sensor_process+0x170>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa44 	bl	8000628 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fd36 	bl	8000c18 <__aeabi_d2f>
 80011ac:	4601      	mov	r1, r0
 80011ae:	4837      	ldr	r0, [pc, #220]	; (800128c <sensor_process+0x184>)
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4403      	add	r3, r0
 80011bc:	3304      	adds	r3, #4
 80011be:	6019      	str	r1, [r3, #0]
			sensor_acc[jj].z = ((float)DataOut[2])*sensor_acc_sensitivity*0.001;
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <sensor_process+0x17c>)
 80011c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ce:	4b2e      	ldr	r3, [pc, #184]	; (8001288 <sensor_process+0x180>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f9cc 	bl	8000578 <__aeabi_f2d>
 80011e0:	a325      	add	r3, pc, #148	; (adr r3, 8001278 <sensor_process+0x170>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa1f 	bl	8000628 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fd11 	bl	8000c18 <__aeabi_d2f>
 80011f6:	4601      	mov	r1, r0
 80011f8:	4824      	ldr	r0, [pc, #144]	; (800128c <sensor_process+0x184>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4403      	add	r3, r0
 8001206:	3308      	adds	r3, #8
 8001208:	6019      	str	r1, [r3, #0]
		for(int jj=0;jj<INPUT_BUFFER_SIZE;jj++){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3301      	adds	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	dd86      	ble.n	8001124 <sensor_process+0x1c>
		}

		// call pre_processing_functions
		pre_processing_process(sensor_acc, INPUT_BUFFER_SIZE, preprocessing_output_array, INPUT_BUFFER_SIZE/2, &pre_processing_data);
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <sensor_process+0x188>)
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <sensor_process+0x18c>)
 800121e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001222:	481a      	ldr	r0, [pc, #104]	; (800128c <sensor_process+0x184>)
 8001224:	f002 f946 	bl	80034b4 <pre_processing_process>

		// call ai process
		aiProcess(preprocessing_output_array, ai_out);
 8001228:	491b      	ldr	r1, [pc, #108]	; (8001298 <sensor_process+0x190>)
 800122a:	481a      	ldr	r0, [pc, #104]	; (8001294 <sensor_process+0x18c>)
 800122c:	f013 ffb8 	bl	80151a0 <aiProcess>

		// print to Virtual COM
		snprintf(string_out, sizeof(string_out), "label: %.0f , Accuracy: %.2f \r\n", ai_out[0], ai_out[1]);
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <sensor_process+0x190>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f99f 	bl	8000578 <__aeabi_f2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <sensor_process+0x190>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f998 	bl	8000578 <__aeabi_f2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001250:	e9cd 4500 	strd	r4, r5, [sp]
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <sensor_process+0x194>)
 8001256:	211e      	movs	r1, #30
 8001258:	4811      	ldr	r0, [pc, #68]	; (80012a0 <sensor_process+0x198>)
 800125a:	f019 ff35 	bl	801b0c8 <sniprintf>
		CDC_Transmit_FS((uint8_t*)string_out, strlen(string_out));
 800125e:	4810      	ldr	r0, [pc, #64]	; (80012a0 <sensor_process+0x198>)
 8001260:	f7fe ffce 	bl	8000200 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29b      	uxth	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <sensor_process+0x198>)
 800126c:	f013 f9e0 	bl	8014630 <CDC_Transmit_FS>

	}
	//Get number of unread FIFO samples
    //CUSTOM_MOTION_SENSOR_FIFO_Get_Num_Samples(CUSTOM_ISM330DHCX_0, &num_samples);

}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	d2f1a9fc 	.word	0xd2f1a9fc
 800127c:	3f50624d 	.word	0x3f50624d
 8001280:	20000dc4 	.word	0x20000dc4
 8001284:	20000dc8 	.word	0x20000dc8
 8001288:	20000dc0 	.word	0x20000dc0
 800128c:	20000dd0 	.word	0x20000dd0
 8001290:	20000b44 	.word	0x20000b44
 8001294:	200019d0 	.word	0x200019d0
 8001298:	20001bd0 	.word	0x20001bd0
 800129c:	0801f340 	.word	0x0801f340
 80012a0:	20000b1c 	.word	0x20000b1c

080012a4 <Sensor_IO_SPI_CS_Init_All>:
 * @brief  Set all sensor Chip Select high. To be called before any SPI read/write
 * @param  None
 * @retval HAL_StatusTypeDef HAL Status
 */
uint8_t Sensor_IO_SPI_CS_Init_All(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Set the pin for the ISM330DHCX before init to avoid a glitch */
  //if use STWIN
  BUS_SPI3_SCK_GPIO_CLK_ENABLE();
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <Sensor_IO_SPI_CS_Init_All+0x50>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <Sensor_IO_SPI_CS_Init_All+0x50>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <Sensor_IO_SPI_CS_Init_All+0x50>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  //if use STWIN.BX
  //BUS_SPI2_SCK_GPIO_CLK_ENABLE();

  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <Sensor_IO_SPI_CS_Init_All+0x54>)
 80012ca:	f007 fda3 	bl	8008e14 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]

  GPIO_InitStruct.Pin = CUSTOM_ISM330DHCX_0_CS_PIN;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(CUSTOM_ISM330DHCX_0_CS_PORT, &GPIO_InitStruct);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <Sensor_IO_SPI_CS_Init_All+0x54>)
 80012e6:	f007 fb11 	bl	800890c <HAL_GPIO_Init>

  return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	48001400 	.word	0x48001400

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001300:	f005 fa0c 	bl	800671c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001304:	f000 f82e 	bl	8001364 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001308:	f000 f88a 	bl	8001420 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130c:	f000 fe90 	bl	8002030 <MX_GPIO_Init>
  MX_DMA_Init();
 8001310:	f000 fe64 	bl	8001fdc <MX_DMA_Init>
  MX_ADC1_Init();
 8001314:	f000 f8b4 	bl	8001480 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001318:	f000 f93a 	bl	8001590 <MX_DAC1_Init>
  MX_DFSDM1_Init();
 800131c:	f000 f96c 	bl	80015f8 <MX_DFSDM1_Init>
  MX_I2C2_SMBUS_Init();
 8001320:	f000 fa02 	bl	8001728 <MX_I2C2_SMBUS_Init>
  MX_I2C3_Init();
 8001324:	f000 fa42 	bl	80017ac <MX_I2C3_Init>
  MX_I2C4_Init();
 8001328:	f000 fa80 	bl	800182c <MX_I2C4_Init>
  MX_LTDC_Init();
 800132c:	f000 fabe 	bl	80018ac <MX_LTDC_Init>
  MX_RTC_Init();
 8001330:	f000 fb6e 	bl	8001a10 <MX_RTC_Init>
  MX_SAI1_Init();
 8001334:	f000 fbba 	bl	8001aac <MX_SAI1_Init>
  MX_SPI1_Init();
 8001338:	f000 fc7a 	bl	8001c30 <MX_SPI1_Init>
  MX_SPI2_Init();
 800133c:	f000 fcb6 	bl	8001cac <MX_SPI2_Init>
  MX_TIM2_Init();
 8001340:	f000 fcf2 	bl	8001d28 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001344:	f000 fd4a 	bl	8001ddc <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001348:	f000 fdac 	bl	8001ea4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800134c:	f000 fdf8 	bl	8001f40 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001350:	f000 f8fc 	bl	800154c <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8001354:	f013 f8ae 	bl	80144b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  sensor_init();
 8001358:	f7ff fe76 	bl	8001048 <sensor_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sensor_process();
 800135c:	f7ff fed4 	bl	8001108 <sensor_process>
 8001360:	e7fc      	b.n	800135c <main+0x60>
	...

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b096      	sub	sp, #88	; 0x58
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2244      	movs	r2, #68	; 0x44
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f018 ff1a 	bl	801a1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001386:	2000      	movs	r0, #0
 8001388:	f009 fb2e 	bl	800a9e8 <HAL_PWREx_ControlVoltageScaling>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001392:	f001 f84d 	bl	8002430 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001396:	f009 faf7 	bl	800a988 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <SystemClock_Config+0xb8>)
 800139c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <SystemClock_Config+0xb8>)
 80013a2:	f023 0318 	bic.w	r3, r3, #24
 80013a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80013aa:	2325      	movs	r3, #37	; 0x25
 80013ac:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013bc:	2302      	movs	r3, #2
 80013be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c0:	2303      	movs	r3, #3
 80013c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80013c8:	231e      	movs	r3, #30
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013cc:	2302      	movs	r3, #2
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4618      	mov	r0, r3
 80013de:	f009 fbc7 	bl	800ab70 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80013e8:	f001 f822 	bl	8002430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2303      	movs	r3, #3
 80013f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	2105      	movs	r1, #5
 8001404:	4618      	mov	r0, r3
 8001406:	f009 ffcd 	bl	800b3a4 <HAL_RCC_ClockConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001410:	f001 f80e 	bl	8002430 <Error_Handler>
  }
}
 8001414:	bf00      	nop
 8001416:	3758      	adds	r7, #88	; 0x58
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000

08001420 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0a8      	sub	sp, #160	; 0xa0
 8001424:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	229c      	movs	r2, #156	; 0x9c
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f018 febd 	bl	801a1ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_ADC;
 8001432:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001436:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001438:	2300      	movs	r3, #0
 800143a:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800143c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001444:	2303      	movs	r3, #3
 8001446:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001448:	2305      	movs	r3, #5
 800144a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 96;
 800144c:	2360      	movs	r3, #96	; 0x60
 800144e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV25;
 8001450:	2319      	movs	r3, #25
 8001452:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001454:	2304      	movs	r3, #4
 8001456:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001458:	2304      	movs	r3, #4
 800145a:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <PeriphCommonClock_Config+0x5c>)
 800145e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4618      	mov	r0, r3
 8001464:	f00a fa58 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800146e:	f000 ffdf 	bl	8002430 <Error_Handler>
  }
}
 8001472:	bf00      	nop
 8001474:	37a0      	adds	r7, #160	; 0xa0
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	01010000 	.word	0x01010000

08001480 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001486:	463b      	mov	r3, r7
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MX_ADC1_Init+0xc0>)
 8001498:	4a2a      	ldr	r2, [pc, #168]	; (8001544 <MX_ADC1_Init+0xc4>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MX_ADC1_Init+0xc0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014f8:	2204      	movs	r2, #4
 80014fa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014fc:	4810      	ldr	r0, [pc, #64]	; (8001540 <MX_ADC1_Init+0xc0>)
 80014fe:	f005 fb45 	bl	8006b8c <HAL_ADC_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001508:	f000 ff92 	bl	8002430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800150c:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_ADC1_Init+0xc8>)
 800150e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001510:	2306      	movs	r3, #6
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001518:	237f      	movs	r3, #127	; 0x7f
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800151c:	2304      	movs	r3, #4
 800151e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_ADC1_Init+0xc0>)
 800152a:	f005 fc7b 	bl	8006e24 <HAL_ADC_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001534:	f000 ff7c 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20001bd8 	.word	0x20001bd8
 8001544:	50040000 	.word	0x50040000
 8001548:	80000001 	.word	0x80000001

0800154c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_CRC_Init+0x3c>)
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <MX_CRC_Init+0x40>)
 8001554:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_CRC_Init+0x3c>)
 8001558:	2200      	movs	r2, #0
 800155a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_CRC_Init+0x3c>)
 800155e:	2200      	movs	r2, #0
 8001560:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_CRC_Init+0x3c>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_CRC_Init+0x3c>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_CRC_Init+0x3c>)
 8001570:	2201      	movs	r2, #1
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_CRC_Init+0x3c>)
 8001576:	f006 f995 	bl	80078a4 <HAL_CRC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001580:	f000 ff56 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20001ca0 	.word	0x20001ca0
 800158c:	40023000 	.word	0x40023000

08001590 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2228      	movs	r2, #40	; 0x28
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f018 fe05 	bl	801a1ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_DAC1_Init+0x60>)
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <MX_DAC1_Init+0x64>)
 80015a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <MX_DAC1_Init+0x60>)
 80015aa:	f006 fa65 	bl	8007a78 <HAL_DAC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80015b4:	f000 ff3c 	bl	8002430 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80015c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_DAC1_Init+0x60>)
 80015da:	f006 fa6f 	bl	8007abc <HAL_DAC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80015e4:	f000 ff24 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20001cc4 	.word	0x20001cc4
 80015f4:	40007400 	.word	0x40007400

080015f8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <MX_DFSDM1_Init+0x114>)
 80015fe:	4a44      	ldr	r2, [pc, #272]	; (8001710 <MX_DFSDM1_Init+0x118>)
 8001600:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <MX_DFSDM1_Init+0x114>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = DISABLE;
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <MX_DFSDM1_Init+0x114>)
 800160a:	2200      	movs	r2, #0
 800160c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <MX_DFSDM1_Init+0x114>)
 8001610:	2200      	movs	r2, #0
 8001612:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_FASTSINC_ORDER;
 8001614:	4b3d      	ldr	r3, [pc, #244]	; (800170c <MX_DFSDM1_Init+0x114>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 1;
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <MX_DFSDM1_Init+0x114>)
 800161c:	2201      	movs	r2, #1
 800161e:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001620:	4b3a      	ldr	r3, [pc, #232]	; (800170c <MX_DFSDM1_Init+0x114>)
 8001622:	2201      	movs	r2, #1
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001626:	4839      	ldr	r0, [pc, #228]	; (800170c <MX_DFSDM1_Init+0x114>)
 8001628:	f006 fc5c 	bl	8007ee4 <HAL_DFSDM_FilterInit>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_DFSDM1_Init+0x3e>
  {
    Error_Handler();
 8001632:	f000 fefd 	bl	8002430 <Error_Handler>
  }
  hdfsdm1_channel5.Instance = DFSDM1_Channel5;
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001638:	4a37      	ldr	r2, [pc, #220]	; (8001718 <MX_DFSDM1_Init+0x120>)
 800163a:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel5.Init.OutputClock.Activation = ENABLE;
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 800163e:	2201      	movs	r2, #1
 8001640:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel5.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel5.Init.OutputClock.Divider = 2;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 800164a:	2202      	movs	r2, #2
 800164c:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel5.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel5.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel5.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel5.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel5.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001668:	2204      	movs	r2, #4
 800166a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel5.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel5.Init.Awd.Oversampling = 1;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001674:	2201      	movs	r2, #1
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel5.Init.Offset = 0;
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 800167a:	2200      	movs	r2, #0
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel5.Init.RightBitShift = 0x00;
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel5) != HAL_OK)
 8001684:	4823      	ldr	r0, [pc, #140]	; (8001714 <MX_DFSDM1_Init+0x11c>)
 8001686:	f006 fb59 	bl	8007d3c <HAL_DFSDM_ChannelInit>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_DFSDM1_Init+0x9c>
  {
    Error_Handler();
 8001690:	f000 fece 	bl	8002430 <Error_Handler>
  }
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_DFSDM1_Init+0x124>)
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <MX_DFSDM1_Init+0x128>)
 8001698:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = ENABLE;
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <MX_DFSDM1_Init+0x124>)
 800169c:	2201      	movs	r2, #1
 800169e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016a8:	2202      	movs	r2, #2
 80016aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016c6:	2204      	movs	r2, #4
 80016c8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016d8:	2200      	movs	r2, #0
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016de:	2200      	movs	r2, #0
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 80016e2:	480e      	ldr	r0, [pc, #56]	; (800171c <MX_DFSDM1_Init+0x124>)
 80016e4:	f006 fb2a 	bl	8007d3c <HAL_DFSDM_ChannelInit>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_DFSDM1_Init+0xfa>
  {
    Error_Handler();
 80016ee:	f000 fe9f 	bl	8002430 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_5, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80016f2:	2201      	movs	r2, #1
 80016f4:	490b      	ldr	r1, [pc, #44]	; (8001724 <MX_DFSDM1_Init+0x12c>)
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_DFSDM1_Init+0x114>)
 80016f8:	f006 fcce 	bl	8008098 <HAL_DFSDM_FilterConfigRegChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_DFSDM1_Init+0x10e>
  {
    Error_Handler();
 8001702:	f000 fe95 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20001cd8 	.word	0x20001cd8
 8001710:	40016100 	.word	0x40016100
 8001714:	20001d2c 	.word	0x20001d2c
 8001718:	400160a0 	.word	0x400160a0
 800171c:	20001d64 	.word	0x20001d64
 8001720:	400160e0 	.word	0x400160e0
 8001724:	00050020 	.word	0x00050020

08001728 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 800172e:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <MX_I2C2_SMBUS_Init+0x7c>)
 8001730:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x307075B1;
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001734:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <MX_I2C2_SMBUS_Init+0x80>)
 8001736:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001740:	2202      	movs	r2, #2
 8001742:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001746:	2201      	movs	r2, #1
 8001748:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001758:	2200      	movs	r2, #0
 800175a:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 800175e:	2200      	movs	r2, #0
 8001760:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001770:	2200      	movs	r2, #0
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x000085B8;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 8001776:	f248 52b8 	movw	r2, #34232	; 0x85b8
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 800177e:	f00c fa5b 	bl	800dc38 <HAL_SMBUS_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8001788:	f000 fe52 	bl	8002430 <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_I2C2_SMBUS_Init+0x78>)
 800178e:	f00c fb0b 	bl	800dda8 <HAL_SMBUS_EnableAlert_IT>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001798:	f000 fe4a 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20001d9c 	.word	0x20001d9c
 80017a4:	40005800 	.word	0x40005800
 80017a8:	307075b1 	.word	0x307075b1

080017ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_I2C3_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_I2C3_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_I2C3_Init+0x74>)
 80017b8:	4a1b      	ldr	r2, [pc, #108]	; (8001828 <MX_I2C3_Init+0x7c>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_I2C3_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_I2C3_Init+0x74>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_I2C3_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_I2C3_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_I2C3_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_I2C3_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_I2C3_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_I2C3_Init+0x74>)
 80017e8:	f007 fb44 	bl	8008e74 <HAL_I2C_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017f2:	f000 fe1d 	bl	8002430 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <MX_I2C3_Init+0x74>)
 80017fa:	f007 fbca 	bl	8008f92 <HAL_I2CEx_ConfigAnalogFilter>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001804:	f000 fe14 	bl	8002430 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001808:	2100      	movs	r1, #0
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_I2C3_Init+0x74>)
 800180c:	f007 fc0c 	bl	8009028 <HAL_I2CEx_ConfigDigitalFilter>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001816:	f000 fe0b 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20001dec 	.word	0x20001dec
 8001824:	40005c00 	.word	0x40005c00
 8001828:	307075b1 	.word	0x307075b1

0800182c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_I2C4_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C4_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_I2C4_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C4_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_I2C4_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_I2C4_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_I2C4_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_I2C4_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C4_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C4_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C4_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <MX_I2C4_Init+0x74>)
 8001868:	f007 fb04 	bl	8008e74 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001872:	f000 fddd 	bl	8002430 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_I2C4_Init+0x74>)
 800187a:	f007 fb8a 	bl	8008f92 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001884:	f000 fdd4 	bl	8002430 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_I2C4_Init+0x74>)
 800188c:	f007 fbcc 	bl	8009028 <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001896:	f000 fdcb 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20001e40 	.word	0x20001e40
 80018a4:	40008400 	.word	0x40008400
 80018a8:	307075b1 	.word	0x307075b1

080018ac <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b09a      	sub	sp, #104	; 0x68
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018b6:	2234      	movs	r2, #52	; 0x34
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f018 fc76 	bl	801a1ac <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80018c0:	463b      	mov	r3, r7
 80018c2:	2234      	movs	r2, #52	; 0x34
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f018 fc70 	bl	801a1ac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018ce:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <MX_LTDC_Init+0x160>)
 80018d0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018d2:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018e4:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 80018f0:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 80018fc:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80018fe:	2201      	movs	r2, #1
 8001900:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <MX_LTDC_Init+0x15c>)
 8001904:	f240 3221 	movw	r2, #801	; 0x321
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <MX_LTDC_Init+0x15c>)
 800190c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 802;
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <MX_LTDC_Init+0x15c>)
 8001914:	f240 3222 	movw	r2, #802	; 0x322
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <MX_LTDC_Init+0x15c>)
 800191c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <MX_LTDC_Init+0x15c>)
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <MX_LTDC_Init+0x15c>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001932:	4b35      	ldr	r3, [pc, #212]	; (8001a08 <MX_LTDC_Init+0x15c>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800193a:	4833      	ldr	r0, [pc, #204]	; (8001a08 <MX_LTDC_Init+0x15c>)
 800193c:	f007 fbc0 	bl	80090c0 <HAL_LTDC_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001946:	f000 fd73 	bl	8002430 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800196a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800196c:	2305      	movs	r3, #5
 800196e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800198e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <MX_LTDC_Init+0x15c>)
 8001998:	f007 fc62 	bl	8009260 <HAL_LTDC_ConfigLayer>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80019a2:	f000 fd45 	bl	8002430 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019c8:	2305      	movs	r3, #5
 80019ca:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	2201      	movs	r2, #1
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_LTDC_Init+0x15c>)
 80019f2:	f007 fc35 	bl	8009260 <HAL_LTDC_ConfigLayer>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80019fc:	f000 fd18 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3768      	adds	r7, #104	; 0x68
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20001e94 	.word	0x20001e94
 8001a0c:	40016800 	.word	0x40016800

08001a10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2228      	movs	r2, #40	; 0x28
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f018 fbc5 	bl	801a1ac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a24:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <MX_RTC_Init+0x98>)
 8001a26:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a30:	227f      	movs	r2, #127	; 0x7f
 8001a32:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a36:	22ff      	movs	r2, #255	; 0xff
 8001a38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a52:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a54:	f00b fd0a 	bl	800d46c <HAL_RTC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001a5e:	f000 fce7 	bl	8002430 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8001a62:	2301      	movs	r3, #1
 8001a64:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_RTC_Init+0x94>)
 8001a8c:	f00b fe00 	bl	800d690 <HAL_RTCEx_SetTamper>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8001a96:	f000 fccb 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20001f3c 	.word	0x20001f3c
 8001aa8:	40002800 	.word	0x40002800

08001aac <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001ab0:	4b5a      	ldr	r3, [pc, #360]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	; (8001c20 <MX_SAI1_Init+0x174>)
 8001ab4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001abc:	4b57      	ldr	r3, [pc, #348]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001ac2:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ac8:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001ace:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ad4:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001ada:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001ae0:	4b4e      	ldr	r3, [pc, #312]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8001ae6:	4b4d      	ldr	r3, [pc, #308]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001aec:	4b4b      	ldr	r3, [pc, #300]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001af2:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <MX_SAI1_Init+0x178>)
 8001af6:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001af8:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001afe:	4b47      	ldr	r3, [pc, #284]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b04:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b0a:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8001b18:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b24:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b28:	2208      	movs	r2, #8
 8001b2a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b38:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001b44:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001b50:	4b32      	ldr	r3, [pc, #200]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001b56:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001b5c:	482f      	ldr	r0, [pc, #188]	; (8001c1c <MX_SAI1_Init+0x170>)
 8001b5e:	f00b fe53 	bl	800d808 <HAL_SAI_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8001b68:	f000 fc62 	bl	8002430 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	; (8001c2c <MX_SAI1_Init+0x180>)
 8001b70:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b80:	2240      	movs	r2, #64	; 0x40
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b84:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001b9c:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001bd0:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <MX_SAI1_Init+0x17c>)
 8001c08:	f00b fdfe 	bl	800d808 <HAL_SAI_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_SAI1_Init+0x16a>
  {
    Error_Handler();
 8001c12:	f000 fc0d 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20001f60 	.word	0x20001f60
 8001c20:	40015404 	.word	0x40015404
 8001c24:	0002ee00 	.word	0x0002ee00
 8001c28:	20001ff4 	.word	0x20001ff4
 8001c2c:	40015424 	.word	0x40015424

08001c30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <MX_SPI1_Init+0x78>)
 8001c38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c66:	2228      	movs	r2, #40	; 0x28
 8001c68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c7e:	2207      	movs	r2, #7
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_SPI1_Init+0x74>)
 8001c90:	f00c ff22 	bl	800ead8 <HAL_SPI_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c9a:	f000 fbc9 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20002088 	.word	0x20002088
 8001ca8:	40013000 	.word	0x40013000

08001cac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <MX_SPI2_Init+0x78>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001cca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001ce2:	2228      	movs	r2, #40	; 0x28
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001d0c:	f00c fee4 	bl	800ead8 <HAL_SPI_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f000 fb8b 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200020ec 	.word	0x200020ec
 8001d24:	40003800 	.word	0x40003800

08001d28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
 8001d48:	615a      	str	r2, [r3, #20]
 8001d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d62:	f04f 32ff 	mov.w	r2, #4294967295
 8001d66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d74:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d76:	f00d ff6c 	bl	800fc52 <HAL_TIM_PWM_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d80:	f000 fb56 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001d94:	f00e fd0c 	bl	80107b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d9e:	f000 fb47 	bl	8002430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001da2:	2360      	movs	r3, #96	; 0x60
 8001da4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	2200      	movs	r2, #0
 8001db6:	4619      	mov	r1, r3
 8001db8:	4807      	ldr	r0, [pc, #28]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001dba:	f00e f875 	bl	800fea8 <HAL_TIM_PWM_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001dc4:	f000 fb34 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dc8:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <MX_TIM2_Init+0xb0>)
 8001dca:	f001 f809 	bl	8002de0 <HAL_TIM_MspPostInit>

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20002150 	.word	0x20002150

08001ddc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dee:	463b      	mov	r3, r7
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	615a      	str	r2, [r3, #20]
 8001dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e00:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e02:	4a27      	ldr	r2, [pc, #156]	; (8001ea0 <MX_TIM5_Init+0xc4>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001e26:	481d      	ldr	r0, [pc, #116]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e28:	f00d febc 	bl	800fba4 <HAL_TIM_OC_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001e32:	f000 fafd 	bl	8002430 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001e36:	2108      	movs	r1, #8
 8001e38:	4818      	ldr	r0, [pc, #96]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e3a:	f00d ff61 	bl	800fd00 <HAL_TIM_OnePulse_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8001e44:	f000 faf4 	bl	8002430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	4811      	ldr	r0, [pc, #68]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e58:	f00e fcaa 	bl	80107b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001e62:	f000 fae5 	bl	8002430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001e66:	2350      	movs	r3, #80	; 0x50
 8001e68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e76:	463b      	mov	r3, r7
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e7e:	f00d ff99 	bl	800fdb4 <HAL_TIM_OC_ConfigChannel>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001e88:	f000 fad2 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e8c:	4803      	ldr	r0, [pc, #12]	; (8001e9c <MX_TIM5_Init+0xc0>)
 8001e8e:	f000 ffa7 	bl	8002de0 <HAL_TIM_MspPostInit>

}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000219c 	.word	0x2000219c
 8001ea0:	40000c00 	.word	0x40000c00

08001ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001eaa:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <MX_USART2_UART_Init+0x98>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eee:	4812      	ldr	r0, [pc, #72]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001ef0:	f00e fce6 	bl	80108c0 <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001efa:	f000 fa99 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001efe:	2100      	movs	r1, #0
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001f02:	f00f fa17 	bl	8011334 <HAL_UARTEx_SetTxFifoThreshold>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001f0c:	f000 fa90 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f10:	2100      	movs	r1, #0
 8001f12:	4809      	ldr	r0, [pc, #36]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001f14:	f00f fa4c 	bl	80113b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001f1e:	f000 fa87 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_USART2_UART_Init+0x94>)
 8001f24:	f00f f9cd 	bl	80112c2 <HAL_UARTEx_DisableFifoMode>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001f2e:	f000 fa7f 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200021e8 	.word	0x200021e8
 8001f3c:	40004400 	.word	0x40004400

08001f40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f46:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <MX_USART3_UART_Init+0x98>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001f6a:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f6c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001f70:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f8a:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f8c:	f00e fc98 	bl	80108c0 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8001f96:	f000 fa4b 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001f9e:	f00f f9c9 	bl	8011334 <HAL_UARTEx_SetTxFifoThreshold>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8001fa8:	f000 fa42 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fac:	2100      	movs	r1, #0
 8001fae:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001fb0:	f00f f9fe 	bl	80113b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8001fba:	f000 fa39 	bl	8002430 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_USART3_UART_Init+0x94>)
 8001fc0:	f00f f97f 	bl	80112c2 <HAL_UARTEx_DisableFifoMode>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8001fca:	f000 fa31 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20002278 	.word	0x20002278
 8001fd8:	40004800 	.word	0x40004800

08001fdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <MX_DMA_Init+0x50>)
 8001fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <MX_DMA_Init+0x50>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6493      	str	r3, [r2, #72]	; 0x48
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_DMA_Init+0x50>)
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_DMA_Init+0x50>)
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <MX_DMA_Init+0x50>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6493      	str	r3, [r2, #72]	; 0x48
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_DMA_Init+0x50>)
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	200b      	movs	r0, #11
 8002018:	f005 fbff 	bl	800781a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800201c:	200b      	movs	r0, #11
 800201e:	f005 fc18 	bl	8007852 <HAL_NVIC_EnableIRQ>

}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	; 0x38
 8002034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002046:	4bb8      	ldr	r3, [pc, #736]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4ab7      	ldr	r2, [pc, #732]	; (8002328 <MX_GPIO_Init+0x2f8>)
 800204c:	f043 0310 	orr.w	r3, r3, #16
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4bb5      	ldr	r3, [pc, #724]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0310 	and.w	r3, r3, #16
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	4bb2      	ldr	r3, [pc, #712]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	4ab1      	ldr	r2, [pc, #708]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206a:	4baf      	ldr	r3, [pc, #700]	; (8002328 <MX_GPIO_Init+0x2f8>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002076:	4bac      	ldr	r3, [pc, #688]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	4aab      	ldr	r2, [pc, #684]	; (8002328 <MX_GPIO_Init+0x2f8>)
 800207c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002082:	4ba9      	ldr	r3, [pc, #676]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	4ba6      	ldr	r3, [pc, #664]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4aa5      	ldr	r2, [pc, #660]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209a:	4ba3      	ldr	r3, [pc, #652]	; (8002328 <MX_GPIO_Init+0x2f8>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4ba0      	ldr	r3, [pc, #640]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a9f      	ldr	r2, [pc, #636]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b9d      	ldr	r3, [pc, #628]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	4b9a      	ldr	r3, [pc, #616]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	4a99      	ldr	r2, [pc, #612]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ca:	4b97      	ldr	r3, [pc, #604]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d6:	4b94      	ldr	r3, [pc, #592]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	4a93      	ldr	r2, [pc, #588]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e2:	4b91      	ldr	r3, [pc, #580]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80020ee:	f008 fd2f 	bl	800ab50 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f2:	4b8d      	ldr	r3, [pc, #564]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	4a8c      	ldr	r2, [pc, #560]	; (8002328 <MX_GPIO_Init+0x2f8>)
 80020f8:	f043 0320 	orr.w	r3, r3, #32
 80020fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fe:	4b8a      	ldr	r3, [pc, #552]	; (8002328 <MX_GPIO_Init+0x2f8>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	f242 0102 	movw	r1, #8194	; 0x2002
 8002110:	4886      	ldr	r0, [pc, #536]	; (800232c <MX_GPIO_Init+0x2fc>)
 8002112:	f006 fe7f 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	f640 0181 	movw	r1, #2177	; 0x881
 800211c:	4884      	ldr	r0, [pc, #528]	; (8002330 <MX_GPIO_Init+0x300>)
 800211e:	f006 fe79 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f006 fe72 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, WIFI_RST_Pin|SPI2_MISO_p2_Pin, GPIO_PIN_RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	2144      	movs	r1, #68	; 0x44
 8002134:	487f      	ldr	r0, [pc, #508]	; (8002334 <MX_GPIO_Init+0x304>)
 8002136:	f006 fe6d 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|STSAFE_RESET_Pin|WIFI_BOOT0_Pin
 800213a:	2200      	movs	r2, #0
 800213c:	f245 5108 	movw	r1, #21768	; 0x5508
 8002140:	487d      	ldr	r0, [pc, #500]	; (8002338 <MX_GPIO_Init+0x308>)
 8002142:	f006 fe67 	bl	8008e14 <HAL_GPIO_WritePin>
                          |SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_ADWB_Pin|CS_DHC_Pin, GPIO_PIN_SET);
 8002146:	2201      	movs	r2, #1
 8002148:	f242 0120 	movw	r1, #8224	; 0x2020
 800214c:	487a      	ldr	r0, [pc, #488]	; (8002338 <MX_GPIO_Init+0x308>)
 800214e:	f006 fe61 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BLE_SPI_CS_Pin|SEL1_2_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	2121      	movs	r1, #33	; 0x21
 8002156:	4879      	ldr	r0, [pc, #484]	; (800233c <MX_GPIO_Init+0x30c>)
 8002158:	f006 fe5c 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DH_GPIO_Port, CS_DH_Pin, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002162:	4873      	ldr	r0, [pc, #460]	; (8002330 <MX_GPIO_Init+0x300>)
 8002164:	f006 fe56 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800216e:	4874      	ldr	r0, [pc, #464]	; (8002340 <MX_GPIO_Init+0x310>)
 8002170:	f006 fe50 	bl	8008e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8002174:	f240 4301 	movw	r3, #1025	; 0x401
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002186:	4619      	mov	r1, r3
 8002188:	4868      	ldr	r0, [pc, #416]	; (800232c <MX_GPIO_Init+0x2fc>)
 800218a:	f006 fbbf 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 800218e:	f244 3301 	movw	r3, #17153	; 0x4301
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002194:	2303      	movs	r3, #3
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4619      	mov	r1, r3
 80021a2:	4867      	ldr	r0, [pc, #412]	; (8002340 <MX_GPIO_Init+0x310>)
 80021a4:	f006 fbb2 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 80021a8:	2308      	movs	r3, #8
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b8:	4619      	mov	r1, r3
 80021ba:	4862      	ldr	r0, [pc, #392]	; (8002344 <MX_GPIO_Init+0x314>)
 80021bc:	f006 fba6 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 80021c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021d2:	230c      	movs	r3, #12
 80021d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	4855      	ldr	r0, [pc, #340]	; (8002334 <MX_GPIO_Init+0x304>)
 80021de:	f006 fb95 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 80021e2:	f64c 1308 	movw	r3, #51464	; 0xc908
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f6:	4619      	mov	r1, r3
 80021f8:	484c      	ldr	r0, [pc, #304]	; (800232c <MX_GPIO_Init+0x2fc>)
 80021fa:	f006 fb87 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 80021fe:	f242 0302 	movw	r3, #8194	; 0x2002
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002214:	4619      	mov	r1, r3
 8002216:	4845      	ldr	r0, [pc, #276]	; (800232c <MX_GPIO_Init+0x2fc>)
 8002218:	f006 fb78 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 800221c:	f648 0381 	movw	r3, #34945	; 0x8881
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	4619      	mov	r1, r3
 8002234:	483e      	ldr	r0, [pc, #248]	; (8002330 <MX_GPIO_Init+0x300>)
 8002236:	f006 fb69 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|PA1_Pin;
 800223a:	f240 6303 	movw	r3, #1539	; 0x603
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002240:	2303      	movs	r3, #3
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002252:	f006 fb5b 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 8002256:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800225c:	2303      	movs	r3, #3
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002268:	4619      	mov	r1, r3
 800226a:	4834      	ldr	r0, [pc, #208]	; (800233c <MX_GPIO_Init+0x30c>)
 800226c:	f006 fb4e 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002270:	2304      	movs	r3, #4
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002280:	230c      	movs	r3, #12
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	4829      	ldr	r0, [pc, #164]	; (8002330 <MX_GPIO_Init+0x300>)
 800228c:	f006 fb3e 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002296:	2301      	movs	r3, #1
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a6:	4619      	mov	r1, r3
 80022a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ac:	f006 fb2e 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : WIFI_RST_Pin SPI2_MISO_p2_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin|SPI2_MISO_p2_Pin;
 80022b0:	2344      	movs	r3, #68	; 0x44
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	4619      	mov	r1, r3
 80022c6:	481b      	ldr	r0, [pc, #108]	; (8002334 <MX_GPIO_Init+0x304>)
 80022c8:	f006 fb20 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80022cc:	f247 5328 	movw	r3, #29992	; 0x7528
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e2:	4619      	mov	r1, r3
 80022e4:	4814      	ldr	r0, [pc, #80]	; (8002338 <MX_GPIO_Init+0x308>)
 80022e6:	f006 fb11 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 80022ea:	f44f 7324 	mov.w	r3, #656	; 0x290
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	4619      	mov	r1, r3
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <MX_GPIO_Init+0x308>)
 8002302:	f006 fb03 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8002306:	2321      	movs	r3, #33	; 0x21
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	4619      	mov	r1, r3
 800231c:	4807      	ldr	r0, [pc, #28]	; (800233c <MX_GPIO_Init+0x30c>)
 800231e:	f006 faf5 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8002322:	2342      	movs	r3, #66	; 0x42
 8002324:	e010      	b.n	8002348 <MX_GPIO_Init+0x318>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	48001000 	.word	0x48001000
 8002330:	48000c00 	.word	0x48000c00
 8002334:	48000800 	.word	0x48000800
 8002338:	48001400 	.word	0x48001400
 800233c:	48001800 	.word	0x48001800
 8002340:	48000400 	.word	0x48000400
 8002344:	48001c00 	.word	0x48001c00
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800234a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002358:	4619      	mov	r1, r3
 800235a:	4830      	ldr	r0, [pc, #192]	; (800241c <MX_GPIO_Init+0x3ec>)
 800235c:	f006 fad6 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 8002360:	f241 0304 	movw	r3, #4100	; 0x1004
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	482a      	ldr	r0, [pc, #168]	; (8002420 <MX_GPIO_Init+0x3f0>)
 8002376:	f006 fac9 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238c:	4619      	mov	r1, r3
 800238e:	4825      	ldr	r0, [pc, #148]	; (8002424 <MX_GPIO_Init+0x3f4>)
 8002390:	f006 fabc 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8002394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800239a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a8:	4619      	mov	r1, r3
 80023aa:	481f      	ldr	r0, [pc, #124]	; (8002428 <MX_GPIO_Init+0x3f8>)
 80023ac:	f006 faae 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 80023b0:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2300      	movs	r3, #0
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c6:	4619      	mov	r1, r3
 80023c8:	4815      	ldr	r0, [pc, #84]	; (8002420 <MX_GPIO_Init+0x3f0>)
 80023ca:	f006 fa9f 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 80023ce:	2304      	movs	r3, #4
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 80023dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e0:	4619      	mov	r1, r3
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e6:	f006 fa91 	bl	800890c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 80023ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f0:	2303      	movs	r3, #3
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 80023f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fc:	4619      	mov	r1, r3
 80023fe:	480b      	ldr	r0, [pc, #44]	; (800242c <MX_GPIO_Init+0x3fc>)
 8002400:	f006 fa84 	bl	800890c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	2017      	movs	r0, #23
 800240a:	f005 fa06 	bl	800781a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800240e:	2017      	movs	r0, #23
 8002410:	f005 fa1f 	bl	8007852 <HAL_NVIC_EnableIRQ>

}
 8002414:	bf00      	nop
 8002416:	3738      	adds	r7, #56	; 0x38
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	48001800 	.word	0x48001800
 8002420:	48000400 	.word	0x48000400
 8002424:	48001400 	.word	0x48001400
 8002428:	48000c00 	.word	0x48000c00
 800242c:	48001000 	.word	0x48001000

08002430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002434:	b672      	cpsid	i
}
 8002436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002438:	e7fe      	b.n	8002438 <Error_Handler+0x8>
	...

0800243c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_MspInit+0x44>)
 8002444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <HAL_MspInit+0x44>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6613      	str	r3, [r2, #96]	; 0x60
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_MspInit+0x44>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_MspInit+0x44>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_MspInit+0x44>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_MspInit+0x44>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a37      	ldr	r2, [pc, #220]	; (8002580 <HAL_ADC_MspInit+0xfc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d168      	bne.n	8002578 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024a6:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	4a36      	ldr	r2, [pc, #216]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b2:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024be:	4b31      	ldr	r3, [pc, #196]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	4a30      	ldr	r2, [pc, #192]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ca:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <HAL_ADC_MspInit+0x100>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PA5     ------> ADC1_IN10
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 80024ee:	2313      	movs	r3, #19
 80024f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024f2:	230b      	movs	r3, #11
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4821      	ldr	r0, [pc, #132]	; (8002588 <HAL_ADC_MspInit+0x104>)
 8002502:	f006 fa03 	bl	800890c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EX_ADC_Pin;
 8002506:	2320      	movs	r3, #32
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800250a:	230b      	movs	r3, #11
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f006 f9f6 	bl	800890c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002520:	4b1a      	ldr	r3, [pc, #104]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002522:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <HAL_ADC_MspInit+0x10c>)
 8002524:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002528:	2205      	movs	r2, #5
 800252a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_ADC_MspInit+0x108>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002534:	2200      	movs	r2, #0
 8002536:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_ADC_MspInit+0x108>)
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002540:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002544:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002550:	2220      	movs	r2, #32
 8002552:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002556:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800255a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <HAL_ADC_MspInit+0x108>)
 800255e:	f005 ffbd 	bl	80084dc <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_ADC_MspInit+0xe8>
    {
      Error_Handler();
 8002568:	f7ff ff62 	bl	8002430 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002570:	651a      	str	r2, [r3, #80]	; 0x50
 8002572:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_ADC_MspInit+0x108>)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	50040000 	.word	0x50040000
 8002584:	40021000 	.word	0x40021000
 8002588:	48000800 	.word	0x48000800
 800258c:	20001c40 	.word	0x20001c40
 8002590:	40020008 	.word	0x40020008

08002594 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_CRC_MspInit+0x38>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10b      	bne.n	80025be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_CRC_MspInit+0x3c>)
 80025a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_CRC_MspInit+0x3c>)
 80025ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025b0:	6493      	str	r3, [r2, #72]	; 0x48
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_CRC_MspInit+0x3c>)
 80025b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023000 	.word	0x40023000
 80025d0:	40021000 	.word	0x40021000

080025d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_DAC_MspInit+0x74>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d124      	bne.n	8002640 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_DAC_MspInit+0x78>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_DAC_MspInit+0x78>)
 80025fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_DAC_MspInit+0x78>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_DAC_MspInit+0x78>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <HAL_DAC_MspInit+0x78>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_DAC_MspInit+0x78>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC1_OUT1_Pin;
 8002626:	2310      	movs	r3, #16
 8002628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262a:	2303      	movs	r3, #3
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT1_GPIO_Port, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263c:	f006 f966 	bl	800890c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002640:	bf00      	nop
 8002642:	3728      	adds	r7, #40	; 0x28
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40007400 	.word	0x40007400
 800264c:	40021000 	.word	0x40021000

08002650 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0b2      	sub	sp, #200	; 0xc8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	229c      	movs	r2, #156	; 0x9c
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f017 fd9b 	bl	801a1ac <memset>
  if(DFSDM1_Init == 0)
 8002676:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_DFSDM_FilterMspInit+0x124>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d175      	bne.n	800276a <HAL_DFSDM_FilterMspInit+0x11a>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800267e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002682:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800268a:	f107 0318 	add.w	r3, r7, #24
 800268e:	4618      	mov	r0, r3
 8002690:	f009 f942 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800269a:	f7ff fec9 	bl	8002430 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_DFSDM_FilterMspInit+0x128>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	4a34      	ldr	r2, [pc, #208]	; (8002778 <HAL_DFSDM_FilterMspInit+0x128>)
 80026a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80026a8:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_DFSDM_FilterMspInit+0x128>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10b      	bne.n	80026c8 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b4:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6613      	str	r3, [r2, #96]	; 0x60
 80026bc:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	4a2b      	ldr	r2, [pc, #172]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026e0:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026e6:	f043 0310 	orr.w	r3, r3, #16
 80026ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ec:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_DFSDM_FilterMspInit+0x12c>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PB6     ------> DFSDM1_DATIN5
    PE9     ------> DFSDM1_CKOUT
    PB10     ------> DFSDM1_DATIN7
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 80026f8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002706:	2302      	movs	r3, #2
 8002708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002712:	2306      	movs	r3, #6
 8002714:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800271c:	4619      	mov	r1, r3
 800271e:	4818      	ldr	r0, [pc, #96]	; (8002780 <HAL_DFSDM_FilterMspInit+0x130>)
 8002720:	f006 f8f4 	bl	800890c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002732:	2302      	movs	r3, #2
 8002734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002738:	2303      	movs	r3, #3
 800273a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800273e:	2306      	movs	r3, #6
 8002740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002744:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002748:	4619      	mov	r1, r3
 800274a:	480e      	ldr	r0, [pc, #56]	; (8002784 <HAL_DFSDM_FilterMspInit+0x134>)
 800274c:	f006 f8de 	bl	800890c <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	203d      	movs	r0, #61	; 0x3d
 8002756:	f005 f860 	bl	800781a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800275a:	203d      	movs	r0, #61	; 0x3d
 800275c:	f005 f879 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_DFSDM_FilterMspInit+0x124>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	4a03      	ldr	r2, [pc, #12]	; (8002774 <HAL_DFSDM_FilterMspInit+0x124>)
 8002768:	6013      	str	r3, [r2, #0]
  }

}
 800276a:	bf00      	nop
 800276c:	37c8      	adds	r7, #200	; 0xc8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000230c 	.word	0x2000230c
 8002778:	20002308 	.word	0x20002308
 800277c:	40021000 	.word	0x40021000
 8002780:	48000400 	.word	0x48000400
 8002784:	48001000 	.word	0x48001000

08002788 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b0b2      	sub	sp, #200	; 0xc8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a0:	f107 0318 	add.w	r3, r7, #24
 80027a4:	229c      	movs	r2, #156	; 0x9c
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f017 fcff 	bl	801a1ac <memset>
  if(DFSDM1_Init == 0)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_DFSDM_ChannelMspInit+0x114>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d16d      	bne.n	8002892 <HAL_DFSDM_ChannelMspInit+0x10a>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80027b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80027bc:	2300      	movs	r3, #0
 80027be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c2:	f107 0318 	add.w	r3, r7, #24
 80027c6:	4618      	mov	r0, r3
 80027c8:	f009 f8a6 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80027d2:	f7ff fe2d 	bl	8002430 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <HAL_DFSDM_ChannelMspInit+0x118>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	4a30      	ldr	r2, [pc, #192]	; (80028a0 <HAL_DFSDM_ChannelMspInit+0x118>)
 80027de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <HAL_DFSDM_ChannelMspInit+0x118>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10b      	bne.n	8002800 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80027e8:	4b2e      	ldr	r3, [pc, #184]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	4a2d      	ldr	r2, [pc, #180]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80027ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f2:	6613      	str	r3, [r2, #96]	; 0x60
 80027f4:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 80027f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002818:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 800281e:	f043 0310 	orr.w	r3, r3, #16
 8002822:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PB6     ------> DFSDM1_DATIN5
    PE9     ------> DFSDM1_CKOUT
    PB10     ------> DFSDM1_DATIN7
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 8002830:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800283e:	2302      	movs	r3, #2
 8002840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800284a:	2306      	movs	r3, #6
 800284c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002854:	4619      	mov	r1, r3
 8002856:	4814      	ldr	r0, [pc, #80]	; (80028a8 <HAL_DFSDM_ChannelMspInit+0x120>)
 8002858:	f006 f858 	bl	800890c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800285c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002876:	2306      	movs	r3, #6
 8002878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800287c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002880:	4619      	mov	r1, r3
 8002882:	480a      	ldr	r0, [pc, #40]	; (80028ac <HAL_DFSDM_ChannelMspInit+0x124>)
 8002884:	f006 f842 	bl	800890c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_DFSDM_ChannelMspInit+0x114>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a03      	ldr	r2, [pc, #12]	; (800289c <HAL_DFSDM_ChannelMspInit+0x114>)
 8002890:	6013      	str	r3, [r2, #0]
  }

}
 8002892:	bf00      	nop
 8002894:	37c8      	adds	r7, #200	; 0xc8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000230c 	.word	0x2000230c
 80028a0:	20002308 	.word	0x20002308
 80028a4:	40021000 	.word	0x40021000
 80028a8:	48000400 	.word	0x48000400
 80028ac:	48001000 	.word	0x48001000

080028b0 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0b0      	sub	sp, #192	; 0xc0
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	229c      	movs	r2, #156	; 0x9c
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f017 fc6b 	bl	801a1ac <memset>
  if(hsmbus->Instance==I2C2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <HAL_SMBUS_MspInit+0xd0>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d14a      	bne.n	8002976 <HAL_SMBUS_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	4618      	mov	r0, r3
 80028ee:	f009 f813 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 80028f8:	f7ff fd9a 	bl	8002430 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <HAL_SMBUS_MspInit+0xd4>)
 80028fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002900:	4a20      	ldr	r2, [pc, #128]	; (8002984 <HAL_SMBUS_MspInit+0xd4>)
 8002902:	f043 0320 	orr.w	r3, r3, #32
 8002906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002908:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <HAL_SMBUS_MspInit+0xd4>)
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF2     ------> I2C2_SMBA
    PF1     ------> I2C2_SCL
    PF0     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 8002914:	2307      	movs	r3, #7
 8002916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291a:	2312      	movs	r3, #18
 800291c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800292c:	2304      	movs	r3, #4
 800292e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002932:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002936:	4619      	mov	r1, r3
 8002938:	4813      	ldr	r0, [pc, #76]	; (8002988 <HAL_SMBUS_MspInit+0xd8>)
 800293a:	f005 ffe7 	bl	800890c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_SMBUS_MspInit+0xd4>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_SMBUS_MspInit+0xd4>)
 8002944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_SMBUS_MspInit+0xd4>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2021      	movs	r0, #33	; 0x21
 800295c:	f004 ff5d 	bl	800781a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002960:	2021      	movs	r0, #33	; 0x21
 8002962:	f004 ff76 	bl	8007852 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	2022      	movs	r0, #34	; 0x22
 800296c:	f004 ff55 	bl	800781a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002970:	2022      	movs	r0, #34	; 0x22
 8002972:	f004 ff6e 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002976:	bf00      	nop
 8002978:	37c0      	adds	r7, #192	; 0xc0
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40005800 	.word	0x40005800
 8002984:	40021000 	.word	0x40021000
 8002988:	48001400 	.word	0x48001400

0800298c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b0b2      	sub	sp, #200	; 0xc8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	229c      	movs	r2, #156	; 0x9c
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f017 fbfd 	bl	801a1ac <memset>
  if(hi2c->Instance==I2C3)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a44      	ldr	r2, [pc, #272]	; (8002ac8 <HAL_I2C_MspInit+0x13c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d13f      	bne.n	8002a3c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80029c2:	2300      	movs	r3, #0
 80029c4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029c6:	f107 0318 	add.w	r3, r7, #24
 80029ca:	4618      	mov	r0, r3
 80029cc:	f008 ffa4 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80029d6:	f7ff fd2b 	bl	8002430 <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029da:	4b3c      	ldr	r3, [pc, #240]	; (8002acc <HAL_I2C_MspInit+0x140>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	4a3b      	ldr	r2, [pc, #236]	; (8002acc <HAL_I2C_MspInit+0x140>)
 80029e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e6:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_I2C_MspInit+0x140>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80029f2:	f008 f8ad 	bl	800ab50 <HAL_PWREx_EnableVddIO2>
    /**I2C3 GPIO Configuration
    PG8     ------> I2C3_SDA
    PG7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 80029f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029fe:	2312      	movs	r3, #18
 8002a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a10:	2304      	movs	r3, #4
 8002a12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a16:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	482c      	ldr	r0, [pc, #176]	; (8002ad0 <HAL_I2C_MspInit+0x144>)
 8002a1e:	f005 ff75 	bl	800890c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a26:	4a29      	ldr	r2, [pc, #164]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002a3a:	e041      	b.n	8002ac0 <HAL_I2C_MspInit+0x134>
  else if(hi2c->Instance==I2C4)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_I2C_MspInit+0x148>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d13c      	bne.n	8002ac0 <HAL_I2C_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002a46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a50:	f107 0318 	add.w	r3, r7, #24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f008 ff5f 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8002a60:	f7ff fce6 	bl	8002430 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a68:	4a18      	ldr	r2, [pc, #96]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002a6a:	f043 0308 	orr.w	r3, r3, #8
 8002a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 8002a7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a84:	2312      	movs	r3, #18
 8002a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002a96:	2304      	movs	r3, #4
 8002a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <HAL_I2C_MspInit+0x14c>)
 8002aa4:	f005 ff32 	bl	800890c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	4a07      	ldr	r2, [pc, #28]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002aae:	f043 0302 	orr.w	r3, r3, #2
 8002ab2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_I2C_MspInit+0x140>)
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	37c8      	adds	r7, #200	; 0xc8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40005c00 	.word	0x40005c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	48001800 	.word	0x48001800
 8002ad4:	40008400 	.word	0x40008400
 8002ad8:	48000c00 	.word	0x48000c00

08002adc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b0aa      	sub	sp, #168	; 0xa8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	229c      	movs	r2, #156	; 0x9c
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f017 fb5d 	bl	801a1ac <memset>
  if(hltdc->Instance==LTDC)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <HAL_LTDC_MspInit+0x80>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d12a      	bne.n	8002b52 <HAL_LTDC_MspInit+0x76>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002afc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b00:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8002b10:	2308      	movs	r3, #8
 8002b12:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8002b14:	2302      	movs	r3, #2
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8002b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b24:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f008 fef4 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_LTDC_MspInit+0x5e>
    {
      Error_Handler();
 8002b36:	f7ff fc7b 	bl	8002430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_LTDC_MspInit+0x84>)
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_LTDC_MspInit+0x84>)
 8002b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b44:	6613      	str	r3, [r2, #96]	; 0x60
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_LTDC_MspInit+0x84>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002b52:	bf00      	nop
 8002b54:	37a8      	adds	r7, #168	; 0xa8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40016800 	.word	0x40016800
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0aa      	sub	sp, #168	; 0xa8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	229c      	movs	r2, #156	; 0x9c
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f017 fb19 	bl	801a1ac <memset>
  if(hrtc->Instance==RTC)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_RTC_MspInit+0x5c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d118      	bne.n	8002bb6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b88:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	4618      	mov	r0, r3
 8002b98:	f008 febe 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002ba2:	f7ff fc45 	bl	8002430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_RTC_MspInit+0x60>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <HAL_RTC_MspInit+0x60>)
 8002bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	37a8      	adds	r7, #168	; 0xa8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40002800 	.word	0x40002800
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a3d      	ldr	r2, [pc, #244]	; (8002cdc <HAL_SPI_MspInit+0x114>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d12a      	bne.n	8002c40 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	4a3c      	ldr	r2, [pc, #240]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf6:	4b3a      	ldr	r3, [pc, #232]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c02:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	4a36      	ldr	r2, [pc, #216]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c0e:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8002c1a:	f007 ff99 	bl	800ab50 <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8002c1e:	231c      	movs	r3, #28
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c2e:	2305      	movs	r3, #5
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	482a      	ldr	r0, [pc, #168]	; (8002ce4 <HAL_SPI_MspInit+0x11c>)
 8002c3a:	f005 fe67 	bl	800890c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c3e:	e048      	b.n	8002cd2 <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <HAL_SPI_MspInit+0x120>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d143      	bne.n	8002cd2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c4a:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c68:	f043 0308 	orr.w	r3, r3, #8
 8002c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c80:	f043 0304 	orr.w	r3, r3, #4
 8002c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_SPI_MspInit+0x118>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002c92:	230a      	movs	r3, #10
 8002c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca6:	f107 031c 	add.w	r3, r7, #28
 8002caa:	4619      	mov	r1, r3
 8002cac:	480f      	ldr	r0, [pc, #60]	; (8002cec <HAL_SPI_MspInit+0x124>)
 8002cae:	f005 fe2d 	bl	800890c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4808      	ldr	r0, [pc, #32]	; (8002cf0 <HAL_SPI_MspInit+0x128>)
 8002cce:	f005 fe1d 	bl	800890c <HAL_GPIO_Init>
}
 8002cd2:	bf00      	nop
 8002cd4:	3730      	adds	r7, #48	; 0x30
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40013000 	.word	0x40013000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	48001800 	.word	0x48001800
 8002ce8:	40003800 	.word	0x40003800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	48000800 	.word	0x48000800

08002cf4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_SPI_MspDeInit+0x58>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10a      	bne.n	8002d1c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_SPI_MspDeInit+0x5c>)
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <HAL_SPI_MspDeInit+0x5c>)
 8002d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d10:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    */
    HAL_GPIO_DeInit(GPIOG, SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin);
 8002d12:	211c      	movs	r1, #28
 8002d14:	480f      	ldr	r0, [pc, #60]	; (8002d54 <HAL_SPI_MspDeInit+0x60>)
 8002d16:	f005 ff8b 	bl	8008c30 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8002d1a:	e012      	b.n	8002d42 <HAL_SPI_MspDeInit+0x4e>
  else if(hspi->Instance==SPI2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <HAL_SPI_MspDeInit+0x64>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10d      	bne.n	8002d42 <HAL_SPI_MspDeInit+0x4e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_SPI_MspDeInit+0x5c>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	4a09      	ldr	r2, [pc, #36]	; (8002d50 <HAL_SPI_MspDeInit+0x5c>)
 8002d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d30:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOD, SPI2_MISO_Pin|SPI2_CLK_Pin);
 8002d32:	210a      	movs	r1, #10
 8002d34:	4809      	ldr	r0, [pc, #36]	; (8002d5c <HAL_SPI_MspDeInit+0x68>)
 8002d36:	f005 ff7b 	bl	8008c30 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(SPI2_MOSI_GPIO_Port, SPI2_MOSI_Pin);
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	4808      	ldr	r0, [pc, #32]	; (8002d60 <HAL_SPI_MspDeInit+0x6c>)
 8002d3e:	f005 ff77 	bl	8008c30 <HAL_GPIO_DeInit>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40013000 	.word	0x40013000
 8002d50:	40021000 	.word	0x40021000
 8002d54:	48001800 	.word	0x48001800
 8002d58:	40003800 	.word	0x40003800
 8002d5c:	48000c00 	.word	0x48000c00
 8002d60:	48000800 	.word	0x48000800

08002d64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d10b      	bne.n	8002d8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_TIM_PWM_MspInit+0x38>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <HAL_TIM_PWM_MspInit+0x38>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6593      	str	r3, [r2, #88]	; 0x58
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_TIM_PWM_MspInit+0x38>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM5)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_TIM_OC_MspInit+0x38>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10b      	bne.n	8002dca <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_TIM_OC_MspInit+0x3c>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_TIM_OC_MspInit+0x3c>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <HAL_TIM_OC_MspInit+0x3c>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40000c00 	.word	0x40000c00
 8002ddc:	40021000 	.word	0x40021000

08002de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d11e      	bne.n	8002e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_TIM_MspPostInit+0xac>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_TIM_MspPostInit+0xac>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0e:	4b1f      	ldr	r3, [pc, #124]	; (8002e8c <HAL_TIM_MspPostInit+0xac>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = EX_PWM_Pin;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f005 fd67 	bl	800890c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002e3e:	e020      	b.n	8002e82 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM5)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_TIM_MspPostInit+0xb0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d11b      	bne.n	8002e82 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <HAL_TIM_MspPostInit+0xac>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	4a0f      	ldr	r2, [pc, #60]	; (8002e8c <HAL_TIM_MspPostInit+0xac>)
 8002e50:	f043 0320 	orr.w	r3, r3, #32
 8002e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <HAL_TIM_MspPostInit+0xac>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SW_SEL_Pin;
 8002e62:	2340      	movs	r3, #64	; 0x40
 8002e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e66:	2302      	movs	r3, #2
 8002e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e72:	2302      	movs	r3, #2
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 8002e76:	f107 0314 	add.w	r3, r7, #20
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4805      	ldr	r0, [pc, #20]	; (8002e94 <HAL_TIM_MspPostInit+0xb4>)
 8002e7e:	f005 fd45 	bl	800890c <HAL_GPIO_Init>
}
 8002e82:	bf00      	nop
 8002e84:	3728      	adds	r7, #40	; 0x28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40000c00 	.word	0x40000c00
 8002e94:	48001400 	.word	0x48001400

08002e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b0b4      	sub	sp, #208	; 0xd0
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb0:	f107 0320 	add.w	r3, r7, #32
 8002eb4:	229c      	movs	r2, #156	; 0x9c
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f017 f977 	bl	801a1ac <memset>
  if(huart->Instance==USART2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a53      	ldr	r2, [pc, #332]	; (8003010 <HAL_UART_MspInit+0x178>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d13b      	bne.n	8002f40 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f008 fd1f 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ee0:	f7ff faa6 	bl	8002430 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4a4a      	ldr	r2, [pc, #296]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef0:	4b48      	ldr	r3, [pc, #288]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efc:	4b45      	ldr	r3, [pc, #276]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	4a44      	ldr	r2, [pc, #272]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f02:	f043 0308 	orr.w	r3, r3, #8
 8002f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f08:	4b42      	ldr	r3, [pc, #264]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8002f14:	2370      	movs	r3, #112	; 0x70
 8002f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f26:	2303      	movs	r3, #3
 8002f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f32:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f36:	4619      	mov	r1, r3
 8002f38:	4837      	ldr	r0, [pc, #220]	; (8003018 <HAL_UART_MspInit+0x180>)
 8002f3a:	f005 fce7 	bl	800890c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f3e:	e062      	b.n	8003006 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a35      	ldr	r2, [pc, #212]	; (800301c <HAL_UART_MspInit+0x184>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d15d      	bne.n	8003006 <HAL_UART_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f52:	f107 0320 	add.w	r3, r7, #32
 8002f56:	4618      	mov	r0, r3
 8002f58:	f008 fcde 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002f62:	f7ff fa65 	bl	8002430 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
 8002f72:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	4a24      	ldr	r2, [pc, #144]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_UART_MspInit+0x17c>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8002fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fc8:	2307      	movs	r3, #7
 8002fca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4810      	ldr	r0, [pc, #64]	; (8003018 <HAL_UART_MspInit+0x180>)
 8002fd6:	f005 fc99 	bl	800890c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8002fda:	f242 0302 	movw	r3, #8194	; 0x2002
 8002fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ff4:	2307      	movs	r3, #7
 8002ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002ffe:	4619      	mov	r1, r3
 8003000:	4807      	ldr	r0, [pc, #28]	; (8003020 <HAL_UART_MspInit+0x188>)
 8003002:	f005 fc83 	bl	800890c <HAL_GPIO_Init>
}
 8003006:	bf00      	nop
 8003008:	37d0      	adds	r7, #208	; 0xd0
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40004400 	.word	0x40004400
 8003014:	40021000 	.word	0x40021000
 8003018:	48000c00 	.word	0x48000c00
 800301c:	40004800 	.word	0x40004800
 8003020:	48000400 	.word	0x48000400

08003024 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_SAI_MspInit+0xb8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d124      	bne.n	8003080 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003036:	4b2a      	ldr	r3, [pc, #168]	; (80030e0 <HAL_SAI_MspInit+0xbc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_SAI_MspInit+0xc0>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003042:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <HAL_SAI_MspInit+0xc0>)
 8003044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003048:	6613      	str	r3, [r2, #96]	; 0x60
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <HAL_SAI_MspInit+0xc0>)
 800304c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003056:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <HAL_SAI_MspInit+0xbc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_SAI_MspInit+0xbc>)
 800305e:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin;
 8003060:	2374      	movs	r3, #116	; 0x74
 8003062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003070:	230d      	movs	r3, #13
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	481b      	ldr	r0, [pc, #108]	; (80030e8 <HAL_SAI_MspInit+0xc4>)
 800307c:	f005 fc46 	bl	800890c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <HAL_SAI_MspInit+0xc8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d124      	bne.n	80030d4 <HAL_SAI_MspInit+0xb0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_SAI_MspInit+0xbc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003092:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_SAI_MspInit+0xc0>)
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <HAL_SAI_MspInit+0xc0>)
 8003098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800309c:	6613      	str	r3, [r2, #96]	; 0x60
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_SAI_MspInit+0xc0>)
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <HAL_SAI_MspInit+0xbc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <HAL_SAI_MspInit+0xbc>)
 80030b2:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	2302      	movs	r3, #2
 80030ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c0:	2300      	movs	r3, #0
 80030c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80030c4:	230d      	movs	r3, #13
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4619      	mov	r1, r3
 80030ce:	4806      	ldr	r0, [pc, #24]	; (80030e8 <HAL_SAI_MspInit+0xc4>)
 80030d0:	f005 fc1c 	bl	800890c <HAL_GPIO_Init>

    }
}
 80030d4:	bf00      	nop
 80030d6:	3728      	adds	r7, #40	; 0x28
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40015404 	.word	0x40015404
 80030e0:	20002310 	.word	0x20002310
 80030e4:	40021000 	.word	0x40021000
 80030e8:	48001000 	.word	0x48001000
 80030ec:	40015424 	.word	0x40015424

080030f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030f4:	e7fe      	b.n	80030f4 <NMI_Handler+0x4>

080030f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030fa:	e7fe      	b.n	80030fa <HardFault_Handler+0x4>

080030fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <MemManage_Handler+0x4>

08003102 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003106:	e7fe      	b.n	8003106 <BusFault_Handler+0x4>

08003108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800310c:	e7fe      	b.n	800310c <UsageFault_Handler+0x4>

0800310e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003120:	bf00      	nop
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800313c:	f003 fb42 	bl	80067c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}

08003144 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <DMA1_Channel1_IRQHandler+0x10>)
 800314a:	f005 face 	bl	80086ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20001c40 	.word	0x20001c40

08003158 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_HTS_Pin);
 800315c:	2040      	movs	r0, #64	; 0x40
 800315e:	f005 fe71 	bl	8008e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PGOOD_Pin);
 8003162:	2080      	movs	r0, #128	; 0x80
 8003164:	f005 fe6e 	bl	8008e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT1_DHC_Pin);
 8003168:	f44f 7080 	mov.w	r0, #256	; 0x100
 800316c:	f005 fe6a 	bl	8008e44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_M_Pin);
 8003170:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003174:	f005 fe66 	bl	8008e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  count++;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <EXTI9_5_IRQHandler+0x30>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	4a02      	ldr	r2, [pc, #8]	; (8003188 <EXTI9_5_IRQHandler+0x30>)
 8003180:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20002314 	.word	0x20002314

0800318c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus2);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <I2C2_EV_IRQHandler+0x10>)
 8003192:	f00a fe23 	bl	800dddc <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20001d9c 	.word	0x20001d9c

080031a0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_SMBUS_ER_IRQHandler(&hsmbus2);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <I2C2_ER_IRQHandler+0x10>)
 80031a6:	f00a fec7 	bl	800df38 <HAL_SMBUS_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20001d9c 	.word	0x20001d9c

080031b4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <SPI3_IRQHandler+0x10>)
 80031ba:	f00c fa09 	bl	800f5d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20002320 	.word	0x20002320

080031c8 <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 80031cc:	4802      	ldr	r0, [pc, #8]	; (80031d8 <DFSDM1_FLT0_IRQHandler+0x10>)
 80031ce:	f004 ffa9 	bl	8008124 <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20001cd8 	.word	0x20001cd8

080031dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <OTG_FS_IRQHandler+0x10>)
 80031e2:	f006 fb65 	bl	80098b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20003884 	.word	0x20003884

080031f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return 1;
 80031f4:	2301      	movs	r3, #1
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_kill>:

int _kill(int pid, int sig)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800320a:	f016 ff87 	bl	801a11c <__errno>
 800320e:	4603      	mov	r3, r0
 8003210:	2216      	movs	r2, #22
 8003212:	601a      	str	r2, [r3, #0]
  return -1;
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003218:	4618      	mov	r0, r3
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <_exit>:

void _exit (int status)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ffe7 	bl	8003200 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003232:	e7fe      	b.n	8003232 <_exit+0x12>

08003234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	e00a      	b.n	800325c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003246:	f3af 8000 	nop.w
 800324a:	4601      	mov	r1, r0
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	60ba      	str	r2, [r7, #8]
 8003252:	b2ca      	uxtb	r2, r1
 8003254:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	dbf0      	blt.n	8003246 <_read+0x12>
  }

  return len;
 8003264:	687b      	ldr	r3, [r7, #4]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e009      	b.n	8003294 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	60ba      	str	r2, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3301      	adds	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	dbf1      	blt.n	8003280 <_write+0x12>
  }
  return len;
 800329c:	687b      	ldr	r3, [r7, #4]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_close>:

int _close(int file)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ce:	605a      	str	r2, [r3, #4]
  return 0;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <_isatty>:

int _isatty(int file)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032e6:	2301      	movs	r3, #1
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003318:	4a14      	ldr	r2, [pc, #80]	; (800336c <_sbrk+0x5c>)
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <_sbrk+0x60>)
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003324:	4b13      	ldr	r3, [pc, #76]	; (8003374 <_sbrk+0x64>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <_sbrk+0x64>)
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <_sbrk+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <_sbrk+0x64>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	429a      	cmp	r2, r3
 800333e:	d207      	bcs.n	8003350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003340:	f016 feec 	bl	801a11c <__errno>
 8003344:	4603      	mov	r3, r0
 8003346:	220c      	movs	r2, #12
 8003348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334a:	f04f 33ff 	mov.w	r3, #4294967295
 800334e:	e009      	b.n	8003364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <_sbrk+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <_sbrk+0x64>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	4a05      	ldr	r2, [pc, #20]	; (8003374 <_sbrk+0x64>)
 8003360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200a0000 	.word	0x200a0000
 8003370:	00000400 	.word	0x00000400
 8003374:	20002318 	.word	0x20002318
 8003378:	20004248 	.word	0x20004248

0800337c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <SystemInit+0x20>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	4a05      	ldr	r2, [pc, #20]	; (800339c <SystemInit+0x20>)
 8003388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800338c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033a4:	f7ff ffea 	bl	800337c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033a8:	480c      	ldr	r0, [pc, #48]	; (80033dc <LoopForever+0x6>)
  ldr r1, =_edata
 80033aa:	490d      	ldr	r1, [pc, #52]	; (80033e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <LoopForever+0xe>)
  movs r3, #0
 80033ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b0:	e002      	b.n	80033b8 <LoopCopyDataInit>

080033b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033b6:	3304      	adds	r3, #4

080033b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033bc:	d3f9      	bcc.n	80033b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033c0:	4c0a      	ldr	r4, [pc, #40]	; (80033ec <LoopForever+0x16>)
  movs r3, #0
 80033c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c4:	e001      	b.n	80033ca <LoopFillZerobss>

080033c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033c8:	3204      	adds	r2, #4

080033ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033cc:	d3fb      	bcc.n	80033c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ce:	f016 feab 	bl	801a128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033d2:	f7fd ff93 	bl	80012fc <main>

080033d6 <LoopForever>:

LoopForever:
    b LoopForever
 80033d6:	e7fe      	b.n	80033d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80033dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e0:	20000afc 	.word	0x20000afc
  ldr r2, =_sidata
 80033e4:	08074644 	.word	0x08074644
  ldr r2, =_sbss
 80033e8:	20000b00 	.word	0x20000b00
  ldr r4, =_ebss
 80033ec:	20004248 	.word	0x20004248

080033f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033f0:	e7fe      	b.n	80033f0 <ADC1_IRQHandler>
	...

080033f4 <pre_processing_init>:
#include "arm_math.h"
#include "params.h"
#include "pre_processing_app.h"
#include <stdlib.h>

void pre_processing_init(pre_processing_data_t* pre_processing_data) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
    // Axis selection.
    pre_processing_data->axis_selection_axis = AXIS_SELECTION_AXIS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]

    // Signal normalization.
    pre_processing_data->signal_normalization_peak_to_peak = SIGNAL_NORMALIZATION_PEAK_TO_PEAK;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003408:	605a      	str	r2, [r3, #4]
    pre_processing_data->signal_normalization_offset = SIGNAL_NORMALIZATION_OFFSET;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	609a      	str	r2, [r3, #8]

    // MFCC.
    arm_status mfcc_status;
    arm_rfft_fast_init_f32(&((*pre_processing_data).mfcc_handler), INPUT_BUFFER_SIZE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3310      	adds	r3, #16
 8003416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800341a:	4618      	mov	r0, r3
 800341c:	f012 feec 	bl	80161f8 <arm_rfft_fast_init_f32>
    mfcc_status = arm_dct4_init_f32(&((*pre_processing_data).mfcc_dct4f32), &((*pre_processing_data).mfcc_rfftf32), &((*pre_processing_data).mfcc_cfftradix4f32), MFCC_TRIANGULAR_FILTERS_BANK_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_SIZE / 2.0, 0.125);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003432:	2340      	movs	r3, #64	; 0x40
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	f013 fb7e 	bl	8016b3c <arm_dct4_init_f32>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]
    if (mfcc_status != ARM_MATH_SUCCESS) {
 8003444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <pre_processing_init+0x5c>
        sys_error_handler();
 800344c:	f000 fde0 	bl	8004010 <sys_error_handler>
    }
    pre_processing_data->mfcc_triangular_filters_scale = MFCC_TRIANGULAR_FILTERS_SCALE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    pre_processing_data->mfcc_signal_windowing = MFCC_SIGNAL_WINDOWING;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    triangular_filters_init(INPUT_BUFFER_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_SIZE, MFCC_TRIANGULAR_FILTERS_BANK_FRACTION, ISM330DHCX_ACC_ODR, pre_processing_data->mfcc_triangular_filters_scale, (*pre_processing_data).mfcc_bin);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3370      	adds	r3, #112	; 0x70
 800346a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80034ac <pre_processing_init+0xb8>
 800346e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80034b0 <pre_processing_init+0xbc>
 8003472:	2180      	movs	r1, #128	; 0x80
 8003474:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003478:	f000 fa74 	bl	8003964 <triangular_filters_init>
    (*pre_processing_data).mfcc_multipliers = (float32_t*) SysAlloc(INPUT_BUFFER_SIZE * sizeof(float32_t));
 800347c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003480:	f000 fdc9 	bl	8004016 <SysAlloc>
 8003484:	4602      	mov	r2, r0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
    multipliers_init((*pre_processing_data).mfcc_multipliers, INPUT_BUFFER_SIZE, (*pre_processing_data).mfcc_signal_windowing);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8d3 0278 	ldr.w	r0, [r3, #632]	; 0x278
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8003498:	461a      	mov	r2, r3
 800349a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800349e:	f000 faf1 	bl	8003a84 <multipliers_init>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	44d04000 	.word	0x44d04000
 80034b0:	3ee66666 	.word	0x3ee66666

080034b4 <pre_processing_process>:

void pre_processing_process(tridimensional_data_t* data_in, uint32_t data_in_size, float32_t* data_out, uint32_t data_out_size, pre_processing_data_t* pre_processing_data) {
 80034b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b8:	b097      	sub	sp, #92	; 0x5c
 80034ba:	af06      	add	r7, sp, #24
 80034bc:	6278      	str	r0, [r7, #36]	; 0x24
 80034be:	6239      	str	r1, [r7, #32]
 80034c0:	61fa      	str	r2, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	466b      	mov	r3, sp
 80034c6:	461e      	mov	r6, r3
    // Axis selection.
    float32_t data_0[data_in_size];
 80034c8:	6a39      	ldr	r1, [r7, #32]
 80034ca:	460b      	mov	r3, r1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d0:	2300      	movs	r3, #0
 80034d2:	460c      	mov	r4, r1
 80034d4:	461d      	mov	r5, r3
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	016b      	lsls	r3, r5, #5
 80034e0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80034e4:	0162      	lsls	r2, r4, #5
 80034e6:	2300      	movs	r3, #0
 80034e8:	4688      	mov	r8, r1
 80034ea:	4699      	mov	r9, r3
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80034f8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80034fc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003500:	008b      	lsls	r3, r1, #2
 8003502:	3307      	adds	r3, #7
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	ebad 0d03 	sub.w	sp, sp, r3
 800350c:	ab06      	add	r3, sp, #24
 800350e:	3303      	adds	r3, #3
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
    axis_selection(data_in, data_in_size, data_0, data_in_size, pre_processing_data->axis_selection_axis);
 8003516:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003520:	6a39      	ldr	r1, [r7, #32]
 8003522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003524:	f000 f93a 	bl	800379c <axis_selection>

    // Signal normalization.
    float32_t data_1[data_in_size];
 8003528:	6a39      	ldr	r1, [r7, #32]
 800352a:	460b      	mov	r3, r1
 800352c:	3b01      	subs	r3, #1
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
 8003530:	2300      	movs	r3, #0
 8003532:	6139      	str	r1, [r7, #16]
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003542:	4628      	mov	r0, r5
 8003544:	0143      	lsls	r3, r0, #5
 8003546:	4620      	mov	r0, r4
 8003548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800354c:	4620      	mov	r0, r4
 800354e:	0142      	lsls	r2, r0, #5
 8003550:	2300      	movs	r3, #0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003562:	4628      	mov	r0, r5
 8003564:	0143      	lsls	r3, r0, #5
 8003566:	4620      	mov	r0, r4
 8003568:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800356c:	4620      	mov	r0, r4
 800356e:	0142      	lsls	r2, r0, #5
 8003570:	008b      	lsls	r3, r1, #2
 8003572:	3307      	adds	r3, #7
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	ebad 0d03 	sub.w	sp, sp, r3
 800357c:	ab06      	add	r3, sp, #24
 800357e:	3303      	adds	r3, #3
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
    signal_normalization(data_0, data_in_size, data_1, data_in_size, pre_processing_data->signal_normalization_peak_to_peak, pre_processing_data->signal_normalization_offset);
 8003586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003588:	edd3 7a01 	vldr	s15, [r3, #4]
 800358c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800358e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003592:	eef0 0a47 	vmov.f32	s1, s14
 8003596:	eeb0 0a67 	vmov.f32	s0, s15
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800359e:	6a39      	ldr	r1, [r7, #32]
 80035a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80035a2:	f000 f95e 	bl	8003862 <signal_normalization>

    // Mean removal.
    float32_t data_2[data_in_size];
 80035a6:	6a39      	ldr	r1, [r7, #32]
 80035a8:	460b      	mov	r3, r1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ae:	2300      	movs	r3, #0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	607b      	str	r3, [r7, #4]
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c0:	4628      	mov	r0, r5
 80035c2:	0143      	lsls	r3, r0, #5
 80035c4:	4620      	mov	r0, r4
 80035c6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035ca:	4620      	mov	r0, r4
 80035cc:	0142      	lsls	r2, r0, #5
 80035ce:	2300      	movs	r3, #0
 80035d0:	468a      	mov	sl, r1
 80035d2:	469b      	mov	fp, r3
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80035e0:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80035e4:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80035e8:	008b      	lsls	r3, r1, #2
 80035ea:	3307      	adds	r3, #7
 80035ec:	08db      	lsrs	r3, r3, #3
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	ebad 0d03 	sub.w	sp, sp, r3
 80035f4:	ab06      	add	r3, sp, #24
 80035f6:	3303      	adds	r3, #3
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
    mean_removal(data_1, data_in_size, data_2, data_in_size);
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003602:	6a39      	ldr	r1, [r7, #32]
 8003604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003606:	f000 f97f 	bl	8003908 <mean_removal>

    // MFCC.
    mfcc(data_2, data_in_size, data_out, data_out_size, ((*pre_processing_data).mfcc_bin), &((*pre_processing_data).mfcc_dct4f32), &((*pre_processing_data).mfcc_handler), (*pre_processing_data).mfcc_signal_windowing, (*pre_processing_data).mfcc_multipliers);
 800360a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800360c:	3370      	adds	r3, #112	; 0x70
 800360e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003610:	3228      	adds	r2, #40	; 0x28
 8003612:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003614:	3110      	adds	r1, #16
 8003616:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003618:	f890 006d 	ldrb.w	r0, [r0, #109]	; 0x6d
 800361c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800361e:	f8d4 4278 	ldr.w	r4, [r4, #632]	; 0x278
 8003622:	9404      	str	r4, [sp, #16]
 8003624:	9003      	str	r0, [sp, #12]
 8003626:	9102      	str	r1, [sp, #8]
 8003628:	9201      	str	r2, [sp, #4]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003634:	f000 fc20 	bl	8003e78 <mfcc>
 8003638:	46b5      	mov	sp, r6
}
 800363a:	bf00      	nop
 800363c:	3744      	adds	r7, #68	; 0x44
 800363e:	46bd      	mov	sp, r7
 8003640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003644 <complex_abs>:
/*----------------------------------------------------------------------------*/
/* Support functions          			      						          */
/*----------------------------------------------------------------------------*/

// calculation of the complex absolute value
float complex_abs(float real, float compl) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	ed87 0a01 	vstr	s0, [r7, #4]
 800364e:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 8003652:	edd7 7a01 	vldr	s15, [r7, #4]
 8003656:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800365a:	edd7 7a00 	vldr	s15, [r7]
 800365e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003666:	eeb0 0a67 	vmov.f32	s0, s15
 800366a:	f01b faed 	bl	801ec48 <sqrtf>
 800366e:	eef0 7a40 	vmov.f32	s15, s0
}
 8003672:	eeb0 0a67 	vmov.f32	s0, s15
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <dot_product>:

// Dot product calculation using CMSIS DSP library
float32_t dot_product(float32_t* in_1, uint32_t data_in1_size, float32_t* in_2, uint32_t data_in2_size) {
 800367c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003680:	b089      	sub	sp, #36	; 0x24
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	466b      	mov	r3, sp
 800368e:	461e      	mov	r6, r3

	float32_t multOutput[data_in1_size];
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	460b      	mov	r3, r1
 8003694:	3b01      	subs	r3, #1
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	2300      	movs	r3, #0
 800369a:	4688      	mov	r8, r1
 800369c:	4699      	mov	r9, r3
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80036aa:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80036ae:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80036b2:	2300      	movs	r3, #0
 80036b4:	460c      	mov	r4, r1
 80036b6:	461d      	mov	r5, r3
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	016b      	lsls	r3, r5, #5
 80036c2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80036c6:	0162      	lsls	r2, r4, #5
 80036c8:	008b      	lsls	r3, r1, #2
 80036ca:	3307      	adds	r3, #7
 80036cc:	08db      	lsrs	r3, r3, #3
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	ebad 0d03 	sub.w	sp, sp, r3
 80036d4:	466b      	mov	r3, sp
 80036d6:	3303      	adds	r3, #3
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
	float32_t dot_out=0;
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]
	arm_mult_f32(in_1, in_2, multOutput, data_in1_size);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f013 fcd2 	bl	8017094 <arm_mult_f32>
	for (int i=0;  i<data_in1_size;   i++){
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	e00d      	b.n	8003712 <dot_product+0x96>
		arm_add_f32(&dot_out, &multOutput[i], &dot_out, 1);
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	18d1      	adds	r1, r2, r3
 80036fe:	f107 0210 	add.w	r2, r7, #16
 8003702:	f107 0010 	add.w	r0, r7, #16
 8003706:	2301      	movs	r3, #1
 8003708:	f013 fd1e 	bl	8017148 <arm_add_f32>
	for (int i=0;  i<data_in1_size;   i++){
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3301      	adds	r3, #1
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d8ed      	bhi.n	80036f6 <dot_product+0x7a>
	}
	return dot_out;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	46b5      	mov	sp, r6
 800371e:	ee07 3a90 	vmov	s15, r3
}
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	3724      	adds	r7, #36	; 0x24
 8003728:	46bd      	mov	sp, r7
 800372a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003730 <hz_to_mel>:

// conversion between Hz and Mel
float hz_to_mel(float f_Hz_in) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	ed87 0a01 	vstr	s0, [r7, #4]
	return 2595*log10(1+f_Hz_in/700);
 800373a:	ed97 7a01 	vldr	s14, [r7, #4]
 800373e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8003798 <hz_to_mel+0x68>
 8003742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800374a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800374e:	ee17 0a90 	vmov	r0, s15
 8003752:	f7fc ff11 	bl	8000578 <__aeabi_f2d>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ec43 2b10 	vmov	d0, r2, r3
 800375e:	f01b f9ff 	bl	801eb60 <log10>
 8003762:	ec51 0b10 	vmov	r0, r1, d0
 8003766:	a30a      	add	r3, pc, #40	; (adr r3, 8003790 <hz_to_mel+0x60>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f7fc ff5c 	bl	8000628 <__aeabi_dmul>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f7fd fa4e 	bl	8000c18 <__aeabi_d2f>
 800377c:	4603      	mov	r3, r0
 800377e:	ee07 3a90 	vmov	s15, r3
}
 8003782:	eeb0 0a67 	vmov.f32	s0, s15
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	f3af 8000 	nop.w
 8003790:	00000000 	.word	0x00000000
 8003794:	40a44600 	.word	0x40a44600
 8003798:	442f0000 	.word	0x442f0000

0800379c <axis_selection>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Axis selection        						      */
/*----------------------------------------------------------------------------*/

void axis_selection(tridimensional_data_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, axis_t axis) {
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
	if (axis == X)
 80037aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <axis_selection+0x48>
	{
		for (int i=0; i<data_out_size ; i++){
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e010      	b.n	80037da <axis_selection+0x3e>
	    	data_out[i]=data_in[i].x;
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	461a      	mov	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	441a      	add	r2, r3
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	440b      	add	r3, r1
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	3301      	adds	r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d8ea      	bhi.n	80037b8 <axis_selection+0x1c>
	{
		for (int i=0; i<data_out_size ; i++){
	    	data_out[i]=data_in[i].z;
	    }
	}
}
 80037e2:	e038      	b.n	8003856 <axis_selection+0xba>
	else if (axis == Y)
 80037e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d118      	bne.n	800381e <axis_selection+0x82>
		for (int i=0; i<data_out_size ; i++){
 80037ec:	2300      	movs	r3, #0
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	e010      	b.n	8003814 <axis_selection+0x78>
	    	data_out[i]=data_in[i].y;
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4613      	mov	r3, r2
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	461a      	mov	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	441a      	add	r2, r3
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	440b      	add	r3, r1
 800380a:	6852      	ldr	r2, [r2, #4]
 800380c:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3301      	adds	r3, #1
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d8ea      	bhi.n	80037f2 <axis_selection+0x56>
}
 800381c:	e01b      	b.n	8003856 <axis_selection+0xba>
	else if (axis == Z)
 800381e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003822:	2b02      	cmp	r3, #2
 8003824:	d117      	bne.n	8003856 <axis_selection+0xba>
		for (int i=0; i<data_out_size ; i++){
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e010      	b.n	800384e <axis_selection+0xb2>
	    	data_out[i]=data_in[i].z;
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	441a      	add	r2, r3
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	440b      	add	r3, r1
 8003844:	6892      	ldr	r2, [r2, #8]
 8003846:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_out_size ; i++){
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3301      	adds	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d8ea      	bhi.n	800382c <axis_selection+0x90>
}
 8003856:	bf00      	nop
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <signal_normalization>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Signal normalization between -1 and 1             */
/*----------------------------------------------------------------------------*/

void signal_normalization(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, float32_t peak_to_peak, float32_t offset) {
 8003862:	b580      	push	{r7, lr}
 8003864:	b08c      	sub	sp, #48	; 0x30
 8003866:	af00      	add	r7, sp, #0
 8003868:	6178      	str	r0, [r7, #20]
 800386a:	6139      	str	r1, [r7, #16]
 800386c:	60fa      	str	r2, [r7, #12]
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	ed87 0a01 	vstr	s0, [r7, #4]
 8003874:	edc7 0a00 	vstr	s1, [r7]

	float32_t max, min;
	uint32_t maxpos, minpos;

	arm_max_f32(data_in,data_in_size,&max,&maxpos);
 8003878:	f107 0320 	add.w	r3, r7, #32
 800387c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003880:	6939      	ldr	r1, [r7, #16]
 8003882:	6978      	ldr	r0, [r7, #20]
 8003884:	f012 fb84 	bl	8015f90 <arm_max_f32>
	arm_min_f32(data_in,data_in_size,&min,&minpos);
 8003888:	f107 031c 	add.w	r3, r7, #28
 800388c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f012 fad2 	bl	8015e3c <arm_min_f32>

	for(int i=0; i<data_out_size ; i++){
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389c:	e02a      	b.n	80038f4 <signal_normalization+0x92>
		data_out[i] = ((data_in[i] - min)/(max - min))*peak_to_peak - ((peak_to_peak / 2) + offset);
 800389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4413      	add	r3, r2
 80038a6:	ed93 7a00 	vldr	s14, [r3]
 80038aa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80038b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80038b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80038d2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80038d6:	edd7 7a00 	vldr	s15, [r7]
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ea:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<data_out_size ; i++){
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	3301      	adds	r3, #1
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d8d0      	bhi.n	800389e <signal_normalization+0x3c>
	}
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3730      	adds	r7, #48	; 0x30
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <mean_removal>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Remove mean from signal     			          */
/*----------------------------------------------------------------------------*/

void mean_removal (float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]

	static float32_t mean;

	// calculation of the signal mean value
	arm_mean_f32(data_in, data_in_size, &mean);
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <mean_removal+0x58>)
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f012 fafa 	bl	8015f14 <arm_mean_f32>

	// subtract the mean value from the signal in order to remove gravity effect on the accelerometric data
	for (int i=0 ; i < data_out_size ; i++){
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e013      	b.n	800394e <mean_removal+0x46>
		data_out[i] = data_in[i] - mean;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	ed93 7a00 	vldr	s14, [r3]
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <mean_removal+0x58>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003944:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0 ; i < data_out_size ; i++){
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d8e7      	bhi.n	8003926 <mean_removal+0x1e>
	}
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	2000231c 	.word	0x2000231c

08003964 <triangular_filters_init>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Calculation of the triangular filters bank        */
/*----------------------------------------------------------------------------*/

void triangular_filters_init(uint32_t number_of_samples, uint32_t triangular_filters_bank_size, float32_t triangular_filters_bank_fraction, float32_t odr, triangular_filters_scale_t triangular_filters_scale, uint32_t* bin) {
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b08f      	sub	sp, #60	; 0x3c
 8003968:	af00      	add	r7, sp, #0
 800396a:	6178      	str	r0, [r7, #20]
 800396c:	6139      	str	r1, [r7, #16]
 800396e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003972:	edc7 0a02 	vstr	s1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	71fb      	strb	r3, [r7, #7]

	float32_t low_freq;
	float32_t high_freq;
	float32_t* Hz_points = (float32_t*) SysAlloc((triangular_filters_bank_size + 2) * sizeof(float32_t));
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3302      	adds	r3, #2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fb47 	bl	8004016 <SysAlloc>
 8003988:	62b8      	str	r0, [r7, #40]	; 0x28
	float32_t d_hz_points;
	float32_t bin_sep;
	float32_t f_max;
	float32_t f_min = 0.0;
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24

	f_max = odr * triangular_filters_bank_fraction;
 8003990:	ed97 7a02 	vldr	s14, [r7, #8]
 8003994:	edd7 7a03 	vldr	s15, [r7, #12]
 8003998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399c:	edc7 7a08 	vstr	s15, [r7, #32]

	if (triangular_filters_scale == TRIANGULAR_FILTERS_SCALE_MEL) {
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d10c      	bne.n	80039c0 <triangular_filters_init+0x5c>
	    low_freq = hz_to_mel(f_min);
 80039a6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80039aa:	f7ff fec1 	bl	8003730 <hz_to_mel>
 80039ae:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	    high_freq = hz_to_mel(f_max);
 80039b2:	ed97 0a08 	vldr	s0, [r7, #32]
 80039b6:	f7ff febb 	bl	8003730 <hz_to_mel>
 80039ba:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 80039be:	e003      	b.n	80039c8 <triangular_filters_init+0x64>
	} else {
        low_freq = f_min;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
	    high_freq = f_max;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	633b      	str	r3, [r7, #48]	; 0x30
	}

	d_hz_points = (high_freq - low_freq) / (float32_t) (triangular_filters_bank_size + 2);
 80039c8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80039cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039d0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	3302      	adds	r3, #2
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039e4:	edc7 7a07 	vstr	s15, [r7, #28]

	bin_sep = odr / (float32_t) number_of_samples;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80039f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fa:	edc7 7a06 	vstr	s15, [r7, #24]

	for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 80039fe:	2300      	movs	r3, #0
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a02:	e033      	b.n	8003a6c <triangular_filters_init+0x108>
		Hz_points[i] = (float32_t) (low_freq + i * d_hz_points);
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a1c:	4413      	add	r3, r2
 8003a1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a26:	edc3 7a00 	vstr	s15, [r3]
		bin[i] = round((Hz_points[i] / bin_sep));
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a30:	4413      	add	r3, r2
 8003a32:	ed93 7a00 	vldr	s14, [r3]
 8003a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a3e:	ee16 0a90 	vmov	r0, s13
 8003a42:	f7fc fd99 	bl	8000578 <__aeabi_f2d>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	ec43 2b10 	vmov	d0, r2, r3
 8003a4e:	f01b f83f 	bl	801ead0 <round>
 8003a52:	ec51 0b10 	vmov	r0, r1, d0
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	18d4      	adds	r4, r2, r3
 8003a5e:	f7fd f8bb 	bl	8000bd8 <__aeabi_d2uiz>
 8003a62:	4603      	mov	r3, r0
 8003a64:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < triangular_filters_bank_size + 2; i++){
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	3301      	adds	r3, #1
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1c9a      	adds	r2, r3, #2
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d8c6      	bhi.n	8003a04 <triangular_filters_init+0xa0>
	}

	SysFree(Hz_points);
 8003a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a78:	f000 fadc 	bl	8004034 <SysFree>
}
 8003a7c:	bf00      	nop
 8003a7e:	373c      	adds	r7, #60	; 0x3c
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}

08003a84 <multipliers_init>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Initializing the multipliers array                */
/*----------------------------------------------------------------------------*/

void multipliers_init(float32_t* multipliers, uint32_t data_size, signal_windowing_t signal_windowing) {
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	71fb      	strb	r3, [r7, #7]
	switch (signal_windowing) {
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d13a      	bne.n	8003b0e <multipliers_init+0x8a>
		case HANNING:
		{
			for (int i = 0; i < data_size; i++) {
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e032      	b.n	8003b04 <multipliers_init+0x80>
				multipliers[i] = 0.5 * (1 - arm_cos_f32((float32_t) 2*PI*i/(data_size-1)));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003b18 <multipliers_init+0x94>
 8003aac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ac0:	eeb0 0a66 	vmov.f32	s0, s13
 8003ac4:	f013 fa58 	bl	8016f78 <arm_cos_f32>
 8003ac8:	eef0 7a40 	vmov.f32	s15, s0
 8003acc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ad4:	ee17 0a90 	vmov	r0, s15
 8003ad8:	f7fc fd4e 	bl	8000578 <__aeabi_f2d>
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <multipliers_init+0x98>)
 8003ae2:	f7fc fda1 	bl	8000628 <__aeabi_dmul>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	18d4      	adds	r4, r2, r3
 8003af6:	f7fd f88f 	bl	8000c18 <__aeabi_d2f>
 8003afa:	4603      	mov	r3, r0
 8003afc:	6023      	str	r3, [r4, #0]
			for (int i = 0; i < data_size; i++) {
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	3301      	adds	r3, #1
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8c8      	bhi.n	8003a9e <multipliers_init+0x1a>
			}
			break;
 8003b0c:	e000      	b.n	8003b10 <multipliers_init+0x8c>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8003b0e:	bf00      	nop
		}
	}
}
 8003b10:	bf00      	nop
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd90      	pop	{r4, r7, pc}
 8003b18:	40c90fdb 	.word	0x40c90fdb
 8003b1c:	3fe00000 	.word	0x3fe00000

08003b20 <hanning>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Multiply the Hanning window to the input signal   */
/*----------------------------------------------------------------------------*/

void hanning(float32_t* data_in, uint32_t data_in_size, float32_t* data_out, uint32_t data_out_size, float32_t* multipliers) {
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < data_in_size; i++) {
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e016      	b.n	8003b62 <hanning+0x42>
		data_out[i] = multipliers[i] * data_in[i];
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	ed93 7a00 	vldr	s14, [r3]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b58:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < data_in_size; i++) {
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d8e4      	bhi.n	8003b34 <hanning+0x14>
	}
}
 8003b6a:	bf00      	nop
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <fft>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  FFT Calculation using CMSIS DSP Library           */
/*----------------------------------------------------------------------------*/

void fft(float32_t *data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, arm_rfft_fast_instance_f32 * fft_handler, signal_windowing_t signal_windowing, float32_t* multipliers) {
 8003b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b7c:	b08b      	sub	sp, #44	; 0x2c
 8003b7e:	af02      	add	r7, sp, #8
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	466b      	mov	r3, sp
 8003b8a:	461e      	mov	r6, r3

	float32_t fft_out_buf[data_in_size];
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	460b      	mov	r3, r1
 8003b90:	3b01      	subs	r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	2300      	movs	r3, #0
 8003b96:	4688      	mov	r8, r1
 8003b98:	4699      	mov	r9, r3
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003ba6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003baa:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003bae:	2300      	movs	r3, #0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	016b      	lsls	r3, r5, #5
 8003bbe:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003bc2:	0162      	lsls	r2, r4, #5
 8003bc4:	008b      	lsls	r3, r1, #2
 8003bc6:	3307      	adds	r3, #7
 8003bc8:	08db      	lsrs	r3, r3, #3
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	ebad 0d03 	sub.w	sp, sp, r3
 8003bd0:	ab02      	add	r3, sp, #8
 8003bd2:	3303      	adds	r3, #3
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	613b      	str	r3, [r7, #16]

	switch (signal_windowing){
 8003bda:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d108      	bne.n	8003bf4 <fft+0x7c>
		case HANNING:
		{
			hanning(data_in, data_in_size, data_in, data_in_size, multipliers);
 8003be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff ff97 	bl	8003b20 <hanning>
			break;
 8003bf2:	e000      	b.n	8003bf6 <fft+0x7e>
		}
		default: {
			// no window applied (rectangular case)
			break;
 8003bf4:	bf00      	nop
		}
	}

	arm_rfft_fast_f32(fft_handler, (float32_t*)  data_in, (float32_t*) fft_out_buf, 0);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	68f9      	ldr	r1, [r7, #12]
 8003bfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003bfe:	f012 fbdf 	bl	80163c0 <arm_rfft_fast_f32>

	int freqpoint = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]

	for (int i=0;   i<data_in_size   ; i=i+2) {
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	e057      	b.n	8003cbc <fft+0x144>
	  data_out[freqpoint] =(complex_abs(fft_out_buf[i], fft_out_buf[i+1])); //(sqrt(data_in_size));
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	ed93 7a00 	vldr	s14, [r3]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	18d4      	adds	r4, r2, r3
 8003c2e:	eef0 0a47 	vmov.f32	s1, s14
 8003c32:	eeb0 0a67 	vmov.f32	s0, s15
 8003c36:	f7ff fd05 	bl	8003644 <complex_abs>
 8003c3a:	eef0 7a40 	vmov.f32	s15, s0
 8003c3e:	edc4 7a00 	vstr	s15, [r4]
	  //data_out[freqpoint] = 2 * data_out[freqpoint]*data_out[freqpoint] /(float32_t)ISM330DHCX_ODR;

	  if(data_out[freqpoint] < 1e-3){
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fc fc93 	bl	8000578 <__aeabi_f2d>
 8003c52:	a321      	add	r3, pc, #132	; (adr r3, 8003cd8 <fft+0x160>)
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f7fc ff58 	bl	8000b0c <__aeabi_dcmplt>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <fft+0xf6>
		  data_out[freqpoint] = 1e-3;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <fft+0x158>)
 8003c6c:	601a      	str	r2, [r3, #0]
	  }
	  data_out[freqpoint] = 20*log10(data_out[freqpoint]);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc7d 	bl	8000578 <__aeabi_f2d>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	ec43 2b10 	vmov	d0, r2, r3
 8003c86:	f01a ff6b 	bl	801eb60 <log10>
 8003c8a:	ec51 0b10 	vmov	r0, r1, d0
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <fft+0x15c>)
 8003c94:	f7fc fcc8 	bl	8000628 <__aeabi_dmul>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	18d4      	adds	r4, r2, r3
 8003ca8:	f7fc ffb6 	bl	8000c18 <__aeabi_d2f>
 8003cac:	4603      	mov	r3, r0
 8003cae:	6023      	str	r3, [r4, #0]
	  freqpoint++;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
	for (int i=0;   i<data_in_size   ; i=i+2) {
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3302      	adds	r3, #2
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d8a3      	bhi.n	8003c0c <fft+0x94>
 8003cc4:	46b5      	mov	sp, r6
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cd0:	3a83126f 	.word	0x3a83126f
 8003cd4:	40340000 	.word	0x40340000
 8003cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003cdc:	3f50624d 	.word	0x3f50624d

08003ce0 <triangular_filters_convolution>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  Convolution of the triangular filters bank        */
/*----------------------------------------------------------------------------*/

void triangular_filters_convolution(float32_t * data_in, uint32_t data_in_size, float32_t * data_out,  uint32_t data_out_size, uint32_t * bin) {
 8003ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	b08f      	sub	sp, #60	; 0x3c
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	466b      	mov	r3, sp
 8003cf2:	461e      	mov	r6, r3

	int f_m_minus=0, f_m=0, f_m_plus=0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
	float32_t in_vector[data_in_size];
 8003d00:	68b9      	ldr	r1, [r7, #8]
 8003d02:	460b      	mov	r3, r1
 8003d04:	3b01      	subs	r3, #1
 8003d06:	61bb      	str	r3, [r7, #24]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4688      	mov	r8, r1
 8003d0c:	4699      	mov	r9, r3
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003d1a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003d1e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003d22:	2300      	movs	r3, #0
 8003d24:	460c      	mov	r4, r1
 8003d26:	461d      	mov	r5, r3
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	016b      	lsls	r3, r5, #5
 8003d32:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003d36:	0162      	lsls	r2, r4, #5
 8003d38:	008b      	lsls	r3, r1, #2
 8003d3a:	3307      	adds	r3, #7
 8003d3c:	08db      	lsrs	r3, r3, #3
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	ebad 0d03 	sub.w	sp, sp, r3
 8003d44:	466b      	mov	r3, sp
 8003d46:	3303      	adds	r3, #3
 8003d48:	089b      	lsrs	r3, r3, #2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	617b      	str	r3, [r7, #20]

	for (int m=1; m < data_out_size+1; m++){
 8003d4e:	2301      	movs	r3, #1
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	e084      	b.n	8003e5e <triangular_filters_convolution+0x17e>
		f_m_minus = bin[m-1];
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d60:	4413      	add	r3, r2
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
		f_m = bin[m];
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d6c:	4413      	add	r3, r2
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	623b      	str	r3, [r7, #32]
		f_m_plus = bin[m+1];
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	3301      	adds	r3, #1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d7a:	4413      	add	r3, r2
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61fb      	str	r3, [r7, #28]

		for (int i=0; i<data_in_size   ;i++){
 8003d80:	2300      	movs	r3, #0
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d84:	e009      	b.n	8003d9a <triangular_filters_convolution+0xba>
			in_vector[i] = (float32_t) 0.0;
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
		for (int i=0; i<data_in_size   ;i++){
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	3301      	adds	r3, #1
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d8f1      	bhi.n	8003d86 <triangular_filters_convolution+0xa6>
		}
		for (int k=f_m_minus;k < f_m;k++){
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30
 8003da6:	e01d      	b.n	8003de4 <triangular_filters_convolution+0x104>
			in_vector[k] = (((float32_t)k-f_m_minus)/(f_m-f_m_minus));
 8003da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dbc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	edc3 7a00 	vstr	s15, [r3]
		for (int k=f_m_minus;k < f_m;k++){
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	3301      	adds	r3, #1
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
 8003de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	dbdd      	blt.n	8003da8 <triangular_filters_convolution+0xc8>
		}
		for (int j=f_m; j<f_m_plus;j++){
 8003dec:	6a3b      	ldr	r3, [r7, #32]
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
 8003df0:	e01d      	b.n	8003e2e <triangular_filters_convolution+0x14e>
			in_vector[j] = (float32_t)((f_m_plus-(float32_t)j)/(f_m_plus-f_m));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	edc3 7a00 	vstr	s15, [r3]
		for (int j=f_m; j<f_m_plus;j++){
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	dbdd      	blt.n	8003df2 <triangular_filters_convolution+0x112>
		}
		data_out[m-1] = dot_product(in_vector, data_in_size,data_in, data_in_size);
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	18d4      	adds	r4, r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	6978      	ldr	r0, [r7, #20]
 8003e4c:	f7ff fc16 	bl	800367c <dot_product>
 8003e50:	eef0 7a40 	vmov.f32	s15, s0
 8003e54:	edc4 7a00 	vstr	s15, [r4]
	for (int m=1; m < data_out_size+1; m++){
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	429a      	cmp	r2, r3
 8003e66:	f63f af75 	bhi.w	8003d54 <triangular_filters_convolution+0x74>
 8003e6a:	46b5      	mov	sp, r6
	}
}
 8003e6c:	bf00      	nop
 8003e6e:	373c      	adds	r7, #60	; 0x3c
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08003e78 <mfcc>:

/*----------------------------------------------------------------------------*/
/* Signal pre-processing :  MFCC		        					          */
/*----------------------------------------------------------------------------*/

void mfcc(float32_t * data_in, uint32_t data_in_size, float32_t * data_out, uint32_t data_out_size, uint32_t * bin, arm_dct4_instance_f32 * dct4f32, arm_rfft_fast_instance_f32 * fft_handler,  signal_windowing_t signal_windowing, float32_t* multipliers) {
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	b091      	sub	sp, #68	; 0x44
 8003e7e:	af04      	add	r7, sp, #16
 8003e80:	6178      	str	r0, [r7, #20]
 8003e82:	6139      	str	r1, [r7, #16]
 8003e84:	60fa      	str	r2, [r7, #12]
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	466b      	mov	r3, sp
 8003e8a:	461e      	mov	r6, r3

	float32_t dct_status[data_out_size*2];
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	0059      	lsls	r1, r3, #1
 8003e90:	460b      	mov	r3, r1
 8003e92:	3b01      	subs	r3, #1
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e96:	2300      	movs	r3, #0
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	607b      	str	r3, [r7, #4]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	0143      	lsls	r3, r0, #5
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003eae:	6838      	ldr	r0, [r7, #0]
 8003eb0:	0142      	lsls	r2, r0, #5
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	468a      	mov	sl, r1
 8003eb6:	469b      	mov	fp, r3
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8003ec4:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8003ec8:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8003ecc:	008b      	lsls	r3, r1, #2
 8003ece:	3307      	adds	r3, #7
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	ebad 0d03 	sub.w	sp, sp, r3
 8003ed8:	ab04      	add	r3, sp, #16
 8003eda:	3303      	adds	r3, #3
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t fft_out[data_in_size/2];
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	0859      	lsrs	r1, r3, #1
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	623b      	str	r3, [r7, #32]
 8003eec:	2300      	movs	r3, #0
 8003eee:	4688      	mov	r8, r1
 8003ef0:	4699      	mov	r9, r3
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003efe:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003f02:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003f06:	2300      	movs	r3, #0
 8003f08:	460c      	mov	r4, r1
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	016b      	lsls	r3, r5, #5
 8003f16:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8003f1a:	0162      	lsls	r2, r4, #5
 8003f1c:	008b      	lsls	r3, r1, #2
 8003f1e:	3307      	adds	r3, #7
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	ebad 0d03 	sub.w	sp, sp, r3
 8003f28:	ab04      	add	r3, sp, #16
 8003f2a:	3303      	adds	r3, #3
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	61fb      	str	r3, [r7, #28]

	fft(data_in, data_in_size, fft_out, data_in_size/2, fft_handler, signal_windowing, multipliers);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	085a      	lsrs	r2, r3, #1
 8003f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f38:	9302      	str	r3, [sp, #8]
 8003f3a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	6939      	ldr	r1, [r7, #16]
 8003f4a:	6978      	ldr	r0, [r7, #20]
 8003f4c:	f7ff fe14 	bl	8003b78 <fft>

	triangular_filters_convolution(fft_out, data_in_size/2, data_out, data_out_size, bin);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	0859      	lsrs	r1, r3, #1
 8003f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	69f8      	ldr	r0, [r7, #28]
 8003f5e:	f7ff febf 	bl	8003ce0 <triangular_filters_convolution>
	for (int i = 0; i<data_out_size; i++) {
 8003f62:	2300      	movs	r3, #0
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f66:	e039      	b.n	8003fdc <mfcc+0x164>
		if (data_out[i] < 10e-10){
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fb00 	bl	8000578 <__aeabi_f2d>
 8003f78:	a323      	add	r3, pc, #140	; (adr r3, 8004008 <mfcc+0x190>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f7fc fdc5 	bl	8000b0c <__aeabi_dcmplt>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <mfcc+0x11c>
			data_out[i] = 10e-10;
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <mfcc+0x188>)
 8003f92:	601a      	str	r2, [r3, #0]
		}
		data_out[i] = 20*log10(data_out[i]);
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fc faea 	bl	8000578 <__aeabi_f2d>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	ec43 2b10 	vmov	d0, r2, r3
 8003fac:	f01a fdd8 	bl	801eb60 <log10>
 8003fb0:	ec51 0b10 	vmov	r0, r1, d0
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <mfcc+0x18c>)
 8003fba:	f7fc fb35 	bl	8000628 <__aeabi_dmul>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	18d4      	adds	r4, r2, r3
 8003fce:	f7fc fe23 	bl	8000c18 <__aeabi_d2f>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	6023      	str	r3, [r4, #0]
	for (int i = 0; i<data_out_size; i++) {
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	3301      	adds	r3, #1
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d8c1      	bhi.n	8003f68 <mfcc+0xf0>
	}

	// apply the direct cosine transform in order to have the MFCC
	arm_dct4_f32(dct4f32, dct_status, data_out);
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003fea:	f012 fdf3 	bl	8016bd4 <arm_dct4_f32>
 8003fee:	46b5      	mov	sp, r6
}
 8003ff0:	bf00      	nop
 8003ff2:	3734      	adds	r7, #52	; 0x34
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffa:	bf00      	nop
 8003ffc:	f3af 8000 	nop.w
 8004000:	3089705f 	.word	0x3089705f
 8004004:	40340000 	.word	0x40340000
 8004008:	e826d695 	.word	0xe826d695
 800400c:	3e112e0b 	.word	0x3e112e0b

08004010 <sys_error_handler>:

#include "sys_functions.h"
#include <stdlib.h>

void sys_error_handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8004014:	e7fe      	b.n	8004014 <sys_error_handler+0x4>

08004016 <SysAlloc>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void *SysAlloc(size_t nSize) {
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  void *pcMemory = (void *) calloc(nSize,sizeof(uint8_t));
 800401e:	2101      	movs	r1, #1
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f016 f873 	bl	801a10c <calloc>
 8004026:	4603      	mov	r3, r0
 8004028:	60fb      	str	r3, [r7, #12]
  return pcMemory;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <SysFree>:

void SysFree(void *pvData) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  free(pvData);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f016 f89f 	bl	801a180 <free>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8004060:	f04f 33ff 	mov.w	r3, #4294967295
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e051      	b.n	800410c <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	7b1a      	ldrb	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a1d      	ldr	r2, [pc, #116]	; (8004118 <ISM330DHCX_RegisterBusIO+0xcc>)
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	; (800411c <ISM330DHCX_RegisterBusIO+0xd0>)
 80040aa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e020      	b.n	800410c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4798      	blx	r3
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e016      	b.n	800410c <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d112      	bne.n	800410c <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80040f0:	230c      	movs	r3, #12
 80040f2:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	461a      	mov	r2, r3
 80040f8:	2112      	movs	r1, #18
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fd73 	bl	8004be6 <ISM330DHCX_Write_Reg>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 8004106:	f04f 33ff 	mov.w	r3, #4294967295
 800410a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800410c:	68fb      	ldr	r3, [r7, #12]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	0800544d 	.word	0x0800544d
 800411c:	08005483 	.word	0x08005483

08004120 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3320      	adds	r3, #32
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f001 ff3f 	bl	8005fb2 <ism330dhcx_device_conf_set>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	e078      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3320      	adds	r3, #32
 8004144:	2101      	movs	r1, #1
 8004146:	4618      	mov	r0, r3
 8004148:	f001 ffb6 	bl	80060b8 <ism330dhcx_auto_increment_set>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	e06c      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3320      	adds	r3, #32
 800415c:	2101      	movs	r1, #1
 800415e:	4618      	mov	r0, r3
 8004160:	f001 ff84 	bl	800606c <ism330dhcx_reset_set>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	e060      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3320      	adds	r3, #32
 8004174:	2101      	movs	r1, #1
 8004176:	4618      	mov	r0, r3
 8004178:	f001 ff9e 	bl	80060b8 <ism330dhcx_auto_increment_set>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295
 8004186:	e054      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3320      	adds	r3, #32
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fe42 	bl	8005e18 <ism330dhcx_block_data_update_set>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	e048      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3320      	adds	r3, #32
 80041a4:	2100      	movs	r1, #0
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f854 	bl	8006254 <ism330dhcx_fifo_mode_set>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	e03c      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2204      	movs	r2, #4
 80041bc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3320      	adds	r3, #32
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f001 fa04 	bl	80055d4 <ism330dhcx_xl_data_rate_set>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80041d2:	f04f 33ff 	mov.w	r3, #4294967295
 80041d6:	e02c      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3320      	adds	r3, #32
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 f99a 	bl	8005518 <ism330dhcx_xl_full_scale_set>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	e020      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2204      	movs	r2, #4
 80041f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3320      	adds	r3, #32
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 fc38 	bl	8005a74 <ism330dhcx_gy_data_rate_set>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	e010      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3320      	adds	r3, #32
 8004214:	210c      	movs	r1, #12
 8004216:	4618      	mov	r0, r3
 8004218:	f001 fbb4 	bl	8005984 <ism330dhcx_gy_full_scale_set>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
 8004226:	e004      	b.n	8004232 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f888 	bl	8004358 <ISM330DHCX_ACC_Disable>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 800424e:	f04f 33ff 	mov.w	r3, #4294967295
 8004252:	e015      	b.n	8004280 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa92 	bl	800477e <ISM330DHCX_GYRO_Disable>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	e00c      	b.n	8004280 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3320      	adds	r3, #32
 8004296:	6839      	ldr	r1, [r7, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fed6 	bl	800604a <ism330dhcx_device_id_get>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 80042a4:	f04f 33ff 	mov.w	r3, #4294967295
 80042a8:	e000      	b.n	80042ac <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2201      	movs	r2, #1
 80042c8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2200      	movs	r2, #0
 80042d4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80042dc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2210      	movs	r2, #16
 80042e2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	4a07      	ldr	r2, [pc, #28]	; (800430c <ISM330DHCX_GetCapabilities+0x58>)
 80042ee:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4a06      	ldr	r2, [pc, #24]	; (800430c <ISM330DHCX_GetCapabilities+0x58>)
 80042f4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	45d05800 	.word	0x45d05800

08004310 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e014      	b.n	8004350 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f103 0220 	add.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f001 f94d 	bl	80055d4 <ism330dhcx_xl_data_rate_set>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004340:	f04f 33ff 	mov.w	r3, #4294967295
 8004344:	e004      	b.n	8004350 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	e01f      	b.n	80043ae <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f103 0220 	add.w	r2, r3, #32
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3333      	adds	r3, #51	; 0x33
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f001 fa9a 	bl	80058b4 <ism330dhcx_xl_data_rate_get>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8004386:	f04f 33ff 	mov.w	r3, #4294967295
 800438a:	e010      	b.n	80043ae <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3320      	adds	r3, #32
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f91e 	bl	80055d4 <ism330dhcx_xl_data_rate_set>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	e004      	b.n	80043ae <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3320      	adds	r3, #32
 80043ca:	f107 020b 	add.w	r2, r7, #11
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f001 f8c7 	bl	8005564 <ism330dhcx_xl_full_scale_get>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80043dc:	f04f 33ff 	mov.w	r3, #4294967295
 80043e0:	e023      	b.n	800442a <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d81b      	bhi.n	8004420 <ISM330DHCX_ACC_GetSensitivity+0x68>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004401 	.word	0x08004401
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004409 	.word	0x08004409
 80043fc:	08004411 	.word	0x08004411
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4a0c      	ldr	r2, [pc, #48]	; (8004434 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8004404:	601a      	str	r2, [r3, #0]
      break;
 8004406:	e00f      	b.n	8004428 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 800440c:	601a      	str	r2, [r3, #0]
      break;
 800440e:	e00b      	b.n	8004428 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8004414:	601a      	str	r2, [r3, #0]
      break;
 8004416:	e007      	b.n	8004428 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 800441c:	601a      	str	r2, [r3, #0]
      break;
 800441e:	e003      	b.n	8004428 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	60fb      	str	r3, [r7, #12]
      break;
 8004426:	bf00      	nop
  }

  return ret;
 8004428:	68fb      	ldr	r3, [r7, #12]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	3d79db23 	.word	0x3d79db23
 8004438:	3df9db23 	.word	0x3df9db23
 800443c:	3e79db23 	.word	0x3e79db23
 8004440:	3ef9db23 	.word	0x3ef9db23

08004444 <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3320      	adds	r3, #32
 8004456:	f107 020b 	add.w	r2, r7, #11
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f001 fa29 	bl	80058b4 <ism330dhcx_xl_data_rate_get>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004468:	f04f 33ff 	mov.w	r3, #4294967295
 800446c:	e04e      	b.n	800450c <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 800446e:	7afb      	ldrb	r3, [r7, #11]
 8004470:	2b0a      	cmp	r3, #10
 8004472:	d846      	bhi.n	8004502 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044b3 	.word	0x080044b3
 8004484:	080044bb 	.word	0x080044bb
 8004488:	080044c3 	.word	0x080044c3
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044d3 	.word	0x080044d3
 8004494:	080044db 	.word	0x080044db
 8004498:	080044e3 	.word	0x080044e3
 800449c:	080044eb 	.word	0x080044eb
 80044a0:	080044f3 	.word	0x080044f3
 80044a4:	080044fb 	.word	0x080044fb
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
      break;
 80044b0:	e02b      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	4a17      	ldr	r2, [pc, #92]	; (8004514 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 80044b6:	601a      	str	r2, [r3, #0]
      break;
 80044b8:	e027      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	4a16      	ldr	r2, [pc, #88]	; (8004518 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 80044be:	601a      	str	r2, [r3, #0]
      break;
 80044c0:	e023      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 80044c6:	601a      	str	r2, [r3, #0]
      break;
 80044c8:	e01f      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	4a14      	ldr	r2, [pc, #80]	; (8004520 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 80044ce:	601a      	str	r2, [r3, #0]
      break;
 80044d0:	e01b      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 80044d6:	601a      	str	r2, [r3, #0]
      break;
 80044d8:	e017      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	4a12      	ldr	r2, [pc, #72]	; (8004528 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 80044de:	601a      	str	r2, [r3, #0]
      break;
 80044e0:	e013      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	4a11      	ldr	r2, [pc, #68]	; (800452c <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 80044e6:	601a      	str	r2, [r3, #0]
      break;
 80044e8:	e00f      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	4a10      	ldr	r2, [pc, #64]	; (8004530 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 80044ee:	601a      	str	r2, [r3, #0]
      break;
 80044f0:	e00b      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	4a0f      	ldr	r2, [pc, #60]	; (8004534 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 80044f6:	601a      	str	r2, [r3, #0]
      break;
 80044f8:	e007      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 80044fe:	601a      	str	r2, [r3, #0]
      break;
 8004500:	e003      	b.n	800450a <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004502:	f04f 33ff 	mov.w	r3, #4294967295
 8004506:	60fb      	str	r3, [r7, #12]
      break;
 8004508:	bf00      	nop
  }

  return ret;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	41480000 	.word	0x41480000
 8004518:	41d00000 	.word	0x41d00000
 800451c:	42500000 	.word	0x42500000
 8004520:	42d00000 	.word	0x42d00000
 8004524:	43500000 	.word	0x43500000
 8004528:	43d00000 	.word	0x43d00000
 800452c:	44504000 	.word	0x44504000
 8004530:	44d04000 	.word	0x44d04000
 8004534:	45504000 	.word	0x45504000
 8004538:	45d05800 	.word	0x45d05800

0800453c <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800454e:	2b01      	cmp	r3, #1
 8004550:	d106      	bne.n	8004560 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004552:	ed97 0a00 	vldr	s0, [r7]
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fd5c 	bl	8005014 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 800455c:	4603      	mov	r3, r0
 800455e:	e005      	b.n	800456c <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004560:	ed97 0a00 	vldr	s0, [r7]
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 fde1 	bl	800512c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 800456a:	4603      	mov	r3, r0
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3320      	adds	r3, #32
 8004586:	f107 020b 	add.w	r2, r7, #11
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 ffe9 	bl	8005564 <ism330dhcx_xl_full_scale_get>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	e023      	b.n	80045e6 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d81b      	bhi.n	80045dc <ISM330DHCX_ACC_GetFullScale+0x68>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <ISM330DHCX_ACC_GetFullScale+0x38>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045bd 	.word	0x080045bd
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cd 	.word	0x080045cd
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2202      	movs	r2, #2
 80045c0:	601a      	str	r2, [r3, #0]
      break;
 80045c2:	e00f      	b.n	80045e4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2204      	movs	r2, #4
 80045c8:	601a      	str	r2, [r3, #0]
      break;
 80045ca:	e00b      	b.n	80045e4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2208      	movs	r2, #8
 80045d0:	601a      	str	r2, [r3, #0]
      break;
 80045d2:	e007      	b.n	80045e4 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2210      	movs	r2, #16
 80045d8:	601a      	str	r2, [r3, #0]
      break;
 80045da:	e003      	b.n	80045e4 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 80045dc:	f04f 33ff 	mov.w	r3, #4294967295
 80045e0:	60fb      	str	r3, [r7, #12]
      break;
 80045e2:	bf00      	nop
  }

  return ret;
 80045e4:	68fb      	ldr	r3, [r7, #12]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop

080045f0 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	dd0b      	ble.n	8004618 <ISM330DHCX_ACC_SetFullScale+0x28>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b04      	cmp	r3, #4
 8004604:	dd06      	ble.n	8004614 <ISM330DHCX_ACC_SetFullScale+0x24>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	dc01      	bgt.n	8004610 <ISM330DHCX_ACC_SetFullScale+0x20>
 800460c:	2303      	movs	r3, #3
 800460e:	e004      	b.n	800461a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004610:	2301      	movs	r3, #1
 8004612:	e002      	b.n	800461a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004614:	2302      	movs	r3, #2
 8004616:	e000      	b.n	800461a <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004618:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800461a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3320      	adds	r3, #32
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f000 ff77 	bl	8005518 <ism330dhcx_xl_full_scale_set>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
 8004634:	e000      	b.n	8004638 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3320      	adds	r3, #32
 800464e:	f107 0208 	add.w	r2, r7, #8
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f001 fc50 	bl	8005efa <ism330dhcx_acceleration_raw_get>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d002      	beq.n	8004666 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004660:	f04f 33ff 	mov.w	r3, #4294967295
 8004664:	e00c      	b.n	8004680 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004666:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800466e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004676:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8004692:	f04f 0300 	mov.w	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3320      	adds	r3, #32
 800469c:	f107 0210 	add.w	r2, r7, #16
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fc29 	bl	8005efa <ism330dhcx_acceleration_raw_get>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 80046ae:	f04f 33ff 	mov.w	r3, #4294967295
 80046b2:	e03c      	b.n	800472e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fe7c 	bl	80043b8 <ISM330DHCX_ACC_GetSensitivity>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	e030      	b.n	800472e <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80046cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80046d0:	ee07 3a90 	vmov	s15, r3
 80046d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80046dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e4:	ee17 2a90 	vmov	r2, s15
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80046ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80046fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004700:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004704:	ee17 2a90 	vmov	r2, s15
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800470c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004718:	edd7 7a03 	vldr	s15, [r7, #12]
 800471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004720:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004724:	ee17 2a90 	vmov	r2, s15
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e014      	b.n	8004776 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f103 0220 	add.w	r2, r3, #32
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f001 f98a 	bl	8005a74 <ism330dhcx_gy_data_rate_set>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	e004      	b.n	8004776 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8004790:	2300      	movs	r3, #0
 8004792:	e01f      	b.n	80047d4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f103 0220 	add.w	r2, r3, #32
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3334      	adds	r3, #52	; 0x34
 800479e:	4619      	mov	r1, r3
 80047a0:	4610      	mov	r0, r2
 80047a2:	f001 fad7 	bl	8005d54 <ism330dhcx_gy_data_rate_get>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	e010      	b.n	80047d4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3320      	adds	r3, #32
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 f95b 	bl	8005a74 <ism330dhcx_gy_data_rate_set>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295
 80047c8:	e004      	b.n	80047d4 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3320      	adds	r3, #32
 80047ee:	f107 020b 	add.w	r2, r7, #11
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f8eb 	bl	80059d0 <ism330dhcx_gy_full_scale_get>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004800:	f04f 33ff 	mov.w	r3, #4294967295
 8004804:	e03d      	b.n	8004882 <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004806:	7afb      	ldrb	r3, [r7, #11]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d835      	bhi.n	8004878 <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 800480c:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004851 	.word	0x08004851
 8004818:	08004871 	.word	0x08004871
 800481c:	08004849 	.word	0x08004849
 8004820:	08004879 	.word	0x08004879
 8004824:	08004859 	.word	0x08004859
 8004828:	08004879 	.word	0x08004879
 800482c:	08004879 	.word	0x08004879
 8004830:	08004879 	.word	0x08004879
 8004834:	08004861 	.word	0x08004861
 8004838:	08004879 	.word	0x08004879
 800483c:	08004879 	.word	0x08004879
 8004840:	08004879 	.word	0x08004879
 8004844:	08004869 	.word	0x08004869
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 800484c:	601a      	str	r2, [r3, #0]
      break;
 800484e:	e017      	b.n	8004880 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8004854:	601a      	str	r2, [r3, #0]
      break;
 8004856:	e013      	b.n	8004880 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4a0e      	ldr	r2, [pc, #56]	; (8004894 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 800485c:	601a      	str	r2, [r3, #0]
      break;
 800485e:	e00f      	b.n	8004880 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	4a0d      	ldr	r2, [pc, #52]	; (8004898 <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 8004864:	601a      	str	r2, [r3, #0]
      break;
 8004866:	e00b      	b.n	8004880 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4a0c      	ldr	r2, [pc, #48]	; (800489c <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 800486c:	601a      	str	r2, [r3, #0]
      break;
 800486e:	e007      	b.n	8004880 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4a0b      	ldr	r2, [pc, #44]	; (80048a0 <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 8004874:	601a      	str	r2, [r3, #0]
      break;
 8004876:	e003      	b.n	8004880 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	60fb      	str	r3, [r7, #12]
      break;
 800487e:	bf00      	nop
  }

  return ret;
 8004880:	68fb      	ldr	r3, [r7, #12]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	408c0000 	.word	0x408c0000
 8004890:	410c0000 	.word	0x410c0000
 8004894:	418c0000 	.word	0x418c0000
 8004898:	420c0000 	.word	0x420c0000
 800489c:	428c0000 	.word	0x428c0000
 80048a0:	430c0000 	.word	0x430c0000

080048a4 <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3320      	adds	r3, #32
 80048b6:	f107 020b 	add.w	r2, r7, #11
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 fa49 	bl	8005d54 <ism330dhcx_gy_data_rate_get>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80048c8:	f04f 33ff 	mov.w	r3, #4294967295
 80048cc:	e04e      	b.n	800496c <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	2b0a      	cmp	r3, #10
 80048d2:	d846      	bhi.n	8004962 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004909 	.word	0x08004909
 80048e0:	08004913 	.word	0x08004913
 80048e4:	0800491b 	.word	0x0800491b
 80048e8:	08004923 	.word	0x08004923
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	08004933 	.word	0x08004933
 80048f4:	0800493b 	.word	0x0800493b
 80048f8:	08004943 	.word	0x08004943
 80048fc:	0800494b 	.word	0x0800494b
 8004900:	08004953 	.word	0x08004953
 8004904:	0800495b 	.word	0x0800495b
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
      break;
 8004910:	e02b      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004916:	601a      	str	r2, [r3, #0]
      break;
 8004918:	e027      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 800491e:	601a      	str	r2, [r3, #0]
      break;
 8004920:	e023      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	4a15      	ldr	r2, [pc, #84]	; (800497c <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8004926:	601a      	str	r2, [r3, #0]
      break;
 8004928:	e01f      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 800492e:	601a      	str	r2, [r3, #0]
      break;
 8004930:	e01b      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	4a13      	ldr	r2, [pc, #76]	; (8004984 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8004936:	601a      	str	r2, [r3, #0]
      break;
 8004938:	e017      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	4a12      	ldr	r2, [pc, #72]	; (8004988 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 800493e:	601a      	str	r2, [r3, #0]
      break;
 8004940:	e013      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8004946:	601a      	str	r2, [r3, #0]
      break;
 8004948:	e00f      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	4a10      	ldr	r2, [pc, #64]	; (8004990 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 800494e:	601a      	str	r2, [r3, #0]
      break;
 8004950:	e00b      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	4a0f      	ldr	r2, [pc, #60]	; (8004994 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8004956:	601a      	str	r2, [r3, #0]
      break;
 8004958:	e007      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 800495e:	601a      	str	r2, [r3, #0]
      break;
 8004960:	e003      	b.n	800496a <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	60fb      	str	r3, [r7, #12]
      break;
 8004968:	bf00      	nop
  }

  return ret;
 800496a:	68fb      	ldr	r3, [r7, #12]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	41480000 	.word	0x41480000
 8004978:	41d00000 	.word	0x41d00000
 800497c:	42500000 	.word	0x42500000
 8004980:	42d00000 	.word	0x42d00000
 8004984:	43500000 	.word	0x43500000
 8004988:	43d00000 	.word	0x43d00000
 800498c:	44504000 	.word	0x44504000
 8004990:	44d04000 	.word	0x44d04000
 8004994:	45504000 	.word	0x45504000
 8004998:	45d05800 	.word	0x45d05800

0800499c <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d106      	bne.n	80049c0 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80049b2:	ed97 0a00 	vldr	s0, [r7]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fc3a 	bl	8005230 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 80049bc:	4603      	mov	r3, r0
 80049be:	e005      	b.n	80049cc <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80049c0:	ed97 0a00 	vldr	s0, [r7]
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fcbf 	bl	8005348 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80049ca:	4603      	mov	r3, r0
  }
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3320      	adds	r3, #32
 80049e6:	f107 020b 	add.w	r2, r7, #11
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 ffef 	bl	80059d0 <ism330dhcx_gy_full_scale_get>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80049f8:	f04f 33ff 	mov.w	r3, #4294967295
 80049fc:	e041      	b.n	8004a82 <ISM330DHCX_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 80049fe:	7afb      	ldrb	r3, [r7, #11]
 8004a00:	2b0c      	cmp	r3, #12
 8004a02:	d839      	bhi.n	8004a78 <ISM330DHCX_GYRO_GetFullScale+0xa4>
 8004a04:	a201      	add	r2, pc, #4	; (adr r2, 8004a0c <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0a:	bf00      	nop
 8004a0c:	08004a49 	.word	0x08004a49
 8004a10:	08004a6f 	.word	0x08004a6f
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a79 	.word	0x08004a79
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a79 	.word	0x08004a79
 8004a24:	08004a79 	.word	0x08004a79
 8004a28:	08004a79 	.word	0x08004a79
 8004a2c:	08004a5b 	.word	0x08004a5b
 8004a30:	08004a79 	.word	0x08004a79
 8004a34:	08004a79 	.word	0x08004a79
 8004a38:	08004a79 	.word	0x08004a79
 8004a3c:	08004a65 	.word	0x08004a65
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	227d      	movs	r2, #125	; 0x7d
 8004a44:	601a      	str	r2, [r3, #0]
      break;
 8004a46:	e01b      	b.n	8004a80 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	22fa      	movs	r2, #250	; 0xfa
 8004a4c:	601a      	str	r2, [r3, #0]
      break;
 8004a4e:	e017      	b.n	8004a80 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a56:	601a      	str	r2, [r3, #0]
      break;
 8004a58:	e012      	b.n	8004a80 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a60:	601a      	str	r2, [r3, #0]
      break;
 8004a62:	e00d      	b.n	8004a80 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a6a:	601a      	str	r2, [r3, #0]
      break;
 8004a6c:	e008      	b.n	8004a80 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_4000dps:
      *FullScale = 4000;
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004a74:	601a      	str	r2, [r3, #0]
      break;
 8004a76:	e003      	b.n	8004a80 <ISM330DHCX_GYRO_GetFullScale+0xac>

    default:
      ret = ISM330DHCX_ERROR;
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7c:	60fb      	str	r3, [r7, #12]
      break;
 8004a7e:	bf00      	nop
  }

  return ret;
 8004a80:	68fb      	ldr	r3, [r7, #12]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop

08004a8c <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b7d      	cmp	r3, #125	; 0x7d
 8004a9a:	dd18      	ble.n	8004ace <ISM330DHCX_GYRO_SetFullScale+0x42>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2bfa      	cmp	r3, #250	; 0xfa
 8004aa0:	dd13      	ble.n	8004aca <ISM330DHCX_GYRO_SetFullScale+0x3e>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004aa8:	dd0d      	ble.n	8004ac6 <ISM330DHCX_GYRO_SetFullScale+0x3a>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ab0:	dd07      	ble.n	8004ac2 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004ab8:	dc01      	bgt.n	8004abe <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004aba:	230c      	movs	r3, #12
 8004abc:	e008      	b.n	8004ad0 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e006      	b.n	8004ad0 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	e004      	b.n	8004ad0 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	e002      	b.n	8004ad0 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004ace:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004ad0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3320      	adds	r3, #32
 8004ad6:	7bfa      	ldrb	r2, [r7, #15]
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 ff52 	bl	8005984 <ism330dhcx_gy_full_scale_set>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	e000      	b.n	8004aee <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3320      	adds	r3, #32
 8004b04:	f107 0208 	add.w	r2, r7, #8
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f001 f9aa 	bl	8005e64 <ism330dhcx_angular_rate_raw_get>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1a:	e00c      	b.n	8004b36 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004b1c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004b24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004b2c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b086      	sub	sp, #24
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3320      	adds	r3, #32
 8004b4c:	f107 0210 	add.w	r2, r7, #16
 8004b50:	4611      	mov	r1, r2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 f986 	bl	8005e64 <ism330dhcx_angular_rate_raw_get>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	e03c      	b.n	8004bde <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	4619      	mov	r1, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fe36 	bl	80047dc <ISM330DHCX_GYRO_GetSensitivity>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	e030      	b.n	8004bde <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004b7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004b80:	ee07 3a90 	vmov	s15, r3
 8004b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b88:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b94:	ee17 2a90 	vmov	r2, s15
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004b9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bb4:	ee17 2a90 	vmov	r2, s15
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004bbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004bc0:	ee07 3a90 	vmov	s15, r3
 8004bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bd4:	ee17 2a90 	vmov	r2, s15
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f103 0020 	add.w	r0, r3, #32
 8004bfc:	1cba      	adds	r2, r7, #2
 8004bfe:	78f9      	ldrb	r1, [r7, #3]
 8004c00:	2301      	movs	r3, #1
 8004c02:	f000 fc71 	bl	80054e8 <ism330dhcx_write_reg>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c10:	e000      	b.n	8004c14 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <ISM330DHCX_FIFO_ACC_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_ACC_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_xl_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_XL_BATCHED_AT_26Hz
 8004c28:	edd7 7a00 	vldr	s15, [r7]
 8004c2c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c38:	d801      	bhi.n	8004c3e <ISM330DHCX_FIFO_ACC_Set_BDR+0x22>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e058      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004c3e:	edd7 7a00 	vldr	s15, [r7]
 8004c42:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4e:	d801      	bhi.n	8004c54 <ISM330DHCX_FIFO_ACC_Set_BDR+0x38>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e04d      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004c54:	edd7 7a00 	vldr	s15, [r7]
 8004c58:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004d18 <ISM330DHCX_FIFO_ACC_Set_BDR+0xfc>
 8004c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	d801      	bhi.n	8004c6a <ISM330DHCX_FIFO_ACC_Set_BDR+0x4e>
 8004c66:	2303      	movs	r3, #3
 8004c68:	e042      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004c6a:	edd7 7a00 	vldr	s15, [r7]
 8004c6e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004d1c <ISM330DHCX_FIFO_ACC_Set_BDR+0x100>
 8004c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	d801      	bhi.n	8004c80 <ISM330DHCX_FIFO_ACC_Set_BDR+0x64>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	e037      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004c80:	edd7 7a00 	vldr	s15, [r7]
 8004c84:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d20 <ISM330DHCX_FIFO_ACC_Set_BDR+0x104>
 8004c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c90:	d801      	bhi.n	8004c96 <ISM330DHCX_FIFO_ACC_Set_BDR+0x7a>
 8004c92:	2305      	movs	r3, #5
 8004c94:	e02c      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004c96:	edd7 7a00 	vldr	s15, [r7]
 8004c9a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004d24 <ISM330DHCX_FIFO_ACC_Set_BDR+0x108>
 8004c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca6:	d801      	bhi.n	8004cac <ISM330DHCX_FIFO_ACC_Set_BDR+0x90>
 8004ca8:	2306      	movs	r3, #6
 8004caa:	e021      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004cac:	edd7 7a00 	vldr	s15, [r7]
 8004cb0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d28 <ISM330DHCX_FIFO_ACC_Set_BDR+0x10c>
 8004cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cbc:	d801      	bhi.n	8004cc2 <ISM330DHCX_FIFO_ACC_Set_BDR+0xa6>
 8004cbe:	2307      	movs	r3, #7
 8004cc0:	e016      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004cc2:	edd7 7a00 	vldr	s15, [r7]
 8004cc6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004d2c <ISM330DHCX_FIFO_ACC_Set_BDR+0x110>
 8004cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd2:	d801      	bhi.n	8004cd8 <ISM330DHCX_FIFO_ACC_Set_BDR+0xbc>
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	e00b      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004cd8:	edd7 7a00 	vldr	s15, [r7]
 8004cdc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004d30 <ISM330DHCX_FIFO_ACC_Set_BDR+0x114>
 8004ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce8:	d801      	bhi.n	8004cee <ISM330DHCX_FIFO_ACC_Set_BDR+0xd2>
 8004cea:	2309      	movs	r3, #9
 8004cec:	e000      	b.n	8004cf0 <ISM330DHCX_FIFO_ACC_Set_BDR+0xd4>
 8004cee:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_XL_BATCHED_AT_12Hz5
 8004cf0:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_XL_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_XL_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_XL_BATCHED_AT_3333Hz
            :                    ISM330DHCX_XL_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3320      	adds	r3, #32
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fa5e 	bl	80061bc <ism330dhcx_fifo_xl_batch_set>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <ISM330DHCX_FIFO_ACC_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e000      	b.n	8004d0e <ISM330DHCX_FIFO_ACC_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	42500000 	.word	0x42500000
 8004d1c:	42d00000 	.word	0x42d00000
 8004d20:	43500000 	.word	0x43500000
 8004d24:	43d08000 	.word	0x43d08000
 8004d28:	44504000 	.word	0x44504000
 8004d2c:	44d06000 	.word	0x44d06000
 8004d30:	45505000 	.word	0x45505000

08004d34 <ISM330DHCX_FIFO_GYRO_Set_BDR>:
  * @param  pObj the device pObj
  * @param  Odr FIFO ODR value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_GYRO_Set_BDR(ISM330DHCX_Object_t *pObj, float Bdr)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_bdr_gy_t new_odr;

  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
            : (Bdr <=   26.0f) ? ISM330DHCX_GY_BATCHED_AT_26Hz
 8004d40:	edd7 7a00 	vldr	s15, [r7]
 8004d44:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d50:	d801      	bhi.n	8004d56 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x22>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e058      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004d56:	edd7 7a00 	vldr	s15, [r7]
 8004d5a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d66:	d801      	bhi.n	8004d6c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x38>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e04d      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004d6c:	edd7 7a00 	vldr	s15, [r7]
 8004d70:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004e30 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xfc>
 8004d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7c:	d801      	bhi.n	8004d82 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x4e>
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e042      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004d82:	edd7 7a00 	vldr	s15, [r7]
 8004d86:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004e34 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x100>
 8004d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	d801      	bhi.n	8004d98 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x64>
 8004d94:	2304      	movs	r3, #4
 8004d96:	e037      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004d98:	edd7 7a00 	vldr	s15, [r7]
 8004d9c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e38 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x104>
 8004da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da8:	d801      	bhi.n	8004dae <ISM330DHCX_FIFO_GYRO_Set_BDR+0x7a>
 8004daa:	2305      	movs	r3, #5
 8004dac:	e02c      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004dae:	edd7 7a00 	vldr	s15, [r7]
 8004db2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004e3c <ISM330DHCX_FIFO_GYRO_Set_BDR+0x108>
 8004db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	d801      	bhi.n	8004dc4 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x90>
 8004dc0:	2306      	movs	r3, #6
 8004dc2:	e021      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004dc4:	edd7 7a00 	vldr	s15, [r7]
 8004dc8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e40 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x10c>
 8004dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	d801      	bhi.n	8004dda <ISM330DHCX_FIFO_GYRO_Set_BDR+0xa6>
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	e016      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004dda:	edd7 7a00 	vldr	s15, [r7]
 8004dde:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004e44 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x110>
 8004de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	d801      	bhi.n	8004df0 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xbc>
 8004dec:	2308      	movs	r3, #8
 8004dee:	e00b      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004df0:	edd7 7a00 	vldr	s15, [r7]
 8004df4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e48 <ISM330DHCX_FIFO_GYRO_Set_BDR+0x114>
 8004df8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e00:	d801      	bhi.n	8004e06 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd2>
 8004e02:	2309      	movs	r3, #9
 8004e04:	e000      	b.n	8004e08 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xd4>
 8004e06:	230a      	movs	r3, #10
  new_odr = (Bdr <=   12.5f) ? ISM330DHCX_GY_BATCHED_AT_12Hz5
 8004e08:	73fb      	strb	r3, [r7, #15]
            : (Bdr <=  833.0f) ? ISM330DHCX_GY_BATCHED_AT_833Hz
            : (Bdr <= 1667.0f) ? ISM330DHCX_GY_BATCHED_AT_1667Hz
            : (Bdr <= 3333.0f) ? ISM330DHCX_GY_BATCHED_AT_3333Hz
            :                    ISM330DHCX_GY_BATCHED_AT_6667Hz;

  if (ism330dhcx_fifo_gy_batch_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3320      	adds	r3, #32
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 f9f8 	bl	8006208 <ism330dhcx_fifo_gy_batch_set>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	e000      	b.n	8004e26 <ISM330DHCX_FIFO_GYRO_Set_BDR+0xf2>
  }

  return ISM330DHCX_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	42500000 	.word	0x42500000
 8004e34:	42d00000 	.word	0x42d00000
 8004e38:	43500000 	.word	0x43500000
 8004e3c:	43d08000 	.word	0x43d08000
 8004e40:	44504000 	.word	0x44504000
 8004e44:	44d06000 	.word	0x44d06000
 8004e48:	45505000 	.word	0x45505000

08004e4c <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>:
  * @param  pObj the device pObj
  * @param  Status FIFO full interrupt on INT1 pin status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_INT1_FIFO_Full(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_reg_t reg;

  if (ism330dhcx_read_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f103 0020 	add.w	r0, r3, #32
 8004e5e:	f107 020c 	add.w	r2, r7, #12
 8004e62:	2301      	movs	r3, #1
 8004e64:	210d      	movs	r1, #13
 8004e66:	f000 fb27 	bl	80054b8 <ism330dhcx_read_reg>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	e017      	b.n	8004ea6 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  reg.int1_ctrl.int1_fifo_full = Status;
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	7b3b      	ldrb	r3, [r7, #12]
 8004e80:	f362 1345 	bfi	r3, r2, #5, #1
 8004e84:	733b      	strb	r3, [r7, #12]

  if (ism330dhcx_write_reg(&(pObj->Ctx), ISM330DHCX_INT1_CTRL, &reg.byte, 1) != ISM330DHCX_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 0020 	add.w	r0, r3, #32
 8004e8c:	f107 020c 	add.w	r2, r7, #12
 8004e90:	2301      	movs	r3, #1
 8004e92:	210d      	movs	r1, #13
 8004e94:	f000 fb28 	bl	80054e8 <ism330dhcx_write_reg>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x58>
  {
    return ISM330DHCX_ERROR;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	e000      	b.n	8004ea6 <ISM330DHCX_FIFO_Set_INT1_FIFO_Full+0x5a>
  }

  return ISM330DHCX_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <ISM330DHCX_FIFO_Set_Watermark_Level>:
  * @param  pObj the device pObj
  * @param  Watermark FIFO watermark level
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Watermark_Level(ISM330DHCX_Object_t *pObj, uint16_t Watermark)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	807b      	strh	r3, [r7, #2]
  if (ism330dhcx_fifo_watermark_set(&(pObj->Ctx), Watermark) != ISM330DHCX_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3320      	adds	r3, #32
 8004ebe:	887a      	ldrh	r2, [r7, #2]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 f91e 	bl	8006104 <ism330dhcx_fifo_watermark_set>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <ISM330DHCX_FIFO_Set_Watermark_Level+0x26>
  {
    return ISM330DHCX_ERROR;
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed2:	e000      	b.n	8004ed6 <ISM330DHCX_FIFO_Set_Watermark_Level+0x28>
  }

  return ISM330DHCX_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <ISM330DHCX_FIFO_Set_Stop_On_Fth>:
  * @param  pObj the device pObj
  * @param  Status FIFO stop on watermark status
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Stop_On_Fth(ISM330DHCX_Object_t *pObj, uint8_t Status)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	70fb      	strb	r3, [r7, #3]
  if (ism330dhcx_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != ISM330DHCX_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3320      	adds	r3, #32
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f001 f93c 	bl	8006170 <ism330dhcx_fifo_stop_on_wtm_set>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x26>
  {
    return ISM330DHCX_ERROR;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	e000      	b.n	8004f06 <ISM330DHCX_FIFO_Set_Stop_On_Fth+0x28>
  }

  return ISM330DHCX_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <ISM330DHCX_FIFO_Set_Mode>:
  * @param  pObj the device pObj
  * @param  Mode FIFO mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Set_Mode(ISM330DHCX_Object_t *pObj, uint8_t Mode)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	460b      	mov	r3, r1
 8004f18:	70fb      	strb	r3, [r7, #3]
  int32_t ret = ISM330DHCX_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]

  /* Verify that the passed parameter contains one of the valid values. */
  switch ((ism330dhcx_fifo_mode_t)Mode)
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b06      	cmp	r3, #6
 8004f22:	bf8c      	ite	hi
 8004f24:	2201      	movhi	r2, #1
 8004f26:	2200      	movls	r2, #0
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	d10b      	bne.n	8004f46 <ISM330DHCX_FIFO_Set_Mode+0x38>
 8004f2e:	2201      	movs	r2, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	f003 035b 	and.w	r3, r3, #91	; 0x5b
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf14      	ite	ne
 8004f3c:	2301      	movne	r3, #1
 8004f3e:	2300      	moveq	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <ISM330DHCX_FIFO_Set_Mode+0x40>
    case ISM330DHCX_BYPASS_TO_STREAM_MODE:
    case ISM330DHCX_STREAM_MODE:
      break;

    default:
      ret = ISM330DHCX_ERROR;
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4a:	60fb      	str	r3, [r7, #12]
      break;
 8004f4c:	e000      	b.n	8004f50 <ISM330DHCX_FIFO_Set_Mode+0x42>
      break;
 8004f4e:	bf00      	nop
  }

  if (ret == ISM330DHCX_ERROR)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d101      	bne.n	8004f5c <ISM330DHCX_FIFO_Set_Mode+0x4e>
  {
    return ret;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	e00d      	b.n	8004f78 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), (ism330dhcx_fifo_mode_t)Mode) != ISM330DHCX_OK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3320      	adds	r3, #32
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 f975 	bl	8006254 <ism330dhcx_fifo_mode_set>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <ISM330DHCX_FIFO_Set_Mode+0x68>
  {
    return ISM330DHCX_ERROR;
 8004f70:	f04f 33ff 	mov.w	r3, #4294967295
 8004f74:	e000      	b.n	8004f78 <ISM330DHCX_FIFO_Set_Mode+0x6a>
  }

  return ret;
 8004f76:	68fb      	ldr	r3, [r7, #12]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <ISM330DHCX_FIFO_Get_Data>:
  * @param  pObj the device pObj
  * @param  Data FIFO raw data array [6]
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data(ISM330DHCX_Object_t *pObj, uint8_t *Data)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_fifo_out_raw_get(&(pObj->Ctx), Data) != ISM330DHCX_OK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	3320      	adds	r3, #32
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fffd 	bl	8005f90 <ism330dhcx_fifo_out_raw_get>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <ISM330DHCX_FIFO_Get_Data+0x22>
  {
    return ISM330DHCX_ERROR;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	e000      	b.n	8004fa4 <ISM330DHCX_FIFO_Get_Data+0x24>
  }

  return ISM330DHCX_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <ISM330DHCX_FIFO_Get_Data_Word>:
  * @param  pObj the device pObj
  * @param  Acceleration FIFO single data
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_FIFO_Get_Data_Word(ISM330DHCX_Object_t *pObj, int16_t *data_raw)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint8_t data[6];

  if (ISM330DHCX_FIFO_Get_Data(pObj, data) != ISM330DHCX_OK)
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ffdf 	bl	8004f80 <ISM330DHCX_FIFO_Get_Data>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <ISM330DHCX_FIFO_Get_Data_Word+0x22>
  {
    return ISM330DHCX_ERROR;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	e01d      	b.n	800500a <ISM330DHCX_FIFO_Get_Data_Word+0x5e>
  }

  data_raw[0] = ((int16_t)data[1] << 8) | data[0];
 8004fce:	7a7b      	ldrb	r3, [r7, #9]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	b21a      	sxth	r2, r3
 8004fd4:	7a3b      	ldrb	r3, [r7, #8]
 8004fd6:	b21b      	sxth	r3, r3
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	b21a      	sxth	r2, r3
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	801a      	strh	r2, [r3, #0]
  data_raw[1] = ((int16_t)data[3] << 8) | data[2];
 8004fe0:	7afb      	ldrb	r3, [r7, #11]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	b219      	sxth	r1, r3
 8004fe6:	7abb      	ldrb	r3, [r7, #10]
 8004fe8:	b21a      	sxth	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	3302      	adds	r3, #2
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	b212      	sxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]
  data_raw[2] = ((int16_t)data[5] << 8) | data[4];
 8004ff4:	7b7b      	ldrb	r3, [r7, #13]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	b219      	sxth	r1, r3
 8004ffa:	7b3b      	ldrb	r3, [r7, #12]
 8004ffc:	b21a      	sxth	r2, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	3304      	adds	r3, #4
 8005002:	430a      	orrs	r2, r1
 8005004:	b212      	sxth	r2, r2
 8005006:	801a      	strh	r2, [r3, #0]

  return ISM330DHCX_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8005020:	edd7 7a00 	vldr	s15, [r7]
 8005024:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005030:	d801      	bhi.n	8005036 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005032:	2301      	movs	r3, #1
 8005034:	e058      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005036:	edd7 7a00 	vldr	s15, [r7]
 800503a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800503e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	d801      	bhi.n	800504c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005048:	2302      	movs	r3, #2
 800504a:	e04d      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800504c:	edd7 7a00 	vldr	s15, [r7]
 8005050:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005110 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8005054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505c:	d801      	bhi.n	8005062 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800505e:	2303      	movs	r3, #3
 8005060:	e042      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005062:	edd7 7a00 	vldr	s15, [r7]
 8005066:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005114 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 800506a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	d801      	bhi.n	8005078 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005074:	2304      	movs	r3, #4
 8005076:	e037      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8005078:	edd7 7a00 	vldr	s15, [r7]
 800507c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005118 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8005080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005088:	d801      	bhi.n	800508e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800508a:	2305      	movs	r3, #5
 800508c:	e02c      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800508e:	edd7 7a00 	vldr	s15, [r7]
 8005092:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800511c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8005096:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	d801      	bhi.n	80050a4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 80050a0:	2306      	movs	r3, #6
 80050a2:	e021      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050a4:	edd7 7a00 	vldr	s15, [r7]
 80050a8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005120 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80050ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b4:	d801      	bhi.n	80050ba <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80050b6:	2307      	movs	r3, #7
 80050b8:	e016      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050ba:	edd7 7a00 	vldr	s15, [r7]
 80050be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005124 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 80050c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ca:	d801      	bhi.n	80050d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80050cc:	2308      	movs	r3, #8
 80050ce:	e00b      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050d0:	edd7 7a00 	vldr	s15, [r7]
 80050d4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005128 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80050d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e0:	d801      	bhi.n	80050e6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80050e2:	2309      	movs	r3, #9
 80050e4:	e000      	b.n	80050e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80050e6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80050e8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3320      	adds	r3, #32
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fa6e 	bl	80055d4 <ism330dhcx_xl_data_rate_set>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80050fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005102:	e000      	b.n	8005106 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	42500000 	.word	0x42500000
 8005114:	42d00000 	.word	0x42d00000
 8005118:	43500000 	.word	0x43500000
 800511c:	43d00000 	.word	0x43d00000
 8005120:	44504000 	.word	0x44504000
 8005124:	44d04000 	.word	0x44d04000
 8005128:	45504000 	.word	0x45504000

0800512c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8005138:	edd7 7a00 	vldr	s15, [r7]
 800513c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005148:	d801      	bhi.n	800514e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 800514a:	2301      	movs	r3, #1
 800514c:	e058      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800514e:	edd7 7a00 	vldr	s15, [r7]
 8005152:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800515a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800515e:	d801      	bhi.n	8005164 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005160:	2302      	movs	r3, #2
 8005162:	e04d      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005164:	edd7 7a00 	vldr	s15, [r7]
 8005168:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005214 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800516c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005174:	d801      	bhi.n	800517a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005176:	2303      	movs	r3, #3
 8005178:	e042      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800517a:	edd7 7a00 	vldr	s15, [r7]
 800517e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005218 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8005182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	d801      	bhi.n	8005190 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 800518c:	2304      	movs	r3, #4
 800518e:	e037      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005190:	edd7 7a00 	vldr	s15, [r7]
 8005194:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800521c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8005198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a0:	d801      	bhi.n	80051a6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80051a2:	2305      	movs	r3, #5
 80051a4:	e02c      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051a6:	edd7 7a00 	vldr	s15, [r7]
 80051aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005220 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80051ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	d801      	bhi.n	80051bc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 80051b8:	2306      	movs	r3, #6
 80051ba:	e021      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051bc:	edd7 7a00 	vldr	s15, [r7]
 80051c0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005224 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80051c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051cc:	d801      	bhi.n	80051d2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80051ce:	2307      	movs	r3, #7
 80051d0:	e016      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051d2:	edd7 7a00 	vldr	s15, [r7]
 80051d6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005228 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80051da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e2:	d801      	bhi.n	80051e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80051e4:	2308      	movs	r3, #8
 80051e6:	e00b      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051e8:	edd7 7a00 	vldr	s15, [r7]
 80051ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800522c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80051f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f8:	d801      	bhi.n	80051fe <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80051fa:	2309      	movs	r3, #9
 80051fc:	e000      	b.n	8005200 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80051fe:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	42500000 	.word	0x42500000
 8005218:	42d00000 	.word	0x42d00000
 800521c:	43500000 	.word	0x43500000
 8005220:	43d00000 	.word	0x43d00000
 8005224:	44504000 	.word	0x44504000
 8005228:	44d04000 	.word	0x44d04000
 800522c:	45504000 	.word	0x45504000

08005230 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800523c:	edd7 7a00 	vldr	s15, [r7]
 8005240:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524c:	d801      	bhi.n	8005252 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800524e:	2301      	movs	r3, #1
 8005250:	e058      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005252:	edd7 7a00 	vldr	s15, [r7]
 8005256:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800525a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	d801      	bhi.n	8005268 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005264:	2302      	movs	r3, #2
 8005266:	e04d      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005268:	edd7 7a00 	vldr	s15, [r7]
 800526c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800532c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	d801      	bhi.n	800527e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800527a:	2303      	movs	r3, #3
 800527c:	e042      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800527e:	edd7 7a00 	vldr	s15, [r7]
 8005282:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005330 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	d801      	bhi.n	8005294 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005290:	2304      	movs	r3, #4
 8005292:	e037      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005294:	edd7 7a00 	vldr	s15, [r7]
 8005298:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005334 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800529c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a4:	d801      	bhi.n	80052aa <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80052a6:	2305      	movs	r3, #5
 80052a8:	e02c      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052aa:	edd7 7a00 	vldr	s15, [r7]
 80052ae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005338 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80052b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ba:	d801      	bhi.n	80052c0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80052bc:	2306      	movs	r3, #6
 80052be:	e021      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052c0:	edd7 7a00 	vldr	s15, [r7]
 80052c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800533c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80052c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	d801      	bhi.n	80052d6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80052d2:	2307      	movs	r3, #7
 80052d4:	e016      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052d6:	edd7 7a00 	vldr	s15, [r7]
 80052da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005340 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80052de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e6:	d801      	bhi.n	80052ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80052e8:	2308      	movs	r3, #8
 80052ea:	e00b      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80052ec:	edd7 7a00 	vldr	s15, [r7]
 80052f0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005344 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80052f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	d801      	bhi.n	8005302 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80052fe:	2309      	movs	r3, #9
 8005300:	e000      	b.n	8005304 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005302:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8005304:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3320      	adds	r3, #32
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fbb0 	bl	8005a74 <ism330dhcx_gy_data_rate_set>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295
 800531e:	e000      	b.n	8005322 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	42500000 	.word	0x42500000
 8005330:	42d00000 	.word	0x42d00000
 8005334:	43500000 	.word	0x43500000
 8005338:	43d00000 	.word	0x43d00000
 800533c:	44504000 	.word	0x44504000
 8005340:	44d04000 	.word	0x44d04000
 8005344:	45504000 	.word	0x45504000

08005348 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8005354:	edd7 7a00 	vldr	s15, [r7]
 8005358:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800535c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005364:	d801      	bhi.n	800536a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005366:	2301      	movs	r3, #1
 8005368:	e058      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800536a:	edd7 7a00 	vldr	s15, [r7]
 800536e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	d801      	bhi.n	8005380 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800537c:	2302      	movs	r3, #2
 800537e:	e04d      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005380:	edd7 7a00 	vldr	s15, [r7]
 8005384:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005430 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800538c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005390:	d801      	bhi.n	8005396 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005392:	2303      	movs	r3, #3
 8005394:	e042      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005396:	edd7 7a00 	vldr	s15, [r7]
 800539a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005434 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800539e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	d801      	bhi.n	80053ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80053a8:	2304      	movs	r3, #4
 80053aa:	e037      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053ac:	edd7 7a00 	vldr	s15, [r7]
 80053b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005438 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80053b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053bc:	d801      	bhi.n	80053c2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80053be:	2305      	movs	r3, #5
 80053c0:	e02c      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053c2:	edd7 7a00 	vldr	s15, [r7]
 80053c6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800543c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80053ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	d801      	bhi.n	80053d8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80053d4:	2306      	movs	r3, #6
 80053d6:	e021      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053d8:	edd7 7a00 	vldr	s15, [r7]
 80053dc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005440 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80053e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e8:	d801      	bhi.n	80053ee <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80053ea:	2307      	movs	r3, #7
 80053ec:	e016      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80053ee:	edd7 7a00 	vldr	s15, [r7]
 80053f2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005444 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80053f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	d801      	bhi.n	8005404 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005400:	2308      	movs	r3, #8
 8005402:	e00b      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005404:	edd7 7a00 	vldr	s15, [r7]
 8005408:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005448 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800540c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005414:	d801      	bhi.n	800541a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005416:	2309      	movs	r3, #9
 8005418:	e000      	b.n	800541c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800541a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	42500000 	.word	0x42500000
 8005434:	42d00000 	.word	0x42d00000
 8005438:	43500000 	.word	0x43500000
 800543c:	43d00000 	.word	0x43d00000
 8005440:	44504000 	.word	0x44504000
 8005444:	44d04000 	.word	0x44d04000
 8005448:	45504000 	.word	0x45504000

0800544c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	461a      	mov	r2, r3
 8005458:	460b      	mov	r3, r1
 800545a:	72fb      	strb	r3, [r7, #11]
 800545c:	4613      	mov	r3, r2
 800545e:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	695c      	ldr	r4, [r3, #20]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	7b1b      	ldrb	r3, [r3, #12]
 800546c:	b298      	uxth	r0, r3
 800546e:	7afb      	ldrb	r3, [r7, #11]
 8005470:	b299      	uxth	r1, r3
 8005472:	893b      	ldrh	r3, [r7, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	47a0      	blx	r4
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	bd90      	pop	{r4, r7, pc}

08005482 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005482:	b590      	push	{r4, r7, lr}
 8005484:	b087      	sub	sp, #28
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	461a      	mov	r2, r3
 800548e:	460b      	mov	r3, r1
 8005490:	72fb      	strb	r3, [r7, #11]
 8005492:	4613      	mov	r3, r2
 8005494:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	691c      	ldr	r4, [r3, #16]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	7b1b      	ldrb	r3, [r3, #12]
 80054a2:	b298      	uxth	r0, r3
 80054a4:	7afb      	ldrb	r3, [r7, #11]
 80054a6:	b299      	uxth	r1, r3
 80054a8:	893b      	ldrh	r3, [r7, #8]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	47a0      	blx	r4
 80054ae:	4603      	mov	r3, r0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd90      	pop	{r4, r7, pc}

080054b8 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	461a      	mov	r2, r3
 80054c4:	460b      	mov	r3, r1
 80054c6:	72fb      	strb	r3, [r7, #11]
 80054c8:	4613      	mov	r3, r2
 80054ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685c      	ldr	r4, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68d8      	ldr	r0, [r3, #12]
 80054d4:	893b      	ldrh	r3, [r7, #8]
 80054d6:	7af9      	ldrb	r1, [r7, #11]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	47a0      	blx	r4
 80054dc:	6178      	str	r0, [r7, #20]

  return ret;
 80054de:	697b      	ldr	r3, [r7, #20]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd90      	pop	{r4, r7, pc}

080054e8 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	461a      	mov	r2, r3
 80054f4:	460b      	mov	r3, r1
 80054f6:	72fb      	strb	r3, [r7, #11]
 80054f8:	4613      	mov	r3, r2
 80054fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681c      	ldr	r4, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68d8      	ldr	r0, [r3, #12]
 8005504:	893b      	ldrh	r3, [r7, #8]
 8005506:	7af9      	ldrb	r1, [r7, #11]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	47a0      	blx	r4
 800550c:	6178      	str	r0, [r7, #20]

  return ret;
 800550e:	697b      	ldr	r3, [r7, #20]
}
 8005510:	4618      	mov	r0, r3
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005524:	f107 0208 	add.w	r2, r7, #8
 8005528:	2301      	movs	r3, #1
 800552a:	2110      	movs	r1, #16
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ffc3 	bl	80054b8 <ism330dhcx_read_reg>
 8005532:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	b2da      	uxtb	r2, r3
 8005542:	7a3b      	ldrb	r3, [r7, #8]
 8005544:	f362 0383 	bfi	r3, r2, #2, #2
 8005548:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800554a:	f107 0208 	add.w	r2, r7, #8
 800554e:	2301      	movs	r3, #1
 8005550:	2110      	movs	r1, #16
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ffc8 	bl	80054e8 <ism330dhcx_write_reg>
 8005558:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800555a:	68fb      	ldr	r3, [r7, #12]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800556e:	f107 0208 	add.w	r2, r7, #8
 8005572:	2301      	movs	r3, #1
 8005574:	2110      	movs	r1, #16
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff ff9e 	bl	80054b8 <ism330dhcx_read_reg>
 800557c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 800557e:	7a3b      	ldrb	r3, [r7, #8]
 8005580:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b03      	cmp	r3, #3
 8005588:	d81a      	bhi.n	80055c0 <ism330dhcx_xl_full_scale_get+0x5c>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <ism330dhcx_xl_full_scale_get+0x2c>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055a9 	.word	0x080055a9
 8005598:	080055b1 	.word	0x080055b1
 800559c:	080055b9 	.word	0x080055b9
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
      break;
 80055a6:	e00f      	b.n	80055c8 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
      break;
 80055ae:	e00b      	b.n	80055c8 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
      break;
 80055b6:	e007      	b.n	80055c8 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2203      	movs	r2, #3
 80055bc:	701a      	strb	r2, [r3, #0]
      break;
 80055be:	e003      	b.n	80055c8 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
      break;
 80055c6:	bf00      	nop
  }

  return ret;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop

080055d4 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80055e4:	f107 030c 	add.w	r3, r7, #12
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fe58 	bl	80062a0 <ism330dhcx_fsm_enable_get>
 80055f0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f040 80c4 	bne.w	8005782 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80055fa:	7b3b      	ldrb	r3, [r7, #12]
 80055fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005600:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005602:	7b3b      	ldrb	r3, [r7, #12]
 8005604:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005608:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800560a:	4313      	orrs	r3, r2
 800560c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800560e:	7b3b      	ldrb	r3, [r7, #12]
 8005610:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005614:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005616:	4313      	orrs	r3, r2
 8005618:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800561a:	7b3b      	ldrb	r3, [r7, #12]
 800561c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005620:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005622:	4313      	orrs	r3, r2
 8005624:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005626:	7b3b      	ldrb	r3, [r7, #12]
 8005628:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800562c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800562e:	4313      	orrs	r3, r2
 8005630:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005632:	7b3b      	ldrb	r3, [r7, #12]
 8005634:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005638:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800563a:	4313      	orrs	r3, r2
 800563c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800563e:	7b3b      	ldrb	r3, [r7, #12]
 8005640:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005644:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005646:	4313      	orrs	r3, r2
 8005648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800564a:	7b3b      	ldrb	r3, [r7, #12]
 800564c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005650:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005652:	4313      	orrs	r3, r2
 8005654:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005656:	7b7b      	ldrb	r3, [r7, #13]
 8005658:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800565c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800565e:	4313      	orrs	r3, r2
 8005660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005662:	7b7b      	ldrb	r3, [r7, #13]
 8005664:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005668:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800566a:	4313      	orrs	r3, r2
 800566c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800566e:	7b7b      	ldrb	r3, [r7, #13]
 8005670:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005674:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005676:	4313      	orrs	r3, r2
 8005678:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800567a:	7b7b      	ldrb	r3, [r7, #13]
 800567c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005680:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005682:	4313      	orrs	r3, r2
 8005684:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005686:	7b7b      	ldrb	r3, [r7, #13]
 8005688:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800568c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800568e:	4313      	orrs	r3, r2
 8005690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005692:	7b7b      	ldrb	r3, [r7, #13]
 8005694:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005698:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800569a:	4313      	orrs	r3, r2
 800569c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800569e:	7b7b      	ldrb	r3, [r7, #13]
 80056a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80056a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80056aa:	7b7b      	ldrb	r3, [r7, #13]
 80056ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80056b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d163      	bne.n	8005782 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80056ba:	f107 030b 	add.w	r3, r7, #11
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fe19 	bl	80062f8 <ism330dhcx_fsm_data_rate_get>
 80056c6:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d159      	bne.n	8005782 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d853      	bhi.n	800577c <ism330dhcx_xl_data_rate_set+0x1a8>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <ism330dhcx_xl_data_rate_set+0x108>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	080056ed 	.word	0x080056ed
 80056e0:	080056ff 	.word	0x080056ff
 80056e4:	0800571d 	.word	0x0800571d
 80056e8:	08005747 	.word	0x08005747
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80056f2:	2301      	movs	r3, #1
 80056f4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80056f6:	e045      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	75fb      	strb	r3, [r7, #23]
            break;
 80056fc:	e042      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005704:	2302      	movs	r3, #2
 8005706:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005708:	e03c      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d102      	bne.n	8005716 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005710:	2302      	movs	r3, #2
 8005712:	75fb      	strb	r3, [r7, #23]
            break;
 8005714:	e036      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	75fb      	strb	r3, [r7, #23]
            break;
 800571a:	e033      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005722:	2303      	movs	r3, #3
 8005724:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005726:	e02d      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d102      	bne.n	8005734 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800572e:	2303      	movs	r3, #3
 8005730:	75fb      	strb	r3, [r7, #23]
            break;
 8005732:	e027      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d102      	bne.n	8005740 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800573a:	2303      	movs	r3, #3
 800573c:	75fb      	strb	r3, [r7, #23]
            break;
 800573e:	e021      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	75fb      	strb	r3, [r7, #23]
            break;
 8005744:	e01e      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d102      	bne.n	8005752 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800574c:	2304      	movs	r3, #4
 800574e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005750:	e018      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d102      	bne.n	800575e <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005758:	2304      	movs	r3, #4
 800575a:	75fb      	strb	r3, [r7, #23]
            break;
 800575c:	e012      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	2b02      	cmp	r3, #2
 8005762:	d102      	bne.n	800576a <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005764:	2304      	movs	r3, #4
 8005766:	75fb      	strb	r3, [r7, #23]
            break;
 8005768:	e00c      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d102      	bne.n	8005776 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005770:	2304      	movs	r3, #4
 8005772:	75fb      	strb	r3, [r7, #23]
            break;
 8005774:	e006      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	75fb      	strb	r3, [r7, #23]
            break;
 800577a:	e003      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	75fb      	strb	r3, [r7, #23]
            break;
 8005780:	e000      	b.n	8005784 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8005782:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d16d      	bne.n	800586a <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800578e:	f107 030a 	add.w	r3, r7, #10
 8005792:	4619      	mov	r1, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fdf7 	bl	8006388 <ism330dhcx_mlc_get>
 800579a:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800579c:	7abb      	ldrb	r3, [r7, #10]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d163      	bne.n	800586a <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80057a2:	f107 0309 	add.w	r3, r7, #9
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fe17 	bl	80063dc <ism330dhcx_mlc_data_rate_get>
 80057ae:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d159      	bne.n	800586a <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 80057b6:	7a7b      	ldrb	r3, [r7, #9]
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d853      	bhi.n	8005864 <ism330dhcx_xl_data_rate_set+0x290>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <ism330dhcx_xl_data_rate_set+0x1f0>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e7 	.word	0x080057e7
 80057cc:	08005805 	.word	0x08005805
 80057d0:	0800582f 	.word	0x0800582f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80057de:	e045      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	75fb      	strb	r3, [r7, #23]
            break;
 80057e4:	e042      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80057ec:	2302      	movs	r3, #2
 80057ee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80057f0:	e03c      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d102      	bne.n	80057fe <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80057f8:	2302      	movs	r3, #2
 80057fa:	75fb      	strb	r3, [r7, #23]
            break;
 80057fc:	e036      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	75fb      	strb	r3, [r7, #23]
            break;
 8005802:	e033      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800580a:	2303      	movs	r3, #3
 800580c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800580e:	e02d      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005816:	2303      	movs	r3, #3
 8005818:	75fb      	strb	r3, [r7, #23]
            break;
 800581a:	e027      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d102      	bne.n	8005828 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005822:	2303      	movs	r3, #3
 8005824:	75fb      	strb	r3, [r7, #23]
            break;
 8005826:	e021      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	75fb      	strb	r3, [r7, #23]
            break;
 800582c:	e01e      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005834:	2304      	movs	r3, #4
 8005836:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8005838:	e018      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005840:	2304      	movs	r3, #4
 8005842:	75fb      	strb	r3, [r7, #23]
            break;
 8005844:	e012      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d102      	bne.n	8005852 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800584c:	2304      	movs	r3, #4
 800584e:	75fb      	strb	r3, [r7, #23]
            break;
 8005850:	e00c      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d102      	bne.n	800585e <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005858:	2304      	movs	r3, #4
 800585a:	75fb      	strb	r3, [r7, #23]
            break;
 800585c:	e006      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	75fb      	strb	r3, [r7, #23]
            break;
 8005862:	e003      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	75fb      	strb	r3, [r7, #23]
            break;
 8005868:	e000      	b.n	800586c <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 800586a:	bf00      	nop
    }
  }

  if (ret == 0)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005872:	f107 0208 	add.w	r2, r7, #8
 8005876:	2301      	movs	r3, #1
 8005878:	2110      	movs	r1, #16
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff fe1c 	bl	80054b8 <ism330dhcx_read_reg>
 8005880:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10f      	bne.n	80058a8 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	b2da      	uxtb	r2, r3
 8005890:	7a3b      	ldrb	r3, [r7, #8]
 8005892:	f362 1307 	bfi	r3, r2, #4, #4
 8005896:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005898:	f107 0208 	add.w	r2, r7, #8
 800589c:	2301      	movs	r3, #1
 800589e:	2110      	movs	r1, #16
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fe21 	bl	80054e8 <ism330dhcx_write_reg>
 80058a6:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80058a8:	693b      	ldr	r3, [r7, #16]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop

080058b4 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80058be:	f107 0208 	add.w	r2, r7, #8
 80058c2:	2301      	movs	r3, #1
 80058c4:	2110      	movs	r1, #16
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fdf6 	bl	80054b8 <ism330dhcx_read_reg>
 80058cc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 80058ce:	7a3b      	ldrb	r3, [r7, #8]
 80058d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b0b      	cmp	r3, #11
 80058d8:	d84a      	bhi.n	8005970 <ism330dhcx_xl_data_rate_get+0xbc>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <ism330dhcx_xl_data_rate_get+0x2c>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005911 	.word	0x08005911
 80058e4:	08005919 	.word	0x08005919
 80058e8:	08005921 	.word	0x08005921
 80058ec:	08005929 	.word	0x08005929
 80058f0:	08005931 	.word	0x08005931
 80058f4:	08005939 	.word	0x08005939
 80058f8:	08005941 	.word	0x08005941
 80058fc:	08005949 	.word	0x08005949
 8005900:	08005951 	.word	0x08005951
 8005904:	08005959 	.word	0x08005959
 8005908:	08005961 	.word	0x08005961
 800590c:	08005969 	.word	0x08005969
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	701a      	strb	r2, [r3, #0]
      break;
 8005916:	e02f      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
      break;
 800591e:	e02b      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2202      	movs	r2, #2
 8005924:	701a      	strb	r2, [r3, #0]
      break;
 8005926:	e027      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2203      	movs	r2, #3
 800592c:	701a      	strb	r2, [r3, #0]
      break;
 800592e:	e023      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2204      	movs	r2, #4
 8005934:	701a      	strb	r2, [r3, #0]
      break;
 8005936:	e01f      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2205      	movs	r2, #5
 800593c:	701a      	strb	r2, [r3, #0]
      break;
 800593e:	e01b      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2206      	movs	r2, #6
 8005944:	701a      	strb	r2, [r3, #0]
      break;
 8005946:	e017      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2207      	movs	r2, #7
 800594c:	701a      	strb	r2, [r3, #0]
      break;
 800594e:	e013      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2208      	movs	r2, #8
 8005954:	701a      	strb	r2, [r3, #0]
      break;
 8005956:	e00f      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2209      	movs	r2, #9
 800595c:	701a      	strb	r2, [r3, #0]
      break;
 800595e:	e00b      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	220a      	movs	r2, #10
 8005964:	701a      	strb	r2, [r3, #0]
      break;
 8005966:	e007      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	220b      	movs	r2, #11
 800596c:	701a      	strb	r2, [r3, #0]
      break;
 800596e:	e003      	b.n	8005978 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
      break;
 8005976:	bf00      	nop
  }

  return ret;
 8005978:	68fb      	ldr	r3, [r7, #12]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop

08005984 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005990:	f107 0208 	add.w	r2, r7, #8
 8005994:	2301      	movs	r3, #1
 8005996:	2111      	movs	r1, #17
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff fd8d 	bl	80054b8 <ism330dhcx_read_reg>
 800599e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10f      	bne.n	80059c6 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	7a3b      	ldrb	r3, [r7, #8]
 80059b0:	f362 0303 	bfi	r3, r2, #0, #4
 80059b4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80059b6:	f107 0208 	add.w	r2, r7, #8
 80059ba:	2301      	movs	r3, #1
 80059bc:	2111      	movs	r1, #17
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fd92 	bl	80054e8 <ism330dhcx_write_reg>
 80059c4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80059c6:	68fb      	ldr	r3, [r7, #12]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80059da:	f107 0208 	add.w	r2, r7, #8
 80059de:	2301      	movs	r3, #1
 80059e0:	2111      	movs	r1, #17
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fd68 	bl	80054b8 <ism330dhcx_read_reg>
 80059e8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 80059ea:	7a3b      	ldrb	r3, [r7, #8]
 80059ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d834      	bhi.n	8005a60 <ism330dhcx_gy_full_scale_get+0x90>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <ism330dhcx_gy_full_scale_get+0x2c>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a39 	.word	0x08005a39
 8005a00:	08005a59 	.word	0x08005a59
 8005a04:	08005a31 	.word	0x08005a31
 8005a08:	08005a61 	.word	0x08005a61
 8005a0c:	08005a41 	.word	0x08005a41
 8005a10:	08005a61 	.word	0x08005a61
 8005a14:	08005a61 	.word	0x08005a61
 8005a18:	08005a61 	.word	0x08005a61
 8005a1c:	08005a49 	.word	0x08005a49
 8005a20:	08005a61 	.word	0x08005a61
 8005a24:	08005a61 	.word	0x08005a61
 8005a28:	08005a61 	.word	0x08005a61
 8005a2c:	08005a51 	.word	0x08005a51
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2202      	movs	r2, #2
 8005a34:	701a      	strb	r2, [r3, #0]
      break;
 8005a36:	e017      	b.n	8005a68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
      break;
 8005a3e:	e013      	b.n	8005a68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2204      	movs	r2, #4
 8005a44:	701a      	strb	r2, [r3, #0]
      break;
 8005a46:	e00f      	b.n	8005a68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2208      	movs	r2, #8
 8005a4c:	701a      	strb	r2, [r3, #0]
      break;
 8005a4e:	e00b      	b.n	8005a68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	220c      	movs	r2, #12
 8005a54:	701a      	strb	r2, [r3, #0]
      break;
 8005a56:	e007      	b.n	8005a68 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
      break;
 8005a5e:	e003      	b.n	8005a68 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2202      	movs	r2, #2
 8005a64:	701a      	strb	r2, [r3, #0]
      break;
 8005a66:	bf00      	nop
  }

  return ret;
 8005a68:	68fb      	ldr	r3, [r7, #12]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop

08005a74 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fc08 	bl	80062a0 <ism330dhcx_fsm_enable_get>
 8005a90:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f040 80c4 	bne.w	8005c22 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005a9a:	7b3b      	ldrb	r3, [r7, #12]
 8005a9c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005aa0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005aa2:	7b3b      	ldrb	r3, [r7, #12]
 8005aa4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005aa8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005aae:	7b3b      	ldrb	r3, [r7, #12]
 8005ab0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ab4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005aba:	7b3b      	ldrb	r3, [r7, #12]
 8005abc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005ac0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005ac6:	7b3b      	ldrb	r3, [r7, #12]
 8005ac8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005acc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ad2:	7b3b      	ldrb	r3, [r7, #12]
 8005ad4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005ad8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005ade:	7b3b      	ldrb	r3, [r7, #12]
 8005ae0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005ae4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005aea:	7b3b      	ldrb	r3, [r7, #12]
 8005aec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005af0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005af6:	7b7b      	ldrb	r3, [r7, #13]
 8005af8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005afc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8005afe:	4313      	orrs	r3, r2
 8005b00:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005b02:	7b7b      	ldrb	r3, [r7, #13]
 8005b04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005b08:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005b0e:	7b7b      	ldrb	r3, [r7, #13]
 8005b10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005b14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8005b16:	4313      	orrs	r3, r2
 8005b18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005b1a:	7b7b      	ldrb	r3, [r7, #13]
 8005b1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b20:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8005b22:	4313      	orrs	r3, r2
 8005b24:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005b26:	7b7b      	ldrb	r3, [r7, #13]
 8005b28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005b2c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005b32:	7b7b      	ldrb	r3, [r7, #13]
 8005b34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005b38:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005b3e:	7b7b      	ldrb	r3, [r7, #13]
 8005b40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005b44:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8005b46:	4313      	orrs	r3, r2
 8005b48:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8005b4a:	7b7b      	ldrb	r3, [r7, #13]
 8005b4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b50:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8005b52:	4313      	orrs	r3, r2
 8005b54:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d163      	bne.n	8005c22 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005b5a:	f107 030b 	add.w	r3, r7, #11
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fbc9 	bl	80062f8 <ism330dhcx_fsm_data_rate_get>
 8005b66:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d159      	bne.n	8005c22 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d853      	bhi.n	8005c1c <ism330dhcx_gy_data_rate_set+0x1a8>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <ism330dhcx_gy_data_rate_set+0x108>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b9f 	.word	0x08005b9f
 8005b84:	08005bbd 	.word	0x08005bbd
 8005b88:	08005be7 	.word	0x08005be7
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005b92:	2301      	movs	r3, #1
 8005b94:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005b96:	e045      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b9c:	e042      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005b9e:	78fb      	ldrb	r3, [r7, #3]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005ba8:	e03c      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005baa:	78fb      	ldrb	r3, [r7, #3]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d102      	bne.n	8005bb6 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	75fb      	strb	r3, [r7, #23]
            break;
 8005bb4:	e036      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	75fb      	strb	r3, [r7, #23]
            break;
 8005bba:	e033      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005bc6:	e02d      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d102      	bne.n	8005bd4 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	75fb      	strb	r3, [r7, #23]
            break;
 8005bd2:	e027      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d102      	bne.n	8005be0 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	75fb      	strb	r3, [r7, #23]
            break;
 8005bde:	e021      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	75fb      	strb	r3, [r7, #23]
            break;
 8005be4:	e01e      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d102      	bne.n	8005bf2 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005bec:	2304      	movs	r3, #4
 8005bee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005bf0:	e018      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d102      	bne.n	8005bfe <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	75fb      	strb	r3, [r7, #23]
            break;
 8005bfc:	e012      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d102      	bne.n	8005c0a <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005c04:	2304      	movs	r3, #4
 8005c06:	75fb      	strb	r3, [r7, #23]
            break;
 8005c08:	e00c      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d102      	bne.n	8005c16 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005c10:	2304      	movs	r3, #4
 8005c12:	75fb      	strb	r3, [r7, #23]
            break;
 8005c14:	e006      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	75fb      	strb	r3, [r7, #23]
            break;
 8005c1a:	e003      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c20:	e000      	b.n	8005c24 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8005c22:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005c24:	2300      	movs	r3, #0
 8005c26:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d16d      	bne.n	8005d0a <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005c2e:	f107 030a 	add.w	r3, r7, #10
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fba7 	bl	8006388 <ism330dhcx_mlc_get>
 8005c3a:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8005c3c:	7abb      	ldrb	r3, [r7, #10]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d163      	bne.n	8005d0a <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005c42:	f107 0309 	add.w	r3, r7, #9
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fbc7 	bl	80063dc <ism330dhcx_mlc_data_rate_get>
 8005c4e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d159      	bne.n	8005d0a <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8005c56:	7a7b      	ldrb	r3, [r7, #9]
 8005c58:	2b03      	cmp	r3, #3
 8005c5a:	d853      	bhi.n	8005d04 <ism330dhcx_gy_data_rate_set+0x290>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <ism330dhcx_gy_data_rate_set+0x1f0>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c75 	.word	0x08005c75
 8005c68:	08005c87 	.word	0x08005c87
 8005c6c:	08005ca5 	.word	0x08005ca5
 8005c70:	08005ccf 	.word	0x08005ccf
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d102      	bne.n	8005c80 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005c7e:	e045      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	75fb      	strb	r3, [r7, #23]
            break;
 8005c84:	e042      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005c90:	e03c      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d102      	bne.n	8005c9e <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	75fb      	strb	r3, [r7, #23]
            break;
 8005c9c:	e036      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	75fb      	strb	r3, [r7, #23]
            break;
 8005ca2:	e033      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005caa:	2303      	movs	r3, #3
 8005cac:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005cae:	e02d      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	75fb      	strb	r3, [r7, #23]
            break;
 8005cba:	e027      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d102      	bne.n	8005cc8 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8005cc6:	e021      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	75fb      	strb	r3, [r7, #23]
            break;
 8005ccc:	e01e      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8005cd8:	e018      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d102      	bne.n	8005ce6 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ce4:	e012      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d102      	bne.n	8005cf2 <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005cec:	2304      	movs	r3, #4
 8005cee:	75fb      	strb	r3, [r7, #23]
            break;
 8005cf0:	e00c      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d102      	bne.n	8005cfe <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	75fb      	strb	r3, [r7, #23]
            break;
 8005cfc:	e006      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	75fb      	strb	r3, [r7, #23]
            break;
 8005d02:	e003      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	75fb      	strb	r3, [r7, #23]
            break;
 8005d08:	e000      	b.n	8005d0c <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8005d0a:	bf00      	nop
    }
  }

  if (ret == 0)
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005d12:	f107 0208 	add.w	r2, r7, #8
 8005d16:	2301      	movs	r3, #1
 8005d18:	2111      	movs	r1, #17
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fbcc 	bl	80054b8 <ism330dhcx_read_reg>
 8005d20:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10f      	bne.n	8005d48 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	7a3b      	ldrb	r3, [r7, #8]
 8005d32:	f362 1307 	bfi	r3, r2, #4, #4
 8005d36:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8005d38:	f107 0208 	add.w	r2, r7, #8
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	2111      	movs	r1, #17
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff fbd1 	bl	80054e8 <ism330dhcx_write_reg>
 8005d46:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005d48:	693b      	ldr	r3, [r7, #16]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop

08005d54 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8005d5e:	f107 0208 	add.w	r2, r7, #8
 8005d62:	2301      	movs	r3, #1
 8005d64:	2111      	movs	r1, #17
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fba6 	bl	80054b8 <ism330dhcx_read_reg>
 8005d6c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8005d6e:	7a3b      	ldrb	r3, [r7, #8]
 8005d70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b0a      	cmp	r3, #10
 8005d78:	d844      	bhi.n	8005e04 <ism330dhcx_gy_data_rate_get+0xb0>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <ism330dhcx_gy_data_rate_get+0x2c>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005dad 	.word	0x08005dad
 8005d84:	08005db5 	.word	0x08005db5
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005dc5 	.word	0x08005dc5
 8005d90:	08005dcd 	.word	0x08005dcd
 8005d94:	08005dd5 	.word	0x08005dd5
 8005d98:	08005ddd 	.word	0x08005ddd
 8005d9c:	08005de5 	.word	0x08005de5
 8005da0:	08005ded 	.word	0x08005ded
 8005da4:	08005df5 	.word	0x08005df5
 8005da8:	08005dfd 	.word	0x08005dfd
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
      break;
 8005db2:	e02b      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
      break;
 8005dba:	e027      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	701a      	strb	r2, [r3, #0]
      break;
 8005dc2:	e023      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	701a      	strb	r2, [r3, #0]
      break;
 8005dca:	e01f      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	701a      	strb	r2, [r3, #0]
      break;
 8005dd2:	e01b      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2205      	movs	r2, #5
 8005dd8:	701a      	strb	r2, [r3, #0]
      break;
 8005dda:	e017      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2206      	movs	r2, #6
 8005de0:	701a      	strb	r2, [r3, #0]
      break;
 8005de2:	e013      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2207      	movs	r2, #7
 8005de8:	701a      	strb	r2, [r3, #0]
      break;
 8005dea:	e00f      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2208      	movs	r2, #8
 8005df0:	701a      	strb	r2, [r3, #0]
      break;
 8005df2:	e00b      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2209      	movs	r2, #9
 8005df8:	701a      	strb	r2, [r3, #0]
      break;
 8005dfa:	e007      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	220a      	movs	r2, #10
 8005e00:	701a      	strb	r2, [r3, #0]
      break;
 8005e02:	e003      	b.n	8005e0c <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
      break;
 8005e0a:	bf00      	nop
  }

  return ret;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop

08005e18 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005e24:	f107 0208 	add.w	r2, r7, #8
 8005e28:	2301      	movs	r3, #1
 8005e2a:	2112      	movs	r1, #18
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff fb43 	bl	80054b8 <ism330dhcx_read_reg>
 8005e32:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	7a3b      	ldrb	r3, [r7, #8]
 8005e44:	f362 1386 	bfi	r3, r2, #6, #1
 8005e48:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005e4a:	f107 0208 	add.w	r2, r7, #8
 8005e4e:	2301      	movs	r3, #1
 8005e50:	2112      	movs	r1, #18
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff fb48 	bl	80054e8 <ism330dhcx_write_reg>
 8005e58:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005e6e:	f107 020c 	add.w	r2, r7, #12
 8005e72:	2306      	movs	r3, #6
 8005e74:	2122      	movs	r1, #34	; 0x22
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fb1e 	bl	80054b8 <ism330dhcx_read_reg>
 8005e7c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005e7e:	7b7b      	ldrb	r3, [r7, #13]
 8005e80:	b21a      	sxth	r2, r3
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	7b3b      	ldrb	r3, [r7, #12]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	b21a      	sxth	r2, r3
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005ea0:	7bfa      	ldrb	r2, [r7, #15]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	b212      	sxth	r2, r2
 8005ea8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	3302      	adds	r3, #2
 8005eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	b212      	sxth	r2, r2
 8005ec6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005ec8:	7c7a      	ldrb	r2, [r7, #17]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	b212      	sxth	r2, r2
 8005ed0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	7c3b      	ldrb	r3, [r7, #16]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	3304      	adds	r3, #4
 8005eec:	b212      	sxth	r2, r2
 8005eee:	801a      	strh	r2, [r3, #0]

  return ret;
 8005ef0:	697b      	ldr	r3, [r7, #20]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005f04:	f107 020c 	add.w	r2, r7, #12
 8005f08:	2306      	movs	r3, #6
 8005f0a:	2128      	movs	r1, #40	; 0x28
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff fad3 	bl	80054b8 <ism330dhcx_read_reg>
 8005f12:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005f14:	7b7b      	ldrb	r3, [r7, #13]
 8005f16:	b21a      	sxth	r2, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	7b3b      	ldrb	r3, [r7, #12]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	b21a      	sxth	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	b212      	sxth	r2, r2
 8005f3e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	3302      	adds	r3, #2
 8005f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	7bbb      	ldrb	r3, [r7, #14]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	3302      	adds	r3, #2
 8005f5a:	b212      	sxth	r2, r2
 8005f5c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005f5e:	7c7a      	ldrb	r2, [r7, #17]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	3304      	adds	r3, #4
 8005f64:	b212      	sxth	r2, r2
 8005f66:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	7c3b      	ldrb	r3, [r7, #16]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	3304      	adds	r3, #4
 8005f82:	b212      	sxth	r2, r2
 8005f84:	801a      	strh	r2, [r3, #0]

  return ret;
 8005f86:	697b      	ldr	r3, [r7, #20]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <ism330dhcx_fifo_out_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_out_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_DATA_OUT_X_L, buff, 6);
 8005f9a:	2306      	movs	r3, #6
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	2179      	movs	r1, #121	; 0x79
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fa89 	bl	80054b8 <ism330dhcx_read_reg>
 8005fa6:	60f8      	str	r0, [r7, #12]

  return ret;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005fbe:	f107 0208 	add.w	r2, r7, #8
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	2118      	movs	r1, #24
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fa76 	bl	80054b8 <ism330dhcx_read_reg>
 8005fcc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10f      	bne.n	8005ff4 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 8005fd4:	78fb      	ldrb	r3, [r7, #3]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	7a3b      	ldrb	r3, [r7, #8]
 8005fde:	f362 0341 	bfi	r3, r2, #1, #1
 8005fe2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005fe4:	f107 0208 	add.w	r2, r7, #8
 8005fe8:	2301      	movs	r3, #1
 8005fea:	2118      	movs	r1, #24
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fa7b 	bl	80054e8 <ism330dhcx_write_reg>
 8005ff2:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	460b      	mov	r3, r1
 8006008:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800600a:	f107 0208 	add.w	r2, r7, #8
 800600e:	2301      	movs	r3, #1
 8006010:	2101      	movs	r1, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fa50 	bl	80054b8 <ism330dhcx_read_reg>
 8006018:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10f      	bne.n	8006040 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	b2da      	uxtb	r2, r3
 8006028:	7a3b      	ldrb	r3, [r7, #8]
 800602a:	f362 1387 	bfi	r3, r2, #6, #2
 800602e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8006030:	f107 0208 	add.w	r2, r7, #8
 8006034:	2301      	movs	r3, #1
 8006036:	2101      	movs	r1, #1
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fa55 	bl	80054e8 <ism330dhcx_write_reg>
 800603e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8006040:	68fb      	ldr	r3, [r7, #12]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b084      	sub	sp, #16
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8006054:	2301      	movs	r3, #1
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	210f      	movs	r1, #15
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fa2c 	bl	80054b8 <ism330dhcx_read_reg>
 8006060:	60f8      	str	r0, [r7, #12]

  return ret;
 8006062:	68fb      	ldr	r3, [r7, #12]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8006078:	f107 0208 	add.w	r2, r7, #8
 800607c:	2301      	movs	r3, #1
 800607e:	2112      	movs	r1, #18
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff fa19 	bl	80054b8 <ism330dhcx_read_reg>
 8006086:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10f      	bne.n	80060ae <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	7a3b      	ldrb	r3, [r7, #8]
 8006098:	f362 0300 	bfi	r3, r2, #0, #1
 800609c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800609e:	f107 0208 	add.w	r2, r7, #8
 80060a2:	2301      	movs	r3, #1
 80060a4:	2112      	movs	r1, #18
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fa1e 	bl	80054e8 <ism330dhcx_write_reg>
 80060ac:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80060ae:	68fb      	ldr	r3, [r7, #12]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80060c4:	f107 0208 	add.w	r2, r7, #8
 80060c8:	2301      	movs	r3, #1
 80060ca:	2112      	movs	r1, #18
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff f9f3 	bl	80054b8 <ism330dhcx_read_reg>
 80060d2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	7a3b      	ldrb	r3, [r7, #8]
 80060e4:	f362 0382 	bfi	r3, r2, #2, #1
 80060e8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80060ea:	f107 0208 	add.w	r2, r7, #8
 80060ee:	2301      	movs	r3, #1
 80060f0:	2112      	movs	r1, #18
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff f9f8 	bl	80054e8 <ism330dhcx_write_reg>
 80060f8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8006110:	f107 020c 	add.w	r2, r7, #12
 8006114:	2301      	movs	r3, #1
 8006116:	2108      	movs	r1, #8
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff f9cd 	bl	80054b8 <ism330dhcx_read_reg>
 800611e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d111      	bne.n	800614a <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 8006126:	887b      	ldrh	r3, [r7, #2]
 8006128:	0a1b      	lsrs	r3, r3, #8
 800612a:	b29b      	uxth	r3, r3
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	b2da      	uxtb	r2, r3
 8006132:	7b3b      	ldrb	r3, [r7, #12]
 8006134:	f362 0300 	bfi	r3, r2, #0, #1
 8006138:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800613a:	f107 020c 	add.w	r2, r7, #12
 800613e:	2301      	movs	r3, #1
 8006140:	2108      	movs	r1, #8
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7ff f9d0 	bl	80054e8 <ism330dhcx_write_reg>
 8006148:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 8006150:	887b      	ldrh	r3, [r7, #2]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 8006156:	f107 0210 	add.w	r2, r7, #16
 800615a:	2301      	movs	r3, #1
 800615c:	2107      	movs	r1, #7
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff f9c2 	bl	80054e8 <ism330dhcx_write_reg>
 8006164:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 8006166:	697b      	ldr	r3, [r7, #20]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <ism330dhcx_fifo_stop_on_wtm_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800617c:	f107 0208 	add.w	r2, r7, #8
 8006180:	2301      	movs	r3, #1
 8006182:	2108      	movs	r1, #8
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff f997 	bl	80054b8 <ism330dhcx_read_reg>
 800618a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10f      	bne.n	80061b2 <ism330dhcx_fifo_stop_on_wtm_set+0x42>
  {
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	b2da      	uxtb	r2, r3
 800619a:	7a3b      	ldrb	r3, [r7, #8]
 800619c:	f362 13c7 	bfi	r3, r2, #7, #1
 80061a0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 80061a2:	f107 0208 	add.w	r2, r7, #8
 80061a6:	2301      	movs	r3, #1
 80061a8:	2108      	movs	r1, #8
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff f99c 	bl	80054e8 <ism330dhcx_write_reg>
 80061b0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80061c8:	f107 0208 	add.w	r2, r7, #8
 80061cc:	2301      	movs	r3, #1
 80061ce:	2109      	movs	r1, #9
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff f971 	bl	80054b8 <ism330dhcx_read_reg>
 80061d6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	7a3b      	ldrb	r3, [r7, #8]
 80061e8:	f362 0303 	bfi	r3, r2, #0, #4
 80061ec:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80061ee:	f107 0208 	add.w	r2, r7, #8
 80061f2:	2301      	movs	r3, #1
 80061f4:	2109      	movs	r1, #9
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff f976 	bl	80054e8 <ism330dhcx_write_reg>
 80061fc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8006214:	f107 0208 	add.w	r2, r7, #8
 8006218:	2301      	movs	r3, #1
 800621a:	2109      	movs	r1, #9
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff f94b 	bl	80054b8 <ism330dhcx_read_reg>
 8006222:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 030f 	and.w	r3, r3, #15
 8006230:	b2da      	uxtb	r2, r3
 8006232:	7a3b      	ldrb	r3, [r7, #8]
 8006234:	f362 1307 	bfi	r3, r2, #4, #4
 8006238:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800623a:	f107 0208 	add.w	r2, r7, #8
 800623e:	2301      	movs	r3, #1
 8006240:	2109      	movs	r1, #9
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff f950 	bl	80054e8 <ism330dhcx_write_reg>
 8006248:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006260:	f107 0208 	add.w	r2, r7, #8
 8006264:	2301      	movs	r3, #1
 8006266:	210a      	movs	r1, #10
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff f925 	bl	80054b8 <ism330dhcx_read_reg>
 800626e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10f      	bne.n	8006296 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	b2da      	uxtb	r2, r3
 800627e:	7a3b      	ldrb	r3, [r7, #8]
 8006280:	f362 0302 	bfi	r3, r2, #0, #3
 8006284:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8006286:	f107 0208 	add.w	r2, r7, #8
 800628a:	2301      	movs	r3, #1
 800628c:	210a      	movs	r1, #10
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff f92a 	bl	80054e8 <ism330dhcx_write_reg>
 8006294:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8006296:	68fb      	ldr	r3, [r7, #12]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80062aa:	2102      	movs	r1, #2
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fea6 	bl	8005ffe <ism330dhcx_mem_bank_set>
 80062b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80062ba:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80062bc:	2301      	movs	r3, #1
 80062be:	2146      	movs	r1, #70	; 0x46
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff f8f9 	bl	80054b8 <ism330dhcx_read_reg>
 80062c6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80062d2:	2301      	movs	r3, #1
 80062d4:	2147      	movs	r1, #71	; 0x47
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff f8ee 	bl	80054b8 <ism330dhcx_read_reg>
 80062dc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80062e4:	2100      	movs	r1, #0
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fe89 	bl	8005ffe <ism330dhcx_mem_bank_set>
 80062ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80062ee:	68fb      	ldr	r3, [r7, #12]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006302:	2102      	movs	r1, #2
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff fe7a 	bl	8005ffe <ism330dhcx_mem_bank_set>
 800630a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d107      	bne.n	8006322 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8006312:	f107 0208 	add.w	r2, r7, #8
 8006316:	2301      	movs	r3, #1
 8006318:	215f      	movs	r1, #95	; 0x5f
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff f8cc 	bl	80054b8 <ism330dhcx_read_reg>
 8006320:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006328:	2100      	movs	r1, #0
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff fe67 	bl	8005ffe <ism330dhcx_mem_bank_set>
 8006330:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006332:	7a3b      	ldrb	r3, [r7, #8]
 8006334:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d81a      	bhi.n	8006374 <ism330dhcx_fsm_data_rate_get+0x7c>
 800633e:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8006340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006344:	08006355 	.word	0x08006355
 8006348:	0800635d 	.word	0x0800635d
 800634c:	08006365 	.word	0x08006365
 8006350:	0800636d 	.word	0x0800636d
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
      break;
 800635a:	e00f      	b.n	800637c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2201      	movs	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
      break;
 8006362:	e00b      	b.n	800637c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2202      	movs	r2, #2
 8006368:	701a      	strb	r2, [r3, #0]
      break;
 800636a:	e007      	b.n	800637c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2203      	movs	r2, #3
 8006370:	701a      	strb	r2, [r3, #0]
      break;
 8006372:	e003      	b.n	800637c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
      break;
 800637a:	bf00      	nop
  }

  return ret;
 800637c:	68fb      	ldr	r3, [r7, #12]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop

08006388 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006392:	2102      	movs	r1, #2
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fe32 	bl	8005ffe <ism330dhcx_mem_bank_set>
 800639a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d107      	bne.n	80063b2 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80063a2:	f107 0208 	add.w	r2, r7, #8
 80063a6:	2301      	movs	r3, #1
 80063a8:	2105      	movs	r1, #5
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff f884 	bl	80054b8 <ism330dhcx_read_reg>
 80063b0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10b      	bne.n	80063d0 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80063b8:	2100      	movs	r1, #0
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff fe1f 	bl	8005ffe <ism330dhcx_mem_bank_set>
 80063c0:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80063c2:	7a3b      	ldrb	r3, [r7, #8]
 80063c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80063d0:	68fb      	ldr	r3, [r7, #12]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80063e6:	2102      	movs	r1, #2
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff fe08 	bl	8005ffe <ism330dhcx_mem_bank_set>
 80063ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d107      	bne.n	8006406 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80063f6:	f107 0208 	add.w	r2, r7, #8
 80063fa:	2301      	movs	r3, #1
 80063fc:	2160      	movs	r1, #96	; 0x60
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff f85a 	bl	80054b8 <ism330dhcx_read_reg>
 8006404:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d12a      	bne.n	8006462 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 800640c:	7a3b      	ldrb	r3, [r7, #8]
 800640e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b03      	cmp	r3, #3
 8006416:	d81b      	bhi.n	8006450 <ism330dhcx_mlc_data_rate_get+0x74>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <ism330dhcx_mlc_data_rate_get+0x44>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	08006431 	.word	0x08006431
 8006424:	08006439 	.word	0x08006439
 8006428:	08006441 	.word	0x08006441
 800642c:	08006449 	.word	0x08006449
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
        break;
 8006436:	e00f      	b.n	8006458 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
        break;
 800643e:	e00b      	b.n	8006458 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2202      	movs	r2, #2
 8006444:	701a      	strb	r2, [r3, #0]
        break;
 8006446:	e007      	b.n	8006458 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2203      	movs	r2, #3
 800644c:	701a      	strb	r2, [r3, #0]
        break;
 800644e:	e003      	b.n	8006458 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
        break;
 8006456:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006458:	2100      	movs	r1, #0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff fdcf 	bl	8005ffe <ism330dhcx_mem_bank_set>
 8006460:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006462:	68fb      	ldr	r3, [r7, #12]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8006476:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <BSP_SPI3_Init+0x54>)
 8006478:	4a12      	ldr	r2, [pc, #72]	; (80064c4 <BSP_SPI3_Init+0x58>)
 800647a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 800647c:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <BSP_SPI3_Init+0x5c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	4911      	ldr	r1, [pc, #68]	; (80064c8 <BSP_SPI3_Init+0x5c>)
 8006484:	600a      	str	r2, [r1, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d114      	bne.n	80064b4 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800648a:	480d      	ldr	r0, [pc, #52]	; (80064c0 <BSP_SPI3_Init+0x54>)
 800648c:	f009 f9aa 	bl	800f7e4 <HAL_SPI_GetState>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10e      	bne.n	80064b4 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 8006496:	480a      	ldr	r0, [pc, #40]	; (80064c0 <BSP_SPI3_Init+0x54>)
 8006498:	f000 f8c2 	bl	8006620 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d108      	bne.n	80064b4 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80064a2:	4807      	ldr	r0, [pc, #28]	; (80064c0 <BSP_SPI3_Init+0x54>)
 80064a4:	f000 f87a 	bl	800659c <MX_SPI3_Init>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80064ae:	f06f 0307 	mvn.w	r3, #7
 80064b2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80064b4:	687b      	ldr	r3, [r7, #4]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20002320 	.word	0x20002320
 80064c4:	40003c00 	.word	0x40003c00
 80064c8:	20002384 	.word	0x20002384

080064cc <BSP_SPI3_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI3_DeInit(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80064d2:	f06f 0307 	mvn.w	r3, #7
 80064d6:	607b      	str	r3, [r7, #4]
  if (SPI3InitCounter > 0)
 80064d8:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <BSP_SPI3_DeInit+0x48>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d013      	beq.n	8006508 <BSP_SPI3_DeInit+0x3c>
  {
    if (--SPI3InitCounter == 0)
 80064e0:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <BSP_SPI3_DeInit+0x48>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	4a0b      	ldr	r2, [pc, #44]	; (8006514 <BSP_SPI3_DeInit+0x48>)
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <BSP_SPI3_DeInit+0x48>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <BSP_SPI3_DeInit+0x3c>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI3_MspDeInit(&hspi3);
 80064f2:	4809      	ldr	r0, [pc, #36]	; (8006518 <BSP_SPI3_DeInit+0x4c>)
 80064f4:	f000 f8f0 	bl	80066d8 <SPI3_MspDeInit>
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi3) == HAL_OK)
 80064f8:	4807      	ldr	r0, [pc, #28]	; (8006518 <BSP_SPI3_DeInit+0x4c>)
 80064fa:	f008 fb90 	bl	800ec1e <HAL_SPI_DeInit>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <BSP_SPI3_DeInit+0x3c>
      {
        ret = BSP_ERROR_NONE;
 8006504:	2300      	movs	r3, #0
 8006506:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8006508:	687b      	ldr	r3, [r7, #4]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20002384 	.word	0x20002384
 8006518:	20002320 	.word	0x20002320

0800651c <BSP_SPI3_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_Send(uint8_t *pData, uint16_t Length)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi3, pData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800652c:	887a      	ldrh	r2, [r7, #2]
 800652e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4806      	ldr	r0, [pc, #24]	; (8006550 <BSP_SPI3_Send+0x34>)
 8006536:	f008 fb9a 	bl	800ec6e <HAL_SPI_Transmit>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <BSP_SPI3_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006540:	f06f 0305 	mvn.w	r3, #5
 8006544:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20002320 	.word	0x20002320

08006554 <BSP_SPI3_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI3_Recv(uint8_t *pData, uint16_t Length)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi3, pData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8006564:	887a      	ldrh	r2, [r7, #2]
 8006566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4806      	ldr	r0, [pc, #24]	; (8006588 <BSP_SPI3_Recv+0x34>)
 800656e:	f008 fcec 	bl	800ef4a <HAL_SPI_Receive>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <BSP_SPI3_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006578:	f06f 0305 	mvn.w	r3, #5
 800657c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800657e:	68fb      	ldr	r3, [r7, #12]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20002320 	.word	0x20002320

0800658c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006590:	f000 f92c 	bl	80067ec <HAL_GetTick>
 8006594:	4603      	mov	r3, r0
}
 8006596:	4618      	mov	r0, r3
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a1c      	ldr	r2, [pc, #112]	; (800661c <MX_SPI3_Init+0x80>)
 80065ac:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065b4:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80065c2:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d6:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2218      	movs	r2, #24
 80065dc:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2207      	movs	r2, #7
 80065f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f008 fa68 	bl	800ead8 <HAL_SPI_Init>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40003c00 	.word	0x40003c00

08006620 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	; 0x28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006628:	4b29      	ldr	r3, [pc, #164]	; (80066d0 <SPI3_MspInit+0xb0>)
 800662a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662c:	4a28      	ldr	r2, [pc, #160]	; (80066d0 <SPI3_MspInit+0xb0>)
 800662e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006632:	6593      	str	r3, [r2, #88]	; 0x58
 8006634:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <SPI3_MspInit+0xb0>)
 8006636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006640:	4b23      	ldr	r3, [pc, #140]	; (80066d0 <SPI3_MspInit+0xb0>)
 8006642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006644:	4a22      	ldr	r2, [pc, #136]	; (80066d0 <SPI3_MspInit+0xb0>)
 8006646:	f043 0302 	orr.w	r3, r3, #2
 800664a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800664c:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <SPI3_MspInit+0xb0>)
 800664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 8006658:	2310      	movs	r3, #16
 800665a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665c:	2302      	movs	r3, #2
 800665e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006664:	2303      	movs	r3, #3
 8006666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 8006668:	2306      	movs	r3, #6
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 800666c:	f107 0314 	add.w	r3, r7, #20
 8006670:	4619      	mov	r1, r3
 8006672:	4818      	ldr	r0, [pc, #96]	; (80066d4 <SPI3_MspInit+0xb4>)
 8006674:	f002 f94a 	bl	800890c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8006678:	2320      	movs	r3, #32
 800667a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800667c:	2302      	movs	r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006684:	2303      	movs	r3, #3
 8006686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8006688:	2306      	movs	r3, #6
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	4619      	mov	r1, r3
 8006692:	4810      	ldr	r0, [pc, #64]	; (80066d4 <SPI3_MspInit+0xb4>)
 8006694:	f002 f93a 	bl	800890c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 8006698:	2308      	movs	r3, #8
 800669a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669c:	2302      	movs	r3, #2
 800669e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066a0:	2301      	movs	r3, #1
 80066a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a4:	2303      	movs	r3, #3
 80066a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80066a8:	2306      	movs	r3, #6
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80066ac:	f107 0314 	add.w	r3, r7, #20
 80066b0:	4619      	mov	r1, r3
 80066b2:	4808      	ldr	r0, [pc, #32]	; (80066d4 <SPI3_MspInit+0xb4>)
 80066b4:	f002 f92a 	bl	800890c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	2033      	movs	r0, #51	; 0x33
 80066be:	f001 f8ac 	bl	800781a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80066c2:	2033      	movs	r0, #51	; 0x33
 80066c4:	f001 f8c5 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 80066c8:	bf00      	nop
 80066ca:	3728      	adds	r7, #40	; 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40021000 	.word	0x40021000
 80066d4:	48000400 	.word	0x48000400

080066d8 <SPI3_MspDeInit>:

static void SPI3_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <SPI3_MspDeInit+0x3c>)
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	4a0b      	ldr	r2, [pc, #44]	; (8006714 <SPI3_MspDeInit+0x3c>)
 80066e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ea:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    HAL_GPIO_DeInit(BUS_SPI3_MISO_GPIO_PORT, BUS_SPI3_MISO_GPIO_PIN);
 80066ec:	2110      	movs	r1, #16
 80066ee:	480a      	ldr	r0, [pc, #40]	; (8006718 <SPI3_MspDeInit+0x40>)
 80066f0:	f002 fa9e 	bl	8008c30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI3_MOSI_GPIO_PORT, BUS_SPI3_MOSI_GPIO_PIN);
 80066f4:	2120      	movs	r1, #32
 80066f6:	4808      	ldr	r0, [pc, #32]	; (8006718 <SPI3_MspDeInit+0x40>)
 80066f8:	f002 fa9a 	bl	8008c30 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI3_SCK_GPIO_PORT, BUS_SPI3_SCK_GPIO_PIN);
 80066fc:	2108      	movs	r1, #8
 80066fe:	4806      	ldr	r0, [pc, #24]	; (8006718 <SPI3_MspDeInit+0x40>)
 8006700:	f002 fa96 	bl	8008c30 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8006704:	2033      	movs	r0, #51	; 0x33
 8006706:	f001 f8b2 	bl	800786e <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000
 8006718:	48000400 	.word	0x48000400

0800671c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006726:	2003      	movs	r0, #3
 8006728:	f001 f86c 	bl	8007804 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800672c:	2000      	movs	r0, #0
 800672e:	f000 f80d 	bl	800674c <HAL_InitTick>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	71fb      	strb	r3, [r7, #7]
 800673c:	e001      	b.n	8006742 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800673e:	f7fb fe7d 	bl	800243c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006742:	79fb      	ldrb	r3, [r7, #7]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006758:	4b17      	ldr	r3, [pc, #92]	; (80067b8 <HAL_InitTick+0x6c>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d023      	beq.n	80067a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006760:	4b16      	ldr	r3, [pc, #88]	; (80067bc <HAL_InitTick+0x70>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <HAL_InitTick+0x6c>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	4619      	mov	r1, r3
 800676a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800676e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	4618      	mov	r0, r3
 8006778:	f001 f887 	bl	800788a <HAL_SYSTICK_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b0f      	cmp	r3, #15
 8006786:	d809      	bhi.n	800679c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006788:	2200      	movs	r2, #0
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	f001 f843 	bl	800781a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006794:	4a0a      	ldr	r2, [pc, #40]	; (80067c0 <HAL_InitTick+0x74>)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e007      	b.n	80067ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e004      	b.n	80067ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	73fb      	strb	r3, [r7, #15]
 80067a6:	e001      	b.n	80067ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20000060 	.word	0x20000060
 80067bc:	20000000 	.word	0x20000000
 80067c0:	2000005c 	.word	0x2000005c

080067c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <HAL_IncTick+0x20>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_IncTick+0x24>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4413      	add	r3, r2
 80067d4:	4a04      	ldr	r2, [pc, #16]	; (80067e8 <HAL_IncTick+0x24>)
 80067d6:	6013      	str	r3, [r2, #0]
}
 80067d8:	bf00      	nop
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000060 	.word	0x20000060
 80067e8:	20002388 	.word	0x20002388

080067ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  return uwTick;
 80067f0:	4b03      	ldr	r3, [pc, #12]	; (8006800 <HAL_GetTick+0x14>)
 80067f2:	681b      	ldr	r3, [r3, #0]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	20002388 	.word	0x20002388

08006804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800680c:	f7ff ffee 	bl	80067ec <HAL_GetTick>
 8006810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d005      	beq.n	800682a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800681e:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <HAL_Delay+0x44>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800682a:	bf00      	nop
 800682c:	f7ff ffde 	bl	80067ec <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	429a      	cmp	r2, r3
 800683a:	d8f7      	bhi.n	800682c <HAL_Delay+0x28>
  {
  }
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000060 	.word	0x20000060

0800684c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	431a      	orrs	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	609a      	str	r2, [r3, #8]
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	609a      	str	r2, [r3, #8]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3360      	adds	r3, #96	; 0x60
 80068c6:	461a      	mov	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <LL_ADC_SetOffset+0x44>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	03fff000 	.word	0x03fff000

080068fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3360      	adds	r3, #96	; 0x60
 800690a:	461a      	mov	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3360      	adds	r3, #96	; 0x60
 8006938:	461a      	mov	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	431a      	orrs	r2, r3
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	615a      	str	r2, [r3, #20]
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3330      	adds	r3, #48	; 0x30
 8006994:	461a      	mov	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	f003 030c 	and.w	r3, r3, #12
 80069a0:	4413      	add	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	211f      	movs	r1, #31
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0e9b      	lsrs	r3, r3, #26
 80069bc:	f003 011f 	and.w	r1, r3, #31
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ca:	431a      	orrs	r2, r3
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80069d0:	bf00      	nop
 80069d2:	371c      	adds	r7, #28
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3314      	adds	r3, #20
 80069ec:	461a      	mov	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	0e5b      	lsrs	r3, r3, #25
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	4413      	add	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	0d1b      	lsrs	r3, r3, #20
 8006a04:	f003 031f 	and.w	r3, r3, #31
 8006a08:	2107      	movs	r1, #7
 8006a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	401a      	ands	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	0d1b      	lsrs	r3, r3, #20
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a20:	431a      	orrs	r2, r3
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	401a      	ands	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f003 0318 	and.w	r3, r3, #24
 8006a56:	4908      	ldr	r1, [pc, #32]	; (8006a78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006a58:	40d9      	lsrs	r1, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	400b      	ands	r3, r1
 8006a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a62:	431a      	orrs	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	0007ffff 	.word	0x0007ffff

08006a7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006a8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6093      	str	r3, [r2, #8]
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d101      	bne.n	8006aba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006ad8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006adc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b04:	d101      	bne.n	8006b0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <LL_ADC_IsEnabled+0x18>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <LL_ADC_IsEnabled+0x1a>
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d101      	bne.n	8006b56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d101      	bne.n	8006b7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e12f      	b.n	8006e06 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fb fc65 	bl	8002484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff ff67 	bl	8006aa0 <LL_ADC_IsDeepPowerDownEnabled>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff4d 	bl	8006a7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff ff82 	bl	8006af0 <LL_ADC_IsInternalRegulatorEnabled>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d115      	bne.n	8006c1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff ff66 	bl	8006ac8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006bfc:	4b84      	ldr	r3, [pc, #528]	; (8006e10 <HAL_ADC_Init+0x284>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	099b      	lsrs	r3, r3, #6
 8006c02:	4a84      	ldr	r2, [pc, #528]	; (8006e14 <HAL_ADC_Init+0x288>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c10:	e002      	b.n	8006c18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1f9      	bne.n	8006c12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff ff64 	bl	8006af0 <LL_ADC_IsInternalRegulatorEnabled>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10d      	bne.n	8006c4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c32:	f043 0210 	orr.w	r2, r3, #16
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3e:	f043 0201 	orr.w	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff ff75 	bl	8006b3e <LL_ADC_REG_IsConversionOngoing>
 8006c54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	f003 0310 	and.w	r3, r3, #16
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f040 80c8 	bne.w	8006df4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f040 80c4 	bne.w	8006df4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006c74:	f043 0202 	orr.w	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff ff49 	bl	8006b18 <LL_ADC_IsEnabled>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c8c:	4862      	ldr	r0, [pc, #392]	; (8006e18 <HAL_ADC_Init+0x28c>)
 8006c8e:	f7ff ff43 	bl	8006b18 <LL_ADC_IsEnabled>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	485f      	ldr	r0, [pc, #380]	; (8006e1c <HAL_ADC_Init+0x290>)
 8006ca0:	f7ff fdd4 	bl	800684c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7e5b      	ldrb	r3, [r3, #25]
 8006ca8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006cae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006cb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006cba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d106      	bne.n	8006ce0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	045b      	lsls	r3, r3, #17
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	4b47      	ldr	r3, [pc, #284]	; (8006e20 <HAL_ADC_Init+0x294>)
 8006d04:	4013      	ands	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	69b9      	ldr	r1, [r7, #24]
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff ff12 	bl	8006b3e <LL_ADC_REG_IsConversionOngoing>
 8006d1a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff ff1f 	bl	8006b64 <LL_ADC_INJ_IsConversionOngoing>
 8006d26:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d140      	bne.n	8006db0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d13d      	bne.n	8006db0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	7e1b      	ldrb	r3, [r3, #24]
 8006d3c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006d3e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d46:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d56:	f023 0306 	bic.w	r3, r3, #6
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	69b9      	ldr	r1, [r7, #24]
 8006d60:	430b      	orrs	r3, r1
 8006d62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d118      	bne.n	8006da0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d78:	f023 0304 	bic.w	r3, r3, #4
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d84:	4311      	orrs	r1, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006d8a:	4311      	orrs	r1, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006d90:	430a      	orrs	r2, r1
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0201 	orr.w	r2, r2, #1
 8006d9c:	611a      	str	r2, [r3, #16]
 8006d9e:	e007      	b.n	8006db0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d10c      	bne.n	8006dd2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	f023 010f 	bic.w	r1, r3, #15
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	1e5a      	subs	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
 8006dd0:	e007      	b.n	8006de2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 020f 	bic.w	r2, r2, #15
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	f043 0201 	orr.w	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	659a      	str	r2, [r3, #88]	; 0x58
 8006df2:	e007      	b.n	8006e04 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df8:	f043 0210 	orr.w	r2, r3, #16
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000000 	.word	0x20000000
 8006e14:	053e2d63 	.word	0x053e2d63
 8006e18:	50040000 	.word	0x50040000
 8006e1c:	50040300 	.word	0x50040300
 8006e20:	fff0c007 	.word	0xfff0c007

08006e24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b0b6      	sub	sp, #216	; 0xd8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d101      	bne.n	8006e46 <HAL_ADC_ConfigChannel+0x22>
 8006e42:	2302      	movs	r3, #2
 8006e44:	e3d5      	b.n	80075f2 <HAL_ADC_ConfigChannel+0x7ce>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fe73 	bl	8006b3e <LL_ADC_REG_IsConversionOngoing>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 83ba 	bne.w	80075d4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b05      	cmp	r3, #5
 8006e66:	d824      	bhi.n	8006eb2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	3b02      	subs	r3, #2
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d81b      	bhi.n	8006eaa <HAL_ADC_ConfigChannel+0x86>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <HAL_ADC_ConfigChannel+0x54>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e91 	.word	0x08006e91
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ea1 	.word	0x08006ea1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	220c      	movs	r2, #12
 8006e8c:	605a      	str	r2, [r3, #4]
          break;
 8006e8e:	e011      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2212      	movs	r2, #18
 8006e94:	605a      	str	r2, [r3, #4]
          break;
 8006e96:	e00d      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	2218      	movs	r2, #24
 8006e9c:	605a      	str	r2, [r3, #4]
          break;
 8006e9e:	e009      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ea6:	605a      	str	r2, [r3, #4]
          break;
 8006ea8:	e004      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2206      	movs	r2, #6
 8006eae:	605a      	str	r2, [r3, #4]
          break;
 8006eb0:	e000      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006eb2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6818      	ldr	r0, [r3, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	6859      	ldr	r1, [r3, #4]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f7ff fd5f 	bl	8006984 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fe37 	bl	8006b3e <LL_ADC_REG_IsConversionOngoing>
 8006ed0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fe43 	bl	8006b64 <LL_ADC_INJ_IsConversionOngoing>
 8006ede:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ee2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f040 81c1 	bne.w	800726e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006eec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f040 81bc 	bne.w	800726e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efe:	d10f      	bne.n	8006f20 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6818      	ldr	r0, [r3, #0]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	f7ff fd66 	bl	80069dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff fd20 	bl	800695e <LL_ADC_SetSamplingTimeCommonConfig>
 8006f1e:	e00e      	b.n	8006f3e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6819      	ldr	r1, [r3, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f7ff fd55 	bl	80069dc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2100      	movs	r1, #0
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7ff fd10 	bl	800695e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695a      	ldr	r2, [r3, #20]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	08db      	lsrs	r3, r3, #3
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b04      	cmp	r3, #4
 8006f5e:	d00a      	beq.n	8006f76 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6919      	ldr	r1, [r3, #16]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f70:	f7ff fca0 	bl	80068b4 <LL_ADC_SetOffset>
 8006f74:	e17b      	b.n	800726e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fcbd 	bl	80068fc <LL_ADC_GetOffsetChannel>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <HAL_ADC_ConfigChannel+0x17e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7ff fcb2 	bl	80068fc <LL_ADC_GetOffsetChannel>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	0e9b      	lsrs	r3, r3, #26
 8006f9c:	f003 021f 	and.w	r2, r3, #31
 8006fa0:	e01e      	b.n	8006fe0 <HAL_ADC_ConfigChannel+0x1bc>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff fca7 	bl	80068fc <LL_ADC_GetOffsetChannel>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006fb8:	fa93 f3a3 	rbit	r3, r3
 8006fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006fc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8006fd0:	2320      	movs	r3, #32
 8006fd2:	e004      	b.n	8006fde <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8006fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fd8:	fab3 f383 	clz	r3, r3
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d105      	bne.n	8006ff8 <HAL_ADC_ConfigChannel+0x1d4>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	0e9b      	lsrs	r3, r3, #26
 8006ff2:	f003 031f 	and.w	r3, r3, #31
 8006ff6:	e018      	b.n	800702a <HAL_ADC_ConfigChannel+0x206>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007000:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007004:	fa93 f3a3 	rbit	r3, r3
 8007008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800700c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800701c:	2320      	movs	r3, #32
 800701e:	e004      	b.n	800702a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8007020:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007024:	fab3 f383 	clz	r3, r3
 8007028:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800702a:	429a      	cmp	r2, r3
 800702c:	d106      	bne.n	800703c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2200      	movs	r2, #0
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f7ff fc76 	bl	8006928 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2101      	movs	r1, #1
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff fc5a 	bl	80068fc <LL_ADC_GetOffsetChannel>
 8007048:	4603      	mov	r3, r0
 800704a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <HAL_ADC_ConfigChannel+0x244>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2101      	movs	r1, #1
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fc4f 	bl	80068fc <LL_ADC_GetOffsetChannel>
 800705e:	4603      	mov	r3, r0
 8007060:	0e9b      	lsrs	r3, r3, #26
 8007062:	f003 021f 	and.w	r2, r3, #31
 8007066:	e01e      	b.n	80070a6 <HAL_ADC_ConfigChannel+0x282>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2101      	movs	r1, #1
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fc44 	bl	80068fc <LL_ADC_GetOffsetChannel>
 8007074:	4603      	mov	r3, r0
 8007076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800707a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800707e:	fa93 f3a3 	rbit	r3, r3
 8007082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800708a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800708e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8007096:	2320      	movs	r3, #32
 8007098:	e004      	b.n	80070a4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800709a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800709e:	fab3 f383 	clz	r3, r3
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d105      	bne.n	80070be <HAL_ADC_ConfigChannel+0x29a>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	0e9b      	lsrs	r3, r3, #26
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	e018      	b.n	80070f0 <HAL_ADC_ConfigChannel+0x2cc>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070ca:	fa93 f3a3 	rbit	r3, r3
 80070ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80070d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80070da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80070e2:	2320      	movs	r3, #32
 80070e4:	e004      	b.n	80070f0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80070e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070ea:	fab3 f383 	clz	r3, r3
 80070ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d106      	bne.n	8007102 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2101      	movs	r1, #1
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff fc13 	bl	8006928 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2102      	movs	r1, #2
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff fbf7 	bl	80068fc <LL_ADC_GetOffsetChannel>
 800710e:	4603      	mov	r3, r0
 8007110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <HAL_ADC_ConfigChannel+0x30a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2102      	movs	r1, #2
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fbec 	bl	80068fc <LL_ADC_GetOffsetChannel>
 8007124:	4603      	mov	r3, r0
 8007126:	0e9b      	lsrs	r3, r3, #26
 8007128:	f003 021f 	and.w	r2, r3, #31
 800712c:	e01e      	b.n	800716c <HAL_ADC_ConfigChannel+0x348>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2102      	movs	r1, #2
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fbe1 	bl	80068fc <LL_ADC_GetOffsetChannel>
 800713a:	4603      	mov	r3, r0
 800713c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007144:	fa93 f3a3 	rbit	r3, r3
 8007148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800714c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007154:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800715c:	2320      	movs	r3, #32
 800715e:	e004      	b.n	800716a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8007160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007164:	fab3 f383 	clz	r3, r3
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <HAL_ADC_ConfigChannel+0x360>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	0e9b      	lsrs	r3, r3, #26
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	e016      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x38e>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007190:	fa93 f3a3 	rbit	r3, r3
 8007194:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007196:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800719c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80071a4:	2320      	movs	r3, #32
 80071a6:	e004      	b.n	80071b2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80071a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ac:	fab3 f383 	clz	r3, r3
 80071b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d106      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	2102      	movs	r1, #2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fbb2 	bl	8006928 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2103      	movs	r1, #3
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff fb96 	bl	80068fc <LL_ADC_GetOffsetChannel>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10a      	bne.n	80071f0 <HAL_ADC_ConfigChannel+0x3cc>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2103      	movs	r1, #3
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fb8b 	bl	80068fc <LL_ADC_GetOffsetChannel>
 80071e6:	4603      	mov	r3, r0
 80071e8:	0e9b      	lsrs	r3, r3, #26
 80071ea:	f003 021f 	and.w	r2, r3, #31
 80071ee:	e017      	b.n	8007220 <HAL_ADC_ConfigChannel+0x3fc>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2103      	movs	r1, #3
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fb80 	bl	80068fc <LL_ADC_GetOffsetChannel>
 80071fc:	4603      	mov	r3, r0
 80071fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007202:	fa93 f3a3 	rbit	r3, r3
 8007206:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8007208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800720a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800720c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8007212:	2320      	movs	r3, #32
 8007214:	e003      	b.n	800721e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8007216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007218:	fab3 f383 	clz	r3, r3
 800721c:	b2db      	uxtb	r3, r3
 800721e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <HAL_ADC_ConfigChannel+0x414>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	0e9b      	lsrs	r3, r3, #26
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	e011      	b.n	800725c <HAL_ADC_ConfigChannel+0x438>
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800723e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007240:	fa93 f3a3 	rbit	r3, r3
 8007244:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007248:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800724a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8007250:	2320      	movs	r3, #32
 8007252:	e003      	b.n	800725c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8007254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007256:	fab3 f383 	clz	r3, r3
 800725a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800725c:	429a      	cmp	r2, r3
 800725e:	d106      	bne.n	800726e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2200      	movs	r2, #0
 8007266:	2103      	movs	r1, #3
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fb5d 	bl	8006928 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff fc50 	bl	8006b18 <LL_ADC_IsEnabled>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	f040 8140 	bne.w	8007500 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	6819      	ldr	r1, [r3, #0]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	461a      	mov	r2, r3
 800728e:	f7ff fbd1 	bl	8006a34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	4a8f      	ldr	r2, [pc, #572]	; (80074d4 <HAL_ADC_ConfigChannel+0x6b0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	f040 8131 	bne.w	8007500 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10b      	bne.n	80072c6 <HAL_ADC_ConfigChannel+0x4a2>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	0e9b      	lsrs	r3, r3, #26
 80072b4:	3301      	adds	r3, #1
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	bf94      	ite	ls
 80072be:	2301      	movls	r3, #1
 80072c0:	2300      	movhi	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	e019      	b.n	80072fa <HAL_ADC_ConfigChannel+0x4d6>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ce:	fa93 f3a3 	rbit	r3, r3
 80072d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80072d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80072d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80072de:	2320      	movs	r3, #32
 80072e0:	e003      	b.n	80072ea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80072e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e4:	fab3 f383 	clz	r3, r3
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	3301      	adds	r3, #1
 80072ec:	f003 031f 	and.w	r3, r3, #31
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	bf94      	ite	ls
 80072f4:	2301      	movls	r3, #1
 80072f6:	2300      	movhi	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d079      	beq.n	80073f2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007306:	2b00      	cmp	r3, #0
 8007308:	d107      	bne.n	800731a <HAL_ADC_ConfigChannel+0x4f6>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	0e9b      	lsrs	r3, r3, #26
 8007310:	3301      	adds	r3, #1
 8007312:	069b      	lsls	r3, r3, #26
 8007314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007318:	e015      	b.n	8007346 <HAL_ADC_ConfigChannel+0x522>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007322:	fa93 f3a3 	rbit	r3, r3
 8007326:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800732c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8007332:	2320      	movs	r3, #32
 8007334:	e003      	b.n	800733e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8007336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007338:	fab3 f383 	clz	r3, r3
 800733c:	b2db      	uxtb	r3, r3
 800733e:	3301      	adds	r3, #1
 8007340:	069b      	lsls	r3, r3, #26
 8007342:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800734e:	2b00      	cmp	r3, #0
 8007350:	d109      	bne.n	8007366 <HAL_ADC_ConfigChannel+0x542>
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	0e9b      	lsrs	r3, r3, #26
 8007358:	3301      	adds	r3, #1
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2101      	movs	r1, #1
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	e017      	b.n	8007396 <HAL_ADC_ConfigChannel+0x572>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800736c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736e:	fa93 f3a3 	rbit	r3, r3
 8007372:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007376:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8007378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800737e:	2320      	movs	r3, #32
 8007380:	e003      	b.n	800738a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8007382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007384:	fab3 f383 	clz	r3, r3
 8007388:	b2db      	uxtb	r3, r3
 800738a:	3301      	adds	r3, #1
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	2101      	movs	r1, #1
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	ea42 0103 	orr.w	r1, r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <HAL_ADC_ConfigChannel+0x598>
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	0e9b      	lsrs	r3, r3, #26
 80073ac:	3301      	adds	r3, #1
 80073ae:	f003 021f 	and.w	r2, r3, #31
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	051b      	lsls	r3, r3, #20
 80073ba:	e018      	b.n	80073ee <HAL_ADC_ConfigChannel+0x5ca>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	fa93 f3a3 	rbit	r3, r3
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80073ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80073ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80073d4:	2320      	movs	r3, #32
 80073d6:	e003      	b.n	80073e0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	fab3 f383 	clz	r3, r3
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3301      	adds	r3, #1
 80073e2:	f003 021f 	and.w	r2, r3, #31
 80073e6:	4613      	mov	r3, r2
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	4413      	add	r3, r2
 80073ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073ee:	430b      	orrs	r3, r1
 80073f0:	e081      	b.n	80074f6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d107      	bne.n	800740e <HAL_ADC_ConfigChannel+0x5ea>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	0e9b      	lsrs	r3, r3, #26
 8007404:	3301      	adds	r3, #1
 8007406:	069b      	lsls	r3, r3, #26
 8007408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800740c:	e015      	b.n	800743a <HAL_ADC_ConfigChannel+0x616>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007416:	fa93 f3a3 	rbit	r3, r3
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8007426:	2320      	movs	r3, #32
 8007428:	e003      	b.n	8007432 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	fab3 f383 	clz	r3, r3
 8007430:	b2db      	uxtb	r3, r3
 8007432:	3301      	adds	r3, #1
 8007434:	069b      	lsls	r3, r3, #26
 8007436:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <HAL_ADC_ConfigChannel+0x636>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	0e9b      	lsrs	r3, r3, #26
 800744c:	3301      	adds	r3, #1
 800744e:	f003 031f 	and.w	r3, r3, #31
 8007452:	2101      	movs	r1, #1
 8007454:	fa01 f303 	lsl.w	r3, r1, r3
 8007458:	e017      	b.n	800748a <HAL_ADC_ConfigChannel+0x666>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	fa93 f3a3 	rbit	r3, r3
 8007466:	61fb      	str	r3, [r7, #28]
  return result;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8007472:	2320      	movs	r3, #32
 8007474:	e003      	b.n	800747e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	fab3 f383 	clz	r3, r3
 800747c:	b2db      	uxtb	r3, r3
 800747e:	3301      	adds	r3, #1
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f303 	lsl.w	r3, r1, r3
 800748a:	ea42 0103 	orr.w	r1, r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10d      	bne.n	80074b6 <HAL_ADC_ConfigChannel+0x692>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	0e9b      	lsrs	r3, r3, #26
 80074a0:	3301      	adds	r3, #1
 80074a2:	f003 021f 	and.w	r2, r3, #31
 80074a6:	4613      	mov	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	4413      	add	r3, r2
 80074ac:	3b1e      	subs	r3, #30
 80074ae:	051b      	lsls	r3, r3, #20
 80074b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074b4:	e01e      	b.n	80074f4 <HAL_ADC_ConfigChannel+0x6d0>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	fa93 f3a3 	rbit	r3, r3
 80074c2:	613b      	str	r3, [r7, #16]
  return result;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80074ce:	2320      	movs	r3, #32
 80074d0:	e006      	b.n	80074e0 <HAL_ADC_ConfigChannel+0x6bc>
 80074d2:	bf00      	nop
 80074d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	fab3 f383 	clz	r3, r3
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	3301      	adds	r3, #1
 80074e2:	f003 021f 	and.w	r2, r3, #31
 80074e6:	4613      	mov	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	4413      	add	r3, r2
 80074ec:	3b1e      	subs	r3, #30
 80074ee:	051b      	lsls	r3, r3, #20
 80074f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074f4:	430b      	orrs	r3, r1
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	6892      	ldr	r2, [r2, #8]
 80074fa:	4619      	mov	r1, r3
 80074fc:	f7ff fa6e 	bl	80069dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	4b3d      	ldr	r3, [pc, #244]	; (80075fc <HAL_ADC_ConfigChannel+0x7d8>)
 8007506:	4013      	ands	r3, r2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d06c      	beq.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800750c:	483c      	ldr	r0, [pc, #240]	; (8007600 <HAL_ADC_ConfigChannel+0x7dc>)
 800750e:	f7ff f9c3 	bl	8006898 <LL_ADC_GetCommonPathInternalCh>
 8007512:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a3a      	ldr	r2, [pc, #232]	; (8007604 <HAL_ADC_ConfigChannel+0x7e0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d127      	bne.n	8007570 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007524:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d121      	bne.n	8007570 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a35      	ldr	r2, [pc, #212]	; (8007608 <HAL_ADC_ConfigChannel+0x7e4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d157      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800753a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800753e:	4619      	mov	r1, r3
 8007540:	482f      	ldr	r0, [pc, #188]	; (8007600 <HAL_ADC_ConfigChannel+0x7dc>)
 8007542:	f7ff f996 	bl	8006872 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007546:	4b31      	ldr	r3, [pc, #196]	; (800760c <HAL_ADC_ConfigChannel+0x7e8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	099b      	lsrs	r3, r3, #6
 800754c:	4a30      	ldr	r2, [pc, #192]	; (8007610 <HAL_ADC_ConfigChannel+0x7ec>)
 800754e:	fba2 2303 	umull	r2, r3, r2, r3
 8007552:	099b      	lsrs	r3, r3, #6
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007560:	e002      	b.n	8007568 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3b01      	subs	r3, #1
 8007566:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f9      	bne.n	8007562 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800756e:	e03a      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a27      	ldr	r2, [pc, #156]	; (8007614 <HAL_ADC_ConfigChannel+0x7f0>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d113      	bne.n	80075a2 <HAL_ADC_ConfigChannel+0x77e>
 800757a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800757e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d10d      	bne.n	80075a2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <HAL_ADC_ConfigChannel+0x7e4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d12a      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007598:	4619      	mov	r1, r3
 800759a:	4819      	ldr	r0, [pc, #100]	; (8007600 <HAL_ADC_ConfigChannel+0x7dc>)
 800759c:	f7ff f969 	bl	8006872 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075a0:	e021      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1c      	ldr	r2, [pc, #112]	; (8007618 <HAL_ADC_ConfigChannel+0x7f4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d11c      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80075ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d116      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a12      	ldr	r2, [pc, #72]	; (8007608 <HAL_ADC_ConfigChannel+0x7e4>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d111      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075ca:	4619      	mov	r1, r3
 80075cc:	480c      	ldr	r0, [pc, #48]	; (8007600 <HAL_ADC_ConfigChannel+0x7dc>)
 80075ce:	f7ff f950 	bl	8006872 <LL_ADC_SetCommonPathInternalCh>
 80075d2:	e008      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80075ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	37d8      	adds	r7, #216	; 0xd8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	80080000 	.word	0x80080000
 8007600:	50040300 	.word	0x50040300
 8007604:	c7520000 	.word	0xc7520000
 8007608:	50040000 	.word	0x50040000
 800760c:	20000000 	.word	0x20000000
 8007610:	053e2d63 	.word	0x053e2d63
 8007614:	cb840000 	.word	0xcb840000
 8007618:	80000001 	.word	0x80000001

0800761c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800762c:	4b0c      	ldr	r3, [pc, #48]	; (8007660 <__NVIC_SetPriorityGrouping+0x44>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007638:	4013      	ands	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800764c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800764e:	4a04      	ldr	r2, [pc, #16]	; (8007660 <__NVIC_SetPriorityGrouping+0x44>)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	60d3      	str	r3, [r2, #12]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	e000ed00 	.word	0xe000ed00

08007664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007668:	4b04      	ldr	r3, [pc, #16]	; (800767c <__NVIC_GetPriorityGrouping+0x18>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	f003 0307 	and.w	r3, r3, #7
}
 8007672:	4618      	mov	r0, r3
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	e000ed00 	.word	0xe000ed00

08007680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800768a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800768e:	2b00      	cmp	r3, #0
 8007690:	db0b      	blt.n	80076aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	f003 021f 	and.w	r2, r3, #31
 8007698:	4907      	ldr	r1, [pc, #28]	; (80076b8 <__NVIC_EnableIRQ+0x38>)
 800769a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	2001      	movs	r0, #1
 80076a2:	fa00 f202 	lsl.w	r2, r0, r2
 80076a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	e000e100 	.word	0xe000e100

080076bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	db12      	blt.n	80076f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	f003 021f 	and.w	r2, r3, #31
 80076d4:	490a      	ldr	r1, [pc, #40]	; (8007700 <__NVIC_DisableIRQ+0x44>)
 80076d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2001      	movs	r0, #1
 80076de:	fa00 f202 	lsl.w	r2, r0, r2
 80076e2:	3320      	adds	r3, #32
 80076e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80076e8:	f3bf 8f4f 	dsb	sy
}
 80076ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80076ee:	f3bf 8f6f 	isb	sy
}
 80076f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	e000e100 	.word	0xe000e100

08007704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007714:	2b00      	cmp	r3, #0
 8007716:	db0a      	blt.n	800772e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	b2da      	uxtb	r2, r3
 800771c:	490c      	ldr	r1, [pc, #48]	; (8007750 <__NVIC_SetPriority+0x4c>)
 800771e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007722:	0112      	lsls	r2, r2, #4
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	440b      	add	r3, r1
 8007728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800772c:	e00a      	b.n	8007744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	4908      	ldr	r1, [pc, #32]	; (8007754 <__NVIC_SetPriority+0x50>)
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	3b04      	subs	r3, #4
 800773c:	0112      	lsls	r2, r2, #4
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	440b      	add	r3, r1
 8007742:	761a      	strb	r2, [r3, #24]
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	e000e100 	.word	0xe000e100
 8007754:	e000ed00 	.word	0xe000ed00

08007758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007758:	b480      	push	{r7}
 800775a:	b089      	sub	sp, #36	; 0x24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0307 	and.w	r3, r3, #7
 800776a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f1c3 0307 	rsb	r3, r3, #7
 8007772:	2b04      	cmp	r3, #4
 8007774:	bf28      	it	cs
 8007776:	2304      	movcs	r3, #4
 8007778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3304      	adds	r3, #4
 800777e:	2b06      	cmp	r3, #6
 8007780:	d902      	bls.n	8007788 <NVIC_EncodePriority+0x30>
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	3b03      	subs	r3, #3
 8007786:	e000      	b.n	800778a <NVIC_EncodePriority+0x32>
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43da      	mvns	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	401a      	ands	r2, r3
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077a0:	f04f 31ff 	mov.w	r1, #4294967295
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	fa01 f303 	lsl.w	r3, r1, r3
 80077aa:	43d9      	mvns	r1, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077b0:	4313      	orrs	r3, r2
         );
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3724      	adds	r7, #36	; 0x24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077d0:	d301      	bcc.n	80077d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077d2:	2301      	movs	r3, #1
 80077d4:	e00f      	b.n	80077f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077d6:	4a0a      	ldr	r2, [pc, #40]	; (8007800 <SysTick_Config+0x40>)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3b01      	subs	r3, #1
 80077dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077de:	210f      	movs	r1, #15
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	f7ff ff8e 	bl	8007704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077e8:	4b05      	ldr	r3, [pc, #20]	; (8007800 <SysTick_Config+0x40>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <SysTick_Config+0x40>)
 80077f0:	2207      	movs	r2, #7
 80077f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	e000e010 	.word	0xe000e010

08007804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff05 	bl	800761c <__NVIC_SetPriorityGrouping>
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	4603      	mov	r3, r0
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800782c:	f7ff ff1a 	bl	8007664 <__NVIC_GetPriorityGrouping>
 8007830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	6978      	ldr	r0, [r7, #20]
 8007838:	f7ff ff8e 	bl	8007758 <NVIC_EncodePriority>
 800783c:	4602      	mov	r2, r0
 800783e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007842:	4611      	mov	r1, r2
 8007844:	4618      	mov	r0, r3
 8007846:	f7ff ff5d 	bl	8007704 <__NVIC_SetPriority>
}
 800784a:	bf00      	nop
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	4603      	mov	r3, r0
 800785a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800785c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff ff0d 	bl	8007680 <__NVIC_EnableIRQ>
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	4603      	mov	r3, r0
 8007876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff ff1d 	bl	80076bc <__NVIC_DisableIRQ>
}
 8007882:	bf00      	nop
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff ff94 	bl	80077c0 <SysTick_Config>
 8007898:	4603      	mov	r3, r0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e054      	b.n	8007960 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7f5b      	ldrb	r3, [r3, #29]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fa fe64 	bl	8002594 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	791b      	ldrb	r3, [r3, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10c      	bne.n	80078f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a22      	ldr	r2, [pc, #136]	; (8007968 <HAL_CRC_Init+0xc4>)
 80078e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0218 	bic.w	r2, r2, #24
 80078f0:	609a      	str	r2, [r3, #8]
 80078f2:	e00c      	b.n	800790e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6899      	ldr	r1, [r3, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f834 	bl	800796c <HAL_CRCEx_Polynomial_Set>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e028      	b.n	8007960 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	795b      	ldrb	r3, [r3, #5]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d105      	bne.n	8007922 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
 800791e:	611a      	str	r2, [r3, #16]
 8007920:	e004      	b.n	800792c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6912      	ldr	r2, [r2, #16]
 800792a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695a      	ldr	r2, [r3, #20]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699a      	ldr	r2, [r3, #24]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	04c11db7 	.word	0x04c11db7

0800796c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800797c:	231f      	movs	r3, #31
 800797e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007980:	bf00      	nop
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1e5a      	subs	r2, r3, #1
 8007986:	613a      	str	r2, [r7, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0f0      	beq.n	8007982 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b18      	cmp	r3, #24
 80079a4:	d846      	bhi.n	8007a34 <HAL_CRCEx_Polynomial_Set+0xc8>
 80079a6:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	08007a3b 	.word	0x08007a3b
 80079b0:	08007a35 	.word	0x08007a35
 80079b4:	08007a35 	.word	0x08007a35
 80079b8:	08007a35 	.word	0x08007a35
 80079bc:	08007a35 	.word	0x08007a35
 80079c0:	08007a35 	.word	0x08007a35
 80079c4:	08007a35 	.word	0x08007a35
 80079c8:	08007a35 	.word	0x08007a35
 80079cc:	08007a29 	.word	0x08007a29
 80079d0:	08007a35 	.word	0x08007a35
 80079d4:	08007a35 	.word	0x08007a35
 80079d8:	08007a35 	.word	0x08007a35
 80079dc:	08007a35 	.word	0x08007a35
 80079e0:	08007a35 	.word	0x08007a35
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	08007a35 	.word	0x08007a35
 80079ec:	08007a1d 	.word	0x08007a1d
 80079f0:	08007a35 	.word	0x08007a35
 80079f4:	08007a35 	.word	0x08007a35
 80079f8:	08007a35 	.word	0x08007a35
 80079fc:	08007a35 	.word	0x08007a35
 8007a00:	08007a35 	.word	0x08007a35
 8007a04:	08007a35 	.word	0x08007a35
 8007a08:	08007a35 	.word	0x08007a35
 8007a0c:	08007a11 	.word	0x08007a11
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	2b06      	cmp	r3, #6
 8007a14:	d913      	bls.n	8007a3e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a1a:	e010      	b.n	8007a3e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b07      	cmp	r3, #7
 8007a20:	d90f      	bls.n	8007a42 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a26:	e00c      	b.n	8007a42 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	d90b      	bls.n	8007a46 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007a32:	e008      	b.n	8007a46 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]
      break;
 8007a38:	e006      	b.n	8007a48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a3a:	bf00      	nop
 8007a3c:	e004      	b.n	8007a48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a3e:	bf00      	nop
 8007a40:	e002      	b.n	8007a48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a42:	bf00      	nop
 8007a44:	e000      	b.n	8007a48 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007a46:	bf00      	nop
  }
  if (status == HAL_OK)
 8007a48:	7dfb      	ldrb	r3, [r7, #23]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f023 0118 	bic.w	r1, r3, #24
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e014      	b.n	8007ab4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fa fd9a 	bl	80025d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	795b      	ldrb	r3, [r3, #5]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_DAC_ConfigChannel+0x1c>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e12a      	b.n	8007d2e <HAL_DAC_ConfigChannel+0x272>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d174      	bne.n	8007bd6 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007aec:	f7fe fe7e 	bl	80067ec <HAL_GetTick>
 8007af0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d134      	bne.n	8007b62 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007af8:	e011      	b.n	8007b1e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007afa:	f7fe fe77 	bl	80067ec <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d90a      	bls.n	8007b1e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f043 0208 	orr.w	r2, r3, #8
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2203      	movs	r2, #3
 8007b18:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e107      	b.n	8007d2e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d1e6      	bne.n	8007afa <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f7fe fe69 	bl	8006804 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	69d2      	ldr	r2, [r2, #28]
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8007b3c:	e01e      	b.n	8007b7c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007b3e:	f7fe fe55 	bl	80067ec <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d90a      	bls.n	8007b62 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f043 0208 	orr.w	r2, r3, #8
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e0e5      	b.n	8007d2e <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	dbe8      	blt.n	8007b3e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	f7fe fe49 	bl	8006804 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	69d2      	ldr	r2, [r2, #28]
 8007b7a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b90:	43db      	mvns	r3, r3
 8007b92:	ea02 0103 	and.w	r1, r2, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6a1a      	ldr	r2, [r3, #32]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	409a      	lsls	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	21ff      	movs	r1, #255	; 0xff
 8007bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	ea02 0103 	and.w	r1, r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	409a      	lsls	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d11d      	bne.n	8007c1a <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	221f      	movs	r2, #31
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	69fa      	ldr	r2, [r7, #28]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f003 0310 	and.w	r3, r3, #16
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c20:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2207      	movs	r2, #7
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	4013      	ands	r3, r2
 8007c34:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f003 0310 	and.w	r3, r3, #16
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6819      	ldr	r1, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c72:	fa02 f303 	lsl.w	r3, r2, r3
 8007c76:	43da      	mvns	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	400a      	ands	r2, r1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f003 0310 	and.w	r3, r3, #16
 8007c8e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	43db      	mvns	r3, r3
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f003 0310 	and.w	r3, r3, #16
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cbe:	d104      	bne.n	8007cca <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	e018      	b.n	8007cfc <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d104      	bne.n	8007cdc <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	e00f      	b.n	8007cfc <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8007cdc:	f003 fd26 	bl	800b72c <HAL_RCC_GetHCLKFreq>
 8007ce0:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	4a14      	ldr	r2, [pc, #80]	; (8007d38 <HAL_DAC_ConfigChannel+0x27c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d904      	bls.n	8007cf4 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	e003      	b.n	8007cfc <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cfa:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	69fa      	ldr	r2, [r7, #28]
 8007d02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6819      	ldr	r1, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	22c0      	movs	r2, #192	; 0xc0
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	43da      	mvns	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	400a      	ands	r2, r1
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	04c4b400 	.word	0x04c4b400

08007d3c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e0ac      	b.n	8007ea8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fb76 	bl	8008444 <DFSDM_GetChannelFromInstance>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	4a55      	ldr	r2, [pc, #340]	; (8007eb0 <HAL_DFSDM_ChannelInit+0x174>)
 8007d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e09f      	b.n	8007ea8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fa fd0d 	bl	8002788 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8007d6e:	4b51      	ldr	r3, [pc, #324]	; (8007eb4 <HAL_DFSDM_ChannelInit+0x178>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3301      	adds	r3, #1
 8007d74:	4a4f      	ldr	r2, [pc, #316]	; (8007eb4 <HAL_DFSDM_ChannelInit+0x178>)
 8007d76:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8007d78:	4b4e      	ldr	r3, [pc, #312]	; (8007eb4 <HAL_DFSDM_ChannelInit+0x178>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d125      	bne.n	8007dcc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007d80:	4b4d      	ldr	r3, [pc, #308]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a4c      	ldr	r2, [pc, #304]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d8a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8007d8c:	4b4a      	ldr	r3, [pc, #296]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	4948      	ldr	r1, [pc, #288]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8007d9a:	4b47      	ldr	r3, [pc, #284]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a46      	ldr	r2, [pc, #280]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007da0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8007da4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d108      	bne.n	8007dc0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8007dae:	4b42      	ldr	r3, [pc, #264]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	041b      	lsls	r3, r3, #16
 8007dba:	493f      	ldr	r1, [pc, #252]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8007dc0:	4b3d      	ldr	r3, [pc, #244]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a3c      	ldr	r2, [pc, #240]	; (8007eb8 <HAL_DFSDM_ChannelInit+0x17c>)
 8007dc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8007dda:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007dea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007df0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 020f 	bic.w	r2, r2, #15
 8007e08:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6819      	ldr	r1, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8007e30:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6899      	ldr	r1, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	3b01      	subs	r3, #1
 8007e42:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007e44:	431a      	orrs	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f002 0207 	and.w	r2, r2, #7
 8007e5c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6859      	ldr	r1, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e88:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 fad4 	bl	8008444 <DFSDM_GetChannelFromInstance>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	4904      	ldr	r1, [pc, #16]	; (8007eb0 <HAL_DFSDM_ChannelInit+0x174>)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	20002390 	.word	0x20002390
 8007eb4:	2000238c 	.word	0x2000238c
 8007eb8:	40016000 	.word	0x40016000

08007ebc <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e0ca      	b.n	800808c <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a66      	ldr	r2, [pc, #408]	; (8008094 <HAL_DFSDM_FilterInit+0x1b0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d109      	bne.n	8007f14 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d003      	beq.n	8007f10 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e0bb      	b.n	800808c <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7fa fb8f 	bl	8002650 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8007f40:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7a1b      	ldrb	r3, [r3, #8]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d108      	bne.n	8007f5c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	e007      	b.n	8007f6c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007f6a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7a5b      	ldrb	r3, [r3, #9]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d108      	bne.n	8007f86 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e007      	b.n	8007f96 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007f94:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007fa4:	f023 0308 	bic.w	r3, r3, #8
 8007fa8:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d108      	bne.n	8007fc4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7c1b      	ldrb	r3, [r3, #16]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d108      	bne.n	8007fde <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0210 	orr.w	r2, r2, #16
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	e007      	b.n	8007fee <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f022 0210 	bic.w	r2, r2, #16
 8007fec:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7c5b      	ldrb	r3, [r3, #17]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d108      	bne.n	8008008 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0220 	orr.w	r2, r2, #32
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e007      	b.n	8008018 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0220 	bic.w	r2, r2, #32
 8008016:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6812      	ldr	r2, [r2, #0]
 8008022:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8008026:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800802a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6959      	ldr	r1, [r3, #20]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	3b01      	subs	r3, #1
 800803c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800803e:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008044:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8008046:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	430a      	orrs	r2, r1
 800804e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	699a      	ldr	r2, [r3, #24]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	7c1a      	ldrb	r2, [r3, #16]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	40016100 	.word	0x40016100

08008098 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d02e      	beq.n	8008110 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80080b8:	2bff      	cmp	r3, #255	; 0xff
 80080ba:	d029      	beq.n	8008110 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80080ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ce:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d10d      	bne.n	80080f2 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	e00a      	b.n	8008108 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6819      	ldr	r1, [r3, #0]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	430a      	orrs	r2, r1
 8008106:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	631a      	str	r2, [r3, #48]	; 0x30
 800810e:	e001      	b.n	8008114 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
}
 8008116:	4618      	mov	r0, r3
 8008118:	371c      	adds	r7, #28
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08c      	sub	sp, #48	; 0x30
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f003 0308 	and.w	r3, r3, #8
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00f      	beq.n	8008166 <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2208      	movs	r2, #8
 8008156:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f966 	bl	8008430 <HAL_DFSDM_FilterErrorCallback>
 8008164:	e13b      	b.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00f      	beq.n	8008190 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2204      	movs	r2, #4
 8008180:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2202      	movs	r2, #2
 8008186:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f951 	bl	8008430 <HAL_DFSDM_FilterErrorCallback>
 800818e:	e126      	b.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d025      	beq.n	80081e6 <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d020      	beq.n	80081e6 <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f923 	bl	80083f0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f040 8114 	bne.w	80083dc <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f040 810f 	bne.w	80083dc <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0202 	bic.w	r2, r2, #2
 80081cc:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d101      	bne.n	80081dc <HAL_DFSDM_IRQHandler+0xb8>
 80081d8:	2201      	movs	r2, #1
 80081da:	e000      	b.n	80081de <HAL_DFSDM_IRQHandler+0xba>
 80081dc:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80081e4:	e0fa      	b.n	80083dc <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d034      	beq.n	800825a <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d02f      	beq.n	800825a <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f902 	bl	8008404 <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008204:	1e5a      	subs	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800820e:	2b00      	cmp	r3, #0
 8008210:	f040 80e5 	bne.w	80083de <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d112      	bne.n	8008242 <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8008232:	2b03      	cmp	r3, #3
 8008234:	d101      	bne.n	800823a <HAL_DFSDM_IRQHandler+0x116>
 8008236:	2201      	movs	r2, #1
 8008238:	e000      	b.n	800823c <HAL_DFSDM_IRQHandler+0x118>
 800823a:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8008248:	2b01      	cmp	r3, #1
 800824a:	d102      	bne.n	8008252 <HAL_DFSDM_IRQHandler+0x12e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008250:	e000      	b.n	8008254 <HAL_DFSDM_IRQHandler+0x130>
 8008252:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8008258:	e0c1      	b.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	d03d      	beq.n	80082e0 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 800826a:	2b00      	cmp	r3, #0
 800826c:	d038      	beq.n	80082e0 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008278:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_DFSDM_IRQHandler+0x162>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <HAL_DFSDM_IRQHandler+0x164>
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d109      	bne.n	80082a4 <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8008296:	e005      	b.n	80082a4 <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	3301      	adds	r3, #1
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <HAL_DFSDM_IRQHandler+0x190>
 80082ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b0:	2b06      	cmp	r3, #6
 80082b2:	d9f1      	bls.n	8008298 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d105      	bne.n	80082c6 <HAL_DFSDM_IRQHandler+0x1a2>
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	3308      	adds	r3, #8
 80082be:	2201      	movs	r2, #1
 80082c0:	fa02 f303 	lsl.w	r3, r2, r3
 80082c4:	e003      	b.n	80082ce <HAL_DFSDM_IRQHandler+0x1aa>
 80082c6:	2201      	movs	r2, #1
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6812      	ldr	r2, [r2, #0]
 80082d2:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f89d 	bl	8008418 <HAL_DFSDM_FilterAwdCallback>
  {
 80082de:	e07e      	b.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a40      	ldr	r2, [pc, #256]	; (80083e8 <HAL_DFSDM_IRQHandler+0x2c4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d141      	bne.n	800836e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d03c      	beq.n	800836e <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d037      	beq.n	800836e <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	b2db      	uxtb	r3, r3
 800830c:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 800830e:	e02a      	b.n	8008366 <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01f      	beq.n	800835a <HAL_DFSDM_IRQHandler+0x236>
 800831a:	4a34      	ldr	r2, [pc, #208]	; (80083ec <HAL_DFSDM_IRQHandler+0x2c8>)
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d019      	beq.n	800835a <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8008326:	4a31      	ldr	r2, [pc, #196]	; (80083ec <HAL_DFSDM_IRQHandler+0x2c8>)
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00f      	beq.n	800835a <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	f103 0210 	add.w	r2, r3, #16
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2101      	movs	r1, #1
 8008346:	fa01 f202 	lsl.w	r2, r1, r2
 800834a:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 800834c:	4a27      	ldr	r2, [pc, #156]	; (80083ec <HAL_DFSDM_IRQHandler+0x2c8>)
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff fdb1 	bl	8007ebc <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	3301      	adds	r3, #1
 800835e:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	2b07      	cmp	r3, #7
 800836a:	d9d1      	bls.n	8008310 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 800836c:	e037      	b.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a1d      	ldr	r2, [pc, #116]	; (80083e8 <HAL_DFSDM_IRQHandler+0x2c4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d132      	bne.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 800837e:	2b00      	cmp	r3, #0
 8008380:	d02d      	beq.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8008388:	2b00      	cmp	r3, #0
 800838a:	d028      	beq.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	b2db      	uxtb	r3, r3
 800839a:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 800839c:	e005      	b.n	80083aa <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	3301      	adds	r3, #1
 80083a2:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	085b      	lsrs	r3, r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <HAL_DFSDM_IRQHandler+0x296>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	2b06      	cmp	r3, #6
 80083b8:	d9f1      	bls.n	800839e <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	f103 0218 	add.w	r2, r3, #24
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2101      	movs	r1, #1
 80083c6:	fa01 f202 	lsl.w	r2, r1, r2
 80083ca:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 80083cc:	4a07      	ldr	r2, [pc, #28]	; (80083ec <HAL_DFSDM_IRQHandler+0x2c8>)
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7ff fd7b 	bl	8007ed0 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 80083da:	e000      	b.n	80083de <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80083dc:	bf00      	nop
}
 80083de:	bf00      	nop
 80083e0:	3730      	adds	r7, #48	; 0x30
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	40016100 	.word	0x40016100
 80083ec:	20002390 	.word	0x20002390

080083f0 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8008424:	bf00      	nop
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a1c      	ldr	r2, [pc, #112]	; (80084c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d102      	bne.n	800845a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	e02b      	b.n	80084b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	4a19      	ldr	r2, [pc, #100]	; (80084c4 <DFSDM_GetChannelFromInstance+0x80>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d102      	bne.n	8008468 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8008462:	2301      	movs	r3, #1
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	e024      	b.n	80084b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <DFSDM_GetChannelFromInstance+0x84>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d102      	bne.n	8008476 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8008470:	2302      	movs	r3, #2
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	e01d      	b.n	80084b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a14      	ldr	r2, [pc, #80]	; (80084cc <DFSDM_GetChannelFromInstance+0x88>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d102      	bne.n	8008484 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800847e:	2304      	movs	r3, #4
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	e016      	b.n	80084b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a12      	ldr	r2, [pc, #72]	; (80084d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d102      	bne.n	8008492 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800848c:	2305      	movs	r3, #5
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e00f      	b.n	80084b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a0f      	ldr	r2, [pc, #60]	; (80084d4 <DFSDM_GetChannelFromInstance+0x90>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d102      	bne.n	80084a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800849a:	2306      	movs	r3, #6
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e008      	b.n	80084b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a0d      	ldr	r2, [pc, #52]	; (80084d8 <DFSDM_GetChannelFromInstance+0x94>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d102      	bne.n	80084ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80084a8:	2307      	movs	r3, #7
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	e001      	b.n	80084b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80084ae:	2303      	movs	r3, #3
 80084b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80084b2:	68fb      	ldr	r3, [r7, #12]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	40016000 	.word	0x40016000
 80084c4:	40016020 	.word	0x40016020
 80084c8:	40016040 	.word	0x40016040
 80084cc:	40016080 	.word	0x40016080
 80084d0:	400160a0 	.word	0x400160a0
 80084d4:	400160c0 	.word	0x400160c0
 80084d8:	400160e0 	.word	0x400160e0

080084dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e08d      	b.n	800860a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	461a      	mov	r2, r3
 80084f4:	4b47      	ldr	r3, [pc, #284]	; (8008614 <HAL_DMA_Init+0x138>)
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d80f      	bhi.n	800851a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	4b45      	ldr	r3, [pc, #276]	; (8008618 <HAL_DMA_Init+0x13c>)
 8008502:	4413      	add	r3, r2
 8008504:	4a45      	ldr	r2, [pc, #276]	; (800861c <HAL_DMA_Init+0x140>)
 8008506:	fba2 2303 	umull	r2, r3, r2, r3
 800850a:	091b      	lsrs	r3, r3, #4
 800850c:	009a      	lsls	r2, r3, #2
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a42      	ldr	r2, [pc, #264]	; (8008620 <HAL_DMA_Init+0x144>)
 8008516:	641a      	str	r2, [r3, #64]	; 0x40
 8008518:	e00e      	b.n	8008538 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	4b40      	ldr	r3, [pc, #256]	; (8008624 <HAL_DMA_Init+0x148>)
 8008522:	4413      	add	r3, r2
 8008524:	4a3d      	ldr	r2, [pc, #244]	; (800861c <HAL_DMA_Init+0x140>)
 8008526:	fba2 2303 	umull	r2, r3, r2, r3
 800852a:	091b      	lsrs	r3, r3, #4
 800852c:	009a      	lsls	r2, r3, #2
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a3c      	ldr	r2, [pc, #240]	; (8008628 <HAL_DMA_Init+0x14c>)
 8008536:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800854e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008552:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800855c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f95c 	bl	8008848 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008598:	d102      	bne.n	80085a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085a8:	b2d2      	uxtb	r2, r2
 80085aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80085b4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d010      	beq.n	80085e0 <HAL_DMA_Init+0x104>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d80c      	bhi.n	80085e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f97c 	bl	80088c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	e008      	b.n	80085f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	40020407 	.word	0x40020407
 8008618:	bffdfff8 	.word	0xbffdfff8
 800861c:	cccccccd 	.word	0xcccccccd
 8008620:	40020000 	.word	0x40020000
 8008624:	bffdfbf8 	.word	0xbffdfbf8
 8008628:	40020400 	.word	0x40020400

0800862c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d005      	beq.n	8008650 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2204      	movs	r2, #4
 8008648:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	73fb      	strb	r3, [r7, #15]
 800864e:	e047      	b.n	80086e0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 020e 	bic.w	r2, r2, #14
 800865e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800867e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008684:	f003 021c 	and.w	r2, r3, #28
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868c:	2101      	movs	r1, #1
 800868e:	fa01 f202 	lsl.w	r2, r1, r2
 8008692:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800869c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00c      	beq.n	80086c0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80086be:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
    }
  }
  return status;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008706:	f003 031c 	and.w	r3, r3, #28
 800870a:	2204      	movs	r2, #4
 800870c:	409a      	lsls	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4013      	ands	r3, r2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d026      	beq.n	8008764 <HAL_DMA_IRQHandler+0x7a>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b00      	cmp	r3, #0
 800871e:	d021      	beq.n	8008764 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d107      	bne.n	800873e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0204 	bic.w	r2, r2, #4
 800873c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008742:	f003 021c 	and.w	r2, r3, #28
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	2104      	movs	r1, #4
 800874c:	fa01 f202 	lsl.w	r2, r1, r2
 8008750:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	2b00      	cmp	r3, #0
 8008758:	d071      	beq.n	800883e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8008762:	e06c      	b.n	800883e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	f003 031c 	and.w	r3, r3, #28
 800876c:	2202      	movs	r2, #2
 800876e:	409a      	lsls	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4013      	ands	r3, r2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d02e      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xec>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d029      	beq.n	80087d6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10b      	bne.n	80087a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f022 020a 	bic.w	r2, r2, #10
 800879e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ac:	f003 021c 	and.w	r2, r3, #28
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b4:	2102      	movs	r1, #2
 80087b6:	fa01 f202 	lsl.w	r2, r1, r2
 80087ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d038      	beq.n	800883e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80087d4:	e033      	b.n	800883e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087da:	f003 031c 	and.w	r3, r3, #28
 80087de:	2208      	movs	r2, #8
 80087e0:	409a      	lsls	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d02a      	beq.n	8008840 <HAL_DMA_IRQHandler+0x156>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d025      	beq.n	8008840 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 020e 	bic.w	r2, r2, #14
 8008802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008808:	f003 021c 	and.w	r2, r3, #28
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	2101      	movs	r1, #1
 8008812:	fa01 f202 	lsl.w	r2, r1, r2
 8008816:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800883e:	bf00      	nop
 8008840:	bf00      	nop
}
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	4b17      	ldr	r3, [pc, #92]	; (80088b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008858:	429a      	cmp	r2, r3
 800885a:	d80a      	bhi.n	8008872 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008860:	089b      	lsrs	r3, r3, #2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008868:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6493      	str	r3, [r2, #72]	; 0x48
 8008870:	e007      	b.n	8008882 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008876:	089b      	lsrs	r3, r3, #2
 8008878:	009a      	lsls	r2, r3, #2
 800887a:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800887c:	4413      	add	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	3b08      	subs	r3, #8
 800888a:	4a0c      	ldr	r2, [pc, #48]	; (80088bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800888c:	fba2 2303 	umull	r2, r3, r2, r3
 8008890:	091b      	lsrs	r3, r3, #4
 8008892:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a0a      	ldr	r2, [pc, #40]	; (80088c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008898:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	2201      	movs	r2, #1
 80088a2:	409a      	lsls	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80088a8:	bf00      	nop
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	40020407 	.word	0x40020407
 80088b8:	4002081c 	.word	0x4002081c
 80088bc:	cccccccd 	.word	0xcccccccd
 80088c0:	40020880 	.word	0x40020880

080088c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	461a      	mov	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a08      	ldr	r2, [pc, #32]	; (8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80088e6:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	2201      	movs	r2, #1
 80088f2:	409a      	lsls	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80088f8:	bf00      	nop
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	1000823f 	.word	0x1000823f
 8008908:	40020940 	.word	0x40020940

0800890c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800891a:	e166      	b.n	8008bea <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	2101      	movs	r1, #1
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	4013      	ands	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 8158 	beq.w	8008be4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f003 0303 	and.w	r3, r3, #3
 800893c:	2b01      	cmp	r3, #1
 800893e:	d005      	beq.n	800894c <HAL_GPIO_Init+0x40>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d130      	bne.n	80089ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	005b      	lsls	r3, r3, #1
 8008956:	2203      	movs	r2, #3
 8008958:	fa02 f303 	lsl.w	r3, r2, r3
 800895c:	43db      	mvns	r3, r3
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4013      	ands	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	005b      	lsls	r3, r3, #1
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008982:	2201      	movs	r2, #1
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	fa02 f303 	lsl.w	r3, r2, r3
 800898a:	43db      	mvns	r3, r3
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4013      	ands	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	091b      	lsrs	r3, r3, #4
 8008998:	f003 0201 	and.w	r2, r3, #1
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	fa02 f303 	lsl.w	r3, r2, r3
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d017      	beq.n	80089ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	2203      	movs	r2, #3
 80089c6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ca:	43db      	mvns	r3, r3
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4013      	ands	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	fa02 f303 	lsl.w	r3, r2, r3
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d123      	bne.n	8008a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	08da      	lsrs	r2, r3, #3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3208      	adds	r2, #8
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	220f      	movs	r2, #15
 8008a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a12:	43db      	mvns	r3, r3
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4013      	ands	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	691a      	ldr	r2, [r3, #16]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	08da      	lsrs	r2, r3, #3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3208      	adds	r2, #8
 8008a38:	6939      	ldr	r1, [r7, #16]
 8008a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	2203      	movs	r2, #3
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4013      	ands	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f003 0203 	and.w	r2, r3, #3
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	fa02 f303 	lsl.w	r3, r2, r3
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f000 80b2 	beq.w	8008be4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a80:	4b61      	ldr	r3, [pc, #388]	; (8008c08 <HAL_GPIO_Init+0x2fc>)
 8008a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a84:	4a60      	ldr	r2, [pc, #384]	; (8008c08 <HAL_GPIO_Init+0x2fc>)
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8008a8c:	4b5e      	ldr	r3, [pc, #376]	; (8008c08 <HAL_GPIO_Init+0x2fc>)
 8008a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008a98:	4a5c      	ldr	r2, [pc, #368]	; (8008c0c <HAL_GPIO_Init+0x300>)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	089b      	lsrs	r3, r3, #2
 8008a9e:	3302      	adds	r3, #2
 8008aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	220f      	movs	r2, #15
 8008ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab4:	43db      	mvns	r3, r3
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4013      	ands	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008ac2:	d02b      	beq.n	8008b1c <HAL_GPIO_Init+0x210>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a52      	ldr	r2, [pc, #328]	; (8008c10 <HAL_GPIO_Init+0x304>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d025      	beq.n	8008b18 <HAL_GPIO_Init+0x20c>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a51      	ldr	r2, [pc, #324]	; (8008c14 <HAL_GPIO_Init+0x308>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d01f      	beq.n	8008b14 <HAL_GPIO_Init+0x208>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a50      	ldr	r2, [pc, #320]	; (8008c18 <HAL_GPIO_Init+0x30c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d019      	beq.n	8008b10 <HAL_GPIO_Init+0x204>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a4f      	ldr	r2, [pc, #316]	; (8008c1c <HAL_GPIO_Init+0x310>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d013      	beq.n	8008b0c <HAL_GPIO_Init+0x200>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a4e      	ldr	r2, [pc, #312]	; (8008c20 <HAL_GPIO_Init+0x314>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00d      	beq.n	8008b08 <HAL_GPIO_Init+0x1fc>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a4d      	ldr	r2, [pc, #308]	; (8008c24 <HAL_GPIO_Init+0x318>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d007      	beq.n	8008b04 <HAL_GPIO_Init+0x1f8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a4c      	ldr	r2, [pc, #304]	; (8008c28 <HAL_GPIO_Init+0x31c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d101      	bne.n	8008b00 <HAL_GPIO_Init+0x1f4>
 8008afc:	2307      	movs	r3, #7
 8008afe:	e00e      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b00:	2308      	movs	r3, #8
 8008b02:	e00c      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b04:	2306      	movs	r3, #6
 8008b06:	e00a      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b08:	2305      	movs	r3, #5
 8008b0a:	e008      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	e006      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b10:	2303      	movs	r3, #3
 8008b12:	e004      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e002      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e000      	b.n	8008b1e <HAL_GPIO_Init+0x212>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	f002 0203 	and.w	r2, r2, #3
 8008b24:	0092      	lsls	r2, r2, #2
 8008b26:	4093      	lsls	r3, r2
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008b2e:	4937      	ldr	r1, [pc, #220]	; (8008c0c <HAL_GPIO_Init+0x300>)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	089b      	lsrs	r3, r3, #2
 8008b34:	3302      	adds	r3, #2
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b3c:	4b3b      	ldr	r3, [pc, #236]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	43db      	mvns	r3, r3
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008b60:	4a32      	ldr	r2, [pc, #200]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008b66:	4b31      	ldr	r3, [pc, #196]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	43db      	mvns	r3, r3
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4013      	ands	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008b8a:	4a28      	ldr	r2, [pc, #160]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008b90:	4b26      	ldr	r3, [pc, #152]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	43db      	mvns	r3, r3
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008bb4:	4a1d      	ldr	r2, [pc, #116]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008bba:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008bde:	4a13      	ldr	r2, [pc, #76]	; (8008c2c <HAL_GPIO_Init+0x320>)
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	3301      	adds	r3, #1
 8008be8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f47f ae91 	bne.w	800891c <HAL_GPIO_Init+0x10>
  }
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	40021000 	.word	0x40021000
 8008c0c:	40010000 	.word	0x40010000
 8008c10:	48000400 	.word	0x48000400
 8008c14:	48000800 	.word	0x48000800
 8008c18:	48000c00 	.word	0x48000c00
 8008c1c:	48001000 	.word	0x48001000
 8008c20:	48001400 	.word	0x48001400
 8008c24:	48001800 	.word	0x48001800
 8008c28:	48001c00 	.word	0x48001c00
 8008c2c:	40010400 	.word	0x40010400

08008c30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008c3e:	e0c9      	b.n	8008dd4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008c40:	2201      	movs	r2, #1
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80bc 	beq.w	8008dce <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008c56:	4a66      	ldr	r2, [pc, #408]	; (8008df0 <HAL_GPIO_DeInit+0x1c0>)
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	089b      	lsrs	r3, r3, #2
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c62:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	220f      	movs	r2, #15
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	4013      	ands	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008c7e:	d02b      	beq.n	8008cd8 <HAL_GPIO_DeInit+0xa8>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a5c      	ldr	r2, [pc, #368]	; (8008df4 <HAL_GPIO_DeInit+0x1c4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d025      	beq.n	8008cd4 <HAL_GPIO_DeInit+0xa4>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a5b      	ldr	r2, [pc, #364]	; (8008df8 <HAL_GPIO_DeInit+0x1c8>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d01f      	beq.n	8008cd0 <HAL_GPIO_DeInit+0xa0>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a5a      	ldr	r2, [pc, #360]	; (8008dfc <HAL_GPIO_DeInit+0x1cc>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d019      	beq.n	8008ccc <HAL_GPIO_DeInit+0x9c>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a59      	ldr	r2, [pc, #356]	; (8008e00 <HAL_GPIO_DeInit+0x1d0>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <HAL_GPIO_DeInit+0x98>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a58      	ldr	r2, [pc, #352]	; (8008e04 <HAL_GPIO_DeInit+0x1d4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00d      	beq.n	8008cc4 <HAL_GPIO_DeInit+0x94>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a57      	ldr	r2, [pc, #348]	; (8008e08 <HAL_GPIO_DeInit+0x1d8>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d007      	beq.n	8008cc0 <HAL_GPIO_DeInit+0x90>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a56      	ldr	r2, [pc, #344]	; (8008e0c <HAL_GPIO_DeInit+0x1dc>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d101      	bne.n	8008cbc <HAL_GPIO_DeInit+0x8c>
 8008cb8:	2307      	movs	r3, #7
 8008cba:	e00e      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008cbc:	2308      	movs	r3, #8
 8008cbe:	e00c      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008cc0:	2306      	movs	r3, #6
 8008cc2:	e00a      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008cc4:	2305      	movs	r3, #5
 8008cc6:	e008      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	e006      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e004      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e002      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e000      	b.n	8008cda <HAL_GPIO_DeInit+0xaa>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	f002 0203 	and.w	r2, r2, #3
 8008ce0:	0092      	lsls	r2, r2, #2
 8008ce2:	4093      	lsls	r3, r2
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d132      	bne.n	8008d50 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008cea:	4b49      	ldr	r3, [pc, #292]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	43db      	mvns	r3, r3
 8008cf2:	4947      	ldr	r1, [pc, #284]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008cf8:	4b45      	ldr	r3, [pc, #276]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	4943      	ldr	r1, [pc, #268]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008d02:	4013      	ands	r3, r2
 8008d04:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008d06:	4b42      	ldr	r3, [pc, #264]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	4940      	ldr	r1, [pc, #256]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8008d14:	4b3e      	ldr	r3, [pc, #248]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	43db      	mvns	r3, r3
 8008d1c:	493c      	ldr	r1, [pc, #240]	; (8008e10 <HAL_GPIO_DeInit+0x1e0>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	220f      	movs	r2, #15
 8008d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008d32:	4a2f      	ldr	r2, [pc, #188]	; (8008df0 <HAL_GPIO_DeInit+0x1c0>)
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	089b      	lsrs	r3, r3, #2
 8008d38:	3302      	adds	r3, #2
 8008d3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	43da      	mvns	r2, r3
 8008d42:	482b      	ldr	r0, [pc, #172]	; (8008df0 <HAL_GPIO_DeInit+0x1c0>)
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	089b      	lsrs	r3, r3, #2
 8008d48:	400a      	ands	r2, r1
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	2103      	movs	r1, #3
 8008d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	08da      	lsrs	r2, r3, #3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	3208      	adds	r2, #8
 8008d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	220f      	movs	r2, #15
 8008d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7e:	43db      	mvns	r3, r3
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	08d2      	lsrs	r2, r2, #3
 8008d84:	4019      	ands	r1, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3208      	adds	r2, #8
 8008d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	2103      	movs	r1, #3
 8008d98:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9c:	43db      	mvns	r3, r3
 8008d9e:	401a      	ands	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	2101      	movs	r1, #1
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	fa01 f303 	lsl.w	r3, r1, r3
 8008db0:	43db      	mvns	r3, r3
 8008db2:	401a      	ands	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68da      	ldr	r2, [r3, #12]
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	2103      	movs	r1, #3
 8008dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	401a      	ands	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f47f af2f 	bne.w	8008c40 <HAL_GPIO_DeInit+0x10>
  }
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	371c      	adds	r7, #28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	40010000 	.word	0x40010000
 8008df4:	48000400 	.word	0x48000400
 8008df8:	48000800 	.word	0x48000800
 8008dfc:	48000c00 	.word	0x48000c00
 8008e00:	48001000 	.word	0x48001000
 8008e04:	48001400 	.word	0x48001400
 8008e08:	48001800 	.word	0x48001800
 8008e0c:	48001c00 	.word	0x48001c00
 8008e10:	40010400 	.word	0x40010400

08008e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	807b      	strh	r3, [r7, #2]
 8008e20:	4613      	mov	r3, r2
 8008e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e24:	787b      	ldrb	r3, [r7, #1]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e2a:	887a      	ldrh	r2, [r7, #2]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008e30:	e002      	b.n	8008e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008e32:	887a      	ldrh	r2, [r7, #2]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008e4e:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e50:	695a      	ldr	r2, [r3, #20]
 8008e52:	88fb      	ldrh	r3, [r7, #6]
 8008e54:	4013      	ands	r3, r2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d006      	beq.n	8008e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e5a:	4a05      	ldr	r2, [pc, #20]	; (8008e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e5c:	88fb      	ldrh	r3, [r7, #6]
 8008e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e60:	88fb      	ldrh	r3, [r7, #6]
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7f8 f8e0 	bl	8001028 <HAL_GPIO_EXTI_Callback>
  }
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	40010400 	.word	0x40010400

08008e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e081      	b.n	8008f8a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7f9 fd76 	bl	800298c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2224      	movs	r2, #36	; 0x24
 8008ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0201 	bic.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685a      	ldr	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ec4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689a      	ldr	r2, [r3, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ed4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d107      	bne.n	8008eee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	e006      	b.n	8008efc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008efa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d104      	bne.n	8008f0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691a      	ldr	r2, [r3, #16]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	69d9      	ldr	r1, [r3, #28]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1a      	ldr	r2, [r3, #32]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b20      	cmp	r3, #32
 8008fa6:	d138      	bne.n	800901a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d101      	bne.n	8008fb6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e032      	b.n	800901c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2224      	movs	r2, #36	; 0x24
 8008fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0201 	bic.w	r2, r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fe4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6819      	ldr	r1, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f042 0201 	orr.w	r2, r2, #1
 8009004:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2220      	movs	r2, #32
 800900a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	e000      	b.n	800901c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800901a:	2302      	movs	r3, #2
  }
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b20      	cmp	r3, #32
 800903c:	d139      	bne.n	80090b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009048:	2302      	movs	r3, #2
 800904a:	e033      	b.n	80090b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2224      	movs	r2, #36	; 0x24
 8009058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f022 0201 	bic.w	r2, r2, #1
 800906a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800907a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	4313      	orrs	r3, r2
 8009084:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2220      	movs	r2, #32
 80090a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	e000      	b.n	80090b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80090b2:	2302      	movs	r3, #2
  }
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e0bf      	b.n	8009252 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7f9 fcf8 	bl	8002adc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009102:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6999      	ldr	r1, [r3, #24]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685a      	ldr	r2, [r3, #4]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009118:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6899      	ldr	r1, [r3, #8]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	4b4a      	ldr	r3, [pc, #296]	; (800925c <HAL_LTDC_Init+0x19c>)
 8009134:	400b      	ands	r3, r1
 8009136:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6899      	ldr	r1, [r3, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699a      	ldr	r2, [r3, #24]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	431a      	orrs	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68d9      	ldr	r1, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	4b3e      	ldr	r3, [pc, #248]	; (800925c <HAL_LTDC_Init+0x19c>)
 8009162:	400b      	ands	r3, r1
 8009164:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	041b      	lsls	r3, r3, #16
 800916c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68d9      	ldr	r1, [r3, #12]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1a      	ldr	r2, [r3, #32]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6919      	ldr	r1, [r3, #16]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	4b33      	ldr	r3, [pc, #204]	; (800925c <HAL_LTDC_Init+0x19c>)
 8009190:	400b      	ands	r3, r1
 8009192:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6919      	ldr	r1, [r3, #16]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6959      	ldr	r1, [r3, #20]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <HAL_LTDC_Init+0x19c>)
 80091be:	400b      	ands	r3, r1
 80091c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6959      	ldr	r1, [r3, #20]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	431a      	orrs	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80091f0:	041b      	lsls	r3, r3, #16
 80091f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009202:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009216:	431a      	orrs	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0206 	orr.w	r2, r2, #6
 800922e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	699a      	ldr	r2, [r3, #24]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0201 	orr.w	r2, r2, #1
 800923e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	f000f800 	.word	0xf000f800

08009260 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009260:	b5b0      	push	{r4, r5, r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009272:	2b01      	cmp	r3, #1
 8009274:	d101      	bne.n	800927a <HAL_LTDC_ConfigLayer+0x1a>
 8009276:	2302      	movs	r3, #2
 8009278:	e02c      	b.n	80092d4 <HAL_LTDC_ConfigLayer+0x74>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2202      	movs	r2, #2
 8009286:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2134      	movs	r1, #52	; 0x34
 8009290:	fb01 f303 	mul.w	r3, r1, r3
 8009294:	4413      	add	r3, r2
 8009296:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	4614      	mov	r4, r2
 800929e:	461d      	mov	r5, r3
 80092a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f811 	bl	80092dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2201      	movs	r2, #1
 80092c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bdb0      	pop	{r4, r5, r7, pc}

080092dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b089      	sub	sp, #36	; 0x24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	0c1b      	lsrs	r3, r3, #16
 80092f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092f8:	4413      	add	r3, r2
 80092fa:	041b      	lsls	r3, r3, #16
 80092fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	01db      	lsls	r3, r3, #7
 8009308:	4413      	add	r3, r2
 800930a:	3384      	adds	r3, #132	; 0x84
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	6812      	ldr	r2, [r2, #0]
 8009312:	4611      	mov	r1, r2
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	01d2      	lsls	r2, r2, #7
 8009318:	440a      	add	r2, r1
 800931a:	3284      	adds	r2, #132	; 0x84
 800931c:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8009320:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009332:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009334:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4619      	mov	r1, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	01db      	lsls	r3, r3, #7
 8009340:	440b      	add	r3, r1
 8009342:	3384      	adds	r3, #132	; 0x84
 8009344:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800934a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800935a:	4413      	add	r3, r2
 800935c:	041b      	lsls	r3, r3, #16
 800935e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	01db      	lsls	r3, r3, #7
 800936a:	4413      	add	r3, r2
 800936c:	3384      	adds	r3, #132	; 0x84
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	6812      	ldr	r2, [r2, #0]
 8009374:	4611      	mov	r1, r2
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	01d2      	lsls	r2, r2, #7
 800937a:	440a      	add	r2, r1
 800937c:	3284      	adds	r2, #132	; 0x84
 800937e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8009382:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	689a      	ldr	r2, [r3, #8]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009392:	4413      	add	r3, r2
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4619      	mov	r1, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	01db      	lsls	r3, r3, #7
 80093a0:	440b      	add	r3, r1
 80093a2:	3384      	adds	r3, #132	; 0x84
 80093a4:	4619      	mov	r1, r3
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	01db      	lsls	r3, r3, #7
 80093b6:	4413      	add	r3, r2
 80093b8:	3384      	adds	r3, #132	; 0x84
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	4611      	mov	r1, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	01d2      	lsls	r2, r2, #7
 80093c6:	440a      	add	r2, r1
 80093c8:	3284      	adds	r2, #132	; 0x84
 80093ca:	f023 0307 	bic.w	r3, r3, #7
 80093ce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	01db      	lsls	r3, r3, #7
 80093da:	4413      	add	r3, r2
 80093dc:	3384      	adds	r3, #132	; 0x84
 80093de:	461a      	mov	r2, r3
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80093f6:	041b      	lsls	r3, r3, #16
 80093f8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	061b      	lsls	r3, r3, #24
 8009400:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	01db      	lsls	r3, r3, #7
 800940c:	4413      	add	r3, r2
 800940e:	3384      	adds	r3, #132	; 0x84
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	01db      	lsls	r3, r3, #7
 800941c:	4413      	add	r3, r2
 800941e:	3384      	adds	r3, #132	; 0x84
 8009420:	461a      	mov	r2, r3
 8009422:	2300      	movs	r3, #0
 8009424:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800942c:	461a      	mov	r2, r3
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	431a      	orrs	r2, r3
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	431a      	orrs	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4619      	mov	r1, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	01db      	lsls	r3, r3, #7
 8009440:	440b      	add	r3, r1
 8009442:	3384      	adds	r3, #132	; 0x84
 8009444:	4619      	mov	r1, r3
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	4313      	orrs	r3, r2
 800944a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	01db      	lsls	r3, r3, #7
 8009456:	4413      	add	r3, r2
 8009458:	3384      	adds	r3, #132	; 0x84
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	6812      	ldr	r2, [r2, #0]
 8009460:	4611      	mov	r1, r2
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	01d2      	lsls	r2, r2, #7
 8009466:	440a      	add	r2, r1
 8009468:	3284      	adds	r2, #132	; 0x84
 800946a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800946e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	01db      	lsls	r3, r3, #7
 800947a:	4413      	add	r3, r2
 800947c:	3384      	adds	r3, #132	; 0x84
 800947e:	461a      	mov	r2, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	01db      	lsls	r3, r3, #7
 8009490:	4413      	add	r3, r2
 8009492:	3384      	adds	r3, #132	; 0x84
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	4611      	mov	r1, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	01d2      	lsls	r2, r2, #7
 80094a0:	440a      	add	r2, r1
 80094a2:	3284      	adds	r2, #132	; 0x84
 80094a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	69da      	ldr	r2, [r3, #28]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	68f9      	ldr	r1, [r7, #12]
 80094b8:	6809      	ldr	r1, [r1, #0]
 80094ba:	4608      	mov	r0, r1
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	01c9      	lsls	r1, r1, #7
 80094c0:	4401      	add	r1, r0
 80094c2:	3184      	adds	r1, #132	; 0x84
 80094c4:	4313      	orrs	r3, r2
 80094c6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	01db      	lsls	r3, r3, #7
 80094d2:	4413      	add	r3, r2
 80094d4:	3384      	adds	r3, #132	; 0x84
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	01db      	lsls	r3, r3, #7
 80094e2:	4413      	add	r3, r2
 80094e4:	3384      	adds	r3, #132	; 0x84
 80094e6:	461a      	mov	r2, r3
 80094e8:	2300      	movs	r3, #0
 80094ea:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	01db      	lsls	r3, r3, #7
 80094f6:	4413      	add	r3, r2
 80094f8:	3384      	adds	r3, #132	; 0x84
 80094fa:	461a      	mov	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d102      	bne.n	8009510 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800950a:	2304      	movs	r3, #4
 800950c:	61fb      	str	r3, [r7, #28]
 800950e:	e01b      	b.n	8009548 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d102      	bne.n	800951e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009518:	2303      	movs	r3, #3
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	e014      	b.n	8009548 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d00b      	beq.n	800953e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800952a:	2b02      	cmp	r3, #2
 800952c:	d007      	beq.n	800953e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009532:	2b03      	cmp	r3, #3
 8009534:	d003      	beq.n	800953e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800953a:	2b07      	cmp	r3, #7
 800953c:	d102      	bne.n	8009544 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800953e:	2302      	movs	r3, #2
 8009540:	61fb      	str	r3, [r7, #28]
 8009542:	e001      	b.n	8009548 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009544:	2301      	movs	r3, #1
 8009546:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	01db      	lsls	r3, r3, #7
 8009552:	4413      	add	r3, r2
 8009554:	3384      	adds	r3, #132	; 0x84
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	6812      	ldr	r2, [r2, #0]
 800955c:	4611      	mov	r1, r2
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	01d2      	lsls	r2, r2, #7
 8009562:	440a      	add	r2, r1
 8009564:	3284      	adds	r2, #132	; 0x84
 8009566:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800956a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	fb02 f303 	mul.w	r3, r2, r3
 8009576:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	6859      	ldr	r1, [r3, #4]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	1acb      	subs	r3, r1, r3
 8009582:	69f9      	ldr	r1, [r7, #28]
 8009584:	fb01 f303 	mul.w	r3, r1, r3
 8009588:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800958a:	68f9      	ldr	r1, [r7, #12]
 800958c:	6809      	ldr	r1, [r1, #0]
 800958e:	4608      	mov	r0, r1
 8009590:	6879      	ldr	r1, [r7, #4]
 8009592:	01c9      	lsls	r1, r1, #7
 8009594:	4401      	add	r1, r0
 8009596:	3184      	adds	r1, #132	; 0x84
 8009598:	4313      	orrs	r3, r2
 800959a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	01db      	lsls	r3, r3, #7
 80095a6:	4413      	add	r3, r2
 80095a8:	3384      	adds	r3, #132	; 0x84
 80095aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	6812      	ldr	r2, [r2, #0]
 80095b0:	4611      	mov	r1, r2
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	01d2      	lsls	r2, r2, #7
 80095b6:	440a      	add	r2, r1
 80095b8:	3284      	adds	r2, #132	; 0x84
 80095ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095be:	f023 0307 	bic.w	r3, r3, #7
 80095c2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	01db      	lsls	r3, r3, #7
 80095ce:	4413      	add	r3, r2
 80095d0:	3384      	adds	r3, #132	; 0x84
 80095d2:	461a      	mov	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	01db      	lsls	r3, r3, #7
 80095e4:	4413      	add	r3, r2
 80095e6:	3384      	adds	r3, #132	; 0x84
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	6812      	ldr	r2, [r2, #0]
 80095ee:	4611      	mov	r1, r2
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	01d2      	lsls	r2, r2, #7
 80095f4:	440a      	add	r2, r1
 80095f6:	3284      	adds	r2, #132	; 0x84
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	6013      	str	r3, [r2, #0]
}
 80095fe:	bf00      	nop
 8009600:	3724      	adds	r7, #36	; 0x24
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800960a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800960c:	b08f      	sub	sp, #60	; 0x3c
 800960e:	af0a      	add	r7, sp, #40	; 0x28
 8009610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e116      	b.n	800984a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f00b f954 	bl	80148e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2203      	movs	r2, #3
 8009640:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f008 f80d 	bl	801167a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	603b      	str	r3, [r7, #0]
 8009666:	687e      	ldr	r6, [r7, #4]
 8009668:	466d      	mov	r5, sp
 800966a:	f106 0410 	add.w	r4, r6, #16
 800966e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800967a:	e885 0003 	stmia.w	r5, {r0, r1}
 800967e:	1d33      	adds	r3, r6, #4
 8009680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009682:	6838      	ldr	r0, [r7, #0]
 8009684:	f007 ff20 	bl	80114c8 <USB_CoreInit>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2202      	movs	r2, #2
 8009692:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e0d7      	b.n	800984a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2100      	movs	r1, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f007 fffb 	bl	801169c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	e04a      	b.n	8009742 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80096ac:	7bfa      	ldrb	r2, [r7, #15]
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	4613      	mov	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	4413      	add	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	440b      	add	r3, r1
 80096ba:	333d      	adds	r3, #61	; 0x3d
 80096bc:	2201      	movs	r2, #1
 80096be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80096c0:	7bfa      	ldrb	r2, [r7, #15]
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	00db      	lsls	r3, r3, #3
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	333c      	adds	r3, #60	; 0x3c
 80096d0:	7bfa      	ldrb	r2, [r7, #15]
 80096d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80096d4:	7bfa      	ldrb	r2, [r7, #15]
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	b298      	uxth	r0, r3
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4613      	mov	r3, r2
 80096de:	00db      	lsls	r3, r3, #3
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	3344      	adds	r3, #68	; 0x44
 80096e8:	4602      	mov	r2, r0
 80096ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80096ec:	7bfa      	ldrb	r2, [r7, #15]
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	4613      	mov	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	440b      	add	r3, r1
 80096fa:	3340      	adds	r3, #64	; 0x40
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009700:	7bfa      	ldrb	r2, [r7, #15]
 8009702:	6879      	ldr	r1, [r7, #4]
 8009704:	4613      	mov	r3, r2
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	440b      	add	r3, r1
 800970e:	3348      	adds	r3, #72	; 0x48
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009714:	7bfa      	ldrb	r2, [r7, #15]
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4613      	mov	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	334c      	adds	r3, #76	; 0x4c
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009728:	7bfa      	ldrb	r2, [r7, #15]
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	4413      	add	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	3354      	adds	r3, #84	; 0x54
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	3301      	adds	r3, #1
 8009740:	73fb      	strb	r3, [r7, #15]
 8009742:	7bfa      	ldrb	r2, [r7, #15]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	429a      	cmp	r2, r3
 800974a:	d3af      	bcc.n	80096ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]
 8009750:	e044      	b.n	80097dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009752:	7bfa      	ldrb	r2, [r7, #15]
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	4613      	mov	r3, r2
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	440b      	add	r3, r1
 8009760:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009764:	2200      	movs	r2, #0
 8009766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009768:	7bfa      	ldrb	r2, [r7, #15]
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	4613      	mov	r3, r2
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800977a:	7bfa      	ldrb	r2, [r7, #15]
 800977c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800977e:	7bfa      	ldrb	r2, [r7, #15]
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	4613      	mov	r3, r2
 8009784:	00db      	lsls	r3, r3, #3
 8009786:	4413      	add	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	440b      	add	r3, r1
 800978c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009794:	7bfa      	ldrb	r2, [r7, #15]
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4613      	mov	r3, r2
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80097a6:	2200      	movs	r2, #0
 80097a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80097aa:	7bfa      	ldrb	r2, [r7, #15]
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	440b      	add	r3, r1
 80097b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80097bc:	2200      	movs	r2, #0
 80097be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80097c0:	7bfa      	ldrb	r2, [r7, #15]
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4613      	mov	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	440b      	add	r3, r1
 80097ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	3301      	adds	r3, #1
 80097da:	73fb      	strb	r3, [r7, #15]
 80097dc:	7bfa      	ldrb	r2, [r7, #15]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d3b5      	bcc.n	8009752 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	687e      	ldr	r6, [r7, #4]
 80097ee:	466d      	mov	r5, sp
 80097f0:	f106 0410 	add.w	r4, r6, #16
 80097f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80097fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009800:	e885 0003 	stmia.w	r5, {r0, r1}
 8009804:	1d33      	adds	r3, r6, #4
 8009806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009808:	6838      	ldr	r0, [r7, #0]
 800980a:	f007 ff93 	bl	8011734 <USB_DevInit>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2202      	movs	r2, #2
 8009818:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e014      	b.n	800984a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	2b01      	cmp	r3, #1
 8009836:	d102      	bne.n	800983e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f001 f881 	bl	800a940 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f009 f81b 	bl	801287e <USB_DevDisconnect>

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009852 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009866:	2b01      	cmp	r3, #1
 8009868:	d101      	bne.n	800986e <HAL_PCD_Start+0x1c>
 800986a:	2302      	movs	r3, #2
 800986c:	e01c      	b.n	80098a8 <HAL_PCD_Start+0x56>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987a:	2b01      	cmp	r3, #1
 800987c:	d105      	bne.n	800988a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f007 fee2 	bl	8011658 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4618      	mov	r0, r3
 800989a:	f008 ffcf 	bl	801283c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80098b0:	b590      	push	{r4, r7, lr}
 80098b2:	b08d      	sub	sp, #52	; 0x34
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f009 f88d 	bl	80129e6 <USB_GetMode>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f040 847e 	bne.w	800a1d0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4618      	mov	r0, r3
 80098da:	f008 fff1 	bl	80128c0 <USB_ReadInterrupts>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 8474 	beq.w	800a1ce <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4618      	mov	r0, r3
 8009900:	f008 ffde 	bl	80128c0 <USB_ReadInterrupts>
 8009904:	4603      	mov	r3, r0
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b02      	cmp	r3, #2
 800990c:	d107      	bne.n	800991e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	695a      	ldr	r2, [r3, #20]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f002 0202 	and.w	r2, r2, #2
 800991c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f008 ffcc 	bl	80128c0 <USB_ReadInterrupts>
 8009928:	4603      	mov	r3, r0
 800992a:	f003 0310 	and.w	r3, r3, #16
 800992e:	2b10      	cmp	r3, #16
 8009930:	d161      	bne.n	80099f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0210 	bic.w	r2, r2, #16
 8009940:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f003 020f 	and.w	r2, r3, #15
 800994e:	4613      	mov	r3, r2
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	4413      	add	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	3304      	adds	r3, #4
 8009960:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	0c5b      	lsrs	r3, r3, #17
 8009966:	f003 030f 	and.w	r3, r3, #15
 800996a:	2b02      	cmp	r3, #2
 800996c:	d124      	bne.n	80099b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009974:	4013      	ands	r3, r2
 8009976:	2b00      	cmp	r3, #0
 8009978:	d035      	beq.n	80099e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	091b      	lsrs	r3, r3, #4
 8009982:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009988:	b29b      	uxth	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	6a38      	ldr	r0, [r7, #32]
 800998e:	f008 fe03 	bl	8012598 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	691a      	ldr	r2, [r3, #16]
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	091b      	lsrs	r3, r3, #4
 800999a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800999e:	441a      	add	r2, r3
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	6a1a      	ldr	r2, [r3, #32]
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	091b      	lsrs	r3, r3, #4
 80099ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099b0:	441a      	add	r2, r3
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	621a      	str	r2, [r3, #32]
 80099b6:	e016      	b.n	80099e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	0c5b      	lsrs	r3, r3, #17
 80099bc:	f003 030f 	and.w	r3, r3, #15
 80099c0:	2b06      	cmp	r3, #6
 80099c2:	d110      	bne.n	80099e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099ca:	2208      	movs	r2, #8
 80099cc:	4619      	mov	r1, r3
 80099ce:	6a38      	ldr	r0, [r7, #32]
 80099d0:	f008 fde2 	bl	8012598 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	6a1a      	ldr	r2, [r3, #32]
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	091b      	lsrs	r3, r3, #4
 80099dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099e0:	441a      	add	r2, r3
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699a      	ldr	r2, [r3, #24]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f042 0210 	orr.w	r2, r2, #16
 80099f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4618      	mov	r0, r3
 80099fc:	f008 ff60 	bl	80128c0 <USB_ReadInterrupts>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a0a:	f040 80a7 	bne.w	8009b5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f008 ff65 	bl	80128e6 <USB_ReadDevAllOutEpInterrupt>
 8009a1c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009a1e:	e099      	b.n	8009b54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 808e 	beq.w	8009b48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f008 ff89 	bl	801294e <USB_ReadDevOutEPInterrupt>
 8009a3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00c      	beq.n	8009a62 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a54:	461a      	mov	r2, r3
 8009a56:	2301      	movs	r3, #1
 8009a58:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009a5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fe95 	bl	800a78c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00c      	beq.n	8009a86 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a78:	461a      	mov	r2, r3
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fed1 	bl	800a828 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d008      	beq.n	8009aa2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	2310      	movs	r3, #16
 8009aa0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d030      	beq.n	8009b0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab4:	2b80      	cmp	r3, #128	; 0x80
 8009ab6:	d109      	bne.n	8009acc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ac6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009aca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ace:	4613      	mov	r3, r2
 8009ad0:	00db      	lsls	r3, r3, #3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	3304      	adds	r3, #4
 8009ae0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	78db      	ldrb	r3, [r3, #3]
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d108      	bne.n	8009afc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2200      	movs	r2, #0
 8009aee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f00b f838 	bl	8014b6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b08:	461a      	mov	r2, r3
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d008      	beq.n	8009b2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b24:	461a      	mov	r2, r3
 8009b26:	2320      	movs	r3, #32
 8009b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d009      	beq.n	8009b48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b40:	461a      	mov	r2, r3
 8009b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b50:	085b      	lsrs	r3, r3, #1
 8009b52:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f47f af62 	bne.w	8009a20 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f008 fead 	bl	80128c0 <USB_ReadInterrupts>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b70:	f040 80a4 	bne.w	8009cbc <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f008 fece 	bl	801291a <USB_ReadDevAllInEpInterrupt>
 8009b7e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009b84:	e096      	b.n	8009cb4 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 808b 	beq.w	8009ca8 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b98:	b2d2      	uxtb	r2, r2
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f008 fef4 	bl	801298a <USB_ReadDevInEPInterrupt>
 8009ba2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	f003 0301 	and.w	r3, r3, #1
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d020      	beq.n	8009bf0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	43db      	mvns	r3, r3
 8009bc8:	69f9      	ldr	r1, [r7, #28]
 8009bca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bce:	4013      	ands	r3, r2
 8009bd0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bde:	461a      	mov	r2, r3
 8009be0:	2301      	movs	r3, #1
 8009be2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f00a ff29 	bl	8014a42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f003 0308 	and.w	r3, r3, #8
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d008      	beq.n	8009c0c <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	015a      	lsls	r2, r3, #5
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	4413      	add	r3, r2
 8009c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c06:	461a      	mov	r2, r3
 8009c08:	2308      	movs	r3, #8
 8009c0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f003 0310 	and.w	r3, r3, #16
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d008      	beq.n	8009c28 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	015a      	lsls	r2, r3, #5
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c22:	461a      	mov	r2, r3
 8009c24:	2310      	movs	r3, #16
 8009c26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c3e:	461a      	mov	r2, r3
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d023      	beq.n	8009c96 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c50:	6a38      	ldr	r0, [r7, #32]
 8009c52:	f007 febb 	bl	80119cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c58:	4613      	mov	r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	3338      	adds	r3, #56	; 0x38
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	4413      	add	r3, r2
 8009c66:	3304      	adds	r3, #4
 8009c68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	78db      	ldrb	r3, [r3, #3]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d108      	bne.n	8009c84 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2200      	movs	r2, #0
 8009c76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f00a ff86 	bl	8014b90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c90:	461a      	mov	r2, r3
 8009c92:	2302      	movs	r3, #2
 8009c94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fcea 	bl	800a67c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	3301      	adds	r3, #1
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	085b      	lsrs	r3, r3, #1
 8009cb2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f47f af65 	bne.w	8009b86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f008 fdfd 	bl	80128c0 <USB_ReadInterrupts>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cd0:	d122      	bne.n	8009d18 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	69fa      	ldr	r2, [r7, #28]
 8009cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ce0:	f023 0301 	bic.w	r3, r3, #1
 8009ce4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d108      	bne.n	8009d02 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f00b f9b8 	bl	8015070 <HAL_PCDEx_LPM_Callback>
 8009d00:	e002      	b.n	8009d08 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f00a ff0a 	bl	8014b1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	695a      	ldr	r2, [r3, #20]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f008 fdcf 	bl	80128c0 <USB_ReadInterrupts>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d2c:	d112      	bne.n	8009d54 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d102      	bne.n	8009d44 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f00a fec6 	bl	8014ad0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695a      	ldr	r2, [r3, #20]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f008 fdb1 	bl	80128c0 <USB_ReadInterrupts>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d68:	d121      	bne.n	8009dae <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	695a      	ldr	r2, [r3, #20]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009d78:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d111      	bne.n	8009da8 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d92:	089b      	lsrs	r3, r3, #2
 8009d94:	f003 020f 	and.w	r2, r3, #15
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009d9e:	2101      	movs	r1, #1
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f00b f965 	bl	8015070 <HAL_PCDEx_LPM_Callback>
 8009da6:	e002      	b.n	8009dae <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f00a fe91 	bl	8014ad0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f008 fd84 	bl	80128c0 <USB_ReadInterrupts>
 8009db8:	4603      	mov	r3, r0
 8009dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc2:	f040 80b5 	bne.w	8009f30 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	69fa      	ldr	r2, [r7, #28]
 8009dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dd4:	f023 0301 	bic.w	r3, r3, #1
 8009dd8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2110      	movs	r1, #16
 8009de0:	4618      	mov	r0, r3
 8009de2:	f007 fdf3 	bl	80119cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009de6:	2300      	movs	r3, #0
 8009de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dea:	e046      	b.n	8009e7a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df8:	461a      	mov	r2, r3
 8009dfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009dfe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e10:	0151      	lsls	r1, r2, #5
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	440a      	add	r2, r1
 8009e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	69fb      	ldr	r3, [r7, #28]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e32:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e44:	0151      	lsls	r1, r2, #5
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	440a      	add	r2, r1
 8009e4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e52:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	69fa      	ldr	r2, [r7, #28]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e72:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	3301      	adds	r3, #1
 8009e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d3b3      	bcc.n	8009dec <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	69fa      	ldr	r2, [r7, #28]
 8009e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009e96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d016      	beq.n	8009ece <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eb0:	f043 030b 	orr.w	r3, r3, #11
 8009eb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ec6:	f043 030b 	orr.w	r3, r3, #11
 8009eca:	6453      	str	r3, [r2, #68]	; 0x44
 8009ecc:	e015      	b.n	8009efa <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009edc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ee0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009ee4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	69fa      	ldr	r2, [r7, #28]
 8009ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ef4:	f043 030b 	orr.w	r3, r3, #11
 8009ef8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	69fa      	ldr	r2, [r7, #28]
 8009f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	f008 fd94 	bl	8012a48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	695a      	ldr	r2, [r3, #20]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f008 fcc3 	bl	80128c0 <USB_ReadInterrupts>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f44:	d124      	bne.n	8009f90 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f008 fd59 	bl	8012a02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f007 fdb6 	bl	8011ac6 <USB_GetDevSpeed>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681c      	ldr	r4, [r3, #0]
 8009f66:	f001 fbe1 	bl	800b72c <HAL_RCC_GetHCLKFreq>
 8009f6a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	461a      	mov	r2, r3
 8009f74:	4620      	mov	r0, r4
 8009f76:	f007 fad3 	bl	8011520 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f00a fd89 	bl	8014a92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695a      	ldr	r2, [r3, #20]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009f8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4618      	mov	r0, r3
 8009f96:	f008 fc93 	bl	80128c0 <USB_ReadInterrupts>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f003 0308 	and.w	r3, r3, #8
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d10a      	bne.n	8009fba <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f00a fd66 	bl	8014a76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	695a      	ldr	r2, [r3, #20]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f002 0208 	and.w	r2, r2, #8
 8009fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f008 fc7e 	bl	80128c0 <USB_ReadInterrupts>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fca:	2b80      	cmp	r3, #128	; 0x80
 8009fcc:	d122      	bne.n	800a014 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009fce:	6a3b      	ldr	r3, [r7, #32]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009fda:	2301      	movs	r3, #1
 8009fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009fde:	e014      	b.n	800a00a <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009fe0:	6879      	ldr	r1, [r7, #4]
 8009fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	00db      	lsls	r3, r3, #3
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	440b      	add	r3, r1
 8009fee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d105      	bne.n	800a004 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fb0b 	bl	800a61a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	3301      	adds	r3, #1
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a010:	429a      	cmp	r2, r3
 800a012:	d3e5      	bcc.n	8009fe0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4618      	mov	r0, r3
 800a01a:	f008 fc51 	bl	80128c0 <USB_ReadInterrupts>
 800a01e:	4603      	mov	r3, r0
 800a020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a024:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a028:	d13b      	bne.n	800a0a2 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a02a:	2301      	movs	r3, #1
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
 800a02e:	e02b      	b.n	800a088 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a044:	4613      	mov	r3, r2
 800a046:	00db      	lsls	r3, r3, #3
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	440b      	add	r3, r1
 800a04e:	3340      	adds	r3, #64	; 0x40
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d115      	bne.n	800a082 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a056:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a058:	2b00      	cmp	r3, #0
 800a05a:	da12      	bge.n	800a082 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a060:	4613      	mov	r3, r2
 800a062:	00db      	lsls	r3, r3, #3
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	333f      	adds	r3, #63	; 0x3f
 800a06c:	2201      	movs	r2, #1
 800a06e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 facc 	bl	800a61a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	3301      	adds	r3, #1
 800a086:	627b      	str	r3, [r7, #36]	; 0x24
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	429a      	cmp	r2, r3
 800a090:	d3ce      	bcc.n	800a030 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	695a      	ldr	r2, [r3, #20]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a0a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f008 fc0a 	bl	80128c0 <USB_ReadInterrupts>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a0b6:	d155      	bne.n	800a164 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a0bc:	e045      	b.n	800a14a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d12e      	bne.n	800a144 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a0e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	da2b      	bge.n	800a144 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a0f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d121      	bne.n	800a144 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a100:	6879      	ldr	r1, [r7, #4]
 800a102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a104:	4613      	mov	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	440b      	add	r3, r1
 800a10e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a112:	2201      	movs	r2, #1
 800a114:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a11e:	6a3b      	ldr	r3, [r7, #32]
 800a120:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10a      	bne.n	800a144 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	69fa      	ldr	r2, [r7, #28]
 800a138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a13c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a140:	6053      	str	r3, [r2, #4]
            break;
 800a142:	e007      	b.n	800a154 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	3301      	adds	r3, #1
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a150:	429a      	cmp	r2, r3
 800a152:	d3b4      	bcc.n	800a0be <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695a      	ldr	r2, [r3, #20]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f008 fba9 	bl	80128c0 <USB_ReadInterrupts>
 800a16e:	4603      	mov	r3, r0
 800a170:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a178:	d10a      	bne.n	800a190 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f00a fd1a 	bl	8014bb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	695a      	ldr	r2, [r3, #20]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a18e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4618      	mov	r0, r3
 800a196:	f008 fb93 	bl	80128c0 <USB_ReadInterrupts>
 800a19a:	4603      	mov	r3, r0
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b04      	cmp	r3, #4
 800a1a2:	d115      	bne.n	800a1d0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d002      	beq.n	800a1bc <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f00a fd0a 	bl	8014bd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6859      	ldr	r1, [r3, #4]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	605a      	str	r2, [r3, #4]
 800a1cc:	e000      	b.n	800a1d0 <HAL_PCD_IRQHandler+0x920>
      return;
 800a1ce:	bf00      	nop
    }
  }
}
 800a1d0:	3734      	adds	r7, #52	; 0x34
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd90      	pop	{r4, r7, pc}

0800a1d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b082      	sub	sp, #8
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d101      	bne.n	800a1f0 <HAL_PCD_SetAddress+0x1a>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	e013      	b.n	800a218 <HAL_PCD_SetAddress+0x42>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	78fa      	ldrb	r2, [r7, #3]
 800a1fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	4611      	mov	r1, r2
 800a208:	4618      	mov	r0, r3
 800a20a:	f008 faf1 	bl	80127f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	4608      	mov	r0, r1
 800a22a:	4611      	mov	r1, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	4603      	mov	r3, r0
 800a230:	70fb      	strb	r3, [r7, #3]
 800a232:	460b      	mov	r3, r1
 800a234:	803b      	strh	r3, [r7, #0]
 800a236:	4613      	mov	r3, r2
 800a238:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a23a:	2300      	movs	r3, #0
 800a23c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a23e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a242:	2b00      	cmp	r3, #0
 800a244:	da0f      	bge.n	800a266 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	f003 020f 	and.w	r2, r3, #15
 800a24c:	4613      	mov	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	3338      	adds	r3, #56	; 0x38
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	4413      	add	r3, r2
 800a25a:	3304      	adds	r3, #4
 800a25c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2201      	movs	r2, #1
 800a262:	705a      	strb	r2, [r3, #1]
 800a264:	e00f      	b.n	800a286 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	f003 020f 	and.w	r2, r3, #15
 800a26c:	4613      	mov	r3, r2
 800a26e:	00db      	lsls	r3, r3, #3
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	4413      	add	r3, r2
 800a27c:	3304      	adds	r3, #4
 800a27e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	f003 030f 	and.w	r3, r3, #15
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a292:	883a      	ldrh	r2, [r7, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	78ba      	ldrb	r2, [r7, #2]
 800a29c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	785b      	ldrb	r3, [r3, #1]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d004      	beq.n	800a2b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a2b0:	78bb      	ldrb	r3, [r7, #2]
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d102      	bne.n	800a2bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d101      	bne.n	800a2ca <HAL_PCD_EP_Open+0xaa>
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	e00e      	b.n	800a2e8 <HAL_PCD_EP_Open+0xc8>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68f9      	ldr	r1, [r7, #12]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f007 fc13 	bl	8011b04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800a2e6:	7afb      	ldrb	r3, [r7, #11]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a2fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a300:	2b00      	cmp	r3, #0
 800a302:	da0f      	bge.n	800a324 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	f003 020f 	and.w	r2, r3, #15
 800a30a:	4613      	mov	r3, r2
 800a30c:	00db      	lsls	r3, r3, #3
 800a30e:	4413      	add	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	3338      	adds	r3, #56	; 0x38
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	4413      	add	r3, r2
 800a318:	3304      	adds	r3, #4
 800a31a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	705a      	strb	r2, [r3, #1]
 800a322:	e00f      	b.n	800a344 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	f003 020f 	and.w	r2, r3, #15
 800a32a:	4613      	mov	r3, r2
 800a32c:	00db      	lsls	r3, r3, #3
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	4413      	add	r3, r2
 800a33a:	3304      	adds	r3, #4
 800a33c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a356:	2b01      	cmp	r3, #1
 800a358:	d101      	bne.n	800a35e <HAL_PCD_EP_Close+0x6e>
 800a35a:	2302      	movs	r3, #2
 800a35c:	e00e      	b.n	800a37c <HAL_PCD_EP_Close+0x8c>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f007 fc51 	bl	8011c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	603b      	str	r3, [r7, #0]
 800a390:	460b      	mov	r3, r1
 800a392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a394:	7afb      	ldrb	r3, [r7, #11]
 800a396:	f003 020f 	and.w	r2, r3, #15
 800a39a:	4613      	mov	r3, r2
 800a39c:	00db      	lsls	r3, r3, #3
 800a39e:	4413      	add	r3, r2
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	683a      	ldr	r2, [r7, #0]
 800a3b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a3c6:	7afb      	ldrb	r3, [r7, #11]
 800a3c8:	f003 030f 	and.w	r3, r3, #15
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	f003 030f 	and.w	r3, r3, #15
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d106      	bne.n	800a3ea <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6979      	ldr	r1, [r7, #20]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f007 fed2 	bl	801218c <USB_EP0StartXfer>
 800a3e8:	e005      	b.n	800a3f6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6979      	ldr	r1, [r7, #20]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f007 fceb 	bl	8011dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	f003 020f 	and.w	r2, r3, #15
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	4613      	mov	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	440b      	add	r3, r1
 800a41e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800a422:	681b      	ldr	r3, [r3, #0]
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	607a      	str	r2, [r7, #4]
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	460b      	mov	r3, r1
 800a43e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a440:	7afb      	ldrb	r3, [r7, #11]
 800a442:	f003 020f 	and.w	r2, r3, #15
 800a446:	4613      	mov	r3, r2
 800a448:	00db      	lsls	r3, r3, #3
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	3338      	adds	r3, #56	; 0x38
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	4413      	add	r3, r2
 800a454:	3304      	adds	r3, #4
 800a456:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2200      	movs	r2, #0
 800a468:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2201      	movs	r2, #1
 800a46e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a470:	7afb      	ldrb	r3, [r7, #11]
 800a472:	f003 030f 	and.w	r3, r3, #15
 800a476:	b2da      	uxtb	r2, r3
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a47c:	7afb      	ldrb	r3, [r7, #11]
 800a47e:	f003 030f 	and.w	r3, r3, #15
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6979      	ldr	r1, [r7, #20]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f007 fe7d 	bl	801218c <USB_EP0StartXfer>
 800a492:	e005      	b.n	800a4a0 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6979      	ldr	r1, [r7, #20]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f007 fc96 	bl	8011dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	f003 020f 	and.w	r2, r3, #15
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d901      	bls.n	800a4c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e04e      	b.n	800a566 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a4c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	da0f      	bge.n	800a4f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	f003 020f 	and.w	r2, r3, #15
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	00db      	lsls	r3, r3, #3
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	3338      	adds	r3, #56	; 0x38
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	705a      	strb	r2, [r3, #1]
 800a4ee:	e00d      	b.n	800a50c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a4f0:	78fa      	ldrb	r2, [r7, #3]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	4413      	add	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	4413      	add	r3, r2
 800a502:	3304      	adds	r3, #4
 800a504:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a512:	78fb      	ldrb	r3, [r7, #3]
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <HAL_PCD_EP_SetStall+0x82>
 800a528:	2302      	movs	r3, #2
 800a52a:	e01c      	b.n	800a566 <HAL_PCD_EP_SetStall+0xbc>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68f9      	ldr	r1, [r7, #12]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f008 f884 	bl	8012648 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	f003 030f 	and.w	r3, r3, #15
 800a546:	2b00      	cmp	r3, #0
 800a548:	d108      	bne.n	800a55c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a554:	4619      	mov	r1, r3
 800a556:	4610      	mov	r0, r2
 800a558:	f008 fa76 	bl	8012a48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	460b      	mov	r3, r1
 800a578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	f003 020f 	and.w	r2, r3, #15
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	429a      	cmp	r2, r3
 800a586:	d901      	bls.n	800a58c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e042      	b.n	800a612 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a58c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a590:	2b00      	cmp	r3, #0
 800a592:	da0f      	bge.n	800a5b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	f003 020f 	and.w	r2, r3, #15
 800a59a:	4613      	mov	r3, r2
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	3338      	adds	r3, #56	; 0x38
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	705a      	strb	r2, [r3, #1]
 800a5b2:	e00f      	b.n	800a5d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	f003 020f 	and.w	r2, r3, #15
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	4413      	add	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5da:	78fb      	ldrb	r3, [r7, #3]
 800a5dc:	f003 030f 	and.w	r3, r3, #15
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d101      	bne.n	800a5f4 <HAL_PCD_EP_ClrStall+0x86>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e00e      	b.n	800a612 <HAL_PCD_EP_ClrStall+0xa4>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68f9      	ldr	r1, [r7, #12]
 800a602:	4618      	mov	r0, r3
 800a604:	f008 f88e 	bl	8012724 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b084      	sub	sp, #16
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
 800a622:	460b      	mov	r3, r1
 800a624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	da0c      	bge.n	800a648 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a62e:	78fb      	ldrb	r3, [r7, #3]
 800a630:	f003 020f 	and.w	r2, r3, #15
 800a634:	4613      	mov	r3, r2
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	3338      	adds	r3, #56	; 0x38
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	3304      	adds	r3, #4
 800a644:	60fb      	str	r3, [r7, #12]
 800a646:	e00c      	b.n	800a662 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a648:	78fb      	ldrb	r3, [r7, #3]
 800a64a:	f003 020f 	and.w	r2, r3, #15
 800a64e:	4613      	mov	r3, r2
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	4413      	add	r3, r2
 800a65e:	3304      	adds	r3, #4
 800a660:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	4618      	mov	r0, r3
 800a66a:	f007 feb1 	bl	80123d0 <USB_EPStopXfer>
 800a66e:	4603      	mov	r3, r0
 800a670:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a672:	7afb      	ldrb	r3, [r7, #11]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	4613      	mov	r3, r2
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	4413      	add	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	3338      	adds	r3, #56	; 0x38
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	4413      	add	r3, r2
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6a1a      	ldr	r2, [r3, #32]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d901      	bls.n	800a6b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e067      	b.n	800a784 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	699a      	ldr	r2, [r3, #24]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	69fa      	ldr	r2, [r7, #28]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d902      	bls.n	800a6d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	3303      	adds	r3, #3
 800a6d4:	089b      	lsrs	r3, r3, #2
 800a6d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6d8:	e026      	b.n	800a728 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	699a      	ldr	r2, [r3, #24]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6a1b      	ldr	r3, [r3, #32]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	68db      	ldr	r3, [r3, #12]
 800a6ea:	69fa      	ldr	r2, [r7, #28]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d902      	bls.n	800a6f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	3303      	adds	r3, #3
 800a6fa:	089b      	lsrs	r3, r3, #2
 800a6fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6919      	ldr	r1, [r3, #16]
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	b2da      	uxtb	r2, r3
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	b29b      	uxth	r3, r3
 800a70a:	6978      	ldr	r0, [r7, #20]
 800a70c:	f007 ff0a 	bl	8012524 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	691a      	ldr	r2, [r3, #16]
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	441a      	add	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a1a      	ldr	r2, [r3, #32]
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	441a      	add	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a734:	699b      	ldr	r3, [r3, #24]
 800a736:	b29b      	uxth	r3, r3
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d809      	bhi.n	800a752 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6a1a      	ldr	r2, [r3, #32]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a746:	429a      	cmp	r2, r3
 800a748:	d203      	bcs.n	800a752 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1c3      	bne.n	800a6da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d811      	bhi.n	800a782 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f003 030f 	and.w	r3, r3, #15
 800a764:	2201      	movs	r2, #1
 800a766:	fa02 f303 	lsl.w	r3, r2, r3
 800a76a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	43db      	mvns	r3, r3
 800a778:	6939      	ldr	r1, [r7, #16]
 800a77a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a77e:	4013      	ands	r3, r2
 800a780:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3720      	adds	r7, #32
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	333c      	adds	r3, #60	; 0x3c
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4a19      	ldr	r2, [pc, #100]	; (800a824 <PCD_EP_OutXfrComplete_int+0x98>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d124      	bne.n	800a80c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00a      	beq.n	800a7e2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d8:	461a      	mov	r2, r3
 800a7da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7de:	6093      	str	r3, [r2, #8]
 800a7e0:	e01a      	b.n	800a818 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f003 0320 	and.w	r3, r3, #32
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d008      	beq.n	800a7fe <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	015a      	lsls	r2, r3, #5
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	2320      	movs	r3, #32
 800a7fc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	b2db      	uxtb	r3, r3
 800a802:	4619      	mov	r1, r3
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f00a f901 	bl	8014a0c <HAL_PCD_DataOutStageCallback>
 800a80a:	e005      	b.n	800a818 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f00a f8fa 	bl	8014a0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	4f54310a 	.word	0x4f54310a

0800a828 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	333c      	adds	r3, #60	; 0x3c
 800a840:	3304      	adds	r3, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	015a      	lsls	r2, r3, #5
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	4413      	add	r3, r2
 800a84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4a0c      	ldr	r2, [pc, #48]	; (800a88c <PCD_EP_OutSetupPacket_int+0x64>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d90e      	bls.n	800a87c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a864:	2b00      	cmp	r3, #0
 800a866:	d009      	beq.n	800a87c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	015a      	lsls	r2, r3, #5
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	4413      	add	r3, r2
 800a870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a874:	461a      	mov	r2, r3
 800a876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a87a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f00a f8b3 	bl	80149e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	4f54300a 	.word	0x4f54300a

0800a890 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	460b      	mov	r3, r1
 800a89a:	70fb      	strb	r3, [r7, #3]
 800a89c:	4613      	mov	r3, r2
 800a89e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d107      	bne.n	800a8be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a8ae:	883b      	ldrh	r3, [r7, #0]
 800a8b0:	0419      	lsls	r1, r3, #16
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68ba      	ldr	r2, [r7, #8]
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	629a      	str	r2, [r3, #40]	; 0x28
 800a8bc:	e028      	b.n	800a910 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c4:	0c1b      	lsrs	r3, r3, #16
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	73fb      	strb	r3, [r7, #15]
 800a8d0:	e00d      	b.n	800a8ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	3340      	adds	r3, #64	; 0x40
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	4413      	add	r3, r2
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	0c1b      	lsrs	r3, r3, #16
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	73fb      	strb	r3, [r7, #15]
 800a8ee:	7bfa      	ldrb	r2, [r7, #15]
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d3ec      	bcc.n	800a8d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a8f8:	883b      	ldrh	r3, [r7, #0]
 800a8fa:	0418      	lsls	r0, r3, #16
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6819      	ldr	r1, [r3, #0]
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	3b01      	subs	r3, #1
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	4302      	orrs	r2, r0
 800a908:	3340      	adds	r3, #64	; 0x40
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	440b      	add	r3, r1
 800a90e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	460b      	mov	r3, r1
 800a928:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	887a      	ldrh	r2, [r7, #2]
 800a930:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a96e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a972:	f043 0303 	orr.w	r3, r3, #3
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a988:	b480      	push	{r7}
 800a98a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a98c:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a04      	ldr	r2, [pc, #16]	; (800a9a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a996:	6013      	str	r3, [r2, #0]
}
 800a998:	bf00      	nop
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	40007000 	.word	0x40007000

0800a9a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a9ac:	4b0d      	ldr	r3, [pc, #52]	; (800a9e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9b8:	d102      	bne.n	800a9c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800a9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9be:	e00b      	b.n	800a9d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800a9c0:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800a9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ce:	d102      	bne.n	800a9d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800a9d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9d4:	e000      	b.n	800a9d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800a9d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	40007000 	.word	0x40007000

0800a9e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d141      	bne.n	800aa7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a9f6:	4b4b      	ldr	r3, [pc, #300]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a9fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa02:	d131      	bne.n	800aa68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aa04:	4b47      	ldr	r3, [pc, #284]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa0a:	4a46      	ldr	r2, [pc, #280]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aa14:	4b43      	ldr	r3, [pc, #268]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aa1c:	4a41      	ldr	r2, [pc, #260]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800aa24:	4b40      	ldr	r3, [pc, #256]	; (800ab28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2232      	movs	r2, #50	; 0x32
 800aa2a:	fb02 f303 	mul.w	r3, r2, r3
 800aa2e:	4a3f      	ldr	r2, [pc, #252]	; (800ab2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aa30:	fba2 2303 	umull	r2, r3, r2, r3
 800aa34:	0c9b      	lsrs	r3, r3, #18
 800aa36:	3301      	adds	r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa3a:	e002      	b.n	800aa42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aa42:	4b38      	ldr	r3, [pc, #224]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa4e:	d102      	bne.n	800aa56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1f2      	bne.n	800aa3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aa56:	4b33      	ldr	r3, [pc, #204]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa62:	d158      	bne.n	800ab16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e057      	b.n	800ab18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aa68:	4b2e      	ldr	r3, [pc, #184]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa6e:	4a2d      	ldr	r2, [pc, #180]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800aa78:	e04d      	b.n	800ab16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa80:	d141      	bne.n	800ab06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aa82:	4b28      	ldr	r3, [pc, #160]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa8e:	d131      	bne.n	800aaf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aa90:	4b24      	ldr	r3, [pc, #144]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa96:	4a23      	ldr	r2, [pc, #140]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aa98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aaa0:	4b20      	ldr	r3, [pc, #128]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aaa8:	4a1e      	ldr	r2, [pc, #120]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aaae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800aab0:	4b1d      	ldr	r3, [pc, #116]	; (800ab28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2232      	movs	r2, #50	; 0x32
 800aab6:	fb02 f303 	mul.w	r3, r2, r3
 800aaba:	4a1c      	ldr	r2, [pc, #112]	; (800ab2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aabc:	fba2 2303 	umull	r2, r3, r2, r3
 800aac0:	0c9b      	lsrs	r3, r3, #18
 800aac2:	3301      	adds	r3, #1
 800aac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aac6:	e002      	b.n	800aace <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aace:	4b15      	ldr	r3, [pc, #84]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aada:	d102      	bne.n	800aae2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1f2      	bne.n	800aac8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aae2:	4b10      	ldr	r3, [pc, #64]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaee:	d112      	bne.n	800ab16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e011      	b.n	800ab18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aaf4:	4b0b      	ldr	r3, [pc, #44]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aaf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aafa:	4a0a      	ldr	r2, [pc, #40]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aafc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab04:	e007      	b.n	800ab16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ab06:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab0e:	4a05      	ldr	r2, [pc, #20]	; (800ab24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab14:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	40007000 	.word	0x40007000
 800ab28:	20000000 	.word	0x20000000
 800ab2c:	431bde83 	.word	0x431bde83

0800ab30 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ab34:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <HAL_PWREx_EnableVddUSB+0x1c>)
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	4a04      	ldr	r2, [pc, #16]	; (800ab4c <HAL_PWREx_EnableVddUSB+0x1c>)
 800ab3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab3e:	6053      	str	r3, [r2, #4]
}
 800ab40:	bf00      	nop
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	40007000 	.word	0x40007000

0800ab50 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <HAL_PWREx_EnableVddIO2+0x1c>)
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4a04      	ldr	r2, [pc, #16]	; (800ab6c <HAL_PWREx_EnableVddIO2+0x1c>)
 800ab5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab5e:	6053      	str	r3, [r2, #4]
}
 800ab60:	bf00      	nop
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	40007000 	.word	0x40007000

0800ab70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d102      	bne.n	800ab84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	f000 bc08 	b.w	800b394 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab84:	4b96      	ldr	r3, [pc, #600]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	f003 030c 	and.w	r3, r3, #12
 800ab8c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ab8e:	4b94      	ldr	r3, [pc, #592]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	f003 0303 	and.w	r3, r3, #3
 800ab96:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0310 	and.w	r3, r3, #16
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 80e4 	beq.w	800ad6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d007      	beq.n	800abbc <HAL_RCC_OscConfig+0x4c>
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	2b0c      	cmp	r3, #12
 800abb0:	f040 808b 	bne.w	800acca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	f040 8087 	bne.w	800acca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800abbc:	4b88      	ldr	r3, [pc, #544]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0302 	and.w	r3, r3, #2
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <HAL_RCC_OscConfig+0x64>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	e3df      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a1a      	ldr	r2, [r3, #32]
 800abd8:	4b81      	ldr	r3, [pc, #516]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f003 0308 	and.w	r3, r3, #8
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <HAL_RCC_OscConfig+0x7e>
 800abe4:	4b7e      	ldr	r3, [pc, #504]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abec:	e005      	b.n	800abfa <HAL_RCC_OscConfig+0x8a>
 800abee:	4b7c      	ldr	r3, [pc, #496]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800abf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d223      	bcs.n	800ac46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 fdca 	bl	800b79c <RCC_SetFlashLatencyFromMSIRange>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e3c0      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ac12:	4b73      	ldr	r3, [pc, #460]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a72      	ldr	r2, [pc, #456]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac18:	f043 0308 	orr.w	r3, r3, #8
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	4b70      	ldr	r3, [pc, #448]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a1b      	ldr	r3, [r3, #32]
 800ac2a:	496d      	ldr	r1, [pc, #436]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ac30:	4b6b      	ldr	r3, [pc, #428]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	69db      	ldr	r3, [r3, #28]
 800ac3c:	021b      	lsls	r3, r3, #8
 800ac3e:	4968      	ldr	r1, [pc, #416]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	604b      	str	r3, [r1, #4]
 800ac44:	e025      	b.n	800ac92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ac46:	4b66      	ldr	r3, [pc, #408]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a65      	ldr	r2, [pc, #404]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac4c:	f043 0308 	orr.w	r3, r3, #8
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	4b63      	ldr	r3, [pc, #396]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	4960      	ldr	r1, [pc, #384]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ac64:	4b5e      	ldr	r3, [pc, #376]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	495b      	ldr	r1, [pc, #364]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac74:	4313      	orrs	r3, r2
 800ac76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d109      	bne.n	800ac92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fd8a 	bl	800b79c <RCC_SetFlashLatencyFromMSIRange>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e380      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ac92:	f000 fcc1 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800ac96:	4602      	mov	r2, r0
 800ac98:	4b51      	ldr	r3, [pc, #324]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	091b      	lsrs	r3, r3, #4
 800ac9e:	f003 030f 	and.w	r3, r3, #15
 800aca2:	4950      	ldr	r1, [pc, #320]	; (800ade4 <HAL_RCC_OscConfig+0x274>)
 800aca4:	5ccb      	ldrb	r3, [r1, r3]
 800aca6:	f003 031f 	and.w	r3, r3, #31
 800acaa:	fa22 f303 	lsr.w	r3, r2, r3
 800acae:	4a4e      	ldr	r2, [pc, #312]	; (800ade8 <HAL_RCC_OscConfig+0x278>)
 800acb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800acb2:	4b4e      	ldr	r3, [pc, #312]	; (800adec <HAL_RCC_OscConfig+0x27c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fb fd48 	bl	800674c <HAL_InitTick>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d052      	beq.n	800ad6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	e364      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d032      	beq.n	800ad38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800acd2:	4b43      	ldr	r3, [pc, #268]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a42      	ldr	r2, [pc, #264]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800acd8:	f043 0301 	orr.w	r3, r3, #1
 800acdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800acde:	f7fb fd85 	bl	80067ec <HAL_GetTick>
 800ace2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ace4:	e008      	b.n	800acf8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ace6:	f7fb fd81 	bl	80067ec <HAL_GetTick>
 800acea:	4602      	mov	r2, r0
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	1ad3      	subs	r3, r2, r3
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e34d      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800acf8:	4b39      	ldr	r3, [pc, #228]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d0f0      	beq.n	800ace6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ad04:	4b36      	ldr	r3, [pc, #216]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a35      	ldr	r2, [pc, #212]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad0a:	f043 0308 	orr.w	r3, r3, #8
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	4b33      	ldr	r3, [pc, #204]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a1b      	ldr	r3, [r3, #32]
 800ad1c:	4930      	ldr	r1, [pc, #192]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ad22:	4b2f      	ldr	r3, [pc, #188]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	021b      	lsls	r3, r3, #8
 800ad30:	492b      	ldr	r1, [pc, #172]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	604b      	str	r3, [r1, #4]
 800ad36:	e01a      	b.n	800ad6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ad38:	4b29      	ldr	r3, [pc, #164]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a28      	ldr	r2, [pc, #160]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad3e:	f023 0301 	bic.w	r3, r3, #1
 800ad42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ad44:	f7fb fd52 	bl	80067ec <HAL_GetTick>
 800ad48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ad4a:	e008      	b.n	800ad5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ad4c:	f7fb fd4e 	bl	80067ec <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d901      	bls.n	800ad5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e31a      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ad5e:	4b20      	ldr	r3, [pc, #128]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1f0      	bne.n	800ad4c <HAL_RCC_OscConfig+0x1dc>
 800ad6a:	e000      	b.n	800ad6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ad6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d073      	beq.n	800ae62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2b08      	cmp	r3, #8
 800ad7e:	d005      	beq.n	800ad8c <HAL_RCC_OscConfig+0x21c>
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	2b0c      	cmp	r3, #12
 800ad84:	d10e      	bne.n	800ada4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d10b      	bne.n	800ada4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad8c:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d063      	beq.n	800ae60 <HAL_RCC_OscConfig+0x2f0>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d15f      	bne.n	800ae60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e2f7      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adac:	d106      	bne.n	800adbc <HAL_RCC_OscConfig+0x24c>
 800adae:	4b0c      	ldr	r3, [pc, #48]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a0b      	ldr	r2, [pc, #44]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800adb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	e025      	b.n	800ae08 <HAL_RCC_OscConfig+0x298>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adc4:	d114      	bne.n	800adf0 <HAL_RCC_OscConfig+0x280>
 800adc6:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a05      	ldr	r2, [pc, #20]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800adcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800add0:	6013      	str	r3, [r2, #0]
 800add2:	4b03      	ldr	r3, [pc, #12]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a02      	ldr	r2, [pc, #8]	; (800ade0 <HAL_RCC_OscConfig+0x270>)
 800add8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	e013      	b.n	800ae08 <HAL_RCC_OscConfig+0x298>
 800ade0:	40021000 	.word	0x40021000
 800ade4:	0801f3dc 	.word	0x0801f3dc
 800ade8:	20000000 	.word	0x20000000
 800adec:	2000005c 	.word	0x2000005c
 800adf0:	4ba0      	ldr	r3, [pc, #640]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a9f      	ldr	r2, [pc, #636]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800adf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	4b9d      	ldr	r3, [pc, #628]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a9c      	ldr	r2, [pc, #624]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800ae02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d013      	beq.n	800ae38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae10:	f7fb fcec 	bl	80067ec <HAL_GetTick>
 800ae14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae16:	e008      	b.n	800ae2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae18:	f7fb fce8 	bl	80067ec <HAL_GetTick>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	2b64      	cmp	r3, #100	; 0x64
 800ae24:	d901      	bls.n	800ae2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e2b4      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae2a:	4b92      	ldr	r3, [pc, #584]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0f0      	beq.n	800ae18 <HAL_RCC_OscConfig+0x2a8>
 800ae36:	e014      	b.n	800ae62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae38:	f7fb fcd8 	bl	80067ec <HAL_GetTick>
 800ae3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae3e:	e008      	b.n	800ae52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae40:	f7fb fcd4 	bl	80067ec <HAL_GetTick>
 800ae44:	4602      	mov	r2, r0
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	2b64      	cmp	r3, #100	; 0x64
 800ae4c:	d901      	bls.n	800ae52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e2a0      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ae52:	4b88      	ldr	r3, [pc, #544]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1f0      	bne.n	800ae40 <HAL_RCC_OscConfig+0x2d0>
 800ae5e:	e000      	b.n	800ae62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0302 	and.w	r3, r3, #2
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d060      	beq.n	800af30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	2b04      	cmp	r3, #4
 800ae72:	d005      	beq.n	800ae80 <HAL_RCC_OscConfig+0x310>
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	2b0c      	cmp	r3, #12
 800ae78:	d119      	bne.n	800aeae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d116      	bne.n	800aeae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae80:	4b7c      	ldr	r3, [pc, #496]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d005      	beq.n	800ae98 <HAL_RCC_OscConfig+0x328>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e27d      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae98:	4b76      	ldr	r3, [pc, #472]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	061b      	lsls	r3, r3, #24
 800aea6:	4973      	ldr	r1, [pc, #460]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aeac:	e040      	b.n	800af30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d023      	beq.n	800aefe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aeb6:	4b6f      	ldr	r3, [pc, #444]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a6e      	ldr	r2, [pc, #440]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800aebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec2:	f7fb fc93 	bl	80067ec <HAL_GetTick>
 800aec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aec8:	e008      	b.n	800aedc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aeca:	f7fb fc8f 	bl	80067ec <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d901      	bls.n	800aedc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e25b      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aedc:	4b65      	ldr	r3, [pc, #404]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0f0      	beq.n	800aeca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aee8:	4b62      	ldr	r3, [pc, #392]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	061b      	lsls	r3, r3, #24
 800aef6:	495f      	ldr	r1, [pc, #380]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	604b      	str	r3, [r1, #4]
 800aefc:	e018      	b.n	800af30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aefe:	4b5d      	ldr	r3, [pc, #372]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a5c      	ldr	r2, [pc, #368]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af0a:	f7fb fc6f 	bl	80067ec <HAL_GetTick>
 800af0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af10:	e008      	b.n	800af24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800af12:	f7fb fc6b 	bl	80067ec <HAL_GetTick>
 800af16:	4602      	mov	r2, r0
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	1ad3      	subs	r3, r2, r3
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d901      	bls.n	800af24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e237      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800af24:	4b53      	ldr	r3, [pc, #332]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f0      	bne.n	800af12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0308 	and.w	r3, r3, #8
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d03c      	beq.n	800afb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	695b      	ldr	r3, [r3, #20]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01c      	beq.n	800af7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af44:	4b4b      	ldr	r3, [pc, #300]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af4a:	4a4a      	ldr	r2, [pc, #296]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af4c:	f043 0301 	orr.w	r3, r3, #1
 800af50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af54:	f7fb fc4a 	bl	80067ec <HAL_GetTick>
 800af58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af5c:	f7fb fc46 	bl	80067ec <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b02      	cmp	r3, #2
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e212      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800af6e:	4b41      	ldr	r3, [pc, #260]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d0ef      	beq.n	800af5c <HAL_RCC_OscConfig+0x3ec>
 800af7c:	e01b      	b.n	800afb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af7e:	4b3d      	ldr	r3, [pc, #244]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af84:	4a3b      	ldr	r2, [pc, #236]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800af86:	f023 0301 	bic.w	r3, r3, #1
 800af8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af8e:	f7fb fc2d 	bl	80067ec <HAL_GetTick>
 800af92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800af94:	e008      	b.n	800afa8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af96:	f7fb fc29 	bl	80067ec <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d901      	bls.n	800afa8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e1f5      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800afa8:	4b32      	ldr	r3, [pc, #200]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800afaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d1ef      	bne.n	800af96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0304 	and.w	r3, r3, #4
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80a6 	beq.w	800b110 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800afc4:	2300      	movs	r3, #0
 800afc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800afc8:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800afca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d10d      	bne.n	800aff0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afd4:	4b27      	ldr	r3, [pc, #156]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800afd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afd8:	4a26      	ldr	r2, [pc, #152]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800afda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afde:	6593      	str	r3, [r2, #88]	; 0x58
 800afe0:	4b24      	ldr	r3, [pc, #144]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800afe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afe8:	60bb      	str	r3, [r7, #8]
 800afea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afec:	2301      	movs	r3, #1
 800afee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aff0:	4b21      	ldr	r3, [pc, #132]	; (800b078 <HAL_RCC_OscConfig+0x508>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d118      	bne.n	800b02e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800affc:	4b1e      	ldr	r3, [pc, #120]	; (800b078 <HAL_RCC_OscConfig+0x508>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a1d      	ldr	r2, [pc, #116]	; (800b078 <HAL_RCC_OscConfig+0x508>)
 800b002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b008:	f7fb fbf0 	bl	80067ec <HAL_GetTick>
 800b00c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b00e:	e008      	b.n	800b022 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b010:	f7fb fbec 	bl	80067ec <HAL_GetTick>
 800b014:	4602      	mov	r2, r0
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d901      	bls.n	800b022 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b01e:	2303      	movs	r3, #3
 800b020:	e1b8      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b022:	4b15      	ldr	r3, [pc, #84]	; (800b078 <HAL_RCC_OscConfig+0x508>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0f0      	beq.n	800b010 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d108      	bne.n	800b048 <HAL_RCC_OscConfig+0x4d8>
 800b036:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800b038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b03c:	4a0d      	ldr	r2, [pc, #52]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800b03e:	f043 0301 	orr.w	r3, r3, #1
 800b042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b046:	e029      	b.n	800b09c <HAL_RCC_OscConfig+0x52c>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	2b05      	cmp	r3, #5
 800b04e:	d115      	bne.n	800b07c <HAL_RCC_OscConfig+0x50c>
 800b050:	4b08      	ldr	r3, [pc, #32]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800b052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b056:	4a07      	ldr	r2, [pc, #28]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800b058:	f043 0304 	orr.w	r3, r3, #4
 800b05c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b060:	4b04      	ldr	r3, [pc, #16]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800b062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b066:	4a03      	ldr	r2, [pc, #12]	; (800b074 <HAL_RCC_OscConfig+0x504>)
 800b068:	f043 0301 	orr.w	r3, r3, #1
 800b06c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b070:	e014      	b.n	800b09c <HAL_RCC_OscConfig+0x52c>
 800b072:	bf00      	nop
 800b074:	40021000 	.word	0x40021000
 800b078:	40007000 	.word	0x40007000
 800b07c:	4b9d      	ldr	r3, [pc, #628]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b082:	4a9c      	ldr	r2, [pc, #624]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b084:	f023 0301 	bic.w	r3, r3, #1
 800b088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b08c:	4b99      	ldr	r3, [pc, #612]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b092:	4a98      	ldr	r2, [pc, #608]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b094:	f023 0304 	bic.w	r3, r3, #4
 800b098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d016      	beq.n	800b0d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0a4:	f7fb fba2 	bl	80067ec <HAL_GetTick>
 800b0a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0aa:	e00a      	b.n	800b0c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0ac:	f7fb fb9e 	bl	80067ec <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d901      	bls.n	800b0c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e168      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b0c2:	4b8c      	ldr	r3, [pc, #560]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b0c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0ed      	beq.n	800b0ac <HAL_RCC_OscConfig+0x53c>
 800b0d0:	e015      	b.n	800b0fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0d2:	f7fb fb8b 	bl	80067ec <HAL_GetTick>
 800b0d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b0d8:	e00a      	b.n	800b0f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0da:	f7fb fb87 	bl	80067ec <HAL_GetTick>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d901      	bls.n	800b0f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e151      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b0f0:	4b80      	ldr	r3, [pc, #512]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1ed      	bne.n	800b0da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b0fe:	7ffb      	ldrb	r3, [r7, #31]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d105      	bne.n	800b110 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b104:	4b7b      	ldr	r3, [pc, #492]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b108:	4a7a      	ldr	r2, [pc, #488]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b10a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b10e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0320 	and.w	r3, r3, #32
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d03c      	beq.n	800b196 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	2b00      	cmp	r3, #0
 800b122:	d01c      	beq.n	800b15e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b124:	4b73      	ldr	r3, [pc, #460]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b12a:	4a72      	ldr	r2, [pc, #456]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b12c:	f043 0301 	orr.w	r3, r3, #1
 800b130:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b134:	f7fb fb5a 	bl	80067ec <HAL_GetTick>
 800b138:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b13a:	e008      	b.n	800b14e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b13c:	f7fb fb56 	bl	80067ec <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	2b02      	cmp	r3, #2
 800b148:	d901      	bls.n	800b14e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e122      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b14e:	4b69      	ldr	r3, [pc, #420]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0ef      	beq.n	800b13c <HAL_RCC_OscConfig+0x5cc>
 800b15c:	e01b      	b.n	800b196 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b15e:	4b65      	ldr	r3, [pc, #404]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b160:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b164:	4a63      	ldr	r2, [pc, #396]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b166:	f023 0301 	bic.w	r3, r3, #1
 800b16a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b16e:	f7fb fb3d 	bl	80067ec <HAL_GetTick>
 800b172:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b174:	e008      	b.n	800b188 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b176:	f7fb fb39 	bl	80067ec <HAL_GetTick>
 800b17a:	4602      	mov	r2, r0
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	2b02      	cmp	r3, #2
 800b182:	d901      	bls.n	800b188 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800b184:	2303      	movs	r3, #3
 800b186:	e105      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b188:	4b5a      	ldr	r3, [pc, #360]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b18a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b18e:	f003 0302 	and.w	r3, r3, #2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1ef      	bne.n	800b176 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 80f9 	beq.w	800b392 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	f040 80cf 	bne.w	800b348 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b1aa:	4b52      	ldr	r3, [pc, #328]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f003 0203 	and.w	r2, r3, #3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d12c      	bne.n	800b218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d123      	bne.n	800b218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d11b      	bne.n	800b218 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d113      	bne.n	800b218 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1fa:	085b      	lsrs	r3, r3, #1
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b200:	429a      	cmp	r2, r3
 800b202:	d109      	bne.n	800b218 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	085b      	lsrs	r3, r3, #1
 800b210:	3b01      	subs	r3, #1
 800b212:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b214:	429a      	cmp	r2, r3
 800b216:	d071      	beq.n	800b2fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	2b0c      	cmp	r3, #12
 800b21c:	d068      	beq.n	800b2f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b21e:	4b35      	ldr	r3, [pc, #212]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b226:	2b00      	cmp	r3, #0
 800b228:	d105      	bne.n	800b236 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800b22a:	4b32      	ldr	r3, [pc, #200]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e0ac      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b23a:	4b2e      	ldr	r3, [pc, #184]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a2d      	ldr	r2, [pc, #180]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b244:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b246:	f7fb fad1 	bl	80067ec <HAL_GetTick>
 800b24a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b24c:	e008      	b.n	800b260 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b24e:	f7fb facd 	bl	80067ec <HAL_GetTick>
 800b252:	4602      	mov	r2, r0
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d901      	bls.n	800b260 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e099      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b260:	4b24      	ldr	r3, [pc, #144]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1f0      	bne.n	800b24e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b26c:	4b21      	ldr	r3, [pc, #132]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	4b21      	ldr	r3, [pc, #132]	; (800b2f8 <HAL_RCC_OscConfig+0x788>)
 800b272:	4013      	ands	r3, r2
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b27c:	3a01      	subs	r2, #1
 800b27e:	0112      	lsls	r2, r2, #4
 800b280:	4311      	orrs	r1, r2
 800b282:	687a      	ldr	r2, [r7, #4]
 800b284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b286:	0212      	lsls	r2, r2, #8
 800b288:	4311      	orrs	r1, r2
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b28e:	0852      	lsrs	r2, r2, #1
 800b290:	3a01      	subs	r2, #1
 800b292:	0552      	lsls	r2, r2, #21
 800b294:	4311      	orrs	r1, r2
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b29a:	0852      	lsrs	r2, r2, #1
 800b29c:	3a01      	subs	r2, #1
 800b29e:	0652      	lsls	r2, r2, #25
 800b2a0:	4311      	orrs	r1, r2
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b2a6:	06d2      	lsls	r2, r2, #27
 800b2a8:	430a      	orrs	r2, r1
 800b2aa:	4912      	ldr	r1, [pc, #72]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b2b0:	4b10      	ldr	r3, [pc, #64]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a0f      	ldr	r2, [pc, #60]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b2b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b2bc:	4b0d      	ldr	r3, [pc, #52]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	4a0c      	ldr	r2, [pc, #48]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b2c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b2c8:	f7fb fa90 	bl	80067ec <HAL_GetTick>
 800b2cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2ce:	e008      	b.n	800b2e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2d0:	f7fb fa8c 	bl	80067ec <HAL_GetTick>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	1ad3      	subs	r3, r2, r3
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d901      	bls.n	800b2e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e058      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2e2:	4b04      	ldr	r3, [pc, #16]	; (800b2f4 <HAL_RCC_OscConfig+0x784>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0f0      	beq.n	800b2d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b2ee:	e050      	b.n	800b392 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e04f      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
 800b2f4:	40021000 	.word	0x40021000
 800b2f8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2fc:	4b27      	ldr	r3, [pc, #156]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d144      	bne.n	800b392 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b308:	4b24      	ldr	r3, [pc, #144]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a23      	ldr	r2, [pc, #140]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b30e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b312:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b314:	4b21      	ldr	r3, [pc, #132]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	4a20      	ldr	r2, [pc, #128]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b31a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b31e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b320:	f7fb fa64 	bl	80067ec <HAL_GetTick>
 800b324:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b326:	e008      	b.n	800b33a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b328:	f7fb fa60 	bl	80067ec <HAL_GetTick>
 800b32c:	4602      	mov	r2, r0
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	2b02      	cmp	r3, #2
 800b334:	d901      	bls.n	800b33a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800b336:	2303      	movs	r3, #3
 800b338:	e02c      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b33a:	4b18      	ldr	r3, [pc, #96]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0f0      	beq.n	800b328 <HAL_RCC_OscConfig+0x7b8>
 800b346:	e024      	b.n	800b392 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	2b0c      	cmp	r3, #12
 800b34c:	d01f      	beq.n	800b38e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b34e:	4b13      	ldr	r3, [pc, #76]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a12      	ldr	r2, [pc, #72]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b35a:	f7fb fa47 	bl	80067ec <HAL_GetTick>
 800b35e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b360:	e008      	b.n	800b374 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b362:	f7fb fa43 	bl	80067ec <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d901      	bls.n	800b374 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800b370:	2303      	movs	r3, #3
 800b372:	e00f      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b374:	4b09      	ldr	r3, [pc, #36]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f0      	bne.n	800b362 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800b380:	4b06      	ldr	r3, [pc, #24]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b382:	68da      	ldr	r2, [r3, #12]
 800b384:	4905      	ldr	r1, [pc, #20]	; (800b39c <HAL_RCC_OscConfig+0x82c>)
 800b386:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <HAL_RCC_OscConfig+0x830>)
 800b388:	4013      	ands	r3, r2
 800b38a:	60cb      	str	r3, [r1, #12]
 800b38c:	e001      	b.n	800b392 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e000      	b.n	800b394 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	40021000 	.word	0x40021000
 800b3a0:	feeefffc 	.word	0xfeeefffc

0800b3a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e11d      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b3bc:	4b90      	ldr	r3, [pc, #576]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 030f 	and.w	r3, r3, #15
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d910      	bls.n	800b3ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ca:	4b8d      	ldr	r3, [pc, #564]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f023 020f 	bic.w	r2, r3, #15
 800b3d2:	498b      	ldr	r1, [pc, #556]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3da:	4b89      	ldr	r3, [pc, #548]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d001      	beq.n	800b3ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e105      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0302 	and.w	r3, r3, #2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d010      	beq.n	800b41a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	4b81      	ldr	r3, [pc, #516]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b404:	429a      	cmp	r2, r3
 800b406:	d908      	bls.n	800b41a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b408:	4b7e      	ldr	r3, [pc, #504]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	497b      	ldr	r1, [pc, #492]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b416:	4313      	orrs	r3, r2
 800b418:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	d079      	beq.n	800b51a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	2b03      	cmp	r3, #3
 800b42c:	d11e      	bne.n	800b46c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b42e:	4b75      	ldr	r3, [pc, #468]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e0dc      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800b43e:	f000 fa07 	bl	800b850 <RCC_GetSysClockFreqFromPLLSource>
 800b442:	4603      	mov	r3, r0
 800b444:	4a70      	ldr	r2, [pc, #448]	; (800b608 <HAL_RCC_ClockConfig+0x264>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d946      	bls.n	800b4d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b44a:	4b6e      	ldr	r3, [pc, #440]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d140      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b456:	4b6b      	ldr	r3, [pc, #428]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b45e:	4a69      	ldr	r2, [pc, #420]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b464:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b466:	2380      	movs	r3, #128	; 0x80
 800b468:	617b      	str	r3, [r7, #20]
 800b46a:	e035      	b.n	800b4d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	2b02      	cmp	r3, #2
 800b472:	d107      	bne.n	800b484 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b474:	4b63      	ldr	r3, [pc, #396]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d115      	bne.n	800b4ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e0b9      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d107      	bne.n	800b49c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b48c:	4b5d      	ldr	r3, [pc, #372]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 0302 	and.w	r3, r3, #2
 800b494:	2b00      	cmp	r3, #0
 800b496:	d109      	bne.n	800b4ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e0ad      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b49c:	4b59      	ldr	r3, [pc, #356]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e0a5      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800b4ac:	f000 f8b4 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	4a55      	ldr	r2, [pc, #340]	; (800b608 <HAL_RCC_ClockConfig+0x264>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d90f      	bls.n	800b4d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800b4b8:	4b52      	ldr	r3, [pc, #328]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d109      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b4c4:	4b4f      	ldr	r3, [pc, #316]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4cc:	4a4d      	ldr	r2, [pc, #308]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b4ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b4d4:	2380      	movs	r3, #128	; 0x80
 800b4d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b4d8:	4b4a      	ldr	r3, [pc, #296]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	f023 0203 	bic.w	r2, r3, #3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	4947      	ldr	r1, [pc, #284]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ea:	f7fb f97f 	bl	80067ec <HAL_GetTick>
 800b4ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4f0:	e00a      	b.n	800b508 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4f2:	f7fb f97b 	bl	80067ec <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b500:	4293      	cmp	r3, r2
 800b502:	d901      	bls.n	800b508 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800b504:	2303      	movs	r3, #3
 800b506:	e077      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b508:	4b3e      	ldr	r3, [pc, #248]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f003 020c 	and.w	r2, r3, #12
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	429a      	cmp	r2, r3
 800b518:	d1eb      	bne.n	800b4f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b80      	cmp	r3, #128	; 0x80
 800b51e:	d105      	bne.n	800b52c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b520:	4b38      	ldr	r3, [pc, #224]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	4a37      	ldr	r2, [pc, #220]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b52a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b00      	cmp	r3, #0
 800b536:	d010      	beq.n	800b55a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	689a      	ldr	r2, [r3, #8]
 800b53c:	4b31      	ldr	r3, [pc, #196]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b544:	429a      	cmp	r2, r3
 800b546:	d208      	bcs.n	800b55a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b548:	4b2e      	ldr	r3, [pc, #184]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	492b      	ldr	r1, [pc, #172]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b556:	4313      	orrs	r3, r2
 800b558:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b55a:	4b29      	ldr	r3, [pc, #164]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 030f 	and.w	r3, r3, #15
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	429a      	cmp	r2, r3
 800b566:	d210      	bcs.n	800b58a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b568:	4b25      	ldr	r3, [pc, #148]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f023 020f 	bic.w	r2, r3, #15
 800b570:	4923      	ldr	r1, [pc, #140]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	4313      	orrs	r3, r2
 800b576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b578:	4b21      	ldr	r3, [pc, #132]	; (800b600 <HAL_RCC_ClockConfig+0x25c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 030f 	and.w	r3, r3, #15
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	429a      	cmp	r2, r3
 800b584:	d001      	beq.n	800b58a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e036      	b.n	800b5f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0304 	and.w	r3, r3, #4
 800b592:	2b00      	cmp	r3, #0
 800b594:	d008      	beq.n	800b5a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b596:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b598:	689b      	ldr	r3, [r3, #8]
 800b59a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	4918      	ldr	r1, [pc, #96]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0308 	and.w	r3, r3, #8
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d009      	beq.n	800b5c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5b4:	4b13      	ldr	r3, [pc, #76]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	00db      	lsls	r3, r3, #3
 800b5c2:	4910      	ldr	r1, [pc, #64]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b5c8:	f000 f826 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	; (800b604 <HAL_RCC_ClockConfig+0x260>)
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	091b      	lsrs	r3, r3, #4
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	490c      	ldr	r1, [pc, #48]	; (800b60c <HAL_RCC_ClockConfig+0x268>)
 800b5da:	5ccb      	ldrb	r3, [r1, r3]
 800b5dc:	f003 031f 	and.w	r3, r3, #31
 800b5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e4:	4a0a      	ldr	r2, [pc, #40]	; (800b610 <HAL_RCC_ClockConfig+0x26c>)
 800b5e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <HAL_RCC_ClockConfig+0x270>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7fb f8ad 	bl	800674c <HAL_InitTick>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]

  return status;
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	40022000 	.word	0x40022000
 800b604:	40021000 	.word	0x40021000
 800b608:	04c4b400 	.word	0x04c4b400
 800b60c:	0801f3dc 	.word	0x0801f3dc
 800b610:	20000000 	.word	0x20000000
 800b614:	2000005c 	.word	0x2000005c

0800b618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	b089      	sub	sp, #36	; 0x24
 800b61c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	61fb      	str	r3, [r7, #28]
 800b622:	2300      	movs	r3, #0
 800b624:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	f003 030c 	and.w	r3, r3, #12
 800b62e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b630:	4b3b      	ldr	r3, [pc, #236]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	f003 0303 	and.w	r3, r3, #3
 800b638:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d005      	beq.n	800b64c <HAL_RCC_GetSysClockFreq+0x34>
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b0c      	cmp	r3, #12
 800b644:	d121      	bne.n	800b68a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d11e      	bne.n	800b68a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b64c:	4b34      	ldr	r3, [pc, #208]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0308 	and.w	r3, r3, #8
 800b654:	2b00      	cmp	r3, #0
 800b656:	d107      	bne.n	800b668 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b658:	4b31      	ldr	r3, [pc, #196]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b65a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b65e:	0a1b      	lsrs	r3, r3, #8
 800b660:	f003 030f 	and.w	r3, r3, #15
 800b664:	61fb      	str	r3, [r7, #28]
 800b666:	e005      	b.n	800b674 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b668:	4b2d      	ldr	r3, [pc, #180]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	091b      	lsrs	r3, r3, #4
 800b66e:	f003 030f 	and.w	r3, r3, #15
 800b672:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b674:	4a2b      	ldr	r2, [pc, #172]	; (800b724 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b67c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10d      	bne.n	800b6a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b688:	e00a      	b.n	800b6a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	2b04      	cmp	r3, #4
 800b68e:	d102      	bne.n	800b696 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b690:	4b25      	ldr	r3, [pc, #148]	; (800b728 <HAL_RCC_GetSysClockFreq+0x110>)
 800b692:	61bb      	str	r3, [r7, #24]
 800b694:	e004      	b.n	800b6a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	2b08      	cmp	r3, #8
 800b69a:	d101      	bne.n	800b6a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b69c:	4b22      	ldr	r3, [pc, #136]	; (800b728 <HAL_RCC_GetSysClockFreq+0x110>)
 800b69e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	2b0c      	cmp	r3, #12
 800b6a4:	d134      	bne.n	800b710 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b6a6:	4b1e      	ldr	r3, [pc, #120]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d003      	beq.n	800b6be <HAL_RCC_GetSysClockFreq+0xa6>
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d003      	beq.n	800b6c4 <HAL_RCC_GetSysClockFreq+0xac>
 800b6bc:	e005      	b.n	800b6ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b6be:	4b1a      	ldr	r3, [pc, #104]	; (800b728 <HAL_RCC_GetSysClockFreq+0x110>)
 800b6c0:	617b      	str	r3, [r7, #20]
      break;
 800b6c2:	e005      	b.n	800b6d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b6c4:	4b18      	ldr	r3, [pc, #96]	; (800b728 <HAL_RCC_GetSysClockFreq+0x110>)
 800b6c6:	617b      	str	r3, [r7, #20]
      break;
 800b6c8:	e002      	b.n	800b6d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	617b      	str	r3, [r7, #20]
      break;
 800b6ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b6d0:	4b13      	ldr	r3, [pc, #76]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	091b      	lsrs	r3, r3, #4
 800b6d6:	f003 030f 	and.w	r3, r3, #15
 800b6da:	3301      	adds	r3, #1
 800b6dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b6de:	4b10      	ldr	r3, [pc, #64]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	0a1b      	lsrs	r3, r3, #8
 800b6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6e8:	697a      	ldr	r2, [r7, #20]
 800b6ea:	fb03 f202 	mul.w	r2, r3, r2
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <HAL_RCC_GetSysClockFreq+0x108>)
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	0e5b      	lsrs	r3, r3, #25
 800b6fc:	f003 0303 	and.w	r3, r3, #3
 800b700:	3301      	adds	r3, #1
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b710:	69bb      	ldr	r3, [r7, #24]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3724      	adds	r7, #36	; 0x24
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	40021000 	.word	0x40021000
 800b724:	0801f3f4 	.word	0x0801f3f4
 800b728:	00f42400 	.word	0x00f42400

0800b72c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b730:	4b03      	ldr	r3, [pc, #12]	; (800b740 <HAL_RCC_GetHCLKFreq+0x14>)
 800b732:	681b      	ldr	r3, [r3, #0]
}
 800b734:	4618      	mov	r0, r3
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	20000000 	.word	0x20000000

0800b744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b748:	f7ff fff0 	bl	800b72c <HAL_RCC_GetHCLKFreq>
 800b74c:	4602      	mov	r2, r0
 800b74e:	4b06      	ldr	r3, [pc, #24]	; (800b768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	0a1b      	lsrs	r3, r3, #8
 800b754:	f003 0307 	and.w	r3, r3, #7
 800b758:	4904      	ldr	r1, [pc, #16]	; (800b76c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b75a:	5ccb      	ldrb	r3, [r1, r3]
 800b75c:	f003 031f 	and.w	r3, r3, #31
 800b760:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b764:	4618      	mov	r0, r3
 800b766:	bd80      	pop	{r7, pc}
 800b768:	40021000 	.word	0x40021000
 800b76c:	0801f3ec 	.word	0x0801f3ec

0800b770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b774:	f7ff ffda 	bl	800b72c <HAL_RCC_GetHCLKFreq>
 800b778:	4602      	mov	r2, r0
 800b77a:	4b06      	ldr	r3, [pc, #24]	; (800b794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	0adb      	lsrs	r3, r3, #11
 800b780:	f003 0307 	and.w	r3, r3, #7
 800b784:	4904      	ldr	r1, [pc, #16]	; (800b798 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b786:	5ccb      	ldrb	r3, [r1, r3]
 800b788:	f003 031f 	and.w	r3, r3, #31
 800b78c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b790:	4618      	mov	r0, r3
 800b792:	bd80      	pop	{r7, pc}
 800b794:	40021000 	.word	0x40021000
 800b798:	0801f3ec 	.word	0x0801f3ec

0800b79c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b086      	sub	sp, #24
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b7a8:	4b27      	ldr	r3, [pc, #156]	; (800b848 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b7b4:	f7ff f8f8 	bl	800a9a8 <HAL_PWREx_GetVoltageRange>
 800b7b8:	6178      	str	r0, [r7, #20]
 800b7ba:	e014      	b.n	800b7e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b7bc:	4b22      	ldr	r3, [pc, #136]	; (800b848 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c0:	4a21      	ldr	r2, [pc, #132]	; (800b848 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b7c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b7c8:	4b1f      	ldr	r3, [pc, #124]	; (800b848 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b7d4:	f7ff f8e8 	bl	800a9a8 <HAL_PWREx_GetVoltageRange>
 800b7d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b7da:	4b1b      	ldr	r3, [pc, #108]	; (800b848 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7de:	4a1a      	ldr	r2, [pc, #104]	; (800b848 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800b7e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ec:	d10b      	bne.n	800b806 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b80      	cmp	r3, #128	; 0x80
 800b7f2:	d913      	bls.n	800b81c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2ba0      	cmp	r3, #160	; 0xa0
 800b7f8:	d902      	bls.n	800b800 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b7fa:	2302      	movs	r3, #2
 800b7fc:	613b      	str	r3, [r7, #16]
 800b7fe:	e00d      	b.n	800b81c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b800:	2301      	movs	r3, #1
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	e00a      	b.n	800b81c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b7f      	cmp	r3, #127	; 0x7f
 800b80a:	d902      	bls.n	800b812 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800b80c:	2302      	movs	r3, #2
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	e004      	b.n	800b81c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b70      	cmp	r3, #112	; 0x70
 800b816:	d101      	bne.n	800b81c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b818:	2301      	movs	r3, #1
 800b81a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b81c:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f023 020f 	bic.w	r2, r3, #15
 800b824:	4909      	ldr	r1, [pc, #36]	; (800b84c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	4313      	orrs	r3, r2
 800b82a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b82c:	4b07      	ldr	r3, [pc, #28]	; (800b84c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f003 030f 	and.w	r3, r3, #15
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	429a      	cmp	r2, r3
 800b838:	d001      	beq.n	800b83e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	40021000 	.word	0x40021000
 800b84c:	40022000 	.word	0x40022000

0800b850 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b856:	4b2d      	ldr	r3, [pc, #180]	; (800b90c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b03      	cmp	r3, #3
 800b864:	d00b      	beq.n	800b87e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d825      	bhi.n	800b8b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d008      	beq.n	800b884 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b02      	cmp	r3, #2
 800b876:	d11f      	bne.n	800b8b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800b878:	4b25      	ldr	r3, [pc, #148]	; (800b910 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b87a:	613b      	str	r3, [r7, #16]
    break;
 800b87c:	e01f      	b.n	800b8be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800b87e:	4b24      	ldr	r3, [pc, #144]	; (800b910 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800b880:	613b      	str	r3, [r7, #16]
    break;
 800b882:	e01c      	b.n	800b8be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b884:	4b21      	ldr	r3, [pc, #132]	; (800b90c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f003 0308 	and.w	r3, r3, #8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d107      	bne.n	800b8a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b890:	4b1e      	ldr	r3, [pc, #120]	; (800b90c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b896:	0a1b      	lsrs	r3, r3, #8
 800b898:	f003 030f 	and.w	r3, r3, #15
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e005      	b.n	800b8ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b8a0:	4b1a      	ldr	r3, [pc, #104]	; (800b90c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	091b      	lsrs	r3, r3, #4
 800b8a6:	f003 030f 	and.w	r3, r3, #15
 800b8aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800b8ac:	4a19      	ldr	r2, [pc, #100]	; (800b914 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b4:	613b      	str	r3, [r7, #16]
    break;
 800b8b6:	e002      	b.n	800b8be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	613b      	str	r3, [r7, #16]
    break;
 800b8bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b8be:	4b13      	ldr	r3, [pc, #76]	; (800b90c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	091b      	lsrs	r3, r3, #4
 800b8c4:	f003 030f 	and.w	r3, r3, #15
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b8cc:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	0a1b      	lsrs	r3, r3, #8
 800b8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	fb03 f202 	mul.w	r2, r3, r2
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8e4:	4b09      	ldr	r3, [pc, #36]	; (800b90c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	0e5b      	lsrs	r3, r3, #25
 800b8ea:	f003 0303 	and.w	r3, r3, #3
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800b8fe:	683b      	ldr	r3, [r7, #0]
}
 800b900:	4618      	mov	r0, r3
 800b902:	371c      	adds	r7, #28
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	40021000 	.word	0x40021000
 800b910:	00f42400 	.word	0x00f42400
 800b914:	0801f3f4 	.word	0x0801f3f4

0800b918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b920:	2300      	movs	r3, #0
 800b922:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b924:	2300      	movs	r3, #0
 800b926:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b930:	2b00      	cmp	r3, #0
 800b932:	d040      	beq.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b938:	2b80      	cmp	r3, #128	; 0x80
 800b93a:	d02a      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b93c:	2b80      	cmp	r3, #128	; 0x80
 800b93e:	d825      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b940:	2b60      	cmp	r3, #96	; 0x60
 800b942:	d026      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b944:	2b60      	cmp	r3, #96	; 0x60
 800b946:	d821      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b948:	2b40      	cmp	r3, #64	; 0x40
 800b94a:	d006      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800b94c:	2b40      	cmp	r3, #64	; 0x40
 800b94e:	d81d      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x74>
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800b954:	2b20      	cmp	r3, #32
 800b956:	d010      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800b958:	e018      	b.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b95a:	4b89      	ldr	r3, [pc, #548]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	4a88      	ldr	r2, [pc, #544]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b964:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b966:	e015      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3304      	adds	r3, #4
 800b96c:	2100      	movs	r1, #0
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 fa82 	bl	800ce78 <RCCEx_PLLSAI1_Config>
 800b974:	4603      	mov	r3, r0
 800b976:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b978:	e00c      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3320      	adds	r3, #32
 800b97e:	2100      	movs	r1, #0
 800b980:	4618      	mov	r0, r3
 800b982:	f001 fb6d 	bl	800d060 <RCCEx_PLLSAI2_Config>
 800b986:	4603      	mov	r3, r0
 800b988:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b98a:	e003      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	74fb      	strb	r3, [r7, #19]
      break;
 800b990:	e000      	b.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800b992:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b994:	7cfb      	ldrb	r3, [r7, #19]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10b      	bne.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b99a:	4b79      	ldr	r3, [pc, #484]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b99c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9a0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a8:	4975      	ldr	r1, [pc, #468]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b9b0:	e001      	b.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9b2:	7cfb      	ldrb	r3, [r7, #19]
 800b9b4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d047      	beq.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9ca:	d030      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9d0:	d82a      	bhi.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b9d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9d6:	d02a      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b9d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9dc:	d824      	bhi.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b9de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9e2:	d008      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b9e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9e8:	d81e      	bhi.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800b9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9f2:	d010      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b9f4:	e018      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b9f6:	4b62      	ldr	r3, [pc, #392]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	4a61      	ldr	r2, [pc, #388]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b9fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba00:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ba02:	e015      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3304      	adds	r3, #4
 800ba08:	2100      	movs	r1, #0
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f001 fa34 	bl	800ce78 <RCCEx_PLLSAI1_Config>
 800ba10:	4603      	mov	r3, r0
 800ba12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ba14:	e00c      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3320      	adds	r3, #32
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f001 fb1f 	bl	800d060 <RCCEx_PLLSAI2_Config>
 800ba22:	4603      	mov	r3, r0
 800ba24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ba26:	e003      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	74fb      	strb	r3, [r7, #19]
      break;
 800ba2c:	e000      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800ba2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba30:	7cfb      	ldrb	r3, [r7, #19]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba36:	4b52      	ldr	r3, [pc, #328]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba44:	494e      	ldr	r1, [pc, #312]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800ba4c:	e001      	b.n	800ba52 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba4e:	7cfb      	ldrb	r3, [r7, #19]
 800ba50:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 809f 	beq.w	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba60:	2300      	movs	r3, #0
 800ba62:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ba64:	4b46      	ldr	r3, [pc, #280]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e000      	b.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800ba74:	2300      	movs	r3, #0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00d      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba7a:	4b41      	ldr	r3, [pc, #260]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba7e:	4a40      	ldr	r2, [pc, #256]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba84:	6593      	str	r3, [r2, #88]	; 0x58
 800ba86:	4b3e      	ldr	r3, [pc, #248]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800ba88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba8e:	60bb      	str	r3, [r7, #8]
 800ba90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba92:	2301      	movs	r3, #1
 800ba94:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba96:	4b3b      	ldr	r3, [pc, #236]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a3a      	ldr	r2, [pc, #232]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800ba9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800baa2:	f7fa fea3 	bl	80067ec <HAL_GetTick>
 800baa6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800baa8:	e009      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800baaa:	f7fa fe9f 	bl	80067ec <HAL_GetTick>
 800baae:	4602      	mov	r2, r0
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d902      	bls.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800bab8:	2303      	movs	r3, #3
 800baba:	74fb      	strb	r3, [r7, #19]
        break;
 800babc:	e005      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800babe:	4b31      	ldr	r3, [pc, #196]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0ef      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800baca:	7cfb      	ldrb	r3, [r7, #19]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d15b      	bne.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bad0:	4b2b      	ldr	r3, [pc, #172]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bada:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d01f      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	429a      	cmp	r2, r3
 800baec:	d019      	beq.n	800bb22 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800baee:	4b24      	ldr	r3, [pc, #144]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800baf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baf8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bafa:	4b21      	ldr	r3, [pc, #132]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb00:	4a1f      	ldr	r2, [pc, #124]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bb0a:	4b1d      	ldr	r3, [pc, #116]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb10:	4a1b      	ldr	r2, [pc, #108]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bb1a:	4a19      	ldr	r2, [pc, #100]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d016      	beq.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb2c:	f7fa fe5e 	bl	80067ec <HAL_GetTick>
 800bb30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb32:	e00b      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb34:	f7fa fe5a 	bl	80067ec <HAL_GetTick>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d902      	bls.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	74fb      	strb	r3, [r7, #19]
            break;
 800bb4a:	e006      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb4c:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb52:	f003 0302 	and.w	r3, r3, #2
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d0ec      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800bb5a:	7cfb      	ldrb	r3, [r7, #19]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10c      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb70:	4903      	ldr	r1, [pc, #12]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800bb72:	4313      	orrs	r3, r2
 800bb74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bb78:	e008      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb7a:	7cfb      	ldrb	r3, [r7, #19]
 800bb7c:	74bb      	strb	r3, [r7, #18]
 800bb7e:	e005      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x274>
 800bb80:	40021000 	.word	0x40021000
 800bb84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb88:	7cfb      	ldrb	r3, [r7, #19]
 800bb8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb8c:	7c7b      	ldrb	r3, [r7, #17]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d105      	bne.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb92:	4ba0      	ldr	r3, [pc, #640]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb96:	4a9f      	ldr	r2, [pc, #636]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bb98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00a      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bbaa:	4b9a      	ldr	r3, [pc, #616]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bbac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbb0:	f023 0203 	bic.w	r2, r3, #3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb8:	4996      	ldr	r1, [pc, #600]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 0302 	and.w	r3, r3, #2
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00a      	beq.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bbcc:	4b91      	ldr	r3, [pc, #580]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bbce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbd2:	f023 020c 	bic.w	r2, r3, #12
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbda:	498e      	ldr	r1, [pc, #568]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00a      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bbee:	4b89      	ldr	r3, [pc, #548]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bbf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbfc:	4985      	ldr	r1, [pc, #532]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f003 0308 	and.w	r3, r3, #8
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00a      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bc10:	4b80      	ldr	r3, [pc, #512]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc1e:	497d      	ldr	r1, [pc, #500]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc20:	4313      	orrs	r3, r2
 800bc22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 0310 	and.w	r3, r3, #16
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00a      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bc32:	4b78      	ldr	r3, [pc, #480]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc40:	4974      	ldr	r1, [pc, #464]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc42:	4313      	orrs	r3, r2
 800bc44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 0320 	and.w	r3, r3, #32
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00a      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc54:	4b6f      	ldr	r3, [pc, #444]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc62:	496c      	ldr	r1, [pc, #432]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc64:	4313      	orrs	r3, r2
 800bc66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc76:	4b67      	ldr	r3, [pc, #412]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc84:	4963      	ldr	r1, [pc, #396]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc86:	4313      	orrs	r3, r2
 800bc88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00a      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc98:	4b5e      	ldr	r3, [pc, #376]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bc9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bca6:	495b      	ldr	r1, [pc, #364]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bcba:	4b56      	ldr	r3, [pc, #344]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc8:	4952      	ldr	r1, [pc, #328]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcca:	4313      	orrs	r3, r2
 800bccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bcdc:	4b4d      	ldr	r3, [pc, #308]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcea:	494a      	ldr	r1, [pc, #296]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bcec:	4313      	orrs	r3, r2
 800bcee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bcfe:	4b45      	ldr	r3, [pc, #276]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd0c:	4941      	ldr	r1, [pc, #260]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00a      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd20:	4b3c      	ldr	r3, [pc, #240]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd26:	f023 0203 	bic.w	r2, r3, #3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd2e:	4939      	ldr	r1, [pc, #228]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd30:	4313      	orrs	r3, r2
 800bd32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d028      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd42:	4b34      	ldr	r3, [pc, #208]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd50:	4930      	ldr	r1, [pc, #192]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd60:	d106      	bne.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd62:	4b2c      	ldr	r3, [pc, #176]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	4a2b      	ldr	r2, [pc, #172]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bd68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd6c:	60d3      	str	r3, [r2, #12]
 800bd6e:	e011      	b.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd78:	d10c      	bne.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	2101      	movs	r1, #1
 800bd80:	4618      	mov	r0, r3
 800bd82:	f001 f879 	bl	800ce78 <RCCEx_PLLSAI1_Config>
 800bd86:	4603      	mov	r3, r0
 800bd88:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800bd8a:	7cfb      	ldrb	r3, [r7, #19]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d001      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800bd90:	7cfb      	ldrb	r3, [r7, #19]
 800bd92:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d04d      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bda8:	d108      	bne.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800bdaa:	4b1a      	ldr	r3, [pc, #104]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdb0:	4a18      	ldr	r2, [pc, #96]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bdba:	e012      	b.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800bdbc:	4b15      	ldr	r3, [pc, #84]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdc2:	4a14      	ldr	r2, [pc, #80]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bdcc:	4b11      	ldr	r3, [pc, #68]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdda:	490e      	ldr	r1, [pc, #56]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bddc:	4313      	orrs	r3, r2
 800bdde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bde6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdea:	d106      	bne.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdec:	4b09      	ldr	r3, [pc, #36]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdee:	68db      	ldr	r3, [r3, #12]
 800bdf0:	4a08      	ldr	r2, [pc, #32]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800bdf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdf6:	60d3      	str	r3, [r2, #12]
 800bdf8:	e020      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be02:	d109      	bne.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800be04:	4b03      	ldr	r3, [pc, #12]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	4a02      	ldr	r2, [pc, #8]	; (800be14 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800be0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be0e:	60d3      	str	r3, [r2, #12]
 800be10:	e014      	b.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800be12:	bf00      	nop
 800be14:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be20:	d10c      	bne.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3304      	adds	r3, #4
 800be26:	2101      	movs	r1, #1
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 f825 	bl	800ce78 <RCCEx_PLLSAI1_Config>
 800be2e:	4603      	mov	r3, r0
 800be30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be32:	7cfb      	ldrb	r3, [r7, #19]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d001      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800be38:	7cfb      	ldrb	r3, [r7, #19]
 800be3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d028      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be48:	4b7a      	ldr	r3, [pc, #488]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800be4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be56:	4977      	ldr	r1, [pc, #476]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be66:	d106      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be68:	4b72      	ldr	r3, [pc, #456]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	4a71      	ldr	r2, [pc, #452]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800be6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be72:	60d3      	str	r3, [r2, #12]
 800be74:	e011      	b.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be7e:	d10c      	bne.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3304      	adds	r3, #4
 800be84:	2101      	movs	r1, #1
 800be86:	4618      	mov	r0, r3
 800be88:	f000 fff6 	bl	800ce78 <RCCEx_PLLSAI1_Config>
 800be8c:	4603      	mov	r3, r0
 800be8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800be90:	7cfb      	ldrb	r3, [r7, #19]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800be96:	7cfb      	ldrb	r3, [r7, #19]
 800be98:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d01e      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bea6:	4b63      	ldr	r3, [pc, #396]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beb6:	495f      	ldr	r1, [pc, #380]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bec8:	d10c      	bne.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3304      	adds	r3, #4
 800bece:	2102      	movs	r1, #2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 ffd1 	bl	800ce78 <RCCEx_PLLSAI1_Config>
 800bed6:	4603      	mov	r3, r0
 800bed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800beda:	7cfb      	ldrb	r3, [r7, #19]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d001      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800bee0:	7cfb      	ldrb	r3, [r7, #19]
 800bee2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00b      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bef0:	4b50      	ldr	r3, [pc, #320]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bef6:	f023 0204 	bic.w	r2, r3, #4
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf00:	494c      	ldr	r1, [pc, #304]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf02:	4313      	orrs	r3, r2
 800bf04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00b      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800bf14:	4b47      	ldr	r3, [pc, #284]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf1a:	f023 0218 	bic.w	r2, r3, #24
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf24:	4943      	ldr	r1, [pc, #268]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf26:	4313      	orrs	r3, r2
 800bf28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d035      	beq.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800bf38:	4b3e      	ldr	r3, [pc, #248]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a3d      	ldr	r2, [pc, #244]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf44:	f7fa fc52 	bl	80067ec <HAL_GetTick>
 800bf48:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bf4a:	e009      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bf4c:	f7fa fc4e 	bl	80067ec <HAL_GetTick>
 800bf50:	4602      	mov	r2, r0
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d902      	bls.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	74fb      	strb	r3, [r7, #19]
        break;
 800bf5e:	e005      	b.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bf60:	4b34      	ldr	r3, [pc, #208]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1ef      	bne.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 800bf6c:	7cfb      	ldrb	r3, [r7, #19]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d113      	bne.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800bf72:	4b30      	ldr	r3, [pc, #192]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf82:	492c      	ldr	r1, [pc, #176]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	3320      	adds	r3, #32
 800bf8e:	2102      	movs	r1, #2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f001 f865 	bl	800d060 <RCCEx_PLLSAI2_Config>
 800bf96:	4603      	mov	r3, r0
 800bf98:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800bf9a:	7cfb      	ldrb	r3, [r7, #19]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d001      	beq.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 800bfa0:	7cfb      	ldrb	r3, [r7, #19]
 800bfa2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d01e      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800bfb0:	4b20      	ldr	r3, [pc, #128]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bfb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfc0:	491c      	ldr	r1, [pc, #112]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd2:	d10c      	bne.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3320      	adds	r3, #32
 800bfd8:	2101      	movs	r1, #1
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 f840 	bl	800d060 <RCCEx_PLLSAI2_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800bfe4:	7cfb      	ldrb	r3, [r7, #19]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d001      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800bfea:	7cfb      	ldrb	r3, [r7, #19]
 800bfec:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d017      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bffa:	4b0e      	ldr	r3, [pc, #56]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800bffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c000:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c00a:	490a      	ldr	r1, [pc, #40]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c00c:	4313      	orrs	r3, r2
 800c00e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c018:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c01c:	d105      	bne.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c01e:	4b05      	ldr	r3, [pc, #20]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	4a04      	ldr	r2, [pc, #16]	; (800c034 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800c024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c028:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c02a:	7cbb      	ldrb	r3, [r7, #18]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	40021000 	.word	0x40021000

0800c038 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b088      	sub	sp, #32
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800c040:	2300      	movs	r3, #0
 800c042:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c04a:	d13e      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800c04c:	4bb6      	ldr	r3, [pc, #728]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c056:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c05e:	d028      	beq.n	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c066:	f200 86f2 	bhi.w	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c070:	d005      	beq.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c078:	d00e      	beq.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800c07a:	f000 bee8 	b.w	800ce4e <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c07e:	4baa      	ldr	r3, [pc, #680]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c084:	f003 0302 	and.w	r3, r3, #2
 800c088:	2b02      	cmp	r3, #2
 800c08a:	f040 86e2 	bne.w	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 800c08e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c092:	61fb      	str	r3, [r7, #28]
      break;
 800c094:	f000 bedd 	b.w	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c098:	4ba3      	ldr	r3, [pc, #652]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c09e:	f003 0302 	and.w	r3, r3, #2
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	f040 86d7 	bne.w	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 800c0a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c0ac:	61fb      	str	r3, [r7, #28]
      break;
 800c0ae:	f000 bed2 	b.w	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0b2:	4b9d      	ldr	r3, [pc, #628]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0be:	f040 86cc 	bne.w	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 800c0c2:	4b9a      	ldr	r3, [pc, #616]	; (800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800c0c4:	61fb      	str	r3, [r7, #28]
      break;
 800c0c6:	f000 bec8 	b.w	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c0ca:	4b97      	ldr	r3, [pc, #604]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	f003 0303 	and.w	r3, r3, #3
 800c0d2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d036      	beq.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d840      	bhi.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d003      	beq.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d020      	beq.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800c0ec:	e039      	b.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c0ee:	4b8e      	ldr	r3, [pc, #568]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0302 	and.w	r3, r3, #2
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d116      	bne.n	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c0fa:	4b8b      	ldr	r3, [pc, #556]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 0308 	and.w	r3, r3, #8
 800c102:	2b00      	cmp	r3, #0
 800c104:	d005      	beq.n	800c112 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800c106:	4b88      	ldr	r3, [pc, #544]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	091b      	lsrs	r3, r3, #4
 800c10c:	f003 030f 	and.w	r3, r3, #15
 800c110:	e005      	b.n	800c11e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800c112:	4b85      	ldr	r3, [pc, #532]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c118:	0a1b      	lsrs	r3, r3, #8
 800c11a:	f003 030f 	and.w	r3, r3, #15
 800c11e:	4a84      	ldr	r2, [pc, #528]	; (800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800c120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c124:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c126:	e01f      	b.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c128:	2300      	movs	r3, #0
 800c12a:	61bb      	str	r3, [r7, #24]
      break;
 800c12c:	e01c      	b.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c12e:	4b7e      	ldr	r3, [pc, #504]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c13a:	d102      	bne.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800c13c:	4b7d      	ldr	r3, [pc, #500]	; (800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800c13e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c140:	e012      	b.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c142:	2300      	movs	r3, #0
 800c144:	61bb      	str	r3, [r7, #24]
      break;
 800c146:	e00f      	b.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c148:	4b77      	ldr	r3, [pc, #476]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c154:	d102      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800c156:	4b77      	ldr	r3, [pc, #476]	; (800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800c158:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800c15a:	e005      	b.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	61bb      	str	r3, [r7, #24]
      break;
 800c160:	e002      	b.n	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800c162:	2300      	movs	r3, #0
 800c164:	61bb      	str	r3, [r7, #24]
      break;
 800c166:	bf00      	nop
    }

    switch(PeriphClk)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c16e:	f000 8604 	beq.w	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c178:	f200 8671 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c182:	f000 8467 	beq.w	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c18c:	f200 8667 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c196:	f000 852f 	beq.w	800cbf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1a0:	f200 865d 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c1aa:	f000 8185 	beq.w	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c1b4:	f200 8653 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1be:	f000 80cb 	beq.w	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1c8:	f200 8649 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1d2:	f000 842e 	beq.w	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1dc:	f200 863f 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1e6:	f000 83e2 	beq.w	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1f0:	f200 8635 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1fa:	f000 80ad 	beq.w	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c204:	f200 862b 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c20e:	f000 809b 	beq.w	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c218:	f200 8621 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c222:	f000 8089 	beq.w	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c22c:	f200 8617 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c236:	f000 8552 	beq.w	800ccde <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c240:	f200 860d 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c24a:	f000 84fe 	beq.w	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c254:	f200 8603 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c25e:	f000 849f 	beq.w	800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c268:	f200 85f9 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b80      	cmp	r3, #128	; 0x80
 800c270:	f000 846a 	beq.w	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b80      	cmp	r3, #128	; 0x80
 800c278:	f200 85f1 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b20      	cmp	r3, #32
 800c280:	d84c      	bhi.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 85ea 	beq.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	2b1f      	cmp	r3, #31
 800c290:	f200 85e5 	bhi.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c294:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800c296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29a:	bf00      	nop
 800c29c:	0800c6ad 	.word	0x0800c6ad
 800c2a0:	0800c71b 	.word	0x0800c71b
 800c2a4:	0800ce5f 	.word	0x0800ce5f
 800c2a8:	0800c7af 	.word	0x0800c7af
 800c2ac:	0800ce5f 	.word	0x0800ce5f
 800c2b0:	0800ce5f 	.word	0x0800ce5f
 800c2b4:	0800ce5f 	.word	0x0800ce5f
 800c2b8:	0800c827 	.word	0x0800c827
 800c2bc:	0800ce5f 	.word	0x0800ce5f
 800c2c0:	0800ce5f 	.word	0x0800ce5f
 800c2c4:	0800ce5f 	.word	0x0800ce5f
 800c2c8:	0800ce5f 	.word	0x0800ce5f
 800c2cc:	0800ce5f 	.word	0x0800ce5f
 800c2d0:	0800ce5f 	.word	0x0800ce5f
 800c2d4:	0800ce5f 	.word	0x0800ce5f
 800c2d8:	0800c8ab 	.word	0x0800c8ab
 800c2dc:	0800ce5f 	.word	0x0800ce5f
 800c2e0:	0800ce5f 	.word	0x0800ce5f
 800c2e4:	0800ce5f 	.word	0x0800ce5f
 800c2e8:	0800ce5f 	.word	0x0800ce5f
 800c2ec:	0800ce5f 	.word	0x0800ce5f
 800c2f0:	0800ce5f 	.word	0x0800ce5f
 800c2f4:	0800ce5f 	.word	0x0800ce5f
 800c2f8:	0800ce5f 	.word	0x0800ce5f
 800c2fc:	0800ce5f 	.word	0x0800ce5f
 800c300:	0800ce5f 	.word	0x0800ce5f
 800c304:	0800ce5f 	.word	0x0800ce5f
 800c308:	0800ce5f 	.word	0x0800ce5f
 800c30c:	0800ce5f 	.word	0x0800ce5f
 800c310:	0800ce5f 	.word	0x0800ce5f
 800c314:	0800ce5f 	.word	0x0800ce5f
 800c318:	0800c92d 	.word	0x0800c92d
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b40      	cmp	r3, #64	; 0x40
 800c320:	f000 83e6 	beq.w	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800c324:	f000 bd9b 	b.w	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 800c328:	40021000 	.word	0x40021000
 800c32c:	0007a120 	.word	0x0007a120
 800c330:	0801f3f4 	.word	0x0801f3f4
 800c334:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800c338:	69b9      	ldr	r1, [r7, #24]
 800c33a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c33e:	f000 ff83 	bl	800d248 <RCCEx_GetSAIxPeriphCLKFreq>
 800c342:	61f8      	str	r0, [r7, #28]
      break;
 800c344:	f000 bd8e 	b.w	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800c348:	69b9      	ldr	r1, [r7, #24]
 800c34a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c34e:	f000 ff7b 	bl	800d248 <RCCEx_GetSAIxPeriphCLKFreq>
 800c352:	61f8      	str	r0, [r7, #28]
      break;
 800c354:	f000 bd86 	b.w	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c358:	4b9a      	ldr	r3, [pc, #616]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c35e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c36a:	d015      	beq.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c372:	f200 8092 	bhi.w	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c37c:	d029      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c384:	f200 8089 	bhi.w	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d07b      	beq.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c394:	d04a      	beq.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 800c396:	e080      	b.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c398:	4b8a      	ldr	r3, [pc, #552]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 0302 	and.w	r3, r3, #2
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d17d      	bne.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c3a4:	4b87      	ldr	r3, [pc, #540]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0308 	and.w	r3, r3, #8
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d005      	beq.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 800c3b0:	4b84      	ldr	r3, [pc, #528]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	091b      	lsrs	r3, r3, #4
 800c3b6:	f003 030f 	and.w	r3, r3, #15
 800c3ba:	e005      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 800c3bc:	4b81      	ldr	r3, [pc, #516]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c3c2:	0a1b      	lsrs	r3, r3, #8
 800c3c4:	f003 030f 	and.w	r3, r3, #15
 800c3c8:	4a7f      	ldr	r2, [pc, #508]	; (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c3ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ce:	61fb      	str	r3, [r7, #28]
          break;
 800c3d0:	e066      	b.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c3d2:	4b7c      	ldr	r3, [pc, #496]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3de:	d162      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c3e0:	4b78      	ldr	r3, [pc, #480]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ec:	d15b      	bne.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c3ee:	4b75      	ldr	r3, [pc, #468]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	0a1b      	lsrs	r3, r3, #8
 800c3f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3f8:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	68ba      	ldr	r2, [r7, #8]
 800c3fe:	fb03 f202 	mul.w	r2, r3, r2
 800c402:	4b70      	ldr	r3, [pc, #448]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	091b      	lsrs	r3, r3, #4
 800c408:	f003 030f 	and.w	r3, r3, #15
 800c40c:	3301      	adds	r3, #1
 800c40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c412:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c414:	4b6b      	ldr	r3, [pc, #428]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	0d5b      	lsrs	r3, r3, #21
 800c41a:	f003 0303 	and.w	r3, r3, #3
 800c41e:	3301      	adds	r3, #1
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	69ba      	ldr	r2, [r7, #24]
 800c424:	fbb2 f3f3 	udiv	r3, r2, r3
 800c428:	61fb      	str	r3, [r7, #28]
          break;
 800c42a:	e03c      	b.n	800c4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c42c:	4b65      	ldr	r3, [pc, #404]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c438:	d138      	bne.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c43a:	4b62      	ldr	r3, [pc, #392]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c446:	d131      	bne.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c448:	4b5e      	ldr	r3, [pc, #376]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	0a1b      	lsrs	r3, r3, #8
 800c44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c452:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	fb03 f202 	mul.w	r2, r3, r2
 800c45c:	4b59      	ldr	r3, [pc, #356]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	091b      	lsrs	r3, r3, #4
 800c462:	f003 030f 	and.w	r3, r3, #15
 800c466:	3301      	adds	r3, #1
 800c468:	fbb2 f3f3 	udiv	r3, r2, r3
 800c46c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c46e:	4b55      	ldr	r3, [pc, #340]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	0d5b      	lsrs	r3, r3, #21
 800c474:	f003 0303 	and.w	r3, r3, #3
 800c478:	3301      	adds	r3, #1
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c482:	61fb      	str	r3, [r7, #28]
          break;
 800c484:	e012      	b.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c486:	4b4f      	ldr	r3, [pc, #316]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b02      	cmp	r3, #2
 800c492:	d10e      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 800c494:	4b4d      	ldr	r3, [pc, #308]	; (800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800c496:	61fb      	str	r3, [r7, #28]
          break;
 800c498:	e00b      	b.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 800c49a:	bf00      	nop
 800c49c:	f000 bce2 	b.w	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c4a0:	bf00      	nop
 800c4a2:	f000 bcdf 	b.w	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c4a6:	bf00      	nop
 800c4a8:	f000 bcdc 	b.w	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c4ac:	bf00      	nop
 800c4ae:	f000 bcd9 	b.w	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c4b2:	bf00      	nop
        break;
 800c4b4:	f000 bcd6 	b.w	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800c4b8:	4b42      	ldr	r3, [pc, #264]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c4ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c4be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4c6:	d13d      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c4c8:	4b3e      	ldr	r3, [pc, #248]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4d4:	f040 84c5 	bne.w	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800c4d8:	4b3a      	ldr	r3, [pc, #232]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4e4:	f040 84bd 	bne.w	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c4e8:	4b36      	ldr	r3, [pc, #216]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c4ea:	68db      	ldr	r3, [r3, #12]
 800c4ec:	0a1b      	lsrs	r3, r3, #8
 800c4ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f2:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	fb03 f202 	mul.w	r2, r3, r2
 800c4fc:	4b31      	ldr	r3, [pc, #196]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	091b      	lsrs	r3, r3, #4
 800c502:	f003 030f 	and.w	r3, r3, #15
 800c506:	3301      	adds	r3, #1
 800c508:	fbb2 f3f3 	udiv	r3, r2, r3
 800c50c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800c50e:	4b2d      	ldr	r3, [pc, #180]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	0edb      	lsrs	r3, r3, #27
 800c514:	f003 031f 	and.w	r3, r3, #31
 800c518:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10a      	bne.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800c520:	4b28      	ldr	r3, [pc, #160]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 800c52c:	2311      	movs	r3, #17
 800c52e:	617b      	str	r3, [r7, #20]
 800c530:	e001      	b.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 800c532:	2307      	movs	r3, #7
 800c534:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800c536:	69ba      	ldr	r2, [r7, #24]
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c53e:	61fb      	str	r3, [r7, #28]
      break;
 800c540:	f000 bc8f 	b.w	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800c544:	4b1f      	ldr	r3, [pc, #124]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c54a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800c54e:	60fb      	str	r3, [r7, #12]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c556:	d016      	beq.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c55e:	f200 809b 	bhi.w	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c568:	d032      	beq.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c570:	f200 8092 	bhi.w	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 8084 	beq.w	800c684 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c582:	d052      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 800c584:	e088      	b.n	800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f003 0302 	and.w	r3, r3, #2
 800c58e:	2b02      	cmp	r3, #2
 800c590:	f040 8084 	bne.w	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c594:	4b0b      	ldr	r3, [pc, #44]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0308 	and.w	r3, r3, #8
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800c5a0:	4b08      	ldr	r3, [pc, #32]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	091b      	lsrs	r3, r3, #4
 800c5a6:	f003 030f 	and.w	r3, r3, #15
 800c5aa:	e005      	b.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800c5ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c5b2:	0a1b      	lsrs	r3, r3, #8
 800c5b4:	f003 030f 	and.w	r3, r3, #15
 800c5b8:	4a03      	ldr	r2, [pc, #12]	; (800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800c5ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5be:	61fb      	str	r3, [r7, #28]
          break;
 800c5c0:	e06c      	b.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800c5c2:	bf00      	nop
 800c5c4:	40021000 	.word	0x40021000
 800c5c8:	0801f3f4 	.word	0x0801f3f4
 800c5cc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c5d0:	4ba5      	ldr	r3, [pc, #660]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5dc:	d160      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c5de:	4ba2      	ldr	r3, [pc, #648]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c5e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5ea:	d159      	bne.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c5ec:	4b9e      	ldr	r3, [pc, #632]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	0a1b      	lsrs	r3, r3, #8
 800c5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5f6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	fb03 f202 	mul.w	r2, r3, r2
 800c600:	4b99      	ldr	r3, [pc, #612]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	091b      	lsrs	r3, r3, #4
 800c606:	f003 030f 	and.w	r3, r3, #15
 800c60a:	3301      	adds	r3, #1
 800c60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c610:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c612:	4b95      	ldr	r3, [pc, #596]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c614:	68db      	ldr	r3, [r3, #12]
 800c616:	0d5b      	lsrs	r3, r3, #21
 800c618:	f003 0303 	and.w	r3, r3, #3
 800c61c:	3301      	adds	r3, #1
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	69ba      	ldr	r2, [r7, #24]
 800c622:	fbb2 f3f3 	udiv	r3, r2, r3
 800c626:	61fb      	str	r3, [r7, #28]
          break;
 800c628:	e03a      	b.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800c62a:	4b8f      	ldr	r3, [pc, #572]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c632:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c636:	d135      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800c638:	4b8b      	ldr	r3, [pc, #556]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c644:	d12e      	bne.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c646:	4b88      	ldr	r3, [pc, #544]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	0a1b      	lsrs	r3, r3, #8
 800c64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c650:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	fb03 f202 	mul.w	r2, r3, r2
 800c65a:	4b83      	ldr	r3, [pc, #524]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	091b      	lsrs	r3, r3, #4
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	3301      	adds	r3, #1
 800c666:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800c66c:	4b7e      	ldr	r3, [pc, #504]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	0d5b      	lsrs	r3, r3, #21
 800c672:	f003 0303 	and.w	r3, r3, #3
 800c676:	3301      	adds	r3, #1
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	69ba      	ldr	r2, [r7, #24]
 800c67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c680:	61fb      	str	r3, [r7, #28]
          break;
 800c682:	e00f      	b.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800c684:	4b78      	ldr	r3, [pc, #480]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d10a      	bne.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 800c692:	4b76      	ldr	r3, [pc, #472]	; (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800c694:	61fb      	str	r3, [r7, #28]
          break;
 800c696:	e007      	b.n	800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 800c698:	bf00      	nop
 800c69a:	e3e2      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800c69c:	bf00      	nop
 800c69e:	e3e0      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800c6a0:	bf00      	nop
 800c6a2:	e3de      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800c6a4:	bf00      	nop
 800c6a6:	e3dc      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 800c6a8:	bf00      	nop
      break;
 800c6aa:	e3da      	b.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800c6ac:	4b6e      	ldr	r3, [pc, #440]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6b2:	f003 0303 	and.w	r3, r3, #3
 800c6b6:	60fb      	str	r3, [r7, #12]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d827      	bhi.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 800c6be:	a201      	add	r2, pc, #4	; (adr r2, 800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800c6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c4:	0800c6d5 	.word	0x0800c6d5
 800c6c8:	0800c6dd 	.word	0x0800c6dd
 800c6cc:	0800c6e5 	.word	0x0800c6e5
 800c6d0:	0800c6f9 	.word	0x0800c6f9
          frequency = HAL_RCC_GetPCLK2Freq();
 800c6d4:	f7ff f84c 	bl	800b770 <HAL_RCC_GetPCLK2Freq>
 800c6d8:	61f8      	str	r0, [r7, #28]
          break;
 800c6da:	e01d      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 800c6dc:	f7fe ff9c 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800c6e0:	61f8      	str	r0, [r7, #28]
          break;
 800c6e2:	e019      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6e4:	4b60      	ldr	r3, [pc, #384]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6f0:	d10f      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 800c6f2:	4b5f      	ldr	r3, [pc, #380]	; (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c6f4:	61fb      	str	r3, [r7, #28]
          break;
 800c6f6:	e00c      	b.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c6f8:	4b5b      	ldr	r3, [pc, #364]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6fe:	f003 0302 	and.w	r3, r3, #2
 800c702:	2b02      	cmp	r3, #2
 800c704:	d107      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 800c706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c70a:	61fb      	str	r3, [r7, #28]
          break;
 800c70c:	e003      	b.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 800c70e:	bf00      	nop
 800c710:	e3a8      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c712:	bf00      	nop
 800c714:	e3a6      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c716:	bf00      	nop
        break;
 800c718:	e3a4      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800c71a:	4b53      	ldr	r3, [pc, #332]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c720:	f003 030c 	and.w	r3, r3, #12
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2b0c      	cmp	r3, #12
 800c72a:	d83a      	bhi.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800c72c:	a201      	add	r2, pc, #4	; (adr r2, 800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 800c72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c732:	bf00      	nop
 800c734:	0800c769 	.word	0x0800c769
 800c738:	0800c7a3 	.word	0x0800c7a3
 800c73c:	0800c7a3 	.word	0x0800c7a3
 800c740:	0800c7a3 	.word	0x0800c7a3
 800c744:	0800c771 	.word	0x0800c771
 800c748:	0800c7a3 	.word	0x0800c7a3
 800c74c:	0800c7a3 	.word	0x0800c7a3
 800c750:	0800c7a3 	.word	0x0800c7a3
 800c754:	0800c779 	.word	0x0800c779
 800c758:	0800c7a3 	.word	0x0800c7a3
 800c75c:	0800c7a3 	.word	0x0800c7a3
 800c760:	0800c7a3 	.word	0x0800c7a3
 800c764:	0800c78d 	.word	0x0800c78d
          frequency = HAL_RCC_GetPCLK1Freq();
 800c768:	f7fe ffec 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800c76c:	61f8      	str	r0, [r7, #28]
          break;
 800c76e:	e01d      	b.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 800c770:	f7fe ff52 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800c774:	61f8      	str	r0, [r7, #28]
          break;
 800c776:	e019      	b.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c778:	4b3b      	ldr	r3, [pc, #236]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c784:	d10f      	bne.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800c786:	4b3a      	ldr	r3, [pc, #232]	; (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c788:	61fb      	str	r3, [r7, #28]
          break;
 800c78a:	e00c      	b.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c78c:	4b36      	ldr	r3, [pc, #216]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b02      	cmp	r3, #2
 800c798:	d107      	bne.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800c79a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c79e:	61fb      	str	r3, [r7, #28]
          break;
 800c7a0:	e003      	b.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 800c7a2:	bf00      	nop
 800c7a4:	e35e      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c7a6:	bf00      	nop
 800c7a8:	e35c      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c7aa:	bf00      	nop
        break;
 800c7ac:	e35a      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800c7ae:	4b2e      	ldr	r3, [pc, #184]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c7b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c7b8:	60fb      	str	r3, [r7, #12]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b30      	cmp	r3, #48	; 0x30
 800c7be:	d021      	beq.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b30      	cmp	r3, #48	; 0x30
 800c7c4:	d829      	bhi.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b20      	cmp	r3, #32
 800c7ca:	d011      	beq.n	800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	d823      	bhi.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b10      	cmp	r3, #16
 800c7dc:	d004      	beq.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 800c7de:	e01c      	b.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c7e0:	f7fe ffb0 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800c7e4:	61f8      	str	r0, [r7, #28]
          break;
 800c7e6:	e01d      	b.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800c7e8:	f7fe ff16 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800c7ec:	61f8      	str	r0, [r7, #28]
          break;
 800c7ee:	e019      	b.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7f0:	4b1d      	ldr	r3, [pc, #116]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7fc:	d10f      	bne.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 800c7fe:	4b1c      	ldr	r3, [pc, #112]	; (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800c800:	61fb      	str	r3, [r7, #28]
          break;
 800c802:	e00c      	b.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c804:	4b18      	ldr	r3, [pc, #96]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c80a:	f003 0302 	and.w	r3, r3, #2
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d107      	bne.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 800c812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c816:	61fb      	str	r3, [r7, #28]
          break;
 800c818:	e003      	b.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 800c81a:	bf00      	nop
 800c81c:	e322      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c81e:	bf00      	nop
 800c820:	e320      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c822:	bf00      	nop
        break;
 800c824:	e31e      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800c826:	4b10      	ldr	r3, [pc, #64]	; (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800c828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c82c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c830:	60fb      	str	r3, [r7, #12]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2bc0      	cmp	r3, #192	; 0xc0
 800c836:	d027      	beq.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2bc0      	cmp	r3, #192	; 0xc0
 800c83c:	d82f      	bhi.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b80      	cmp	r3, #128	; 0x80
 800c842:	d017      	beq.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b80      	cmp	r3, #128	; 0x80
 800c848:	d829      	bhi.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d003      	beq.n	800c858 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b40      	cmp	r3, #64	; 0x40
 800c854:	d004      	beq.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 800c856:	e022      	b.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c858:	f7fe ff74 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800c85c:	61f8      	str	r0, [r7, #28]
          break;
 800c85e:	e023      	b.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800c860:	f7fe feda 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800c864:	61f8      	str	r0, [r7, #28]
          break;
 800c866:	e01f      	b.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 800c868:	40021000 	.word	0x40021000
 800c86c:	02dc6c00 	.word	0x02dc6c00
 800c870:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c874:	4b9b      	ldr	r3, [pc, #620]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c880:	d10f      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 800c882:	4b99      	ldr	r3, [pc, #612]	; (800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c884:	61fb      	str	r3, [r7, #28]
          break;
 800c886:	e00c      	b.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c888:	4b96      	ldr	r3, [pc, #600]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c88e:	f003 0302 	and.w	r3, r3, #2
 800c892:	2b02      	cmp	r3, #2
 800c894:	d107      	bne.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 800c896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c89a:	61fb      	str	r3, [r7, #28]
          break;
 800c89c:	e003      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 800c89e:	bf00      	nop
 800c8a0:	e2e0      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c8a2:	bf00      	nop
 800c8a4:	e2de      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c8a6:	bf00      	nop
        break;
 800c8a8:	e2dc      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800c8aa:	4b8e      	ldr	r3, [pc, #568]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8b4:	60fb      	str	r3, [r7, #12]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8bc:	d025      	beq.n	800c90a <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c8c4:	d82c      	bhi.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8cc:	d013      	beq.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d4:	d824      	bhi.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d004      	beq.n	800c8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8e2:	d004      	beq.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 800c8e4:	e01c      	b.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c8e6:	f7fe ff2d 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800c8ea:	61f8      	str	r0, [r7, #28]
          break;
 800c8ec:	e01d      	b.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800c8ee:	f7fe fe93 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800c8f2:	61f8      	str	r0, [r7, #28]
          break;
 800c8f4:	e019      	b.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8f6:	4b7b      	ldr	r3, [pc, #492]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c902:	d10f      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 800c904:	4b78      	ldr	r3, [pc, #480]	; (800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c906:	61fb      	str	r3, [r7, #28]
          break;
 800c908:	e00c      	b.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c90a:	4b76      	ldr	r3, [pc, #472]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c910:	f003 0302 	and.w	r3, r3, #2
 800c914:	2b02      	cmp	r3, #2
 800c916:	d107      	bne.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 800c918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c91c:	61fb      	str	r3, [r7, #28]
          break;
 800c91e:	e003      	b.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800c920:	bf00      	nop
 800c922:	e29f      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c924:	bf00      	nop
 800c926:	e29d      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c928:	bf00      	nop
        break;
 800c92a:	e29b      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800c92c:	4b6d      	ldr	r3, [pc, #436]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c932:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c93e:	d025      	beq.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c946:	d82c      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c94e:	d013      	beq.n	800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c956:	d824      	bhi.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d004      	beq.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c964:	d004      	beq.n	800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 800c966:	e01c      	b.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c968:	f7fe feec 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800c96c:	61f8      	str	r0, [r7, #28]
          break;
 800c96e:	e01d      	b.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 800c970:	f7fe fe52 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800c974:	61f8      	str	r0, [r7, #28]
          break;
 800c976:	e019      	b.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c978:	4b5a      	ldr	r3, [pc, #360]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c984:	d10f      	bne.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 800c986:	4b58      	ldr	r3, [pc, #352]	; (800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c988:	61fb      	str	r3, [r7, #28]
          break;
 800c98a:	e00c      	b.n	800c9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c98c:	4b55      	ldr	r3, [pc, #340]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c992:	f003 0302 	and.w	r3, r3, #2
 800c996:	2b02      	cmp	r3, #2
 800c998:	d107      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 800c99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c99e:	61fb      	str	r3, [r7, #28]
          break;
 800c9a0:	e003      	b.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 800c9a2:	bf00      	nop
 800c9a4:	e25e      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c9a6:	bf00      	nop
 800c9a8:	e25c      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800c9aa:	bf00      	nop
        break;
 800c9ac:	e25a      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c9ae:	4b4d      	ldr	r3, [pc, #308]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9c0:	d007      	beq.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c9c8:	d12f      	bne.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800c9ca:	f7fe fe25 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800c9ce:	61f8      	str	r0, [r7, #28]
          break;
 800c9d0:	e02e      	b.n	800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800c9d2:	4b44      	ldr	r3, [pc, #272]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9de:	d126      	bne.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 800c9e0:	4b40      	ldr	r3, [pc, #256]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c9e2:	691b      	ldr	r3, [r3, #16]
 800c9e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d020      	beq.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c9ec:	4b3d      	ldr	r3, [pc, #244]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	0a1b      	lsrs	r3, r3, #8
 800c9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f6:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	fb03 f202 	mul.w	r2, r3, r2
 800ca00:	4b38      	ldr	r3, [pc, #224]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	091b      	lsrs	r3, r3, #4
 800ca06:	f003 030f 	and.w	r3, r3, #15
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca10:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800ca12:	4b34      	ldr	r3, [pc, #208]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	0e5b      	lsrs	r3, r3, #25
 800ca18:	f003 0303 	and.w	r3, r3, #3
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca26:	61fb      	str	r3, [r7, #28]
          break;
 800ca28:	e001      	b.n	800ca2e <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 800ca2a:	bf00      	nop
 800ca2c:	e21a      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800ca2e:	bf00      	nop
        break;
 800ca30:	e218      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800ca32:	4b2c      	ldr	r3, [pc, #176]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800ca34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca38:	f003 0304 	and.w	r3, r3, #4
 800ca3c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d103      	bne.n	800ca4c <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 800ca44:	f7fe fe94 	bl	800b770 <HAL_RCC_GetPCLK2Freq>
 800ca48:	61f8      	str	r0, [r7, #28]
        break;
 800ca4a:	e20b      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 800ca4c:	f7fe fde4 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800ca50:	61f8      	str	r0, [r7, #28]
        break;
 800ca52:	e207      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800ca54:	4b23      	ldr	r3, [pc, #140]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800ca56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca5a:	f003 0318 	and.w	r3, r3, #24
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b10      	cmp	r3, #16
 800ca64:	d010      	beq.n	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b10      	cmp	r3, #16
 800ca6a:	d834      	bhi.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d003      	beq.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d024      	beq.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 800ca78:	e02d      	b.n	800cad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800ca7a:	69b9      	ldr	r1, [r7, #24]
 800ca7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ca80:	f000 fbe2 	bl	800d248 <RCCEx_GetSAIxPeriphCLKFreq>
 800ca84:	61f8      	str	r0, [r7, #28]
          break;
 800ca86:	e02b      	b.n	800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800ca88:	4b16      	ldr	r3, [pc, #88]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d122      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800ca94:	4b13      	ldr	r3, [pc, #76]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0308 	and.w	r3, r3, #8
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d005      	beq.n	800caac <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800caa0:	4b10      	ldr	r3, [pc, #64]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	091b      	lsrs	r3, r3, #4
 800caa6:	f003 030f 	and.w	r3, r3, #15
 800caaa:	e005      	b.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800caac:	4b0d      	ldr	r3, [pc, #52]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800caae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cab2:	0a1b      	lsrs	r3, r3, #8
 800cab4:	f003 030f 	and.w	r3, r3, #15
 800cab8:	4a0c      	ldr	r2, [pc, #48]	; (800caec <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800caba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cabe:	61fb      	str	r3, [r7, #28]
          break;
 800cac0:	e00b      	b.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cac2:	4b08      	ldr	r3, [pc, #32]	; (800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800caca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cace:	d106      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 800cad0:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800cad2:	61fb      	str	r3, [r7, #28]
          break;
 800cad4:	e003      	b.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 800cad6:	bf00      	nop
 800cad8:	e1c4      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cada:	bf00      	nop
 800cadc:	e1c2      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cade:	bf00      	nop
        break;
 800cae0:	e1c0      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800cae2:	bf00      	nop
 800cae4:	40021000 	.word	0x40021000
 800cae8:	00f42400 	.word	0x00f42400
 800caec:	0801f3f4 	.word	0x0801f3f4
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800caf0:	4b96      	ldr	r3, [pc, #600]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800caf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caf6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb02:	d013      	beq.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb0a:	d819      	bhi.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d004      	beq.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb18:	d004      	beq.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 800cb1a:	e011      	b.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb1c:	f7fe fe12 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800cb20:	61f8      	str	r0, [r7, #28]
          break;
 800cb22:	e010      	b.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb24:	f7fe fd78 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800cb28:	61f8      	str	r0, [r7, #28]
          break;
 800cb2a:	e00c      	b.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb2c:	4b87      	ldr	r3, [pc, #540]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb38:	d104      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 800cb3a:	4b85      	ldr	r3, [pc, #532]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cb3c:	61fb      	str	r3, [r7, #28]
          break;
 800cb3e:	e001      	b.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800cb40:	bf00      	nop
 800cb42:	e18f      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cb44:	bf00      	nop
        break;
 800cb46:	e18d      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800cb48:	4b80      	ldr	r3, [pc, #512]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cb4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb5a:	d013      	beq.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb62:	d819      	bhi.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d004      	beq.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb70:	d004      	beq.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 800cb72:	e011      	b.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cb74:	f7fe fde6 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800cb78:	61f8      	str	r0, [r7, #28]
          break;
 800cb7a:	e010      	b.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 800cb7c:	f7fe fd4c 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800cb80:	61f8      	str	r0, [r7, #28]
          break;
 800cb82:	e00c      	b.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb84:	4b71      	ldr	r3, [pc, #452]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb90:	d104      	bne.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 800cb92:	4b6f      	ldr	r3, [pc, #444]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cb94:	61fb      	str	r3, [r7, #28]
          break;
 800cb96:	e001      	b.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 800cb98:	bf00      	nop
 800cb9a:	e163      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cb9c:	bf00      	nop
        break;
 800cb9e:	e161      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800cba0:	4b6a      	ldr	r3, [pc, #424]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cba6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbaa:	60fb      	str	r3, [r7, #12]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbb2:	d013      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbba:	d819      	bhi.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d004      	beq.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc8:	d004      	beq.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800cbca:	e011      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cbcc:	f7fe fdba 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800cbd0:	61f8      	str	r0, [r7, #28]
          break;
 800cbd2:	e010      	b.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 800cbd4:	f7fe fd20 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800cbd8:	61f8      	str	r0, [r7, #28]
          break;
 800cbda:	e00c      	b.n	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cbdc:	4b5b      	ldr	r3, [pc, #364]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbe8:	d104      	bne.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800cbea:	4b59      	ldr	r3, [pc, #356]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cbec:	61fb      	str	r3, [r7, #28]
          break;
 800cbee:	e001      	b.n	800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 800cbf0:	bf00      	nop
 800cbf2:	e137      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cbf4:	bf00      	nop
        break;
 800cbf6:	e135      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800cbf8:	4b54      	ldr	r3, [pc, #336]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cbfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cbfe:	f003 0303 	and.w	r3, r3, #3
 800cc02:	60fb      	str	r3, [r7, #12]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d011      	beq.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d818      	bhi.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d003      	beq.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d004      	beq.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 800cc1c:	e011      	b.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cc1e:	f7fe fd91 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800cc22:	61f8      	str	r0, [r7, #28]
          break;
 800cc24:	e010      	b.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 800cc26:	f7fe fcf7 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800cc2a:	61f8      	str	r0, [r7, #28]
          break;
 800cc2c:	e00c      	b.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc2e:	4b47      	ldr	r3, [pc, #284]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc3a:	d104      	bne.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 800cc3c:	4b44      	ldr	r3, [pc, #272]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cc3e:	61fb      	str	r3, [r7, #28]
          break;
 800cc40:	e001      	b.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 800cc42:	bf00      	nop
 800cc44:	e10e      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cc46:	bf00      	nop
        break;
 800cc48:	e10c      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800cc4a:	4b40      	ldr	r3, [pc, #256]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cc4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800cc54:	60fb      	str	r3, [r7, #12]
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cc5c:	d02c      	beq.n	800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800cc64:	d833      	bhi.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cc6c:	d01a      	beq.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800cc74:	d82b      	bhi.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d004      	beq.n	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cc82:	d004      	beq.n	800cc8e <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 800cc84:	e023      	b.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cc86:	f7fe fd5d 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800cc8a:	61f8      	str	r0, [r7, #28]
          break;
 800cc8c:	e026      	b.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cc8e:	4b2f      	ldr	r3, [pc, #188]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cc90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc94:	f003 0302 	and.w	r3, r3, #2
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d11a      	bne.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 800cc9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cca0:	61fb      	str	r3, [r7, #28]
          break;
 800cca2:	e016      	b.n	800ccd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cca4:	4b29      	ldr	r3, [pc, #164]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccb0:	d111      	bne.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 800ccb2:	4b27      	ldr	r3, [pc, #156]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800ccb4:	61fb      	str	r3, [r7, #28]
          break;
 800ccb6:	e00e      	b.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ccb8:	4b24      	ldr	r3, [pc, #144]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800ccba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccbe:	f003 0302 	and.w	r3, r3, #2
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d109      	bne.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 800ccc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccca:	61fb      	str	r3, [r7, #28]
          break;
 800cccc:	e005      	b.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 800ccce:	bf00      	nop
 800ccd0:	e0c8      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800ccd2:	bf00      	nop
 800ccd4:	e0c6      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800ccd6:	bf00      	nop
 800ccd8:	e0c4      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800ccda:	bf00      	nop
        break;
 800ccdc:	e0c2      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ccde:	4b1b      	ldr	r3, [pc, #108]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cce4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cce8:	60fb      	str	r3, [r7, #12]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ccf0:	d030      	beq.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ccf8:	d837      	bhi.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd00:	d01a      	beq.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd08:	d82f      	bhi.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d004      	beq.n	800cd1a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd16:	d004      	beq.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 800cd18:	e027      	b.n	800cd6a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 800cd1a:	f7fe fd13 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 800cd1e:	61f8      	str	r0, [r7, #28]
          break;
 800cd20:	e02a      	b.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800cd22:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cd24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd28:	f003 0302 	and.w	r3, r3, #2
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d11e      	bne.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 800cd30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800cd34:	61fb      	str	r3, [r7, #28]
          break;
 800cd36:	e01a      	b.n	800cd6e <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd38:	4b04      	ldr	r3, [pc, #16]	; (800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd44:	d115      	bne.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 800cd46:	4b02      	ldr	r3, [pc, #8]	; (800cd50 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800cd48:	61fb      	str	r3, [r7, #28]
          break;
 800cd4a:	e012      	b.n	800cd72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800cd4c:	40021000 	.word	0x40021000
 800cd50:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cd54:	4b46      	ldr	r3, [pc, #280]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cd56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd5a:	f003 0302 	and.w	r3, r3, #2
 800cd5e:	2b02      	cmp	r3, #2
 800cd60:	d109      	bne.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 800cd62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd66:	61fb      	str	r3, [r7, #28]
          break;
 800cd68:	e005      	b.n	800cd76 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 800cd6a:	bf00      	nop
 800cd6c:	e07a      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cd6e:	bf00      	nop
 800cd70:	e078      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cd72:	bf00      	nop
 800cd74:	e076      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800cd76:	bf00      	nop
        break;
 800cd78:	e074      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800cd7a:	4b3d      	ldr	r3, [pc, #244]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cd7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cd80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800cd84:	60fb      	str	r3, [r7, #12]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd8c:	d02c      	beq.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd94:	d855      	bhi.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cda2:	d004      	beq.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 800cda4:	e04d      	b.n	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 800cda6:	f7fe fc37 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800cdaa:	61f8      	str	r0, [r7, #28]
          break;
 800cdac:	e04e      	b.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800cdae:	4b30      	ldr	r3, [pc, #192]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d145      	bne.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800cdba:	4b2d      	ldr	r3, [pc, #180]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 0308 	and.w	r3, r3, #8
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d005      	beq.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 800cdc6:	4b2a      	ldr	r3, [pc, #168]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	091b      	lsrs	r3, r3, #4
 800cdcc:	f003 030f 	and.w	r3, r3, #15
 800cdd0:	e005      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 800cdd2:	4b27      	ldr	r3, [pc, #156]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cdd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdd8:	0a1b      	lsrs	r3, r3, #8
 800cdda:	f003 030f 	and.w	r3, r3, #15
 800cdde:	4a25      	ldr	r2, [pc, #148]	; (800ce74 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800cde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde4:	61fb      	str	r3, [r7, #28]
          break;
 800cde6:	e02e      	b.n	800ce46 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800cde8:	4b21      	ldr	r3, [pc, #132]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdf4:	d129      	bne.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800cdf6:	4b1e      	ldr	r3, [pc, #120]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800cdf8:	68db      	ldr	r3, [r3, #12]
 800cdfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce02:	d122      	bne.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ce04:	4b1a      	ldr	r3, [pc, #104]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	0a1b      	lsrs	r3, r3, #8
 800ce0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce0e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ce10:	69bb      	ldr	r3, [r7, #24]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	fb03 f202 	mul.w	r2, r3, r2
 800ce18:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	091b      	lsrs	r3, r3, #4
 800ce1e:	f003 030f 	and.w	r3, r3, #15
 800ce22:	3301      	adds	r3, #1
 800ce24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce28:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800ce2a:	4b11      	ldr	r3, [pc, #68]	; (800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	0d5b      	lsrs	r3, r3, #21
 800ce30:	f003 0303 	and.w	r3, r3, #3
 800ce34:	3301      	adds	r3, #1
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	69ba      	ldr	r2, [r7, #24]
 800ce3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce3e:	61fb      	str	r3, [r7, #28]
          break;
 800ce40:	e003      	b.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 800ce42:	bf00      	nop
 800ce44:	e00e      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800ce46:	bf00      	nop
 800ce48:	e00c      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800ce4a:	bf00      	nop
        break;
 800ce4c:	e00a      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800ce4e:	bf00      	nop
 800ce50:	e008      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800ce52:	bf00      	nop
 800ce54:	e006      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800ce56:	bf00      	nop
 800ce58:	e004      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800ce5a:	bf00      	nop
 800ce5c:	e002      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800ce5e:	bf00      	nop
 800ce60:	e000      	b.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 800ce62:	bf00      	nop
    }
  }

  return(frequency);
 800ce64:	69fb      	ldr	r3, [r7, #28]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3720      	adds	r7, #32
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	40021000 	.word	0x40021000
 800ce74:	0801f3f4 	.word	0x0801f3f4

0800ce78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ce86:	4b72      	ldr	r3, [pc, #456]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	f003 0303 	and.w	r3, r3, #3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00e      	beq.n	800ceb0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ce92:	4b6f      	ldr	r3, [pc, #444]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	f003 0203 	and.w	r2, r3, #3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d103      	bne.n	800ceaa <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
       ||
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d142      	bne.n	800cf30 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	73fb      	strb	r3, [r7, #15]
 800ceae:	e03f      	b.n	800cf30 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b03      	cmp	r3, #3
 800ceb6:	d018      	beq.n	800ceea <RCCEx_PLLSAI1_Config+0x72>
 800ceb8:	2b03      	cmp	r3, #3
 800ceba:	d825      	bhi.n	800cf08 <RCCEx_PLLSAI1_Config+0x90>
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	d002      	beq.n	800cec6 <RCCEx_PLLSAI1_Config+0x4e>
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d009      	beq.n	800ced8 <RCCEx_PLLSAI1_Config+0x60>
 800cec4:	e020      	b.n	800cf08 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800cec6:	4b62      	ldr	r3, [pc, #392]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 0302 	and.w	r3, r3, #2
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d11d      	bne.n	800cf0e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ced6:	e01a      	b.n	800cf0e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ced8:	4b5d      	ldr	r3, [pc, #372]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d116      	bne.n	800cf12 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cee8:	e013      	b.n	800cf12 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ceea:	4b59      	ldr	r3, [pc, #356]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10f      	bne.n	800cf16 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800cef6:	4b56      	ldr	r3, [pc, #344]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d109      	bne.n	800cf16 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf06:	e006      	b.n	800cf16 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf0c:	e004      	b.n	800cf18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cf0e:	bf00      	nop
 800cf10:	e002      	b.n	800cf18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cf12:	bf00      	nop
 800cf14:	e000      	b.n	800cf18 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800cf16:	bf00      	nop
    }

    if(status == HAL_OK)
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d108      	bne.n	800cf30 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800cf1e:	4b4c      	ldr	r3, [pc, #304]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	f023 0203 	bic.w	r2, r3, #3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4949      	ldr	r1, [pc, #292]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800cf30:	7bfb      	ldrb	r3, [r7, #15]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f040 8086 	bne.w	800d044 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800cf38:	4b45      	ldr	r3, [pc, #276]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a44      	ldr	r2, [pc, #272]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf44:	f7f9 fc52 	bl	80067ec <HAL_GetTick>
 800cf48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cf4a:	e009      	b.n	800cf60 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cf4c:	f7f9 fc4e 	bl	80067ec <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d902      	bls.n	800cf60 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	73fb      	strb	r3, [r7, #15]
        break;
 800cf5e:	e005      	b.n	800cf6c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800cf60:	4b3b      	ldr	r3, [pc, #236]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1ef      	bne.n	800cf4c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d168      	bne.n	800d044 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d113      	bne.n	800cfa0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cf78:	4b35      	ldr	r3, [pc, #212]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf7a:	691a      	ldr	r2, [r3, #16]
 800cf7c:	4b35      	ldr	r3, [pc, #212]	; (800d054 <RCCEx_PLLSAI1_Config+0x1dc>)
 800cf7e:	4013      	ands	r3, r2
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	6892      	ldr	r2, [r2, #8]
 800cf84:	0211      	lsls	r1, r2, #8
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	68d2      	ldr	r2, [r2, #12]
 800cf8a:	06d2      	lsls	r2, r2, #27
 800cf8c:	4311      	orrs	r1, r2
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	6852      	ldr	r2, [r2, #4]
 800cf92:	3a01      	subs	r2, #1
 800cf94:	0112      	lsls	r2, r2, #4
 800cf96:	430a      	orrs	r2, r1
 800cf98:	492d      	ldr	r1, [pc, #180]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	610b      	str	r3, [r1, #16]
 800cf9e:	e02d      	b.n	800cffc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d115      	bne.n	800cfd2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cfa6:	4b2a      	ldr	r3, [pc, #168]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfa8:	691a      	ldr	r2, [r3, #16]
 800cfaa:	4b2b      	ldr	r3, [pc, #172]	; (800d058 <RCCEx_PLLSAI1_Config+0x1e0>)
 800cfac:	4013      	ands	r3, r2
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	6892      	ldr	r2, [r2, #8]
 800cfb2:	0211      	lsls	r1, r2, #8
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	6912      	ldr	r2, [r2, #16]
 800cfb8:	0852      	lsrs	r2, r2, #1
 800cfba:	3a01      	subs	r2, #1
 800cfbc:	0552      	lsls	r2, r2, #21
 800cfbe:	4311      	orrs	r1, r2
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	6852      	ldr	r2, [r2, #4]
 800cfc4:	3a01      	subs	r2, #1
 800cfc6:	0112      	lsls	r2, r2, #4
 800cfc8:	430a      	orrs	r2, r1
 800cfca:	4921      	ldr	r1, [pc, #132]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	610b      	str	r3, [r1, #16]
 800cfd0:	e014      	b.n	800cffc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800cfd2:	4b1f      	ldr	r3, [pc, #124]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cfd4:	691a      	ldr	r2, [r3, #16]
 800cfd6:	4b21      	ldr	r3, [pc, #132]	; (800d05c <RCCEx_PLLSAI1_Config+0x1e4>)
 800cfd8:	4013      	ands	r3, r2
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	6892      	ldr	r2, [r2, #8]
 800cfde:	0211      	lsls	r1, r2, #8
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	6952      	ldr	r2, [r2, #20]
 800cfe4:	0852      	lsrs	r2, r2, #1
 800cfe6:	3a01      	subs	r2, #1
 800cfe8:	0652      	lsls	r2, r2, #25
 800cfea:	4311      	orrs	r1, r2
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	6852      	ldr	r2, [r2, #4]
 800cff0:	3a01      	subs	r2, #1
 800cff2:	0112      	lsls	r2, r2, #4
 800cff4:	430a      	orrs	r2, r1
 800cff6:	4916      	ldr	r1, [pc, #88]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cff8:	4313      	orrs	r3, r2
 800cffa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800cffc:	4b14      	ldr	r3, [pc, #80]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a13      	ldr	r2, [pc, #76]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d006:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d008:	f7f9 fbf0 	bl	80067ec <HAL_GetTick>
 800d00c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d00e:	e009      	b.n	800d024 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d010:	f7f9 fbec 	bl	80067ec <HAL_GetTick>
 800d014:	4602      	mov	r2, r0
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d902      	bls.n	800d024 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800d01e:	2303      	movs	r3, #3
 800d020:	73fb      	strb	r3, [r7, #15]
          break;
 800d022:	e005      	b.n	800d030 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800d024:	4b0a      	ldr	r3, [pc, #40]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d0ef      	beq.n	800d010 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800d030:	7bfb      	ldrb	r3, [r7, #15]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d106      	bne.n	800d044 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800d036:	4b06      	ldr	r3, [pc, #24]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d038:	691a      	ldr	r2, [r3, #16]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	4904      	ldr	r1, [pc, #16]	; (800d050 <RCCEx_PLLSAI1_Config+0x1d8>)
 800d040:	4313      	orrs	r3, r2
 800d042:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800d044:	7bfb      	ldrb	r3, [r7, #15]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	40021000 	.word	0x40021000
 800d054:	07ff800f 	.word	0x07ff800f
 800d058:	ff9f800f 	.word	0xff9f800f
 800d05c:	f9ff800f 	.word	0xf9ff800f

0800d060 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800d06e:	4b72      	ldr	r3, [pc, #456]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	f003 0303 	and.w	r3, r3, #3
 800d076:	2b00      	cmp	r3, #0
 800d078:	d00e      	beq.n	800d098 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800d07a:	4b6f      	ldr	r3, [pc, #444]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	f003 0203 	and.w	r2, r3, #3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d103      	bne.n	800d092 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
       ||
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d142      	bne.n	800d118 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	73fb      	strb	r3, [r7, #15]
 800d096:	e03f      	b.n	800d118 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b03      	cmp	r3, #3
 800d09e:	d018      	beq.n	800d0d2 <RCCEx_PLLSAI2_Config+0x72>
 800d0a0:	2b03      	cmp	r3, #3
 800d0a2:	d825      	bhi.n	800d0f0 <RCCEx_PLLSAI2_Config+0x90>
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d002      	beq.n	800d0ae <RCCEx_PLLSAI2_Config+0x4e>
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d009      	beq.n	800d0c0 <RCCEx_PLLSAI2_Config+0x60>
 800d0ac:	e020      	b.n	800d0f0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800d0ae:	4b62      	ldr	r3, [pc, #392]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 0302 	and.w	r3, r3, #2
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d11d      	bne.n	800d0f6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d0be:	e01a      	b.n	800d0f6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800d0c0:	4b5d      	ldr	r3, [pc, #372]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d116      	bne.n	800d0fa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800d0d0:	e013      	b.n	800d0fa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800d0d2:	4b59      	ldr	r3, [pc, #356]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d10f      	bne.n	800d0fe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800d0de:	4b56      	ldr	r3, [pc, #344]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d109      	bne.n	800d0fe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d0ee:	e006      	b.n	800d0fe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d0f4:	e004      	b.n	800d100 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d0f6:	bf00      	nop
 800d0f8:	e002      	b.n	800d100 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d0fa:	bf00      	nop
 800d0fc:	e000      	b.n	800d100 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800d0fe:	bf00      	nop
    }

    if(status == HAL_OK)
 800d100:	7bfb      	ldrb	r3, [r7, #15]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d108      	bne.n	800d118 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800d106:	4b4c      	ldr	r3, [pc, #304]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	f023 0203 	bic.w	r2, r3, #3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4949      	ldr	r1, [pc, #292]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d114:	4313      	orrs	r3, r2
 800d116:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800d118:	7bfb      	ldrb	r3, [r7, #15]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	f040 8086 	bne.w	800d22c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800d120:	4b45      	ldr	r3, [pc, #276]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a44      	ldr	r2, [pc, #272]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d12a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d12c:	f7f9 fb5e 	bl	80067ec <HAL_GetTick>
 800d130:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d132:	e009      	b.n	800d148 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d134:	f7f9 fb5a 	bl	80067ec <HAL_GetTick>
 800d138:	4602      	mov	r2, r0
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d902      	bls.n	800d148 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800d142:	2303      	movs	r3, #3
 800d144:	73fb      	strb	r3, [r7, #15]
        break;
 800d146:	e005      	b.n	800d154 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800d148:	4b3b      	ldr	r3, [pc, #236]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1ef      	bne.n	800d134 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d168      	bne.n	800d22c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d113      	bne.n	800d188 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d160:	4b35      	ldr	r3, [pc, #212]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d162:	695a      	ldr	r2, [r3, #20]
 800d164:	4b35      	ldr	r3, [pc, #212]	; (800d23c <RCCEx_PLLSAI2_Config+0x1dc>)
 800d166:	4013      	ands	r3, r2
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	6892      	ldr	r2, [r2, #8]
 800d16c:	0211      	lsls	r1, r2, #8
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	68d2      	ldr	r2, [r2, #12]
 800d172:	06d2      	lsls	r2, r2, #27
 800d174:	4311      	orrs	r1, r2
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	6852      	ldr	r2, [r2, #4]
 800d17a:	3a01      	subs	r2, #1
 800d17c:	0112      	lsls	r2, r2, #4
 800d17e:	430a      	orrs	r2, r1
 800d180:	492d      	ldr	r1, [pc, #180]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d182:	4313      	orrs	r3, r2
 800d184:	614b      	str	r3, [r1, #20]
 800d186:	e02d      	b.n	800d1e4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d115      	bne.n	800d1ba <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d18e:	4b2a      	ldr	r3, [pc, #168]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d190:	695a      	ldr	r2, [r3, #20]
 800d192:	4b2b      	ldr	r3, [pc, #172]	; (800d240 <RCCEx_PLLSAI2_Config+0x1e0>)
 800d194:	4013      	ands	r3, r2
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6892      	ldr	r2, [r2, #8]
 800d19a:	0211      	lsls	r1, r2, #8
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	6912      	ldr	r2, [r2, #16]
 800d1a0:	0852      	lsrs	r2, r2, #1
 800d1a2:	3a01      	subs	r2, #1
 800d1a4:	0552      	lsls	r2, r2, #21
 800d1a6:	4311      	orrs	r1, r2
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	6852      	ldr	r2, [r2, #4]
 800d1ac:	3a01      	subs	r2, #1
 800d1ae:	0112      	lsls	r2, r2, #4
 800d1b0:	430a      	orrs	r2, r1
 800d1b2:	4921      	ldr	r1, [pc, #132]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	614b      	str	r3, [r1, #20]
 800d1b8:	e014      	b.n	800d1e4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800d1ba:	4b1f      	ldr	r3, [pc, #124]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1bc:	695a      	ldr	r2, [r3, #20]
 800d1be:	4b21      	ldr	r3, [pc, #132]	; (800d244 <RCCEx_PLLSAI2_Config+0x1e4>)
 800d1c0:	4013      	ands	r3, r2
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	6892      	ldr	r2, [r2, #8]
 800d1c6:	0211      	lsls	r1, r2, #8
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	6952      	ldr	r2, [r2, #20]
 800d1cc:	0852      	lsrs	r2, r2, #1
 800d1ce:	3a01      	subs	r2, #1
 800d1d0:	0652      	lsls	r2, r2, #25
 800d1d2:	4311      	orrs	r1, r2
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	6852      	ldr	r2, [r2, #4]
 800d1d8:	3a01      	subs	r2, #1
 800d1da:	0112      	lsls	r2, r2, #4
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	4916      	ldr	r1, [pc, #88]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800d1e4:	4b14      	ldr	r3, [pc, #80]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a13      	ldr	r2, [pc, #76]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d1ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1f0:	f7f9 fafc 	bl	80067ec <HAL_GetTick>
 800d1f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d1f6:	e009      	b.n	800d20c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800d1f8:	f7f9 faf8 	bl	80067ec <HAL_GetTick>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	2b02      	cmp	r3, #2
 800d204:	d902      	bls.n	800d20c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800d206:	2303      	movs	r3, #3
 800d208:	73fb      	strb	r3, [r7, #15]
          break;
 800d20a:	e005      	b.n	800d218 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800d20c:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d0ef      	beq.n	800d1f8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800d218:	7bfb      	ldrb	r3, [r7, #15]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d106      	bne.n	800d22c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800d21e:	4b06      	ldr	r3, [pc, #24]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d220:	695a      	ldr	r2, [r3, #20]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	4904      	ldr	r1, [pc, #16]	; (800d238 <RCCEx_PLLSAI2_Config+0x1d8>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	40021000 	.word	0x40021000
 800d23c:	07ff800f 	.word	0x07ff800f
 800d240:	ff9f800f 	.word	0xff9f800f
 800d244:	f9ff800f 	.word	0xf9ff800f

0800d248 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800d248:	b480      	push	{r7}
 800d24a:	b089      	sub	sp, #36	; 0x24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d264:	d10b      	bne.n	800d27e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800d266:	4b7e      	ldr	r3, [pc, #504]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d26c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d270:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	2b60      	cmp	r3, #96	; 0x60
 800d276:	d112      	bne.n	800d29e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800d278:	4b7a      	ldr	r3, [pc, #488]	; (800d464 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800d27a:	61fb      	str	r3, [r7, #28]
 800d27c:	e00f      	b.n	800d29e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d284:	d10b      	bne.n	800d29e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800d286:	4b76      	ldr	r3, [pc, #472]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d28c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d290:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d298:	d101      	bne.n	800d29e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800d29a:	4b72      	ldr	r3, [pc, #456]	; (800d464 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800d29c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f040 80d6 	bne.w	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	2b40      	cmp	r3, #64	; 0x40
 800d2ae:	d003      	beq.n	800d2b8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2b6:	d13b      	bne.n	800d330 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d2b8:	4b69      	ldr	r3, [pc, #420]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2c4:	f040 80c4 	bne.w	800d450 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800d2c8:	4b65      	ldr	r3, [pc, #404]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f000 80bd 	beq.w	800d450 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800d2d6:	4b62      	ldr	r3, [pc, #392]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	091b      	lsrs	r3, r3, #4
 800d2dc:	f003 030f 	and.w	r3, r3, #15
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2e8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800d2ea:	4b5d      	ldr	r3, [pc, #372]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	0a1b      	lsrs	r3, r3, #8
 800d2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800d2f6:	4b5a      	ldr	r3, [pc, #360]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	0edb      	lsrs	r3, r3, #27
 800d2fc:	f003 031f 	and.w	r3, r3, #31
 800d300:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800d308:	4b55      	ldr	r3, [pc, #340]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800d314:	2311      	movs	r3, #17
 800d316:	617b      	str	r3, [r7, #20]
 800d318:	e001      	b.n	800d31e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800d31a:	2307      	movs	r3, #7
 800d31c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	fb03 f202 	mul.w	r2, r3, r2
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	fbb2 f3f3 	udiv	r3, r2, r3
 800d32c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d32e:	e08f      	b.n	800d450 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d13a      	bne.n	800d3ac <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800d336:	4b4a      	ldr	r3, [pc, #296]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d33e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d342:	f040 8086 	bne.w	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800d346:	4b46      	ldr	r3, [pc, #280]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d07f      	beq.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800d352:	4b43      	ldr	r3, [pc, #268]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	091b      	lsrs	r3, r3, #4
 800d358:	f003 030f 	and.w	r3, r3, #15
 800d35c:	3301      	adds	r3, #1
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	fbb2 f3f3 	udiv	r3, r2, r3
 800d364:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800d366:	4b3e      	ldr	r3, [pc, #248]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	0a1b      	lsrs	r3, r3, #8
 800d36c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d370:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800d372:	4b3b      	ldr	r3, [pc, #236]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	0edb      	lsrs	r3, r3, #27
 800d378:	f003 031f 	and.w	r3, r3, #31
 800d37c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10a      	bne.n	800d39a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800d384:	4b36      	ldr	r3, [pc, #216]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d386:	691b      	ldr	r3, [r3, #16]
 800d388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800d390:	2311      	movs	r3, #17
 800d392:	617b      	str	r3, [r7, #20]
 800d394:	e001      	b.n	800d39a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800d396:	2307      	movs	r3, #7
 800d398:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	fb03 f202 	mul.w	r2, r3, r2
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a8:	61fb      	str	r3, [r7, #28]
 800d3aa:	e052      	b.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	2b80      	cmp	r3, #128	; 0x80
 800d3b0:	d003      	beq.n	800d3ba <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3b8:	d109      	bne.n	800d3ce <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3ba:	4b29      	ldr	r3, [pc, #164]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3c6:	d144      	bne.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800d3c8:	4b27      	ldr	r3, [pc, #156]	; (800d468 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800d3ca:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3cc:	e041      	b.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	2b20      	cmp	r3, #32
 800d3d2:	d003      	beq.n	800d3dc <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3da:	d13a      	bne.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800d3dc:	4b20      	ldr	r3, [pc, #128]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3e8:	d133      	bne.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800d3ea:	4b1d      	ldr	r3, [pc, #116]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d02d      	beq.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800d3f6:	4b1a      	ldr	r3, [pc, #104]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	091b      	lsrs	r3, r3, #4
 800d3fc:	f003 030f 	and.w	r3, r3, #15
 800d400:	3301      	adds	r3, #1
 800d402:	693a      	ldr	r2, [r7, #16]
 800d404:	fbb2 f3f3 	udiv	r3, r2, r3
 800d408:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800d40a:	4b15      	ldr	r3, [pc, #84]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d40c:	695b      	ldr	r3, [r3, #20]
 800d40e:	0a1b      	lsrs	r3, r3, #8
 800d410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d414:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800d416:	4b12      	ldr	r3, [pc, #72]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	0edb      	lsrs	r3, r3, #27
 800d41c:	f003 031f 	and.w	r3, r3, #31
 800d420:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d10a      	bne.n	800d43e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800d428:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d430:	2b00      	cmp	r3, #0
 800d432:	d002      	beq.n	800d43a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800d434:	2311      	movs	r3, #17
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	e001      	b.n	800d43e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800d43a:	2307      	movs	r3, #7
 800d43c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	fb03 f202 	mul.w	r2, r3, r2
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	fbb2 f3f3 	udiv	r3, r2, r3
 800d44c:	61fb      	str	r3, [r7, #28]
 800d44e:	e000      	b.n	800d452 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800d450:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800d452:	69fb      	ldr	r3, [r7, #28]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3724      	adds	r7, #36	; 0x24
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	40021000 	.word	0x40021000
 800d464:	001fff68 	.word	0x001fff68
 800d468:	00f42400 	.word	0x00f42400

0800d46c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d06c      	beq.n	800d558 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d484:	b2db      	uxtb	r3, r3
 800d486:	2b00      	cmp	r3, #0
 800d488:	d106      	bne.n	800d498 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2200      	movs	r2, #0
 800d48e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7f5 fb66 	bl	8002b64 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2202      	movs	r2, #2
 800d49c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	22ca      	movs	r2, #202	; 0xca
 800d4a6:	625a      	str	r2, [r3, #36]	; 0x24
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2253      	movs	r2, #83	; 0x53
 800d4ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f87c 	bl	800d5ae <RTC_EnterInitMode>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d14b      	bne.n	800d558 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	689b      	ldr	r3, [r3, #8]
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	6812      	ldr	r2, [r2, #0]
 800d4ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4d2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6899      	ldr	r1, [r3, #8]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	685a      	ldr	r2, [r3, #4]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	691b      	ldr	r3, [r3, #16]
 800d4e2:	431a      	orrs	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	699b      	ldr	r3, [r3, #24]
 800d4e8:	431a      	orrs	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	68d2      	ldr	r2, [r2, #12]
 800d4fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	6919      	ldr	r1, [r3, #16]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	041a      	lsls	r2, r3, #16
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	430a      	orrs	r2, r1
 800d50e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f87f 	bl	800d614 <RTC_ExitInitMode>
 800d516:	4603      	mov	r3, r0
 800d518:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d11b      	bne.n	800d558 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f022 0203 	bic.w	r2, r2, #3
 800d52e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	69da      	ldr	r2, [r3, #28]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	695b      	ldr	r3, [r3, #20]
 800d53e:	431a      	orrs	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	430a      	orrs	r2, r1
 800d546:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	22ff      	movs	r2, #255	; 0xff
 800d54e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	68da      	ldr	r2, [r3, #12]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d578:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800d57a:	f7f9 f937 	bl	80067ec <HAL_GetTick>
 800d57e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d580:	e009      	b.n	800d596 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d582:	f7f9 f933 	bl	80067ec <HAL_GetTick>
 800d586:	4602      	mov	r2, r0
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d590:	d901      	bls.n	800d596 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d592:	2303      	movs	r3, #3
 800d594:	e007      	b.n	800d5a6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	f003 0320 	and.w	r3, r3, #32
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d0ee      	beq.n	800d582 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d120      	bne.n	800d60a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d5d2:	f7f9 f90b 	bl	80067ec <HAL_GetTick>
 800d5d6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d5d8:	e00d      	b.n	800d5f6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d5da:	f7f9 f907 	bl	80067ec <HAL_GetTick>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5e8:	d905      	bls.n	800d5f6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d5ea:	2303      	movs	r3, #3
 800d5ec:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2203      	movs	r2, #3
 800d5f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <RTC_EnterInitMode+0x5c>
 800d604:	7bfb      	ldrb	r3, [r7, #15]
 800d606:	2b03      	cmp	r3, #3
 800d608:	d1e7      	bne.n	800d5da <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d620:	4b1a      	ldr	r3, [pc, #104]	; (800d68c <RTC_ExitInitMode+0x78>)
 800d622:	68db      	ldr	r3, [r3, #12]
 800d624:	4a19      	ldr	r2, [pc, #100]	; (800d68c <RTC_ExitInitMode+0x78>)
 800d626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d62a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d62c:	4b17      	ldr	r3, [pc, #92]	; (800d68c <RTC_ExitInitMode+0x78>)
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	f003 0320 	and.w	r3, r3, #32
 800d634:	2b00      	cmp	r3, #0
 800d636:	d10c      	bne.n	800d652 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff ff92 	bl	800d562 <HAL_RTC_WaitForSynchro>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d01e      	beq.n	800d682 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2203      	movs	r2, #3
 800d648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d64c:	2303      	movs	r3, #3
 800d64e:	73fb      	strb	r3, [r7, #15]
 800d650:	e017      	b.n	800d682 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d652:	4b0e      	ldr	r3, [pc, #56]	; (800d68c <RTC_ExitInitMode+0x78>)
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	4a0d      	ldr	r2, [pc, #52]	; (800d68c <RTC_ExitInitMode+0x78>)
 800d658:	f023 0320 	bic.w	r3, r3, #32
 800d65c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff ff7f 	bl	800d562 <HAL_RTC_WaitForSynchro>
 800d664:	4603      	mov	r3, r0
 800d666:	2b00      	cmp	r3, #0
 800d668:	d005      	beq.n	800d676 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2203      	movs	r2, #3
 800d66e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d672:	2303      	movs	r3, #3
 800d674:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <RTC_ExitInitMode+0x78>)
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	4a04      	ldr	r2, [pc, #16]	; (800d68c <RTC_ExitInitMode+0x78>)
 800d67c:	f043 0320 	orr.w	r3, r3, #32
 800d680:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d682:	7bfb      	ldrb	r3, [r7, #15]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	40002800 	.word	0x40002800

0800d690 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef *hrtc, RTC_TamperTypeDef *sTamper)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(sTamper->PrechargeDuration));
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d101      	bne.n	800d6a8 <HAL_RTCEx_SetTamper+0x18>
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	e0a9      	b.n	800d7fc <HAL_RTCEx_SetTamper+0x16c>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2202      	movs	r2, #2
 800d6b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Read register */
  tmpreg = hrtc->Instance->TAMPCR;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	60fb      	str	r3, [r7, #12]

#if defined(RTC_TAMPER1_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_1) != 0)
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d021      	beq.n	800d710 <HAL_RTCEx_SetTamper+0x80>
  {
    MODIFY_REG(tmpreg,
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f023 1207 	bic.w	r2, r3, #458759	; 0x70007
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6889      	ldr	r1, [r1, #8]
 800d6da:	2900      	cmp	r1, #0
 800d6dc:	d101      	bne.n	800d6e2 <HAL_RTCEx_SetTamper+0x52>
 800d6de:	2100      	movs	r1, #0
 800d6e0:	e000      	b.n	800d6e4 <HAL_RTCEx_SetTamper+0x54>
 800d6e2:	2102      	movs	r1, #2
 800d6e4:	430b      	orrs	r3, r1
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	68c9      	ldr	r1, [r1, #12]
 800d6ea:	2900      	cmp	r1, #0
 800d6ec:	d101      	bne.n	800d6f2 <HAL_RTCEx_SetTamper+0x62>
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	e001      	b.n	800d6f6 <HAL_RTCEx_SetTamper+0x66>
 800d6f2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d6f6:	430b      	orrs	r3, r1
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6909      	ldr	r1, [r1, #16]
 800d6fc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800d700:	d102      	bne.n	800d708 <HAL_RTCEx_SetTamper+0x78>
 800d702:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d706:	e000      	b.n	800d70a <HAL_RTCEx_SetTamper+0x7a>
 800d708:	2100      	movs	r1, #0
 800d70a:	430b      	orrs	r3, r1
 800d70c:	4313      	orrs	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER1_SUPPORT */

#if defined(RTC_TAMPER2_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_2) != 0)
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	f003 0308 	and.w	r3, r3, #8
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d023      	beq.n	800d764 <HAL_RTCEx_SetTamper+0xd4>
  {
    MODIFY_REG(tmpreg,
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800d722:	f023 031c 	bic.w	r3, r3, #28
 800d726:	683a      	ldr	r2, [r7, #0]
 800d728:	6812      	ldr	r2, [r2, #0]
 800d72a:	6839      	ldr	r1, [r7, #0]
 800d72c:	6889      	ldr	r1, [r1, #8]
 800d72e:	2900      	cmp	r1, #0
 800d730:	d101      	bne.n	800d736 <HAL_RTCEx_SetTamper+0xa6>
 800d732:	2100      	movs	r1, #0
 800d734:	e000      	b.n	800d738 <HAL_RTCEx_SetTamper+0xa8>
 800d736:	2110      	movs	r1, #16
 800d738:	430a      	orrs	r2, r1
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	68c9      	ldr	r1, [r1, #12]
 800d73e:	2900      	cmp	r1, #0
 800d740:	d101      	bne.n	800d746 <HAL_RTCEx_SetTamper+0xb6>
 800d742:	2100      	movs	r1, #0
 800d744:	e001      	b.n	800d74a <HAL_RTCEx_SetTamper+0xba>
 800d746:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 800d74a:	430a      	orrs	r2, r1
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6909      	ldr	r1, [r1, #16]
 800d750:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800d754:	d102      	bne.n	800d75c <HAL_RTCEx_SetTamper+0xcc>
 800d756:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d75a:	e000      	b.n	800d75e <HAL_RTCEx_SetTamper+0xce>
 800d75c:	2100      	movs	r1, #0
 800d75e:	430a      	orrs	r2, r1
 800d760:	4313      	orrs	r3, r2
 800d762:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER2_SUPPORT */

#if defined(RTC_TAMPER3_SUPPORT)
  if ((sTamper->Tamper & RTC_TAMPER_3) != 0)
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 0320 	and.w	r3, r3, #32
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d023      	beq.n	800d7b8 <HAL_RTCEx_SetTamper+0x128>
  {
    MODIFY_REG(tmpreg,
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800d776:	f023 0364 	bic.w	r3, r3, #100	; 0x64
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	6812      	ldr	r2, [r2, #0]
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6889      	ldr	r1, [r1, #8]
 800d782:	2900      	cmp	r1, #0
 800d784:	d101      	bne.n	800d78a <HAL_RTCEx_SetTamper+0xfa>
 800d786:	2100      	movs	r1, #0
 800d788:	e000      	b.n	800d78c <HAL_RTCEx_SetTamper+0xfc>
 800d78a:	2140      	movs	r1, #64	; 0x40
 800d78c:	430a      	orrs	r2, r1
 800d78e:	6839      	ldr	r1, [r7, #0]
 800d790:	68c9      	ldr	r1, [r1, #12]
 800d792:	2900      	cmp	r1, #0
 800d794:	d101      	bne.n	800d79a <HAL_RTCEx_SetTamper+0x10a>
 800d796:	2100      	movs	r1, #0
 800d798:	e001      	b.n	800d79e <HAL_RTCEx_SetTamper+0x10e>
 800d79a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800d79e:	430a      	orrs	r2, r1
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6909      	ldr	r1, [r1, #16]
 800d7a4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800d7a8:	d102      	bne.n	800d7b0 <HAL_RTCEx_SetTamper+0x120>
 800d7aa:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800d7ae:	e000      	b.n	800d7b2 <HAL_RTCEx_SetTamper+0x122>
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	430a      	orrs	r2, r1
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	60fb      	str	r3, [r7, #12]
              );
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Update common parameters */
  MODIFY_REG(tmpreg,
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d7be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	6951      	ldr	r1, [r2, #20]
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	6992      	ldr	r2, [r2, #24]
 800d7ca:	4311      	orrs	r1, r2
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	69d2      	ldr	r2, [r2, #28]
 800d7d0:	4311      	orrs	r1, r2
 800d7d2:	683a      	ldr	r2, [r7, #0]
 800d7d4:	6a12      	ldr	r2, [r2, #32]
 800d7d6:	4311      	orrs	r1, r2
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d7dc:	430a      	orrs	r2, r1
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	60fb      	str	r3, [r7, #12]
             sTamper->Filter | sTamper->SamplingFrequency | sTamper->PrechargeDuration | sTamper->TamperPullUp | \
             sTamper->TimeStampOnTamperDetection \
            );

  /* Set register */
  WRITE_REG(hrtc->Instance->TAMPCR, tmpreg);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	68fa      	ldr	r2, [r7, #12]
 800d7e8:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3714      	adds	r7, #20
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b08a      	sub	sp, #40	; 0x28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	e1c7      	b.n	800dbaa <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d820:	2b01      	cmp	r3, #1
 800d822:	d10e      	bne.n	800d842 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a81      	ldr	r2, [pc, #516]	; (800da30 <HAL_SAI_Init+0x228>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d107      	bne.n	800d83e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800d832:	2b01      	cmp	r3, #1
 800d834:	d103      	bne.n	800d83e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d001      	beq.n	800d842 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800d83e:	2301      	movs	r3, #1
 800d840:	e1b3      	b.n	800dbaa <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d106      	bne.n	800d85c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7f5 fbe4 	bl	8003024 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f9b1 	bl	800dbc4 <SAI_Disable>
 800d862:	4603      	mov	r3, r0
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	e19e      	b.n	800dbaa <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2202      	movs	r2, #2
 800d870:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d00c      	beq.n	800d896 <HAL_SAI_Init+0x8e>
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d80d      	bhi.n	800d89c <HAL_SAI_Init+0x94>
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <HAL_SAI_Init+0x82>
 800d884:	2b01      	cmp	r3, #1
 800d886:	d003      	beq.n	800d890 <HAL_SAI_Init+0x88>
 800d888:	e008      	b.n	800d89c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800d88a:	2300      	movs	r3, #0
 800d88c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d88e:	e008      	b.n	800d8a2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d890:	2310      	movs	r3, #16
 800d892:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d894:	e005      	b.n	800d8a2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d896:	2320      	movs	r3, #32
 800d898:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d89a:	e002      	b.n	800d8a2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800d89c:	2300      	movs	r3, #0
 800d89e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d8a0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d81d      	bhi.n	800d8e6 <HAL_SAI_Init+0xde>
 800d8aa:	a201      	add	r2, pc, #4	; (adr r2, 800d8b0 <HAL_SAI_Init+0xa8>)
 800d8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b0:	0800d8c1 	.word	0x0800d8c1
 800d8b4:	0800d8c7 	.word	0x0800d8c7
 800d8b8:	0800d8cf 	.word	0x0800d8cf
 800d8bc:	0800d8d7 	.word	0x0800d8d7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	61fb      	str	r3, [r7, #28]
      break;
 800d8c4:	e012      	b.n	800d8ec <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ca:	61fb      	str	r3, [r7, #28]
      break;
 800d8cc:	e00e      	b.n	800d8ec <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d8ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8d2:	61fb      	str	r3, [r7, #28]
      break;
 800d8d4:	e00a      	b.n	800d8ec <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d8d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8da:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	f043 0301 	orr.w	r3, r3, #1
 800d8e2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800d8e4:	e002      	b.n	800d8ec <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	61fb      	str	r3, [r7, #28]
      break;
 800d8ea:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a4f      	ldr	r2, [pc, #316]	; (800da30 <HAL_SAI_Init+0x228>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d004      	beq.n	800d900 <HAL_SAI_Init+0xf8>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a4e      	ldr	r2, [pc, #312]	; (800da34 <HAL_SAI_Init+0x22c>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d103      	bne.n	800d908 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800d900:	4a4d      	ldr	r2, [pc, #308]	; (800da38 <HAL_SAI_Init+0x230>)
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	6013      	str	r3, [r2, #0]
 800d906:	e002      	b.n	800d90e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d908:	4a4c      	ldr	r2, [pc, #304]	; (800da3c <HAL_SAI_Init+0x234>)
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	69db      	ldr	r3, [r3, #28]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d073      	beq.n	800d9fe <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4a45      	ldr	r2, [pc, #276]	; (800da30 <HAL_SAI_Init+0x228>)
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d004      	beq.n	800d92a <HAL_SAI_Init+0x122>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4a43      	ldr	r2, [pc, #268]	; (800da34 <HAL_SAI_Init+0x22c>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d105      	bne.n	800d936 <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d92a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d92e:	f7fe fb83 	bl	800c038 <HAL_RCCEx_GetPeriphCLKFreq>
 800d932:	61b8      	str	r0, [r7, #24]
 800d934:	e004      	b.n	800d940 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d936:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800d93a:	f7fe fb7d 	bl	800c038 <HAL_RCCEx_GetPeriphCLKFreq>
 800d93e:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	695b      	ldr	r3, [r3, #20]
 800d944:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d948:	d120      	bne.n	800d98c <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d94e:	2b04      	cmp	r3, #4
 800d950:	d102      	bne.n	800d958 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800d952:	2340      	movs	r3, #64	; 0x40
 800d954:	613b      	str	r3, [r7, #16]
 800d956:	e00a      	b.n	800d96e <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95c:	2b08      	cmp	r3, #8
 800d95e:	d103      	bne.n	800d968 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800d960:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d964:	613b      	str	r3, [r7, #16]
 800d966:	e002      	b.n	800d96e <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d96c:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800d96e:	69ba      	ldr	r2, [r7, #24]
 800d970:	4613      	mov	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4413      	add	r3, r2
 800d976:	005b      	lsls	r3, r3, #1
 800d978:	4619      	mov	r1, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	69db      	ldr	r3, [r3, #28]
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	fb02 f303 	mul.w	r3, r2, r3
 800d984:	fbb1 f3f3 	udiv	r3, r1, r3
 800d988:	617b      	str	r3, [r7, #20]
 800d98a:	e017      	b.n	800d9bc <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d994:	d101      	bne.n	800d99a <HAL_SAI_Init+0x192>
 800d996:	2302      	movs	r3, #2
 800d998:	e000      	b.n	800d99c <HAL_SAI_Init+0x194>
 800d99a:	2301      	movs	r3, #1
 800d99c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d99e:	69ba      	ldr	r2, [r7, #24]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	4413      	add	r3, r2
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	69db      	ldr	r3, [r3, #28]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	fb02 f303 	mul.w	r3, r2, r3
 800d9b4:	021b      	lsls	r3, r3, #8
 800d9b6:	fbb1 f3f3 	udiv	r3, r1, r3
 800d9ba:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	4a20      	ldr	r2, [pc, #128]	; (800da40 <HAL_SAI_Init+0x238>)
 800d9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c4:	08da      	lsrs	r2, r3, #3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800d9ca:	6979      	ldr	r1, [r7, #20]
 800d9cc:	4b1c      	ldr	r3, [pc, #112]	; (800da40 <HAL_SAI_Init+0x238>)
 800d9ce:	fba3 2301 	umull	r2, r3, r3, r1
 800d9d2:	08da      	lsrs	r2, r3, #3
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4413      	add	r3, r2
 800d9da:	005b      	lsls	r3, r3, #1
 800d9dc:	1aca      	subs	r2, r1, r3
 800d9de:	2a08      	cmp	r2, #8
 800d9e0:	d904      	bls.n	800d9ec <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a1b      	ldr	r3, [r3, #32]
 800d9e6:	1c5a      	adds	r2, r3, #1
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f0:	2b04      	cmp	r3, #4
 800d9f2:	d104      	bne.n	800d9fe <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6a1b      	ldr	r3, [r3, #32]
 800d9f8:	085a      	lsrs	r2, r3, #1
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d003      	beq.n	800da0e <HAL_SAI_Init+0x206>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d109      	bne.n	800da22 <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da12:	2b01      	cmp	r3, #1
 800da14:	d101      	bne.n	800da1a <HAL_SAI_Init+0x212>
 800da16:	2300      	movs	r3, #0
 800da18:	e001      	b.n	800da1e <HAL_SAI_Init+0x216>
 800da1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da1e:	623b      	str	r3, [r7, #32]
 800da20:	e012      	b.n	800da48 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da26:	2b01      	cmp	r3, #1
 800da28:	d10c      	bne.n	800da44 <HAL_SAI_Init+0x23c>
 800da2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800da2e:	e00a      	b.n	800da46 <HAL_SAI_Init+0x23e>
 800da30:	40015404 	.word	0x40015404
 800da34:	40015424 	.word	0x40015424
 800da38:	40015400 	.word	0x40015400
 800da3c:	40015800 	.word	0x40015800
 800da40:	cccccccd 	.word	0xcccccccd
 800da44:	2300      	movs	r3, #0
 800da46:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6819      	ldr	r1, [r3, #0]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	4b58      	ldr	r3, [pc, #352]	; (800dbb4 <HAL_SAI_Init+0x3ac>)
 800da54:	400b      	ands	r3, r1
 800da56:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6819      	ldr	r1, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da66:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800da6c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da72:	431a      	orrs	r2, r3
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800da78:	69fb      	ldr	r3, [r7, #28]
 800da7a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800da80:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800da8c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	051b      	lsls	r3, r3, #20
 800da94:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800da9a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	430a      	orrs	r2, r1
 800daa2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	6812      	ldr	r2, [r2, #0]
 800daae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800dab2:	f023 030f 	bic.w	r3, r3, #15
 800dab6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6859      	ldr	r1, [r3, #4]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	699a      	ldr	r2, [r3, #24]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dac6:	431a      	orrs	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dacc:	431a      	orrs	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	430a      	orrs	r2, r1
 800dad4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	6899      	ldr	r1, [r3, #8]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681a      	ldr	r2, [r3, #0]
 800dae0:	4b35      	ldr	r3, [pc, #212]	; (800dbb8 <HAL_SAI_Init+0x3b0>)
 800dae2:	400b      	ands	r3, r1
 800dae4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6899      	ldr	r1, [r3, #8]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800daf0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800daf6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 800dafc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800db02:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db08:	3b01      	subs	r3, #1
 800db0a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800db0c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	430a      	orrs	r2, r1
 800db14:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68d9      	ldr	r1, [r3, #12]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	f24f 0320 	movw	r3, #61472	; 0xf020
 800db24:	400b      	ands	r3, r1
 800db26:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	68d9      	ldr	r1, [r3, #12]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db36:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db3c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800db3e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db44:	3b01      	subs	r3, #1
 800db46:	021b      	lsls	r3, r3, #8
 800db48:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	430a      	orrs	r2, r1
 800db50:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a19      	ldr	r2, [pc, #100]	; (800dbbc <HAL_SAI_Init+0x3b4>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d119      	bne.n	800db90 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800db5c:	4b18      	ldr	r3, [pc, #96]	; (800dbc0 <HAL_SAI_Init+0x3b8>)
 800db5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db60:	4a17      	ldr	r2, [pc, #92]	; (800dbc0 <HAL_SAI_Init+0x3b8>)
 800db62:	f023 0301 	bic.w	r3, r3, #1
 800db66:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d10e      	bne.n	800db90 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db7a:	3b01      	subs	r3, #1
 800db7c:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800db7e:	4910      	ldr	r1, [pc, #64]	; (800dbc0 <HAL_SAI_Init+0x3b8>)
 800db80:	4313      	orrs	r3, r2
 800db82:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800db84:	4b0e      	ldr	r3, [pc, #56]	; (800dbc0 <HAL_SAI_Init+0x3b8>)
 800db86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db88:	4a0d      	ldr	r2, [pc, #52]	; (800dbc0 <HAL_SAI_Init+0x3b8>)
 800db8a:	f043 0301 	orr.w	r3, r3, #1
 800db8e:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3728      	adds	r7, #40	; 0x28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	f805c010 	.word	0xf805c010
 800dbb8:	fff88000 	.word	0xfff88000
 800dbbc:	40015404 	.word	0x40015404
 800dbc0:	40015400 	.word	0x40015400

0800dbc4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800dbcc:	4b18      	ldr	r3, [pc, #96]	; (800dc30 <SAI_Disable+0x6c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4a18      	ldr	r2, [pc, #96]	; (800dc34 <SAI_Disable+0x70>)
 800dbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbd6:	0b1b      	lsrs	r3, r3, #12
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dbee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10a      	bne.n	800dc0c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 800dc06:	2303      	movs	r3, #3
 800dc08:	72fb      	strb	r3, [r7, #11]
      break;
 800dc0a:	e009      	b.n	800dc20 <SAI_Disable+0x5c>
    }
    count--;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1e7      	bne.n	800dbf0 <SAI_Disable+0x2c>

  return status;
 800dc20:	7afb      	ldrb	r3, [r7, #11]
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3714      	adds	r7, #20
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr
 800dc2e:	bf00      	nop
 800dc30:	20000000 	.word	0x20000000
 800dc34:	95cbec1b 	.word	0x95cbec1b

0800dc38 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d101      	bne.n	800dc4a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e0aa      	b.n	800dda0 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d106      	bne.n	800dc60 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7f4 fe28 	bl	80028b0 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2202      	movs	r2, #2
 800dc64:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f022 0201 	bic.w	r2, r2, #1
 800dc74:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dc82:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	695a      	ldr	r2, [r3, #20]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc92:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	695a      	ldr	r2, [r3, #20]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800dca2:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dcac:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	689a      	ldr	r2, [r3, #8]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dcbc:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d012      	beq.n	800dcec <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	691b      	ldr	r3, [r3, #16]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d107      	bne.n	800dcde <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	68da      	ldr	r2, [r3, #12]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dcda:	609a      	str	r2, [r3, #8]
 800dcdc:	e006      	b.n	800dcec <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dcea:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	d104      	bne.n	800dcfe <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	687a      	ldr	r2, [r7, #4]
 800dd06:	6812      	ldr	r2, [r2, #0]
 800dd08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dd0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd10:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	695a      	ldr	r2, [r3, #20]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	699b      	ldr	r3, [r3, #24]
 800dd1a:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	69db      	ldr	r3, [r3, #28]
 800dd22:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	430a      	orrs	r2, r1
 800dd2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a1a      	ldr	r2, [r3, #32]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd34:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800dd3a:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd40:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800dd4c:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800dd4e:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd58:	d110      	bne.n	800dd7c <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d004      	beq.n	800dd6c <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800dd66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd6a:	d107      	bne.n	800dd7c <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800dd7a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f042 0201 	orr.w	r2, r2, #1
 800dd8a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2201      	movs	r2, #1
 800dd96:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800ddbe:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ddc8:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 800ddca:	2180      	movs	r1, #128	; 0x80
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 fcc5 	bl	800e75c <SMBUS_Enable_IRQ>

  return HAL_OK;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f003 0372 	and.w	r3, r3, #114	; 0x72
 800ddfa:	2b72      	cmp	r3, #114	; 0x72
 800ddfc:	d132      	bne.n	800de64 <HAL_SMBUS_EV_IRQHandler+0x88>
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	085b      	lsrs	r3, r3, #1
 800de02:	f003 0301 	and.w	r3, r3, #1
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 800de06:	2b00      	cmp	r3, #0
 800de08:	d117      	bne.n	800de3a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	09db      	lsrs	r3, r3, #7
 800de0e:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 800de12:	2b00      	cmp	r3, #0
 800de14:	d111      	bne.n	800de3a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	099b      	lsrs	r3, r3, #6
 800de1a:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d10b      	bne.n	800de3a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	095b      	lsrs	r3, r3, #5
 800de26:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d105      	bne.n	800de3a <HAL_SMBUS_EV_IRQHandler+0x5e>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	091b      	lsrs	r3, r3, #4
 800de32:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800de36:	2b00      	cmp	r3, #0
 800de38:	d014      	beq.n	800de64 <HAL_SMBUS_EV_IRQHandler+0x88>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de3e:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800de42:	2b32      	cmp	r3, #50	; 0x32
 800de44:	d104      	bne.n	800de50 <HAL_SMBUS_EV_IRQHandler+0x74>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800de46:	68f9      	ldr	r1, [r7, #12]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 faa5 	bl	800e398 <SMBUS_Slave_ISR>
 800de4e:	e009      	b.n	800de64 <HAL_SMBUS_EV_IRQHandler+0x88>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de54:	f003 0312 	and.w	r3, r3, #18
 800de58:	2b12      	cmp	r3, #18
 800de5a:	d103      	bne.n	800de64 <HAL_SMBUS_EV_IRQHandler+0x88>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 800de5c:	68f9      	ldr	r1, [r7, #12]
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 f8c0 	bl	800dfe4 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	f003 0374 	and.w	r3, r3, #116	; 0x74
 800de6a:	2b74      	cmp	r3, #116	; 0x74
 800de6c:	d132      	bne.n	800ded4 <HAL_SMBUS_EV_IRQHandler+0xf8>
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	089b      	lsrs	r3, r3, #2
 800de72:	f003 0301 	and.w	r3, r3, #1
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 800de76:	2b00      	cmp	r3, #0
 800de78:	d117      	bne.n	800deaa <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	09db      	lsrs	r3, r3, #7
 800de7e:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 800de82:	2b00      	cmp	r3, #0
 800de84:	d111      	bne.n	800deaa <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	099b      	lsrs	r3, r3, #6
 800de8a:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10b      	bne.n	800deaa <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	095b      	lsrs	r3, r3, #5
 800de96:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d105      	bne.n	800deaa <HAL_SMBUS_EV_IRQHandler+0xce>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	091b      	lsrs	r3, r3, #4
 800dea2:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d014      	beq.n	800ded4 <HAL_SMBUS_EV_IRQHandler+0xf8>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deae:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800deb2:	2b42      	cmp	r3, #66	; 0x42
 800deb4:	d104      	bne.n	800dec0 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800deb6:	68f9      	ldr	r1, [r7, #12]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fa6d 	bl	800e398 <SMBUS_Slave_ISR>
 800debe:	e009      	b.n	800ded4 <HAL_SMBUS_EV_IRQHandler+0xf8>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dec4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800dec8:	2b22      	cmp	r3, #34	; 0x22
 800deca:	d103      	bne.n	800ded4 <HAL_SMBUS_EV_IRQHandler+0xf8>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 800decc:	68f9      	ldr	r1, [r7, #12]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 f888 	bl	800dfe4 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	08db      	lsrs	r3, r3, #3
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10b      	bne.n	800def8 <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	095b      	lsrs	r3, r3, #5
 800dee4:	f003 0301 	and.w	r3, r3, #1
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d105      	bne.n	800def8 <HAL_SMBUS_EV_IRQHandler+0x11c>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	091b      	lsrs	r3, r3, #4
 800def0:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01b      	beq.n	800df30 <HAL_SMBUS_EV_IRQHandler+0x154>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	08db      	lsrs	r3, r3, #3
 800defc:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10b      	bne.n	800df1c <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	095b      	lsrs	r3, r3, #5
 800df08:	f003 0301 	and.w	r3, r3, #1
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d105      	bne.n	800df1c <HAL_SMBUS_EV_IRQHandler+0x140>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	091b      	lsrs	r3, r3, #4
 800df14:	f003 0301 	and.w	r3, r3, #1
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d009      	beq.n	800df30 <HAL_SMBUS_EV_IRQHandler+0x154>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df20:	f003 0308 	and.w	r3, r3, #8
 800df24:	2b08      	cmp	r3, #8
 800df26:	d103      	bne.n	800df30 <HAL_SMBUS_EV_IRQHandler+0x154>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800df28:	68f9      	ldr	r1, [r7, #12]
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 fa34 	bl	800e398 <SMBUS_Slave_ISR>
    }
  }
}
 800df30:	bf00      	nop
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fcc1 	bl	800e8c8 <SMBUS_ITErrorHandler>
}
 800df46:	bf00      	nop
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800df4e:	b480      	push	{r7}
 800df50:	b083      	sub	sp, #12
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 800df56:	bf00      	nop
 800df58:	370c      	adds	r7, #12
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800df62:	b480      	push	{r7}
 800df64:	b083      	sub	sp, #12
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 800df6a:	bf00      	nop
 800df6c:	370c      	adds	r7, #12
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800df76:	b480      	push	{r7}
 800df78:	b083      	sub	sp, #12
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 800df7e:	bf00      	nop
 800df80:	370c      	adds	r7, #12
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800df8a:	b480      	push	{r7}
 800df8c:	b083      	sub	sp, #12
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 800df92:	bf00      	nop
 800df94:	370c      	adds	r7, #12
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr

0800df9e <HAL_SMBUS_AddrCallback>:
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection,
                                   uint16_t AddrMatchCode)
{
 800df9e:	b480      	push	{r7}
 800dfa0:	b083      	sub	sp, #12
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	70fb      	strb	r3, [r7, #3]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 800dfae:	bf00      	nop
 800dfb0:	370c      	adds	r7, #12
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800dfba:	b480      	push	{r7}
 800dfbc:	b083      	sub	sp, #12
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 800dfc2:	bf00      	nop
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b083      	sub	sp, #12
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 800dfd6:	bf00      	nop
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
	...

0800dfe4 <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af02      	add	r7, sp, #8
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d101      	bne.n	800dffc <SMBUS_Master_ISR+0x18>
 800dff8:	2302      	movs	r3, #2
 800dffa:	e1c8      	b.n	800e38e <SMBUS_Master_ISR+0x3aa>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	091b      	lsrs	r3, r3, #4
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d014      	beq.n	800e03a <SMBUS_Master_ISR+0x56>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2210      	movs	r2, #16
 800e016:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e01c:	f043 0204 	orr.w	r2, r3, #4
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Flush TX register */
    SMBUS_Flush_TXDR(hsmbus);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fd04 	bl	800ea32 <SMBUS_Flush_TXDR>

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7ff ffcb 	bl	800dfce <HAL_SMBUS_ErrorCallback>
 800e038:	e1a4      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	095b      	lsrs	r3, r3, #5
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	d07a      	beq.n	800e13c <SMBUS_Master_ISR+0x158>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 fc3e 	bl	800e8c8 <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e050:	2b12      	cmp	r3, #18
 800e052:	d12d      	bne.n	800e0b0 <SMBUS_Master_ISR+0xcc>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800e054:	21f2      	movs	r1, #242	; 0xf2
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fbb9 	bl	800e7ce <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2220      	movs	r2, #32
 800e062:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	6859      	ldr	r1, [r3, #4]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	4b91      	ldr	r3, [pc, #580]	; (800e2b4 <SMBUS_Master_ISR+0x2d0>)
 800e070:	400b      	ands	r3, r1
 800e072:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	681a      	ldr	r2, [r3, #0]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f022 0201 	bic.w	r2, r2, #1
 800e082:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2201      	movs	r2, #1
 800e08e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f042 0201 	orr.w	r2, r2, #1
 800e0a6:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7ff ff50 	bl	800df4e <HAL_SMBUS_MasterTxCpltCallback>
 800e0ae:	e169      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0b4:	2b22      	cmp	r3, #34	; 0x22
 800e0b6:	f040 8165 	bne.w	800e384 <SMBUS_Master_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	089b      	lsrs	r3, r3, #2
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d01c      	beq.n	800e100 <SMBUS_Master_ISR+0x11c>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d0:	b2d2      	uxtb	r2, r2
 800e0d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0d8:	1c5a      	adds	r2, r3, #1
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00c      	beq.n	800e100 <SMBUS_Master_ISR+0x11c>
        {
          hsmbus->XferSize--;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800e100:	21d4      	movs	r1, #212	; 0xd4
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fb63 	bl	800e7ce <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2220      	movs	r2, #32
 800e10e:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6859      	ldr	r1, [r3, #4]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	4b66      	ldr	r3, [pc, #408]	; (800e2b4 <SMBUS_Master_ISR+0x2d0>)
 800e11c:	400b      	ands	r3, r1
 800e11e:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7ff ff14 	bl	800df62 <HAL_SMBUS_MasterRxCpltCallback>
 800e13a:	e123      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	089b      	lsrs	r3, r3, #2
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	2b00      	cmp	r3, #0
 800e146:	d019      	beq.n	800e17c <SMBUS_Master_ISR+0x198>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e152:	b2d2      	uxtb	r2, r2
 800e154:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e15a:	1c5a      	adds	r2, r3, #1
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e164:	3b01      	subs	r3, #1
 800e166:	b29a      	uxth	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e170:	b29b      	uxth	r3, r3
 800e172:	3b01      	subs	r3, #1
 800e174:	b29a      	uxth	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	875a      	strh	r2, [r3, #58]	; 0x3a
 800e17a:	e103      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	085b      	lsrs	r3, r3, #1
 800e180:	f003 0301 	and.w	r3, r3, #1
 800e184:	2b00      	cmp	r3, #0
 800e186:	d018      	beq.n	800e1ba <SMBUS_Master_ISR+0x1d6>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e18c:	781a      	ldrb	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e198:	1c5a      	adds	r2, r3, #1
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	875a      	strh	r2, [r3, #58]	; 0x3a
 800e1b8:	e0e4      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	09db      	lsrs	r3, r3, #7
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	f000 808f 	beq.w	800e2e6 <SMBUS_Master_ISR+0x302>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d046      	beq.n	800e260 <SMBUS_Master_ISR+0x27c>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d142      	bne.n	800e260 <SMBUS_Master_ISR+0x27c>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1e6:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	2bff      	cmp	r3, #255	; 0xff
 800e1f0:	d910      	bls.n	800e214 <SMBUS_Master_ISR+0x230>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 800e1fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e1fe:	89f9      	ldrh	r1, [r7, #14]
 800e200:	2200      	movs	r2, #0
 800e202:	9200      	str	r2, [sp, #0]
 800e204:	22ff      	movs	r2, #255	; 0xff
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fc38 	bl	800ea7c <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	22ff      	movs	r2, #255	; 0xff
 800e210:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800e212:	e0b6      	b.n	800e382 <SMBUS_Master_ISR+0x39e>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e218:	b29a      	uxth	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e222:	b2da      	uxtb	r2, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e228:	89f9      	ldrh	r1, [r7, #14]
 800e22a:	2000      	movs	r0, #0
 800e22c:	9000      	str	r0, [sp, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fc24 	bl	800ea7c <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f000 809f 	beq.w	800e382 <SMBUS_Master_ISR+0x39e>
        {
          hsmbus->XferSize--;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e248:	3b01      	subs	r3, #1
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e254:	b29b      	uxth	r3, r3
 800e256:	3b01      	subs	r3, #1
 800e258:	b29a      	uxth	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800e25e:	e090      	b.n	800e382 <SMBUS_Master_ISR+0x39e>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e264:	b29b      	uxth	r3, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	f040 808c 	bne.w	800e384 <SMBUS_Master_ISR+0x3a0>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e270:	2b00      	cmp	r3, #0
 800e272:	f040 8087 	bne.w	800e384 <SMBUS_Master_ISR+0x3a0>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e284:	d07e      	beq.n	800e384 <SMBUS_Master_ISR+0x3a0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e28a:	2b12      	cmp	r3, #18
 800e28c:	d114      	bne.n	800e2b8 <SMBUS_Master_ISR+0x2d4>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800e28e:	21f2      	movs	r1, #242	; 0xf2
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 fa9c 	bl	800e7ce <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2201      	movs	r2, #1
 800e2a2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7ff fe4e 	bl	800df4e <HAL_SMBUS_MasterTxCpltCallback>
 800e2b2:	e067      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
 800e2b4:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2bc:	2b22      	cmp	r3, #34	; 0x22
 800e2be:	d161      	bne.n	800e384 <SMBUS_Master_ISR+0x3a0>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800e2c0:	21d4      	movs	r1, #212	; 0xd4
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fa83 	bl	800e7ce <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f7ff fe3f 	bl	800df62 <HAL_SMBUS_MasterRxCpltCallback>
 800e2e4:	e04e      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	099b      	lsrs	r3, r3, #6
 800e2ea:	f003 0301 	and.w	r3, r3, #1
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d048      	beq.n	800e384 <SMBUS_Master_ISR+0x3a0>
  {
    if (hsmbus->XferCount == 0U)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d143      	bne.n	800e384 <SMBUS_Master_ISR+0x3a0>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e300:	2b00      	cmp	r3, #0
 800e302:	d108      	bne.n	800e316 <SMBUS_Master_ISR+0x332>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	685a      	ldr	r2, [r3, #4]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e312:	605a      	str	r2, [r3, #4]
 800e314:	e036      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e324:	d02e      	beq.n	800e384 <SMBUS_Master_ISR+0x3a0>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e32a:	2b12      	cmp	r3, #18
 800e32c:	d112      	bne.n	800e354 <SMBUS_Master_ISR+0x370>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800e32e:	21f2      	movs	r1, #242	; 0xf2
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fa4c 	bl	800e7ce <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2201      	movs	r2, #1
 800e342:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7ff fdfe 	bl	800df4e <HAL_SMBUS_MasterTxCpltCallback>
 800e352:	e017      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e358:	2b22      	cmp	r3, #34	; 0x22
 800e35a:	d113      	bne.n	800e384 <SMBUS_Master_ISR+0x3a0>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800e35c:	21d4      	movs	r1, #212	; 0xd4
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fa35 	bl	800e7ce <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2201      	movs	r2, #1
 800e370:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2200      	movs	r2, #0
 800e376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff fdf1 	bl	800df62 <HAL_SMBUS_MasterRxCpltCallback>
 800e380:	e000      	b.n	800e384 <SMBUS_Master_ISR+0x3a0>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800e382:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop

0800e398 <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af02      	add	r7, sp, #8
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d101      	bne.n	800e3b0 <SMBUS_Slave_ISR+0x18>
 800e3ac:	2302      	movs	r3, #2
 800e3ae:	e1ce      	b.n	800e74e <SMBUS_Slave_ISR+0x3b6>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	091b      	lsrs	r3, r3, #4
 800e3bc:	f003 0301 	and.w	r3, r3, #1
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d039      	beq.n	800e438 <SMBUS_Slave_ISR+0xa0>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10b      	bne.n	800e3e6 <SMBUS_Slave_ISR+0x4e>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	2210      	movs	r2, #16
 800e3d4:	61da      	str	r2, [r3, #28]

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fb2b 	bl	800ea32 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3e4:	e14d      	b.n	800e682 <SMBUS_Slave_ISR+0x2ea>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2210      	movs	r2, #16
 800e3ec:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3fa:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e406:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800e40e:	21f6      	movs	r1, #246	; 0xf6
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 f9dc 	bl	800e7ce <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e41a:	f043 0204 	orr.w	r2, r3, #4
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fb05 	bl	800ea32 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2200      	movs	r2, #0
 800e42c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f7ff fdcc 	bl	800dfce <HAL_SMBUS_ErrorCallback>
 800e436:	e124      	b.n	800e682 <SMBUS_Slave_ISR+0x2ea>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	08db      	lsrs	r3, r3, #3
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	2b00      	cmp	r3, #0
 800e442:	d022      	beq.n	800e48a <SMBUS_Slave_ISR+0xf2>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	0c1b      	lsrs	r3, r3, #16
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	0c5b      	lsrs	r3, r3, #17
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e462:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	f022 0208 	bic.w	r2, r2, #8
 800e472:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 800e47c:	89ba      	ldrh	r2, [r7, #12]
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff fd8b 	bl	800df9e <HAL_SMBUS_AddrCallback>
 800e488:	e0fb      	b.n	800e682 <SMBUS_Slave_ISR+0x2ea>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	089b      	lsrs	r3, r3, #2
 800e48e:	f003 0301 	and.w	r3, r3, #1
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <SMBUS_Slave_ISR+0x10c>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	09db      	lsrs	r3, r3, #7
 800e49a:	f003 0301 	and.w	r3, r3, #1
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f000 80b0 	beq.w	800e604 <SMBUS_Slave_ISR+0x26c>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4a8:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800e4ac:	2b42      	cmp	r3, #66	; 0x42
 800e4ae:	d15e      	bne.n	800e56e <SMBUS_Slave_ISR+0x1d6>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ba:	b2d2      	uxtb	r2, r2
 800e4bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c2:	1c5a      	adds	r2, r3, #1
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d10f      	bne.n	800e50c <SMBUS_Slave_ISR+0x174>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	9200      	str	r2, [sp, #0]
 800e500:	2201      	movs	r2, #1
 800e502:	2100      	movs	r1, #0
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 fab9 	bl	800ea7c <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800e50a:	e0b9      	b.n	800e680 <SMBUS_Slave_ISR+0x2e8>
      }
      else if (hsmbus->XferCount == 0U)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e510:	b29b      	uxth	r3, r3
 800e512:	2b00      	cmp	r3, #0
 800e514:	d115      	bne.n	800e542 <SMBUS_Slave_ISR+0x1aa>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800e516:	21d4      	movs	r1, #212	; 0xd4
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f958 	bl	800e7ce <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e52a:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	2200      	movs	r2, #0
 800e536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f7ff fd25 	bl	800df8a <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800e540:	e09e      	b.n	800e680 <SMBUS_Slave_ISR+0x2e8>
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1,
                             SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e546:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, 0, 1,
 800e54a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e54e:	2200      	movs	r2, #0
 800e550:	9200      	str	r2, [sp, #0]
 800e552:	2201      	movs	r2, #1
 800e554:	2100      	movs	r1, #0
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 fa90 	bl	800ea7c <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	685a      	ldr	r2, [r3, #4]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e56a:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800e56c:	e088      	b.n	800e680 <SMBUS_Slave_ISR+0x2e8>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e572:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800e576:	2b32      	cmp	r3, #50	; 0x32
 800e578:	f040 8082 	bne.w	800e680 <SMBUS_Slave_ISR+0x2e8>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e580:	b29b      	uxth	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d07c      	beq.n	800e680 <SMBUS_Slave_ISR+0x2e8>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d178      	bne.n	800e680 <SMBUS_Slave_ISR+0x2e8>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e592:	b29b      	uxth	r3, r3
 800e594:	2bff      	cmp	r3, #255	; 0xff
 800e596:	d910      	bls.n	800e5ba <SMBUS_Slave_ISR+0x222>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
                               (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e59c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
 800e5a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	9200      	str	r2, [sp, #0]
 800e5a8:	22ff      	movs	r2, #255	; 0xff
 800e5aa:	2100      	movs	r1, #0
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fa65 	bl	800ea7c <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	22ff      	movs	r2, #255	; 0xff
 800e5b6:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800e5b8:	e062      	b.n	800e680 <SMBUS_Slave_ISR+0x2e8>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	9100      	str	r1, [sp, #0]
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fa51 	bl	800ea7c <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d04b      	beq.n	800e680 <SMBUS_Slave_ISR+0x2e8>
          {
            hsmbus->XferSize--;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800e602:	e03d      	b.n	800e680 <SMBUS_Slave_ISR+0x2e8>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	085b      	lsrs	r3, r3, #1
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d038      	beq.n	800e682 <SMBUS_Slave_ISR+0x2ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e614:	b29b      	uxth	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	d017      	beq.n	800e64a <SMBUS_Slave_ISR+0x2b2>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61e:	781a      	ldrb	r2, [r3, #0]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e634:	b29b      	uxth	r3, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	b29a      	uxth	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e642:	3b01      	subs	r3, #1
 800e644:	b29a      	uxth	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e64e:	b29b      	uxth	r3, r3
 800e650:	2b00      	cmp	r3, #0
 800e652:	d116      	bne.n	800e682 <SMBUS_Slave_ISR+0x2ea>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800e654:	21f2      	movs	r1, #242	; 0xf2
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f8b9 	bl	800e7ce <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e668:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f7ff fc7c 	bl	800df76 <HAL_SMBUS_SlaveTxCpltCallback>
 800e67e:	e000      	b.n	800e682 <SMBUS_Slave_ISR+0x2ea>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800e680:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	095b      	lsrs	r3, r3, #5
 800e686:	f003 0301 	and.w	r3, r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d05a      	beq.n	800e744 <SMBUS_Slave_ISR+0x3ac>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e692:	f003 0308 	and.w	r3, r3, #8
 800e696:	2b08      	cmp	r3, #8
 800e698:	d154      	bne.n	800e744 <SMBUS_Slave_ISR+0x3ac>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	f003 0304 	and.w	r3, r3, #4
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d11c      	bne.n	800e6e2 <SMBUS_Slave_ISR+0x34a>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b2:	b2d2      	uxtb	r2, r2
 800e6b4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ba:	1c5a      	adds	r2, r3, #1
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00c      	beq.n	800e6e2 <SMBUS_Slave_ISR+0x34a>
        {
          hsmbus->XferSize--;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800e6e2:	21f6      	movs	r1, #246	; 0xf6
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f000 f872 	bl	800e7ce <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 800e6ea:	2138      	movs	r1, #56	; 0x38
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f86e 	bl	800e7ce <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	685a      	ldr	r2, [r3, #4]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e700:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6859      	ldr	r1, [r3, #4]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	4b12      	ldr	r3, [pc, #72]	; (800e758 <SMBUS_Slave_ISR+0x3c0>)
 800e70e:	400b      	ands	r3, r1
 800e710:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2220      	movs	r2, #32
 800e718:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2208      	movs	r2, #8
 800e720:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2200      	movs	r2, #0
 800e726:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2201      	movs	r2, #1
 800e734:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7ff fc3b 	bl	800dfba <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2200      	movs	r2, #0
 800e748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	fe00e800 	.word	0xfe00e800

0800e75c <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b085      	sub	sp, #20
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800e766:	2300      	movs	r3, #0
 800e768:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e770:	2b00      	cmp	r3, #0
 800e772:	d003      	beq.n	800e77c <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e77a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e782:	2b38      	cmp	r3, #56	; 0x38
 800e784:	d103      	bne.n	800e78e <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800e78c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800e794:	2bf2      	cmp	r3, #242	; 0xf2
 800e796:	d103      	bne.n	800e7a0 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800e79e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800e7a6:	2bd4      	cmp	r3, #212	; 0xd4
 800e7a8:	d103      	bne.n	800e7b2 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800e7b0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	6819      	ldr	r1, [r3, #0]
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	430a      	orrs	r2, r1
 800e7c0:	601a      	str	r2, [r3, #0]
}
 800e7c2:	bf00      	nop
 800e7c4:	3714      	adds	r7, #20
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7cc:	4770      	bx	lr

0800e7ce <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800e7ce:	b480      	push	{r7}
 800e7d0:	b085      	sub	sp, #20
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
 800e7d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7e0:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	2b01      	cmp	r3, #1
 800e7e6:	d108      	bne.n	800e7fa <SMBUS_Disable_IRQ+0x2c>
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d003      	beq.n	800e7fa <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7f8:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800e800:	2bf2      	cmp	r3, #242	; 0xf2
 800e802:	d11c      	bne.n	800e83e <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800e80a:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e816:	2b00      	cmp	r3, #0
 800e818:	d108      	bne.n	800e82c <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	f003 0308 	and.w	r3, r3, #8
 800e820:	2b00      	cmp	r3, #0
 800e822:	d103      	bne.n	800e82c <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e82a:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	f003 0308 	and.w	r3, r3, #8
 800e832:	2b00      	cmp	r3, #0
 800e834:	d103      	bne.n	800e83e <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800e83c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800e844:	2bd4      	cmp	r3, #212	; 0xd4
 800e846:	d11c      	bne.n	800e882 <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800e84e:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d108      	bne.n	800e870 <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	f003 0308 	and.w	r3, r3, #8
 800e864:	2b00      	cmp	r3, #0
 800e866:	d103      	bne.n	800e870 <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e86e:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	f003 0308 	and.w	r3, r3, #8
 800e876:	2b00      	cmp	r3, #0
 800e878:	d103      	bne.n	800e882 <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800e880:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e888:	2b38      	cmp	r3, #56	; 0x38
 800e88a:	d10e      	bne.n	800e8aa <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800e892:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d103      	bne.n	800e8aa <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	6819      	ldr	r1, [r3, #0]
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	43da      	mvns	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	400a      	ands	r2, r1
 800e8ba:	601a      	str	r2, [r3, #0]
}
 800e8bc:	bf00      	nop
 800e8be:	3714      	adds	r7, #20
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	699b      	ldr	r3, [r3, #24]
 800e8d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00f      	beq.n	800e90a <SMBUS_ITErrorHandler+0x42>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00a      	beq.n	800e90a <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8f8:	f043 0201 	orr.w	r2, r3, #1
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e908:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00f      	beq.n	800e934 <SMBUS_ITErrorHandler+0x6c>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00a      	beq.n	800e934 <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e922:	f043 0208 	orr.w	r2, r3, #8
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e932:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00f      	beq.n	800e95e <SMBUS_ITErrorHandler+0x96>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00a      	beq.n	800e95e <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e94c:	f043 0202 	orr.w	r2, r3, #2
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e95c:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00f      	beq.n	800e988 <SMBUS_ITErrorHandler+0xc0>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00a      	beq.n	800e988 <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e976:	f043 0220 	orr.w	r2, r3, #32
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e986:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00f      	beq.n	800e9b2 <SMBUS_ITErrorHandler+0xea>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00a      	beq.n	800e9b2 <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e9b0:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00f      	beq.n	800e9dc <SMBUS_ITErrorHandler+0x114>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9da:	61da      	str	r2, [r3, #28]
  }

  /* Flush TX register */
  SMBUS_Flush_TXDR(hsmbus);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f000 f828 	bl	800ea32 <SMBUS_Flush_TXDR>

  /* Store current volatile hsmbus->ErrorCode, misra rule */
  tmperror = hsmbus->ErrorCode;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d01d      	beq.n	800ea2a <SMBUS_ITErrorHandler+0x162>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2b04      	cmp	r3, #4
 800e9f2:	d01a      	beq.n	800ea2a <SMBUS_ITErrorHandler+0x162>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d112      	bne.n	800ea24 <SMBUS_ITErrorHandler+0x15c>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea02:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800ea0a:	2b32      	cmp	r3, #50	; 0x32
 800ea0c:	d004      	beq.n	800ea18 <SMBUS_ITErrorHandler+0x150>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f003 0342 	and.w	r3, r3, #66	; 0x42
 800ea14:	2b42      	cmp	r3, #66	; 0x42
 800ea16:	d105      	bne.n	800ea24 <SMBUS_ITErrorHandler+0x15c>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2208      	movs	r2, #8
 800ea22:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff fad2 	bl	800dfce <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 800ea2a:	bf00      	nop
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <SMBUS_Flush_TXDR>:
  * @brief  SMBUS Tx data register flush process.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_Flush_TXDR(SMBUS_HandleTypeDef *hsmbus)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b083      	sub	sp, #12
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXIS) != RESET)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d103      	bne.n	800ea50 <SMBUS_Flush_TXDR+0x1e>
  {
    hsmbus->Instance->TXDR = 0x00U;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXE) == RESET)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	699b      	ldr	r3, [r3, #24]
 800ea56:	f003 0301 	and.w	r3, r3, #1
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d007      	beq.n	800ea6e <SMBUS_Flush_TXDR+0x3c>
  {
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TXE);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	699a      	ldr	r2, [r3, #24]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f042 0201 	orr.w	r2, r2, #1
 800ea6c:	619a      	str	r2, [r3, #24]
  }
}
 800ea6e:	bf00      	nop
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
	...

0800ea7c <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size,
                                 uint32_t Mode, uint32_t Request)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b085      	sub	sp, #20
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	607b      	str	r3, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	817b      	strh	r3, [r7, #10]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	0d5b      	lsrs	r3, r3, #21
 800ea98:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ea9c:	4b0d      	ldr	r3, [pc, #52]	; (800ead4 <SMBUS_TransferConfig+0x58>)
 800ea9e:	430b      	orrs	r3, r1
 800eaa0:	43db      	mvns	r3, r3
 800eaa2:	ea02 0103 	and.w	r1, r2, r3
 800eaa6:	897b      	ldrh	r3, [r7, #10]
 800eaa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800eaac:	7a7b      	ldrb	r3, [r7, #9]
 800eaae:	041b      	lsls	r3, r3, #16
 800eab0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eab4:	431a      	orrs	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	431a      	orrs	r2, r3
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	431a      	orrs	r2, r3
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	430a      	orrs	r2, r1
 800eac4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800eac6:	bf00      	nop
 800eac8:	3714      	adds	r7, #20
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop
 800ead4:	07ff63ff 	.word	0x07ff63ff

0800ead8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d101      	bne.n	800eaea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eae6:	2301      	movs	r3, #1
 800eae8:	e095      	b.n	800ec16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d108      	bne.n	800eb04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eafa:	d009      	beq.n	800eb10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2200      	movs	r2, #0
 800eb00:	61da      	str	r2, [r3, #28]
 800eb02:	e005      	b.n	800eb10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d106      	bne.n	800eb30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7f4 f84c 	bl	8002bc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2202      	movs	r2, #2
 800eb34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800eb50:	d902      	bls.n	800eb58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800eb52:	2300      	movs	r3, #0
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	e002      	b.n	800eb5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800eb58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	68db      	ldr	r3, [r3, #12]
 800eb62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800eb66:	d007      	beq.n	800eb78 <HAL_SPI_Init+0xa0>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800eb70:	d002      	beq.n	800eb78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2200      	movs	r2, #0
 800eb76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800eb88:	431a      	orrs	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	691b      	ldr	r3, [r3, #16]
 800eb8e:	f003 0302 	and.w	r3, r3, #2
 800eb92:	431a      	orrs	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	695b      	ldr	r3, [r3, #20]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	431a      	orrs	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eba6:	431a      	orrs	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	69db      	ldr	r3, [r3, #28]
 800ebac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebb0:	431a      	orrs	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a1b      	ldr	r3, [r3, #32]
 800ebb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebba:	ea42 0103 	orr.w	r1, r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	430a      	orrs	r2, r1
 800ebcc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	0c1b      	lsrs	r3, r3, #16
 800ebd4:	f003 0204 	and.w	r2, r3, #4
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebdc:	f003 0310 	and.w	r3, r3, #16
 800ebe0:	431a      	orrs	r2, r3
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebe6:	f003 0308 	and.w	r3, r3, #8
 800ebea:	431a      	orrs	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ebf4:	ea42 0103 	orr.w	r1, r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	430a      	orrs	r2, r1
 800ec04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b082      	sub	sp, #8
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d101      	bne.n	800ec30 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e01a      	b.n	800ec66 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2202      	movs	r2, #2
 800ec34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7f4 f853 	bl	8002cf4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b088      	sub	sp, #32
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	60f8      	str	r0, [r7, #12]
 800ec76:	60b9      	str	r1, [r7, #8]
 800ec78:	603b      	str	r3, [r7, #0]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d101      	bne.n	800ec90 <HAL_SPI_Transmit+0x22>
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	e158      	b.n	800ef42 <HAL_SPI_Transmit+0x2d4>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec98:	f7f7 fda8 	bl	80067ec <HAL_GetTick>
 800ec9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ec9e:	88fb      	ldrh	r3, [r7, #6]
 800eca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d002      	beq.n	800ecb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ecae:	2302      	movs	r3, #2
 800ecb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ecb2:	e13d      	b.n	800ef30 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <HAL_SPI_Transmit+0x52>
 800ecba:	88fb      	ldrh	r3, [r7, #6]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d102      	bne.n	800ecc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ecc4:	e134      	b.n	800ef30 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2203      	movs	r2, #3
 800ecca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	88fa      	ldrh	r2, [r7, #6]
 800ecde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	88fa      	ldrh	r2, [r7, #6]
 800ece4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2200      	movs	r2, #0
 800ecea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed10:	d10f      	bne.n	800ed32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ed30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed3c:	2b40      	cmp	r3, #64	; 0x40
 800ed3e:	d007      	beq.n	800ed50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	681a      	ldr	r2, [r3, #0]
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ed58:	d94b      	bls.n	800edf2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d002      	beq.n	800ed68 <HAL_SPI_Transmit+0xfa>
 800ed62:	8afb      	ldrh	r3, [r7, #22]
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d13e      	bne.n	800ede6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed6c:	881a      	ldrh	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed78:	1c9a      	adds	r2, r3, #2
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	3b01      	subs	r3, #1
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ed8c:	e02b      	b.n	800ede6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	689b      	ldr	r3, [r3, #8]
 800ed94:	f003 0302 	and.w	r3, r3, #2
 800ed98:	2b02      	cmp	r3, #2
 800ed9a:	d112      	bne.n	800edc2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda0:	881a      	ldrh	r2, [r3, #0]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edac:	1c9a      	adds	r2, r3, #2
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3b01      	subs	r3, #1
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800edc0:	e011      	b.n	800ede6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edc2:	f7f7 fd13 	bl	80067ec <HAL_GetTick>
 800edc6:	4602      	mov	r2, r0
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d803      	bhi.n	800edda <HAL_SPI_Transmit+0x16c>
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd8:	d102      	bne.n	800ede0 <HAL_SPI_Transmit+0x172>
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d102      	bne.n	800ede6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800ede0:	2303      	movs	r3, #3
 800ede2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ede4:	e0a4      	b.n	800ef30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edea:	b29b      	uxth	r3, r3
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1ce      	bne.n	800ed8e <HAL_SPI_Transmit+0x120>
 800edf0:	e07c      	b.n	800eeec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d002      	beq.n	800ee00 <HAL_SPI_Transmit+0x192>
 800edfa:	8afb      	ldrh	r3, [r7, #22]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d170      	bne.n	800eee2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d912      	bls.n	800ee30 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0e:	881a      	ldrh	r2, [r3, #0]
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee1a:	1c9a      	adds	r2, r3, #2
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	3b02      	subs	r3, #2
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee2e:	e058      	b.n	800eee2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	330c      	adds	r3, #12
 800ee3a:	7812      	ldrb	r2, [r2, #0]
 800ee3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800ee56:	e044      	b.n	800eee2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	f003 0302 	and.w	r3, r3, #2
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d12b      	bne.n	800eebe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d912      	bls.n	800ee96 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee74:	881a      	ldrh	r2, [r3, #0]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee80:	1c9a      	adds	r2, r3, #2
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	3b02      	subs	r3, #2
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee94:	e025      	b.n	800eee2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	330c      	adds	r3, #12
 800eea0:	7812      	ldrb	r2, [r2, #0]
 800eea2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea8:	1c5a      	adds	r2, r3, #1
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eebc:	e011      	b.n	800eee2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eebe:	f7f7 fc95 	bl	80067ec <HAL_GetTick>
 800eec2:	4602      	mov	r2, r0
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	1ad3      	subs	r3, r2, r3
 800eec8:	683a      	ldr	r2, [r7, #0]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d803      	bhi.n	800eed6 <HAL_SPI_Transmit+0x268>
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed4:	d102      	bne.n	800eedc <HAL_SPI_Transmit+0x26e>
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d102      	bne.n	800eee2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800eedc:	2303      	movs	r3, #3
 800eede:	77fb      	strb	r3, [r7, #31]
          goto error;
 800eee0:	e026      	b.n	800ef30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1b5      	bne.n	800ee58 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eeec:	69ba      	ldr	r2, [r7, #24]
 800eeee:	6839      	ldr	r1, [r7, #0]
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f000 fe11 	bl	800fb18 <SPI_EndRxTxTransaction>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d002      	beq.n	800ef02 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2220      	movs	r2, #32
 800ef00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d10a      	bne.n	800ef20 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	613b      	str	r3, [r7, #16]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	613b      	str	r3, [r7, #16]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	613b      	str	r3, [r7, #16]
 800ef1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d002      	beq.n	800ef2e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	77fb      	strb	r3, [r7, #31]
 800ef2c:	e000      	b.n	800ef30 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800ef2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2201      	movs	r2, #1
 800ef34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ef40:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3720      	adds	r7, #32
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}

0800ef4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef4a:	b580      	push	{r7, lr}
 800ef4c:	b088      	sub	sp, #32
 800ef4e:	af02      	add	r7, sp, #8
 800ef50:	60f8      	str	r0, [r7, #12]
 800ef52:	60b9      	str	r1, [r7, #8]
 800ef54:	603b      	str	r3, [r7, #0]
 800ef56:	4613      	mov	r3, r2
 800ef58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef66:	d112      	bne.n	800ef8e <HAL_SPI_Receive+0x44>
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10e      	bne.n	800ef8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2204      	movs	r2, #4
 800ef74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ef78:	88fa      	ldrh	r2, [r7, #6]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	9300      	str	r3, [sp, #0]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	68b9      	ldr	r1, [r7, #8]
 800ef84:	68f8      	ldr	r0, [r7, #12]
 800ef86:	f000 f910 	bl	800f1aa <HAL_SPI_TransmitReceive>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	e109      	b.n	800f1a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d101      	bne.n	800ef9c <HAL_SPI_Receive+0x52>
 800ef98:	2302      	movs	r3, #2
 800ef9a:	e102      	b.n	800f1a2 <HAL_SPI_Receive+0x258>
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efa4:	f7f7 fc22 	bl	80067ec <HAL_GetTick>
 800efa8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d002      	beq.n	800efbc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800efb6:	2302      	movs	r3, #2
 800efb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800efba:	e0e9      	b.n	800f190 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d002      	beq.n	800efc8 <HAL_SPI_Receive+0x7e>
 800efc2:	88fb      	ldrh	r3, [r7, #6]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	75fb      	strb	r3, [r7, #23]
    goto error;
 800efcc:	e0e0      	b.n	800f190 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	2204      	movs	r2, #4
 800efd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	88fa      	ldrh	r2, [r7, #6]
 800efe6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	88fa      	ldrh	r2, [r7, #6]
 800efee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2200      	movs	r2, #0
 800effc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2200      	movs	r2, #0
 800f002:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2200      	movs	r2, #0
 800f008:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2200      	movs	r2, #0
 800f00e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f018:	d908      	bls.n	800f02c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f028:	605a      	str	r2, [r3, #4]
 800f02a:	e007      	b.n	800f03c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	685a      	ldr	r2, [r3, #4]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f03a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	689b      	ldr	r3, [r3, #8]
 800f040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f044:	d10f      	bne.n	800f066 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f054:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f064:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f070:	2b40      	cmp	r3, #64	; 0x40
 800f072:	d007      	beq.n	800f084 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f082:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f08c:	d867      	bhi.n	800f15e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f08e:	e030      	b.n	800f0f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	f003 0301 	and.w	r3, r3, #1
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d117      	bne.n	800f0ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f103 020c 	add.w	r2, r3, #12
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0aa:	7812      	ldrb	r2, [r2, #0]
 800f0ac:	b2d2      	uxtb	r2, r2
 800f0ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0b4:	1c5a      	adds	r2, r3, #1
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	b29a      	uxth	r2, r3
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f0cc:	e011      	b.n	800f0f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0ce:	f7f7 fb8d 	bl	80067ec <HAL_GetTick>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	683a      	ldr	r2, [r7, #0]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d803      	bhi.n	800f0e6 <HAL_SPI_Receive+0x19c>
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e4:	d102      	bne.n	800f0ec <HAL_SPI_Receive+0x1a2>
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d102      	bne.n	800f0f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800f0ec:	2303      	movs	r3, #3
 800f0ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f0f0:	e04e      	b.n	800f190 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d1c8      	bne.n	800f090 <HAL_SPI_Receive+0x146>
 800f0fe:	e034      	b.n	800f16a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	689b      	ldr	r3, [r3, #8]
 800f106:	f003 0301 	and.w	r3, r3, #1
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d115      	bne.n	800f13a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68da      	ldr	r2, [r3, #12]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f118:	b292      	uxth	r2, r2
 800f11a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f120:	1c9a      	adds	r2, r3, #2
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	3b01      	subs	r3, #1
 800f130:	b29a      	uxth	r2, r3
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f138:	e011      	b.n	800f15e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f13a:	f7f7 fb57 	bl	80067ec <HAL_GetTick>
 800f13e:	4602      	mov	r2, r0
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	1ad3      	subs	r3, r2, r3
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d803      	bhi.n	800f152 <HAL_SPI_Receive+0x208>
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f150:	d102      	bne.n	800f158 <HAL_SPI_Receive+0x20e>
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d102      	bne.n	800f15e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800f158:	2303      	movs	r3, #3
 800f15a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f15c:	e018      	b.n	800f190 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f164:	b29b      	uxth	r3, r3
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1ca      	bne.n	800f100 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f16a:	693a      	ldr	r2, [r7, #16]
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	f000 fc7a 	bl	800fa68 <SPI_EndRxTransaction>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d002      	beq.n	800f180 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2220      	movs	r2, #32
 800f17e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800f188:	2301      	movs	r3, #1
 800f18a:	75fb      	strb	r3, [r7, #23]
 800f18c:	e000      	b.n	800f190 <HAL_SPI_Receive+0x246>
  }

error :
 800f18e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2201      	movs	r2, #1
 800f194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f1a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3718      	adds	r7, #24
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b08a      	sub	sp, #40	; 0x28
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	60f8      	str	r0, [r7, #12]
 800f1b2:	60b9      	str	r1, [r7, #8]
 800f1b4:	607a      	str	r2, [r7, #4]
 800f1b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d101      	bne.n	800f1d0 <HAL_SPI_TransmitReceive+0x26>
 800f1cc:	2302      	movs	r3, #2
 800f1ce:	e1fb      	b.n	800f5c8 <HAL_SPI_TransmitReceive+0x41e>
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f1d8:	f7f7 fb08 	bl	80067ec <HAL_GetTick>
 800f1dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f1e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f1ec:	887b      	ldrh	r3, [r7, #2]
 800f1ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f1f0:	887b      	ldrh	r3, [r7, #2]
 800f1f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f1f4:	7efb      	ldrb	r3, [r7, #27]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d00e      	beq.n	800f218 <HAL_SPI_TransmitReceive+0x6e>
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f200:	d106      	bne.n	800f210 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d102      	bne.n	800f210 <HAL_SPI_TransmitReceive+0x66>
 800f20a:	7efb      	ldrb	r3, [r7, #27]
 800f20c:	2b04      	cmp	r3, #4
 800f20e:	d003      	beq.n	800f218 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f210:	2302      	movs	r3, #2
 800f212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f216:	e1cd      	b.n	800f5b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d005      	beq.n	800f22a <HAL_SPI_TransmitReceive+0x80>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d002      	beq.n	800f22a <HAL_SPI_TransmitReceive+0x80>
 800f224:	887b      	ldrh	r3, [r7, #2]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d103      	bne.n	800f232 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f22a:	2301      	movs	r3, #1
 800f22c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f230:	e1c0      	b.n	800f5b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	2b04      	cmp	r3, #4
 800f23c:	d003      	beq.n	800f246 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2205      	movs	r2, #5
 800f242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2200      	movs	r2, #0
 800f24a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	887a      	ldrh	r2, [r7, #2]
 800f256:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	887a      	ldrh	r2, [r7, #2]
 800f25e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	887a      	ldrh	r2, [r7, #2]
 800f26c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	887a      	ldrh	r2, [r7, #2]
 800f272:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2200      	movs	r2, #0
 800f278:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2200      	movs	r2, #0
 800f27e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f288:	d802      	bhi.n	800f290 <HAL_SPI_TransmitReceive+0xe6>
 800f28a:	8a3b      	ldrh	r3, [r7, #16]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d908      	bls.n	800f2a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	685a      	ldr	r2, [r3, #4]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f29e:	605a      	str	r2, [r3, #4]
 800f2a0:	e007      	b.n	800f2b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	685a      	ldr	r2, [r3, #4]
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f2b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2bc:	2b40      	cmp	r3, #64	; 0x40
 800f2be:	d007      	beq.n	800f2d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f2ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f2d8:	d97c      	bls.n	800f3d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	685b      	ldr	r3, [r3, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <HAL_SPI_TransmitReceive+0x13e>
 800f2e2:	8a7b      	ldrh	r3, [r7, #18]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d169      	bne.n	800f3bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ec:	881a      	ldrh	r2, [r3, #0]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f8:	1c9a      	adds	r2, r3, #2
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f302:	b29b      	uxth	r3, r3
 800f304:	3b01      	subs	r3, #1
 800f306:	b29a      	uxth	r2, r3
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f30c:	e056      	b.n	800f3bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	f003 0302 	and.w	r3, r3, #2
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d11b      	bne.n	800f354 <HAL_SPI_TransmitReceive+0x1aa>
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f320:	b29b      	uxth	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	d016      	beq.n	800f354 <HAL_SPI_TransmitReceive+0x1aa>
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d113      	bne.n	800f354 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f330:	881a      	ldrh	r2, [r3, #0]
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f33c:	1c9a      	adds	r2, r3, #2
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f346:	b29b      	uxth	r3, r3
 800f348:	3b01      	subs	r3, #1
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f350:	2300      	movs	r3, #0
 800f352:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	689b      	ldr	r3, [r3, #8]
 800f35a:	f003 0301 	and.w	r3, r3, #1
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d11c      	bne.n	800f39c <HAL_SPI_TransmitReceive+0x1f2>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f368:	b29b      	uxth	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d016      	beq.n	800f39c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68da      	ldr	r2, [r3, #12]
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f378:	b292      	uxth	r2, r2
 800f37a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f380:	1c9a      	adds	r2, r3, #2
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	3b01      	subs	r3, #1
 800f390:	b29a      	uxth	r2, r3
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f398:	2301      	movs	r3, #1
 800f39a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f39c:	f7f7 fa26 	bl	80067ec <HAL_GetTick>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d807      	bhi.n	800f3bc <HAL_SPI_TransmitReceive+0x212>
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b2:	d003      	beq.n	800f3bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f3ba:	e0fb      	b.n	800f5b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d1a3      	bne.n	800f30e <HAL_SPI_TransmitReceive+0x164>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3cc:	b29b      	uxth	r3, r3
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d19d      	bne.n	800f30e <HAL_SPI_TransmitReceive+0x164>
 800f3d2:	e0df      	b.n	800f594 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d003      	beq.n	800f3e4 <HAL_SPI_TransmitReceive+0x23a>
 800f3dc:	8a7b      	ldrh	r3, [r7, #18]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	f040 80cb 	bne.w	800f57a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3e8:	b29b      	uxth	r3, r3
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d912      	bls.n	800f414 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f2:	881a      	ldrh	r2, [r3, #0]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fe:	1c9a      	adds	r2, r3, #2
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f408:	b29b      	uxth	r3, r3
 800f40a:	3b02      	subs	r3, #2
 800f40c:	b29a      	uxth	r2, r3
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f412:	e0b2      	b.n	800f57a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	330c      	adds	r3, #12
 800f41e:	7812      	ldrb	r2, [r2, #0]
 800f420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f430:	b29b      	uxth	r3, r3
 800f432:	3b01      	subs	r3, #1
 800f434:	b29a      	uxth	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f43a:	e09e      	b.n	800f57a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	f003 0302 	and.w	r3, r3, #2
 800f446:	2b02      	cmp	r3, #2
 800f448:	d134      	bne.n	800f4b4 <HAL_SPI_TransmitReceive+0x30a>
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f44e:	b29b      	uxth	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	d02f      	beq.n	800f4b4 <HAL_SPI_TransmitReceive+0x30a>
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	2b01      	cmp	r3, #1
 800f458:	d12c      	bne.n	800f4b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f45e:	b29b      	uxth	r3, r3
 800f460:	2b01      	cmp	r3, #1
 800f462:	d912      	bls.n	800f48a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f468:	881a      	ldrh	r2, [r3, #0]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f474:	1c9a      	adds	r2, r3, #2
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f47e:	b29b      	uxth	r3, r3
 800f480:	3b02      	subs	r3, #2
 800f482:	b29a      	uxth	r2, r3
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f488:	e012      	b.n	800f4b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	330c      	adds	r3, #12
 800f494:	7812      	ldrb	r2, [r2, #0]
 800f496:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f49c:	1c5a      	adds	r2, r3, #1
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	f003 0301 	and.w	r3, r3, #1
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d148      	bne.n	800f554 <HAL_SPI_TransmitReceive+0x3aa>
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d042      	beq.n	800f554 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d923      	bls.n	800f522 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	68da      	ldr	r2, [r3, #12]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4e4:	b292      	uxth	r2, r2
 800f4e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4ec:	1c9a      	adds	r2, r3, #2
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	3b02      	subs	r3, #2
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d81f      	bhi.n	800f550 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f51e:	605a      	str	r2, [r3, #4]
 800f520:	e016      	b.n	800f550 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f103 020c 	add.w	r2, r3, #12
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f52e:	7812      	ldrb	r2, [r2, #0]
 800f530:	b2d2      	uxtb	r2, r2
 800f532:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f538:	1c5a      	adds	r2, r3, #1
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f544:	b29b      	uxth	r3, r3
 800f546:	3b01      	subs	r3, #1
 800f548:	b29a      	uxth	r2, r3
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f550:	2301      	movs	r3, #1
 800f552:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f554:	f7f7 f94a 	bl	80067ec <HAL_GetTick>
 800f558:	4602      	mov	r2, r0
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	1ad3      	subs	r3, r2, r3
 800f55e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f560:	429a      	cmp	r2, r3
 800f562:	d803      	bhi.n	800f56c <HAL_SPI_TransmitReceive+0x3c2>
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f56a:	d102      	bne.n	800f572 <HAL_SPI_TransmitReceive+0x3c8>
 800f56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d103      	bne.n	800f57a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800f572:	2303      	movs	r3, #3
 800f574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f578:	e01c      	b.n	800f5b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f57e:	b29b      	uxth	r3, r3
 800f580:	2b00      	cmp	r3, #0
 800f582:	f47f af5b 	bne.w	800f43c <HAL_SPI_TransmitReceive+0x292>
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	f47f af54 	bne.w	800f43c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f594:	69fa      	ldr	r2, [r7, #28]
 800f596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f000 fabd 	bl	800fb18 <SPI_EndRxTxTransaction>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d006      	beq.n	800f5b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2220      	movs	r2, #32
 800f5ae:	661a      	str	r2, [r3, #96]	; 0x60
 800f5b0:	e000      	b.n	800f5b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800f5b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f5c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3728      	adds	r7, #40	; 0x28
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b088      	sub	sp, #32
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	689b      	ldr	r3, [r3, #8]
 800f5e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f5e8:	69bb      	ldr	r3, [r7, #24]
 800f5ea:	099b      	lsrs	r3, r3, #6
 800f5ec:	f003 0301 	and.w	r3, r3, #1
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10f      	bne.n	800f614 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00a      	beq.n	800f614 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	099b      	lsrs	r3, r3, #6
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	2b00      	cmp	r3, #0
 800f608:	d004      	beq.n	800f614 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	4798      	blx	r3
    return;
 800f612:	e0d7      	b.n	800f7c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800f614:	69bb      	ldr	r3, [r7, #24]
 800f616:	085b      	lsrs	r3, r3, #1
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00a      	beq.n	800f636 <HAL_SPI_IRQHandler+0x66>
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	09db      	lsrs	r3, r3, #7
 800f624:	f003 0301 	and.w	r3, r3, #1
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d004      	beq.n	800f636 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	4798      	blx	r3
    return;
 800f634:	e0c6      	b.n	800f7c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	095b      	lsrs	r3, r3, #5
 800f63a:	f003 0301 	and.w	r3, r3, #1
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d10c      	bne.n	800f65c <HAL_SPI_IRQHandler+0x8c>
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	099b      	lsrs	r3, r3, #6
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d106      	bne.n	800f65c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	0a1b      	lsrs	r3, r3, #8
 800f652:	f003 0301 	and.w	r3, r3, #1
 800f656:	2b00      	cmp	r3, #0
 800f658:	f000 80b4 	beq.w	800f7c4 <HAL_SPI_IRQHandler+0x1f4>
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	095b      	lsrs	r3, r3, #5
 800f660:	f003 0301 	and.w	r3, r3, #1
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 80ad 	beq.w	800f7c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	099b      	lsrs	r3, r3, #6
 800f66e:	f003 0301 	and.w	r3, r3, #1
 800f672:	2b00      	cmp	r3, #0
 800f674:	d023      	beq.n	800f6be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b03      	cmp	r3, #3
 800f680:	d011      	beq.n	800f6a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f686:	f043 0204 	orr.w	r2, r3, #4
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f68e:	2300      	movs	r3, #0
 800f690:	617b      	str	r3, [r7, #20]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	617b      	str	r3, [r7, #20]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	689b      	ldr	r3, [r3, #8]
 800f6a0:	617b      	str	r3, [r7, #20]
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	e00b      	b.n	800f6be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	613b      	str	r3, [r7, #16]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	613b      	str	r3, [r7, #16]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	613b      	str	r3, [r7, #16]
 800f6ba:	693b      	ldr	r3, [r7, #16]
        return;
 800f6bc:	e082      	b.n	800f7c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	095b      	lsrs	r3, r3, #5
 800f6c2:	f003 0301 	and.w	r3, r3, #1
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d014      	beq.n	800f6f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f6ce:	f043 0201 	orr.w	r2, r3, #1
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60fb      	str	r3, [r7, #12]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	60fb      	str	r3, [r7, #12]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6f0:	601a      	str	r2, [r3, #0]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	0a1b      	lsrs	r3, r3, #8
 800f6f8:	f003 0301 	and.w	r3, r3, #1
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00c      	beq.n	800f71a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f704:	f043 0208 	orr.w	r2, r3, #8
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f70c:	2300      	movs	r3, #0
 800f70e:	60bb      	str	r3, [r7, #8]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	60bb      	str	r3, [r7, #8]
 800f718:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d04f      	beq.n	800f7c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f730:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2201      	movs	r2, #1
 800f736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	f003 0302 	and.w	r3, r3, #2
 800f740:	2b00      	cmp	r3, #0
 800f742:	d104      	bne.n	800f74e <HAL_SPI_IRQHandler+0x17e>
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	f003 0301 	and.w	r3, r3, #1
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d034      	beq.n	800f7b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	685a      	ldr	r2, [r3, #4]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f022 0203 	bic.w	r2, r2, #3
 800f75c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f762:	2b00      	cmp	r3, #0
 800f764:	d011      	beq.n	800f78a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f76a:	4a18      	ldr	r2, [pc, #96]	; (800f7cc <HAL_SPI_IRQHandler+0x1fc>)
 800f76c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f772:	4618      	mov	r0, r3
 800f774:	f7f8 ff5a 	bl	800862c <HAL_DMA_Abort_IT>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d005      	beq.n	800f78a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d016      	beq.n	800f7c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f796:	4a0d      	ldr	r2, [pc, #52]	; (800f7cc <HAL_SPI_IRQHandler+0x1fc>)
 800f798:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7f8 ff44 	bl	800862c <HAL_DMA_Abort_IT>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00a      	beq.n	800f7c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800f7b6:	e003      	b.n	800f7c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 f809 	bl	800f7d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f7be:	e000      	b.n	800f7c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800f7c0:	bf00      	nop
    return;
 800f7c2:	bf00      	nop
  }
}
 800f7c4:	3720      	adds	r7, #32
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	bf00      	nop
 800f7cc:	0800f801 	.word	0x0800f801

0800f7d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f7d8:	bf00      	nop
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e2:	4770      	bx	lr

0800f7e4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f7f2:	b2db      	uxtb	r3, r3
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	370c      	adds	r7, #12
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b084      	sub	sp, #16
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f80c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2200      	movs	r2, #0
 800f812:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2200      	movs	r2, #0
 800f81a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f7ff ffd7 	bl	800f7d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f822:	bf00      	nop
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
	...

0800f82c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b088      	sub	sp, #32
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	603b      	str	r3, [r7, #0]
 800f838:	4613      	mov	r3, r2
 800f83a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f83c:	f7f6 ffd6 	bl	80067ec <HAL_GetTick>
 800f840:	4602      	mov	r2, r0
 800f842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f844:	1a9b      	subs	r3, r3, r2
 800f846:	683a      	ldr	r2, [r7, #0]
 800f848:	4413      	add	r3, r2
 800f84a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f84c:	f7f6 ffce 	bl	80067ec <HAL_GetTick>
 800f850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f852:	4b39      	ldr	r3, [pc, #228]	; (800f938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	015b      	lsls	r3, r3, #5
 800f858:	0d1b      	lsrs	r3, r3, #20
 800f85a:	69fa      	ldr	r2, [r7, #28]
 800f85c:	fb02 f303 	mul.w	r3, r2, r3
 800f860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f862:	e054      	b.n	800f90e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f86a:	d050      	beq.n	800f90e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f86c:	f7f6 ffbe 	bl	80067ec <HAL_GetTick>
 800f870:	4602      	mov	r2, r0
 800f872:	69bb      	ldr	r3, [r7, #24]
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	69fa      	ldr	r2, [r7, #28]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d902      	bls.n	800f882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d13d      	bne.n	800f8fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	685a      	ldr	r2, [r3, #4]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f89a:	d111      	bne.n	800f8c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8a4:	d004      	beq.n	800f8b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8ae:	d107      	bne.n	800f8c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8c8:	d10f      	bne.n	800f8ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	681a      	ldr	r2, [r3, #0]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f8d8:	601a      	str	r2, [r3, #0]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2201      	movs	r2, #1
 800f8ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f8fa:	2303      	movs	r3, #3
 800f8fc:	e017      	b.n	800f92e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d101      	bne.n	800f908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f904:	2300      	movs	r3, #0
 800f906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	3b01      	subs	r3, #1
 800f90c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	689a      	ldr	r2, [r3, #8]
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	4013      	ands	r3, r2
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	bf0c      	ite	eq
 800f91e:	2301      	moveq	r3, #1
 800f920:	2300      	movne	r3, #0
 800f922:	b2db      	uxtb	r3, r3
 800f924:	461a      	mov	r2, r3
 800f926:	79fb      	ldrb	r3, [r7, #7]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d19b      	bne.n	800f864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3720      	adds	r7, #32
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20000000 	.word	0x20000000

0800f93c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b08a      	sub	sp, #40	; 0x28
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f94e:	f7f6 ff4d 	bl	80067ec <HAL_GetTick>
 800f952:	4602      	mov	r2, r0
 800f954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f956:	1a9b      	subs	r3, r3, r2
 800f958:	683a      	ldr	r2, [r7, #0]
 800f95a:	4413      	add	r3, r2
 800f95c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f95e:	f7f6 ff45 	bl	80067ec <HAL_GetTick>
 800f962:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	330c      	adds	r3, #12
 800f96a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f96c:	4b3d      	ldr	r3, [pc, #244]	; (800fa64 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f96e:	681a      	ldr	r2, [r3, #0]
 800f970:	4613      	mov	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4413      	add	r3, r2
 800f976:	00da      	lsls	r2, r3, #3
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	0d1b      	lsrs	r3, r3, #20
 800f97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f97e:	fb02 f303 	mul.w	r3, r2, r3
 800f982:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f984:	e060      	b.n	800fa48 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f98c:	d107      	bne.n	800f99e <SPI_WaitFifoStateUntilTimeout+0x62>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d104      	bne.n	800f99e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f99c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a4:	d050      	beq.n	800fa48 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f9a6:	f7f6 ff21 	bl	80067ec <HAL_GetTick>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	6a3b      	ldr	r3, [r7, #32]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d902      	bls.n	800f9bc <SPI_WaitFifoStateUntilTimeout+0x80>
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d13d      	bne.n	800fa38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f9ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f9d4:	d111      	bne.n	800f9fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9de:	d004      	beq.n	800f9ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f9e8:	d107      	bne.n	800f9fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa02:	d10f      	bne.n	800fa24 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fa12:	601a      	str	r2, [r3, #0]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800fa34:	2303      	movs	r3, #3
 800fa36:	e010      	b.n	800fa5a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d101      	bne.n	800fa42 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	689a      	ldr	r2, [r3, #8]
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	4013      	ands	r3, r2
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d196      	bne.n	800f986 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fa58:	2300      	movs	r3, #0
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3728      	adds	r7, #40	; 0x28
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	20000000 	.word	0x20000000

0800fa68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b086      	sub	sp, #24
 800fa6c:	af02      	add	r7, sp, #8
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fa7c:	d111      	bne.n	800faa2 <SPI_EndRxTransaction+0x3a>
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	689b      	ldr	r3, [r3, #8]
 800fa82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa86:	d004      	beq.n	800fa92 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	689b      	ldr	r3, [r3, #8]
 800fa8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa90:	d107      	bne.n	800faa2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	681a      	ldr	r2, [r3, #0]
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800faa0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	2200      	movs	r2, #0
 800faaa:	2180      	movs	r1, #128	; 0x80
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f7ff febd 	bl	800f82c <SPI_WaitFlagStateUntilTimeout>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d007      	beq.n	800fac8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fabc:	f043 0220 	orr.w	r2, r3, #32
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fac4:	2303      	movs	r3, #3
 800fac6:	e023      	b.n	800fb10 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fad0:	d11d      	bne.n	800fb0e <SPI_EndRxTransaction+0xa6>
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fada:	d004      	beq.n	800fae6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fae4:	d113      	bne.n	800fb0e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2200      	movs	r2, #0
 800faee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	f7ff ff22 	bl	800f93c <SPI_WaitFifoStateUntilTimeout>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d007      	beq.n	800fb0e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb02:	f043 0220 	orr.w	r2, r3, #32
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	e000      	b.n	800fb10 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b086      	sub	sp, #24
 800fb1c:	af02      	add	r7, sp, #8
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7ff ff03 	bl	800f93c <SPI_WaitFifoStateUntilTimeout>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d007      	beq.n	800fb4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb40:	f043 0220 	orr.w	r2, r3, #32
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb48:	2303      	movs	r3, #3
 800fb4a:	e027      	b.n	800fb9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	9300      	str	r3, [sp, #0]
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	2200      	movs	r2, #0
 800fb54:	2180      	movs	r1, #128	; 0x80
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f7ff fe68 	bl	800f82c <SPI_WaitFlagStateUntilTimeout>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d007      	beq.n	800fb72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb66:	f043 0220 	orr.w	r2, r3, #32
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e014      	b.n	800fb9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	9300      	str	r3, [sp, #0]
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800fb7e:	68f8      	ldr	r0, [r7, #12]
 800fb80:	f7ff fedc 	bl	800f93c <SPI_WaitFifoStateUntilTimeout>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d007      	beq.n	800fb9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb8e:	f043 0220 	orr.w	r2, r3, #32
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800fb96:	2303      	movs	r3, #3
 800fb98:	e000      	b.n	800fb9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fb9a:	2300      	movs	r3, #0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3710      	adds	r7, #16
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b082      	sub	sp, #8
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d101      	bne.n	800fbb6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e049      	b.n	800fc4a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d106      	bne.n	800fbd0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7f3 f8e8 	bl	8002da0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2202      	movs	r2, #2
 800fbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681a      	ldr	r2, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	3304      	adds	r3, #4
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	f000 fa74 	bl	80100d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2201      	movs	r2, #1
 800fc04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2201      	movs	r2, #1
 800fc14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2201      	movs	r2, #1
 800fc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2201      	movs	r2, #1
 800fc34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2201      	movs	r2, #1
 800fc3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2201      	movs	r2, #1
 800fc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc48:	2300      	movs	r3, #0
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3708      	adds	r7, #8
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}

0800fc52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b082      	sub	sp, #8
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d101      	bne.n	800fc64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fc60:	2301      	movs	r3, #1
 800fc62:	e049      	b.n	800fcf8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d106      	bne.n	800fc7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f7f3 f873 	bl	8002d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2202      	movs	r2, #2
 800fc82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	3304      	adds	r3, #4
 800fc8e:	4619      	mov	r1, r3
 800fc90:	4610      	mov	r0, r2
 800fc92:	f000 fa1d 	bl	80100d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2201      	movs	r2, #1
 800fca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2201      	movs	r2, #1
 800fcaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2201      	movs	r2, #1
 800fcb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2201      	movs	r2, #1
 800fcba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2201      	movs	r2, #1
 800fcca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2201      	movs	r2, #1
 800fcd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2201      	movs	r2, #1
 800fce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2201      	movs	r2, #1
 800fcea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d101      	bne.n	800fd14 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800fd10:	2301      	movs	r3, #1
 800fd12:	e041      	b.n	800fd98 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d106      	bne.n	800fd2e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f000 f839 	bl	800fda0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2202      	movs	r2, #2
 800fd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	3304      	adds	r3, #4
 800fd3e:	4619      	mov	r1, r3
 800fd40:	4610      	mov	r0, r2
 800fd42:	f000 f9c5 	bl	80100d0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f022 0208 	bic.w	r2, r2, #8
 800fd54:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	6819      	ldr	r1, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	683a      	ldr	r2, [r7, #0]
 800fd62:	430a      	orrs	r2, r1
 800fd64:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2201      	movs	r2, #1
 800fd72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2201      	movs	r2, #1
 800fd7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2201      	movs	r2, #1
 800fd82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2201      	movs	r2, #1
 800fd92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fd96:	2300      	movs	r3, #0
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800fda8:	bf00      	nop
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d101      	bne.n	800fdd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800fdce:	2302      	movs	r3, #2
 800fdd0:	e066      	b.n	800fea0 <HAL_TIM_OC_ConfigChannel+0xec>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2b14      	cmp	r3, #20
 800fdde:	d857      	bhi.n	800fe90 <HAL_TIM_OC_ConfigChannel+0xdc>
 800fde0:	a201      	add	r2, pc, #4	; (adr r2, 800fde8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800fde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde6:	bf00      	nop
 800fde8:	0800fe3d 	.word	0x0800fe3d
 800fdec:	0800fe91 	.word	0x0800fe91
 800fdf0:	0800fe91 	.word	0x0800fe91
 800fdf4:	0800fe91 	.word	0x0800fe91
 800fdf8:	0800fe4b 	.word	0x0800fe4b
 800fdfc:	0800fe91 	.word	0x0800fe91
 800fe00:	0800fe91 	.word	0x0800fe91
 800fe04:	0800fe91 	.word	0x0800fe91
 800fe08:	0800fe59 	.word	0x0800fe59
 800fe0c:	0800fe91 	.word	0x0800fe91
 800fe10:	0800fe91 	.word	0x0800fe91
 800fe14:	0800fe91 	.word	0x0800fe91
 800fe18:	0800fe67 	.word	0x0800fe67
 800fe1c:	0800fe91 	.word	0x0800fe91
 800fe20:	0800fe91 	.word	0x0800fe91
 800fe24:	0800fe91 	.word	0x0800fe91
 800fe28:	0800fe75 	.word	0x0800fe75
 800fe2c:	0800fe91 	.word	0x0800fe91
 800fe30:	0800fe91 	.word	0x0800fe91
 800fe34:	0800fe91 	.word	0x0800fe91
 800fe38:	0800fe83 	.word	0x0800fe83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68b9      	ldr	r1, [r7, #8]
 800fe42:	4618      	mov	r0, r3
 800fe44:	f000 f9de 	bl	8010204 <TIM_OC1_SetConfig>
      break;
 800fe48:	e025      	b.n	800fe96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68b9      	ldr	r1, [r7, #8]
 800fe50:	4618      	mov	r0, r3
 800fe52:	f000 fa67 	bl	8010324 <TIM_OC2_SetConfig>
      break;
 800fe56:	e01e      	b.n	800fe96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	68b9      	ldr	r1, [r7, #8]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f000 faea 	bl	8010438 <TIM_OC3_SetConfig>
      break;
 800fe64:	e017      	b.n	800fe96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	68b9      	ldr	r1, [r7, #8]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f000 fb6b 	bl	8010548 <TIM_OC4_SetConfig>
      break;
 800fe72:	e010      	b.n	800fe96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68b9      	ldr	r1, [r7, #8]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f000 fbce 	bl	801061c <TIM_OC5_SetConfig>
      break;
 800fe80:	e009      	b.n	800fe96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	68b9      	ldr	r1, [r7, #8]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 fc2b 	bl	80106e4 <TIM_OC6_SetConfig>
      break;
 800fe8e:	e002      	b.n	800fe96 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	75fb      	strb	r3, [r7, #23]
      break;
 800fe94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fe9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3718      	adds	r7, #24
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b086      	sub	sp, #24
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800feb4:	2300      	movs	r3, #0
 800feb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800febe:	2b01      	cmp	r3, #1
 800fec0:	d101      	bne.n	800fec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fec2:	2302      	movs	r3, #2
 800fec4:	e0ff      	b.n	80100c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	2201      	movs	r2, #1
 800feca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2b14      	cmp	r3, #20
 800fed2:	f200 80f0 	bhi.w	80100b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fed6:	a201      	add	r2, pc, #4	; (adr r2, 800fedc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fedc:	0800ff31 	.word	0x0800ff31
 800fee0:	080100b7 	.word	0x080100b7
 800fee4:	080100b7 	.word	0x080100b7
 800fee8:	080100b7 	.word	0x080100b7
 800feec:	0800ff71 	.word	0x0800ff71
 800fef0:	080100b7 	.word	0x080100b7
 800fef4:	080100b7 	.word	0x080100b7
 800fef8:	080100b7 	.word	0x080100b7
 800fefc:	0800ffb3 	.word	0x0800ffb3
 800ff00:	080100b7 	.word	0x080100b7
 800ff04:	080100b7 	.word	0x080100b7
 800ff08:	080100b7 	.word	0x080100b7
 800ff0c:	0800fff3 	.word	0x0800fff3
 800ff10:	080100b7 	.word	0x080100b7
 800ff14:	080100b7 	.word	0x080100b7
 800ff18:	080100b7 	.word	0x080100b7
 800ff1c:	08010035 	.word	0x08010035
 800ff20:	080100b7 	.word	0x080100b7
 800ff24:	080100b7 	.word	0x080100b7
 800ff28:	080100b7 	.word	0x080100b7
 800ff2c:	08010075 	.word	0x08010075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	68b9      	ldr	r1, [r7, #8]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f000 f964 	bl	8010204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	699a      	ldr	r2, [r3, #24]
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f042 0208 	orr.w	r2, r2, #8
 800ff4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	699a      	ldr	r2, [r3, #24]
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f022 0204 	bic.w	r2, r2, #4
 800ff5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	6999      	ldr	r1, [r3, #24]
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	691a      	ldr	r2, [r3, #16]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	430a      	orrs	r2, r1
 800ff6c:	619a      	str	r2, [r3, #24]
      break;
 800ff6e:	e0a5      	b.n	80100bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68b9      	ldr	r1, [r7, #8]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f000 f9d4 	bl	8010324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	699a      	ldr	r2, [r3, #24]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	699a      	ldr	r2, [r3, #24]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	6999      	ldr	r1, [r3, #24]
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	691b      	ldr	r3, [r3, #16]
 800ffa6:	021a      	lsls	r2, r3, #8
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	430a      	orrs	r2, r1
 800ffae:	619a      	str	r2, [r3, #24]
      break;
 800ffb0:	e084      	b.n	80100bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68b9      	ldr	r1, [r7, #8]
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f000 fa3d 	bl	8010438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	69da      	ldr	r2, [r3, #28]
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f042 0208 	orr.w	r2, r2, #8
 800ffcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	69da      	ldr	r2, [r3, #28]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f022 0204 	bic.w	r2, r2, #4
 800ffdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	69d9      	ldr	r1, [r3, #28]
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	691a      	ldr	r2, [r3, #16]
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	430a      	orrs	r2, r1
 800ffee:	61da      	str	r2, [r3, #28]
      break;
 800fff0:	e064      	b.n	80100bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68b9      	ldr	r1, [r7, #8]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f000 faa5 	bl	8010548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	69da      	ldr	r2, [r3, #28]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801000c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	69da      	ldr	r2, [r3, #28]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801001c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	69d9      	ldr	r1, [r3, #28]
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	021a      	lsls	r2, r3, #8
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	430a      	orrs	r2, r1
 8010030:	61da      	str	r2, [r3, #28]
      break;
 8010032:	e043      	b.n	80100bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	68b9      	ldr	r1, [r7, #8]
 801003a:	4618      	mov	r0, r3
 801003c:	f000 faee 	bl	801061c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f042 0208 	orr.w	r2, r2, #8
 801004e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f022 0204 	bic.w	r2, r2, #4
 801005e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	691a      	ldr	r2, [r3, #16]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	430a      	orrs	r2, r1
 8010070:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010072:	e023      	b.n	80100bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68b9      	ldr	r1, [r7, #8]
 801007a:	4618      	mov	r0, r3
 801007c:	f000 fb32 	bl	80106e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801008e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801009e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	021a      	lsls	r2, r3, #8
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	430a      	orrs	r2, r1
 80100b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80100b4:	e002      	b.n	80100bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80100b6:	2301      	movs	r3, #1
 80100b8:	75fb      	strb	r3, [r7, #23]
      break;
 80100ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2200      	movs	r2, #0
 80100c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80100c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3718      	adds	r7, #24
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop

080100d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	4a40      	ldr	r2, [pc, #256]	; (80101e4 <TIM_Base_SetConfig+0x114>)
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d013      	beq.n	8010110 <TIM_Base_SetConfig+0x40>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100ee:	d00f      	beq.n	8010110 <TIM_Base_SetConfig+0x40>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4a3d      	ldr	r2, [pc, #244]	; (80101e8 <TIM_Base_SetConfig+0x118>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d00b      	beq.n	8010110 <TIM_Base_SetConfig+0x40>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a3c      	ldr	r2, [pc, #240]	; (80101ec <TIM_Base_SetConfig+0x11c>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d007      	beq.n	8010110 <TIM_Base_SetConfig+0x40>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a3b      	ldr	r2, [pc, #236]	; (80101f0 <TIM_Base_SetConfig+0x120>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d003      	beq.n	8010110 <TIM_Base_SetConfig+0x40>
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	4a3a      	ldr	r2, [pc, #232]	; (80101f4 <TIM_Base_SetConfig+0x124>)
 801010c:	4293      	cmp	r3, r2
 801010e:	d108      	bne.n	8010122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	4313      	orrs	r3, r2
 8010120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4a2f      	ldr	r2, [pc, #188]	; (80101e4 <TIM_Base_SetConfig+0x114>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d01f      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010130:	d01b      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4a2c      	ldr	r2, [pc, #176]	; (80101e8 <TIM_Base_SetConfig+0x118>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d017      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4a2b      	ldr	r2, [pc, #172]	; (80101ec <TIM_Base_SetConfig+0x11c>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d013      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	4a2a      	ldr	r2, [pc, #168]	; (80101f0 <TIM_Base_SetConfig+0x120>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d00f      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	4a29      	ldr	r2, [pc, #164]	; (80101f4 <TIM_Base_SetConfig+0x124>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d00b      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	4a28      	ldr	r2, [pc, #160]	; (80101f8 <TIM_Base_SetConfig+0x128>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d007      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4a27      	ldr	r2, [pc, #156]	; (80101fc <TIM_Base_SetConfig+0x12c>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d003      	beq.n	801016a <TIM_Base_SetConfig+0x9a>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4a26      	ldr	r2, [pc, #152]	; (8010200 <TIM_Base_SetConfig+0x130>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d108      	bne.n	801017c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	4313      	orrs	r3, r2
 801017a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	695b      	ldr	r3, [r3, #20]
 8010186:	4313      	orrs	r3, r2
 8010188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	68fa      	ldr	r2, [r7, #12]
 801018e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	689a      	ldr	r2, [r3, #8]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4a10      	ldr	r2, [pc, #64]	; (80101e4 <TIM_Base_SetConfig+0x114>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d00f      	beq.n	80101c8 <TIM_Base_SetConfig+0xf8>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	4a12      	ldr	r2, [pc, #72]	; (80101f4 <TIM_Base_SetConfig+0x124>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d00b      	beq.n	80101c8 <TIM_Base_SetConfig+0xf8>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4a11      	ldr	r2, [pc, #68]	; (80101f8 <TIM_Base_SetConfig+0x128>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d007      	beq.n	80101c8 <TIM_Base_SetConfig+0xf8>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	4a10      	ldr	r2, [pc, #64]	; (80101fc <TIM_Base_SetConfig+0x12c>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d003      	beq.n	80101c8 <TIM_Base_SetConfig+0xf8>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a0f      	ldr	r2, [pc, #60]	; (8010200 <TIM_Base_SetConfig+0x130>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d103      	bne.n	80101d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	691a      	ldr	r2, [r3, #16]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2201      	movs	r2, #1
 80101d4:	615a      	str	r2, [r3, #20]
}
 80101d6:	bf00      	nop
 80101d8:	3714      	adds	r7, #20
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	40012c00 	.word	0x40012c00
 80101e8:	40000400 	.word	0x40000400
 80101ec:	40000800 	.word	0x40000800
 80101f0:	40000c00 	.word	0x40000c00
 80101f4:	40013400 	.word	0x40013400
 80101f8:	40014000 	.word	0x40014000
 80101fc:	40014400 	.word	0x40014400
 8010200:	40014800 	.word	0x40014800

08010204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010204:	b480      	push	{r7}
 8010206:	b087      	sub	sp, #28
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6a1b      	ldr	r3, [r3, #32]
 8010212:	f023 0201 	bic.w	r2, r3, #1
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6a1b      	ldr	r3, [r3, #32]
 801021e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	699b      	ldr	r3, [r3, #24]
 801022a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f023 0303 	bic.w	r3, r3, #3
 801023e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	4313      	orrs	r3, r2
 8010248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	f023 0302 	bic.w	r3, r3, #2
 8010250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	689b      	ldr	r3, [r3, #8]
 8010256:	697a      	ldr	r2, [r7, #20]
 8010258:	4313      	orrs	r3, r2
 801025a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4a2c      	ldr	r2, [pc, #176]	; (8010310 <TIM_OC1_SetConfig+0x10c>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d00f      	beq.n	8010284 <TIM_OC1_SetConfig+0x80>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	4a2b      	ldr	r2, [pc, #172]	; (8010314 <TIM_OC1_SetConfig+0x110>)
 8010268:	4293      	cmp	r3, r2
 801026a:	d00b      	beq.n	8010284 <TIM_OC1_SetConfig+0x80>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	4a2a      	ldr	r2, [pc, #168]	; (8010318 <TIM_OC1_SetConfig+0x114>)
 8010270:	4293      	cmp	r3, r2
 8010272:	d007      	beq.n	8010284 <TIM_OC1_SetConfig+0x80>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	4a29      	ldr	r2, [pc, #164]	; (801031c <TIM_OC1_SetConfig+0x118>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d003      	beq.n	8010284 <TIM_OC1_SetConfig+0x80>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	4a28      	ldr	r2, [pc, #160]	; (8010320 <TIM_OC1_SetConfig+0x11c>)
 8010280:	4293      	cmp	r3, r2
 8010282:	d10c      	bne.n	801029e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	f023 0308 	bic.w	r3, r3, #8
 801028a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	697a      	ldr	r2, [r7, #20]
 8010292:	4313      	orrs	r3, r2
 8010294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	f023 0304 	bic.w	r3, r3, #4
 801029c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a1b      	ldr	r2, [pc, #108]	; (8010310 <TIM_OC1_SetConfig+0x10c>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d00f      	beq.n	80102c6 <TIM_OC1_SetConfig+0xc2>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a1a      	ldr	r2, [pc, #104]	; (8010314 <TIM_OC1_SetConfig+0x110>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d00b      	beq.n	80102c6 <TIM_OC1_SetConfig+0xc2>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4a19      	ldr	r2, [pc, #100]	; (8010318 <TIM_OC1_SetConfig+0x114>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d007      	beq.n	80102c6 <TIM_OC1_SetConfig+0xc2>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	4a18      	ldr	r2, [pc, #96]	; (801031c <TIM_OC1_SetConfig+0x118>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d003      	beq.n	80102c6 <TIM_OC1_SetConfig+0xc2>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	4a17      	ldr	r2, [pc, #92]	; (8010320 <TIM_OC1_SetConfig+0x11c>)
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d111      	bne.n	80102ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80102d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	695b      	ldr	r3, [r3, #20]
 80102da:	693a      	ldr	r2, [r7, #16]
 80102dc:	4313      	orrs	r3, r2
 80102de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	699b      	ldr	r3, [r3, #24]
 80102e4:	693a      	ldr	r2, [r7, #16]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	693a      	ldr	r2, [r7, #16]
 80102ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	697a      	ldr	r2, [r7, #20]
 8010302:	621a      	str	r2, [r3, #32]
}
 8010304:	bf00      	nop
 8010306:	371c      	adds	r7, #28
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	40012c00 	.word	0x40012c00
 8010314:	40013400 	.word	0x40013400
 8010318:	40014000 	.word	0x40014000
 801031c:	40014400 	.word	0x40014400
 8010320:	40014800 	.word	0x40014800

08010324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010324:	b480      	push	{r7}
 8010326:	b087      	sub	sp, #28
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6a1b      	ldr	r3, [r3, #32]
 8010332:	f023 0210 	bic.w	r2, r3, #16
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6a1b      	ldr	r3, [r3, #32]
 801033e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	699b      	ldr	r3, [r3, #24]
 801034a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801035e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	021b      	lsls	r3, r3, #8
 8010366:	68fa      	ldr	r2, [r7, #12]
 8010368:	4313      	orrs	r3, r2
 801036a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	f023 0320 	bic.w	r3, r3, #32
 8010372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010374:	683b      	ldr	r3, [r7, #0]
 8010376:	689b      	ldr	r3, [r3, #8]
 8010378:	011b      	lsls	r3, r3, #4
 801037a:	697a      	ldr	r2, [r7, #20]
 801037c:	4313      	orrs	r3, r2
 801037e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a28      	ldr	r2, [pc, #160]	; (8010424 <TIM_OC2_SetConfig+0x100>)
 8010384:	4293      	cmp	r3, r2
 8010386:	d003      	beq.n	8010390 <TIM_OC2_SetConfig+0x6c>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a27      	ldr	r2, [pc, #156]	; (8010428 <TIM_OC2_SetConfig+0x104>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d10d      	bne.n	80103ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	011b      	lsls	r3, r3, #4
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	4313      	orrs	r3, r2
 80103a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4a1d      	ldr	r2, [pc, #116]	; (8010424 <TIM_OC2_SetConfig+0x100>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d00f      	beq.n	80103d4 <TIM_OC2_SetConfig+0xb0>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	4a1c      	ldr	r2, [pc, #112]	; (8010428 <TIM_OC2_SetConfig+0x104>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d00b      	beq.n	80103d4 <TIM_OC2_SetConfig+0xb0>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	4a1b      	ldr	r2, [pc, #108]	; (801042c <TIM_OC2_SetConfig+0x108>)
 80103c0:	4293      	cmp	r3, r2
 80103c2:	d007      	beq.n	80103d4 <TIM_OC2_SetConfig+0xb0>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	4a1a      	ldr	r2, [pc, #104]	; (8010430 <TIM_OC2_SetConfig+0x10c>)
 80103c8:	4293      	cmp	r3, r2
 80103ca:	d003      	beq.n	80103d4 <TIM_OC2_SetConfig+0xb0>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	4a19      	ldr	r2, [pc, #100]	; (8010434 <TIM_OC2_SetConfig+0x110>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d113      	bne.n	80103fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80103da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80103e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	695b      	ldr	r3, [r3, #20]
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	693a      	ldr	r2, [r7, #16]
 80103ec:	4313      	orrs	r3, r2
 80103ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80103f0:	683b      	ldr	r3, [r7, #0]
 80103f2:	699b      	ldr	r3, [r3, #24]
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	693a      	ldr	r2, [r7, #16]
 80103f8:	4313      	orrs	r3, r2
 80103fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	693a      	ldr	r2, [r7, #16]
 8010400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	685a      	ldr	r2, [r3, #4]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	697a      	ldr	r2, [r7, #20]
 8010414:	621a      	str	r2, [r3, #32]
}
 8010416:	bf00      	nop
 8010418:	371c      	adds	r7, #28
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	40012c00 	.word	0x40012c00
 8010428:	40013400 	.word	0x40013400
 801042c:	40014000 	.word	0x40014000
 8010430:	40014400 	.word	0x40014400
 8010434:	40014800 	.word	0x40014800

08010438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010438:	b480      	push	{r7}
 801043a:	b087      	sub	sp, #28
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a1b      	ldr	r3, [r3, #32]
 8010446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6a1b      	ldr	r3, [r3, #32]
 8010452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	69db      	ldr	r3, [r3, #28]
 801045e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801046a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f023 0303 	bic.w	r3, r3, #3
 8010472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	4313      	orrs	r3, r2
 801047c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	689b      	ldr	r3, [r3, #8]
 801048a:	021b      	lsls	r3, r3, #8
 801048c:	697a      	ldr	r2, [r7, #20]
 801048e:	4313      	orrs	r3, r2
 8010490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4a27      	ldr	r2, [pc, #156]	; (8010534 <TIM_OC3_SetConfig+0xfc>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d003      	beq.n	80104a2 <TIM_OC3_SetConfig+0x6a>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a26      	ldr	r2, [pc, #152]	; (8010538 <TIM_OC3_SetConfig+0x100>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d10d      	bne.n	80104be <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	021b      	lsls	r3, r3, #8
 80104b0:	697a      	ldr	r2, [r7, #20]
 80104b2:	4313      	orrs	r3, r2
 80104b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80104bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	4a1c      	ldr	r2, [pc, #112]	; (8010534 <TIM_OC3_SetConfig+0xfc>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d00f      	beq.n	80104e6 <TIM_OC3_SetConfig+0xae>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4a1b      	ldr	r2, [pc, #108]	; (8010538 <TIM_OC3_SetConfig+0x100>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d00b      	beq.n	80104e6 <TIM_OC3_SetConfig+0xae>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4a1a      	ldr	r2, [pc, #104]	; (801053c <TIM_OC3_SetConfig+0x104>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d007      	beq.n	80104e6 <TIM_OC3_SetConfig+0xae>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4a19      	ldr	r2, [pc, #100]	; (8010540 <TIM_OC3_SetConfig+0x108>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	d003      	beq.n	80104e6 <TIM_OC3_SetConfig+0xae>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4a18      	ldr	r2, [pc, #96]	; (8010544 <TIM_OC3_SetConfig+0x10c>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d113      	bne.n	801050e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	695b      	ldr	r3, [r3, #20]
 80104fa:	011b      	lsls	r3, r3, #4
 80104fc:	693a      	ldr	r2, [r7, #16]
 80104fe:	4313      	orrs	r3, r2
 8010500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	699b      	ldr	r3, [r3, #24]
 8010506:	011b      	lsls	r3, r3, #4
 8010508:	693a      	ldr	r2, [r7, #16]
 801050a:	4313      	orrs	r3, r2
 801050c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	693a      	ldr	r2, [r7, #16]
 8010512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	685a      	ldr	r2, [r3, #4]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	697a      	ldr	r2, [r7, #20]
 8010526:	621a      	str	r2, [r3, #32]
}
 8010528:	bf00      	nop
 801052a:	371c      	adds	r7, #28
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr
 8010534:	40012c00 	.word	0x40012c00
 8010538:	40013400 	.word	0x40013400
 801053c:	40014000 	.word	0x40014000
 8010540:	40014400 	.word	0x40014400
 8010544:	40014800 	.word	0x40014800

08010548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010548:	b480      	push	{r7}
 801054a:	b087      	sub	sp, #28
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
 8010550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6a1b      	ldr	r3, [r3, #32]
 8010556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a1b      	ldr	r3, [r3, #32]
 8010562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	69db      	ldr	r3, [r3, #28]
 801056e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801057a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	021b      	lsls	r3, r3, #8
 801058a:	68fa      	ldr	r2, [r7, #12]
 801058c:	4313      	orrs	r3, r2
 801058e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010596:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	031b      	lsls	r3, r3, #12
 801059e:	693a      	ldr	r2, [r7, #16]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4a18      	ldr	r2, [pc, #96]	; (8010608 <TIM_OC4_SetConfig+0xc0>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d00f      	beq.n	80105cc <TIM_OC4_SetConfig+0x84>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a17      	ldr	r2, [pc, #92]	; (801060c <TIM_OC4_SetConfig+0xc4>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d00b      	beq.n	80105cc <TIM_OC4_SetConfig+0x84>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4a16      	ldr	r2, [pc, #88]	; (8010610 <TIM_OC4_SetConfig+0xc8>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d007      	beq.n	80105cc <TIM_OC4_SetConfig+0x84>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4a15      	ldr	r2, [pc, #84]	; (8010614 <TIM_OC4_SetConfig+0xcc>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d003      	beq.n	80105cc <TIM_OC4_SetConfig+0x84>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	4a14      	ldr	r2, [pc, #80]	; (8010618 <TIM_OC4_SetConfig+0xd0>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d109      	bne.n	80105e0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80105d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	695b      	ldr	r3, [r3, #20]
 80105d8:	019b      	lsls	r3, r3, #6
 80105da:	697a      	ldr	r2, [r7, #20]
 80105dc:	4313      	orrs	r3, r2
 80105de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	697a      	ldr	r2, [r7, #20]
 80105e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	685a      	ldr	r2, [r3, #4]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	693a      	ldr	r2, [r7, #16]
 80105f8:	621a      	str	r2, [r3, #32]
}
 80105fa:	bf00      	nop
 80105fc:	371c      	adds	r7, #28
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
 8010606:	bf00      	nop
 8010608:	40012c00 	.word	0x40012c00
 801060c:	40013400 	.word	0x40013400
 8010610:	40014000 	.word	0x40014000
 8010614:	40014400 	.word	0x40014400
 8010618:	40014800 	.word	0x40014800

0801061c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801061c:	b480      	push	{r7}
 801061e:	b087      	sub	sp, #28
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6a1b      	ldr	r3, [r3, #32]
 801062a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6a1b      	ldr	r3, [r3, #32]
 8010636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801064a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801064e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	4313      	orrs	r3, r2
 8010658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010660:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	041b      	lsls	r3, r3, #16
 8010668:	693a      	ldr	r2, [r7, #16]
 801066a:	4313      	orrs	r3, r2
 801066c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4a17      	ldr	r2, [pc, #92]	; (80106d0 <TIM_OC5_SetConfig+0xb4>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d00f      	beq.n	8010696 <TIM_OC5_SetConfig+0x7a>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	4a16      	ldr	r2, [pc, #88]	; (80106d4 <TIM_OC5_SetConfig+0xb8>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d00b      	beq.n	8010696 <TIM_OC5_SetConfig+0x7a>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	4a15      	ldr	r2, [pc, #84]	; (80106d8 <TIM_OC5_SetConfig+0xbc>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d007      	beq.n	8010696 <TIM_OC5_SetConfig+0x7a>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4a14      	ldr	r2, [pc, #80]	; (80106dc <TIM_OC5_SetConfig+0xc0>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d003      	beq.n	8010696 <TIM_OC5_SetConfig+0x7a>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a13      	ldr	r2, [pc, #76]	; (80106e0 <TIM_OC5_SetConfig+0xc4>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d109      	bne.n	80106aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801069c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	695b      	ldr	r3, [r3, #20]
 80106a2:	021b      	lsls	r3, r3, #8
 80106a4:	697a      	ldr	r2, [r7, #20]
 80106a6:	4313      	orrs	r3, r2
 80106a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	685a      	ldr	r2, [r3, #4]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	621a      	str	r2, [r3, #32]
}
 80106c4:	bf00      	nop
 80106c6:	371c      	adds	r7, #28
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr
 80106d0:	40012c00 	.word	0x40012c00
 80106d4:	40013400 	.word	0x40013400
 80106d8:	40014000 	.word	0x40014000
 80106dc:	40014400 	.word	0x40014400
 80106e0:	40014800 	.word	0x40014800

080106e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b087      	sub	sp, #28
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a1b      	ldr	r3, [r3, #32]
 80106f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6a1b      	ldr	r3, [r3, #32]
 80106fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801070a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	021b      	lsls	r3, r3, #8
 801071e:	68fa      	ldr	r2, [r7, #12]
 8010720:	4313      	orrs	r3, r2
 8010722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801072a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	689b      	ldr	r3, [r3, #8]
 8010730:	051b      	lsls	r3, r3, #20
 8010732:	693a      	ldr	r2, [r7, #16]
 8010734:	4313      	orrs	r3, r2
 8010736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	4a18      	ldr	r2, [pc, #96]	; (801079c <TIM_OC6_SetConfig+0xb8>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d00f      	beq.n	8010760 <TIM_OC6_SetConfig+0x7c>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	4a17      	ldr	r2, [pc, #92]	; (80107a0 <TIM_OC6_SetConfig+0xbc>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d00b      	beq.n	8010760 <TIM_OC6_SetConfig+0x7c>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	4a16      	ldr	r2, [pc, #88]	; (80107a4 <TIM_OC6_SetConfig+0xc0>)
 801074c:	4293      	cmp	r3, r2
 801074e:	d007      	beq.n	8010760 <TIM_OC6_SetConfig+0x7c>
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	4a15      	ldr	r2, [pc, #84]	; (80107a8 <TIM_OC6_SetConfig+0xc4>)
 8010754:	4293      	cmp	r3, r2
 8010756:	d003      	beq.n	8010760 <TIM_OC6_SetConfig+0x7c>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4a14      	ldr	r2, [pc, #80]	; (80107ac <TIM_OC6_SetConfig+0xc8>)
 801075c:	4293      	cmp	r3, r2
 801075e:	d109      	bne.n	8010774 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010766:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	695b      	ldr	r3, [r3, #20]
 801076c:	029b      	lsls	r3, r3, #10
 801076e:	697a      	ldr	r2, [r7, #20]
 8010770:	4313      	orrs	r3, r2
 8010772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	697a      	ldr	r2, [r7, #20]
 8010778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	68fa      	ldr	r2, [r7, #12]
 801077e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	685a      	ldr	r2, [r3, #4]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	693a      	ldr	r2, [r7, #16]
 801078c:	621a      	str	r2, [r3, #32]
}
 801078e:	bf00      	nop
 8010790:	371c      	adds	r7, #28
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	40012c00 	.word	0x40012c00
 80107a0:	40013400 	.word	0x40013400
 80107a4:	40014000 	.word	0x40014000
 80107a8:	40014400 	.word	0x40014400
 80107ac:	40014800 	.word	0x40014800

080107b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b085      	sub	sp, #20
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d101      	bne.n	80107c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80107c4:	2302      	movs	r3, #2
 80107c6:	e068      	b.n	801089a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2201      	movs	r2, #1
 80107cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2202      	movs	r2, #2
 80107d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	689b      	ldr	r3, [r3, #8]
 80107e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	4a2e      	ldr	r2, [pc, #184]	; (80108a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d004      	beq.n	80107fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4a2d      	ldr	r2, [pc, #180]	; (80108ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d108      	bne.n	801080e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010802:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	68fa      	ldr	r2, [r7, #12]
 801080a:	4313      	orrs	r3, r2
 801080c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	68fa      	ldr	r2, [r7, #12]
 801081c:	4313      	orrs	r3, r2
 801081e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4a1e      	ldr	r2, [pc, #120]	; (80108a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d01d      	beq.n	801086e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801083a:	d018      	beq.n	801086e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	4a1b      	ldr	r2, [pc, #108]	; (80108b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d013      	beq.n	801086e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4a1a      	ldr	r2, [pc, #104]	; (80108b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801084c:	4293      	cmp	r3, r2
 801084e:	d00e      	beq.n	801086e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4a18      	ldr	r2, [pc, #96]	; (80108b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010856:	4293      	cmp	r3, r2
 8010858:	d009      	beq.n	801086e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4a13      	ldr	r2, [pc, #76]	; (80108ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010860:	4293      	cmp	r3, r2
 8010862:	d004      	beq.n	801086e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	4a14      	ldr	r2, [pc, #80]	; (80108bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d10c      	bne.n	8010888 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	68ba      	ldr	r2, [r7, #8]
 801087c:	4313      	orrs	r3, r2
 801087e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	68ba      	ldr	r2, [r7, #8]
 8010886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2201      	movs	r2, #1
 801088c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	3714      	adds	r7, #20
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop
 80108a8:	40012c00 	.word	0x40012c00
 80108ac:	40013400 	.word	0x40013400
 80108b0:	40000400 	.word	0x40000400
 80108b4:	40000800 	.word	0x40000800
 80108b8:	40000c00 	.word	0x40000c00
 80108bc:	40014000 	.word	0x40014000

080108c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d101      	bne.n	80108d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80108ce:	2301      	movs	r3, #1
 80108d0:	e042      	b.n	8010958 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d106      	bne.n	80108ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7f2 fad7 	bl	8002e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2224      	movs	r2, #36	; 0x24
 80108ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f022 0201 	bic.w	r2, r2, #1
 8010900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 f82c 	bl	8010960 <UART_SetConfig>
 8010908:	4603      	mov	r3, r0
 801090a:	2b01      	cmp	r3, #1
 801090c:	d101      	bne.n	8010912 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801090e:	2301      	movs	r3, #1
 8010910:	e022      	b.n	8010958 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010916:	2b00      	cmp	r3, #0
 8010918:	d002      	beq.n	8010920 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fb1c 	bl	8010f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	685a      	ldr	r2, [r3, #4]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801092e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	689a      	ldr	r2, [r3, #8]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801093e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	681a      	ldr	r2, [r3, #0]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f042 0201 	orr.w	r2, r2, #1
 801094e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 fba3 	bl	801109c <UART_CheckIdleState>
 8010956:	4603      	mov	r3, r0
}
 8010958:	4618      	mov	r0, r3
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010964:	b08c      	sub	sp, #48	; 0x30
 8010966:	af00      	add	r7, sp, #0
 8010968:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801096a:	2300      	movs	r3, #0
 801096c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	689a      	ldr	r2, [r3, #8]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	691b      	ldr	r3, [r3, #16]
 8010978:	431a      	orrs	r2, r3
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	695b      	ldr	r3, [r3, #20]
 801097e:	431a      	orrs	r2, r3
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	69db      	ldr	r3, [r3, #28]
 8010984:	4313      	orrs	r3, r2
 8010986:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	4baa      	ldr	r3, [pc, #680]	; (8010c38 <UART_SetConfig+0x2d8>)
 8010990:	4013      	ands	r3, r2
 8010992:	697a      	ldr	r2, [r7, #20]
 8010994:	6812      	ldr	r2, [r2, #0]
 8010996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010998:	430b      	orrs	r3, r1
 801099a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	685b      	ldr	r3, [r3, #4]
 80109a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	68da      	ldr	r2, [r3, #12]
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	430a      	orrs	r2, r1
 80109b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	699b      	ldr	r3, [r3, #24]
 80109b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a9f      	ldr	r2, [pc, #636]	; (8010c3c <UART_SetConfig+0x2dc>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d004      	beq.n	80109cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	6a1b      	ldr	r3, [r3, #32]
 80109c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109c8:	4313      	orrs	r3, r2
 80109ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80109d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80109da:	697a      	ldr	r2, [r7, #20]
 80109dc:	6812      	ldr	r2, [r2, #0]
 80109de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80109e0:	430b      	orrs	r3, r1
 80109e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ea:	f023 010f 	bic.w	r1, r3, #15
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	430a      	orrs	r2, r1
 80109f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	4a90      	ldr	r2, [pc, #576]	; (8010c40 <UART_SetConfig+0x2e0>)
 8010a00:	4293      	cmp	r3, r2
 8010a02:	d125      	bne.n	8010a50 <UART_SetConfig+0xf0>
 8010a04:	4b8f      	ldr	r3, [pc, #572]	; (8010c44 <UART_SetConfig+0x2e4>)
 8010a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a0a:	f003 0303 	and.w	r3, r3, #3
 8010a0e:	2b03      	cmp	r3, #3
 8010a10:	d81a      	bhi.n	8010a48 <UART_SetConfig+0xe8>
 8010a12:	a201      	add	r2, pc, #4	; (adr r2, 8010a18 <UART_SetConfig+0xb8>)
 8010a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a18:	08010a29 	.word	0x08010a29
 8010a1c:	08010a39 	.word	0x08010a39
 8010a20:	08010a31 	.word	0x08010a31
 8010a24:	08010a41 	.word	0x08010a41
 8010a28:	2301      	movs	r3, #1
 8010a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a2e:	e116      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010a30:	2302      	movs	r3, #2
 8010a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a36:	e112      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010a38:	2304      	movs	r3, #4
 8010a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a3e:	e10e      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010a40:	2308      	movs	r3, #8
 8010a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a46:	e10a      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010a48:	2310      	movs	r3, #16
 8010a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a4e:	e106      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4a7c      	ldr	r2, [pc, #496]	; (8010c48 <UART_SetConfig+0x2e8>)
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d138      	bne.n	8010acc <UART_SetConfig+0x16c>
 8010a5a:	4b7a      	ldr	r3, [pc, #488]	; (8010c44 <UART_SetConfig+0x2e4>)
 8010a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a60:	f003 030c 	and.w	r3, r3, #12
 8010a64:	2b0c      	cmp	r3, #12
 8010a66:	d82d      	bhi.n	8010ac4 <UART_SetConfig+0x164>
 8010a68:	a201      	add	r2, pc, #4	; (adr r2, 8010a70 <UART_SetConfig+0x110>)
 8010a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6e:	bf00      	nop
 8010a70:	08010aa5 	.word	0x08010aa5
 8010a74:	08010ac5 	.word	0x08010ac5
 8010a78:	08010ac5 	.word	0x08010ac5
 8010a7c:	08010ac5 	.word	0x08010ac5
 8010a80:	08010ab5 	.word	0x08010ab5
 8010a84:	08010ac5 	.word	0x08010ac5
 8010a88:	08010ac5 	.word	0x08010ac5
 8010a8c:	08010ac5 	.word	0x08010ac5
 8010a90:	08010aad 	.word	0x08010aad
 8010a94:	08010ac5 	.word	0x08010ac5
 8010a98:	08010ac5 	.word	0x08010ac5
 8010a9c:	08010ac5 	.word	0x08010ac5
 8010aa0:	08010abd 	.word	0x08010abd
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aaa:	e0d8      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010aac:	2302      	movs	r3, #2
 8010aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ab2:	e0d4      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010ab4:	2304      	movs	r3, #4
 8010ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aba:	e0d0      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010abc:	2308      	movs	r3, #8
 8010abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ac2:	e0cc      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010ac4:	2310      	movs	r3, #16
 8010ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aca:	e0c8      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a5e      	ldr	r2, [pc, #376]	; (8010c4c <UART_SetConfig+0x2ec>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d125      	bne.n	8010b22 <UART_SetConfig+0x1c2>
 8010ad6:	4b5b      	ldr	r3, [pc, #364]	; (8010c44 <UART_SetConfig+0x2e4>)
 8010ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010adc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010ae0:	2b30      	cmp	r3, #48	; 0x30
 8010ae2:	d016      	beq.n	8010b12 <UART_SetConfig+0x1b2>
 8010ae4:	2b30      	cmp	r3, #48	; 0x30
 8010ae6:	d818      	bhi.n	8010b1a <UART_SetConfig+0x1ba>
 8010ae8:	2b20      	cmp	r3, #32
 8010aea:	d00a      	beq.n	8010b02 <UART_SetConfig+0x1a2>
 8010aec:	2b20      	cmp	r3, #32
 8010aee:	d814      	bhi.n	8010b1a <UART_SetConfig+0x1ba>
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d002      	beq.n	8010afa <UART_SetConfig+0x19a>
 8010af4:	2b10      	cmp	r3, #16
 8010af6:	d008      	beq.n	8010b0a <UART_SetConfig+0x1aa>
 8010af8:	e00f      	b.n	8010b1a <UART_SetConfig+0x1ba>
 8010afa:	2300      	movs	r3, #0
 8010afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b00:	e0ad      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b02:	2302      	movs	r3, #2
 8010b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b08:	e0a9      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b0a:	2304      	movs	r3, #4
 8010b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b10:	e0a5      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b12:	2308      	movs	r3, #8
 8010b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b18:	e0a1      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b1a:	2310      	movs	r3, #16
 8010b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b20:	e09d      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a4a      	ldr	r2, [pc, #296]	; (8010c50 <UART_SetConfig+0x2f0>)
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d125      	bne.n	8010b78 <UART_SetConfig+0x218>
 8010b2c:	4b45      	ldr	r3, [pc, #276]	; (8010c44 <UART_SetConfig+0x2e4>)
 8010b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010b36:	2bc0      	cmp	r3, #192	; 0xc0
 8010b38:	d016      	beq.n	8010b68 <UART_SetConfig+0x208>
 8010b3a:	2bc0      	cmp	r3, #192	; 0xc0
 8010b3c:	d818      	bhi.n	8010b70 <UART_SetConfig+0x210>
 8010b3e:	2b80      	cmp	r3, #128	; 0x80
 8010b40:	d00a      	beq.n	8010b58 <UART_SetConfig+0x1f8>
 8010b42:	2b80      	cmp	r3, #128	; 0x80
 8010b44:	d814      	bhi.n	8010b70 <UART_SetConfig+0x210>
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d002      	beq.n	8010b50 <UART_SetConfig+0x1f0>
 8010b4a:	2b40      	cmp	r3, #64	; 0x40
 8010b4c:	d008      	beq.n	8010b60 <UART_SetConfig+0x200>
 8010b4e:	e00f      	b.n	8010b70 <UART_SetConfig+0x210>
 8010b50:	2300      	movs	r3, #0
 8010b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b56:	e082      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b58:	2302      	movs	r3, #2
 8010b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b5e:	e07e      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b60:	2304      	movs	r3, #4
 8010b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b66:	e07a      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b68:	2308      	movs	r3, #8
 8010b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b6e:	e076      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b70:	2310      	movs	r3, #16
 8010b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b76:	e072      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4a35      	ldr	r2, [pc, #212]	; (8010c54 <UART_SetConfig+0x2f4>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d12a      	bne.n	8010bd8 <UART_SetConfig+0x278>
 8010b82:	4b30      	ldr	r3, [pc, #192]	; (8010c44 <UART_SetConfig+0x2e4>)
 8010b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b90:	d01a      	beq.n	8010bc8 <UART_SetConfig+0x268>
 8010b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b96:	d81b      	bhi.n	8010bd0 <UART_SetConfig+0x270>
 8010b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b9c:	d00c      	beq.n	8010bb8 <UART_SetConfig+0x258>
 8010b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ba2:	d815      	bhi.n	8010bd0 <UART_SetConfig+0x270>
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d003      	beq.n	8010bb0 <UART_SetConfig+0x250>
 8010ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bac:	d008      	beq.n	8010bc0 <UART_SetConfig+0x260>
 8010bae:	e00f      	b.n	8010bd0 <UART_SetConfig+0x270>
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010bb6:	e052      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010bb8:	2302      	movs	r3, #2
 8010bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010bbe:	e04e      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010bc0:	2304      	movs	r3, #4
 8010bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010bc6:	e04a      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010bc8:	2308      	movs	r3, #8
 8010bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010bce:	e046      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010bd0:	2310      	movs	r3, #16
 8010bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010bd6:	e042      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4a17      	ldr	r2, [pc, #92]	; (8010c3c <UART_SetConfig+0x2dc>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d13a      	bne.n	8010c58 <UART_SetConfig+0x2f8>
 8010be2:	4b18      	ldr	r3, [pc, #96]	; (8010c44 <UART_SetConfig+0x2e4>)
 8010be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010be8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010bf0:	d01a      	beq.n	8010c28 <UART_SetConfig+0x2c8>
 8010bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010bf6:	d81b      	bhi.n	8010c30 <UART_SetConfig+0x2d0>
 8010bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bfc:	d00c      	beq.n	8010c18 <UART_SetConfig+0x2b8>
 8010bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c02:	d815      	bhi.n	8010c30 <UART_SetConfig+0x2d0>
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d003      	beq.n	8010c10 <UART_SetConfig+0x2b0>
 8010c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c0c:	d008      	beq.n	8010c20 <UART_SetConfig+0x2c0>
 8010c0e:	e00f      	b.n	8010c30 <UART_SetConfig+0x2d0>
 8010c10:	2300      	movs	r3, #0
 8010c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c16:	e022      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010c18:	2302      	movs	r3, #2
 8010c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c1e:	e01e      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010c20:	2304      	movs	r3, #4
 8010c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c26:	e01a      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010c28:	2308      	movs	r3, #8
 8010c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c2e:	e016      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010c30:	2310      	movs	r3, #16
 8010c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010c36:	e012      	b.n	8010c5e <UART_SetConfig+0x2fe>
 8010c38:	cfff69f3 	.word	0xcfff69f3
 8010c3c:	40008000 	.word	0x40008000
 8010c40:	40013800 	.word	0x40013800
 8010c44:	40021000 	.word	0x40021000
 8010c48:	40004400 	.word	0x40004400
 8010c4c:	40004800 	.word	0x40004800
 8010c50:	40004c00 	.word	0x40004c00
 8010c54:	40005000 	.word	0x40005000
 8010c58:	2310      	movs	r3, #16
 8010c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	4aae      	ldr	r2, [pc, #696]	; (8010f1c <UART_SetConfig+0x5bc>)
 8010c64:	4293      	cmp	r3, r2
 8010c66:	f040 8097 	bne.w	8010d98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010c6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010c6e:	2b08      	cmp	r3, #8
 8010c70:	d823      	bhi.n	8010cba <UART_SetConfig+0x35a>
 8010c72:	a201      	add	r2, pc, #4	; (adr r2, 8010c78 <UART_SetConfig+0x318>)
 8010c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c78:	08010c9d 	.word	0x08010c9d
 8010c7c:	08010cbb 	.word	0x08010cbb
 8010c80:	08010ca5 	.word	0x08010ca5
 8010c84:	08010cbb 	.word	0x08010cbb
 8010c88:	08010cab 	.word	0x08010cab
 8010c8c:	08010cbb 	.word	0x08010cbb
 8010c90:	08010cbb 	.word	0x08010cbb
 8010c94:	08010cbb 	.word	0x08010cbb
 8010c98:	08010cb3 	.word	0x08010cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c9c:	f7fa fd52 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 8010ca0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010ca2:	e010      	b.n	8010cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010ca4:	4b9e      	ldr	r3, [pc, #632]	; (8010f20 <UART_SetConfig+0x5c0>)
 8010ca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010ca8:	e00d      	b.n	8010cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010caa:	f7fa fcb5 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 8010cae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010cb0:	e009      	b.n	8010cc6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010cb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010cb8:	e005      	b.n	8010cc6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f000 8130 	beq.w	8010f2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd2:	4a94      	ldr	r2, [pc, #592]	; (8010f24 <UART_SetConfig+0x5c4>)
 8010cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cd8:	461a      	mov	r2, r3
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ce0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	4413      	add	r3, r2
 8010cec:	69ba      	ldr	r2, [r7, #24]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d305      	bcc.n	8010cfe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010cf8:	69ba      	ldr	r2, [r7, #24]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d903      	bls.n	8010d06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010cfe:	2301      	movs	r3, #1
 8010d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010d04:	e113      	b.n	8010f2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	2200      	movs	r2, #0
 8010d0a:	60bb      	str	r3, [r7, #8]
 8010d0c:	60fa      	str	r2, [r7, #12]
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d12:	4a84      	ldr	r2, [pc, #528]	; (8010f24 <UART_SetConfig+0x5c4>)
 8010d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	603b      	str	r3, [r7, #0]
 8010d1e:	607a      	str	r2, [r7, #4]
 8010d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010d28:	f7ef ffc6 	bl	8000cb8 <__aeabi_uldivmod>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4610      	mov	r0, r2
 8010d32:	4619      	mov	r1, r3
 8010d34:	f04f 0200 	mov.w	r2, #0
 8010d38:	f04f 0300 	mov.w	r3, #0
 8010d3c:	020b      	lsls	r3, r1, #8
 8010d3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010d42:	0202      	lsls	r2, r0, #8
 8010d44:	6979      	ldr	r1, [r7, #20]
 8010d46:	6849      	ldr	r1, [r1, #4]
 8010d48:	0849      	lsrs	r1, r1, #1
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	460c      	mov	r4, r1
 8010d4e:	4605      	mov	r5, r0
 8010d50:	eb12 0804 	adds.w	r8, r2, r4
 8010d54:	eb43 0905 	adc.w	r9, r3, r5
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	469a      	mov	sl, r3
 8010d60:	4693      	mov	fp, r2
 8010d62:	4652      	mov	r2, sl
 8010d64:	465b      	mov	r3, fp
 8010d66:	4640      	mov	r0, r8
 8010d68:	4649      	mov	r1, r9
 8010d6a:	f7ef ffa5 	bl	8000cb8 <__aeabi_uldivmod>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	4613      	mov	r3, r2
 8010d74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d76:	6a3b      	ldr	r3, [r7, #32]
 8010d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d7c:	d308      	bcc.n	8010d90 <UART_SetConfig+0x430>
 8010d7e:	6a3b      	ldr	r3, [r7, #32]
 8010d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d84:	d204      	bcs.n	8010d90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6a3a      	ldr	r2, [r7, #32]
 8010d8c:	60da      	str	r2, [r3, #12]
 8010d8e:	e0ce      	b.n	8010f2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010d90:	2301      	movs	r3, #1
 8010d92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010d96:	e0ca      	b.n	8010f2e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	69db      	ldr	r3, [r3, #28]
 8010d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010da0:	d166      	bne.n	8010e70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010da2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010da6:	2b08      	cmp	r3, #8
 8010da8:	d827      	bhi.n	8010dfa <UART_SetConfig+0x49a>
 8010daa:	a201      	add	r2, pc, #4	; (adr r2, 8010db0 <UART_SetConfig+0x450>)
 8010dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db0:	08010dd5 	.word	0x08010dd5
 8010db4:	08010ddd 	.word	0x08010ddd
 8010db8:	08010de5 	.word	0x08010de5
 8010dbc:	08010dfb 	.word	0x08010dfb
 8010dc0:	08010deb 	.word	0x08010deb
 8010dc4:	08010dfb 	.word	0x08010dfb
 8010dc8:	08010dfb 	.word	0x08010dfb
 8010dcc:	08010dfb 	.word	0x08010dfb
 8010dd0:	08010df3 	.word	0x08010df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010dd4:	f7fa fcb6 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 8010dd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010dda:	e014      	b.n	8010e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ddc:	f7fa fcc8 	bl	800b770 <HAL_RCC_GetPCLK2Freq>
 8010de0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010de2:	e010      	b.n	8010e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010de4:	4b4e      	ldr	r3, [pc, #312]	; (8010f20 <UART_SetConfig+0x5c0>)
 8010de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010de8:	e00d      	b.n	8010e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010dea:	f7fa fc15 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 8010dee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010df0:	e009      	b.n	8010e06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010df6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010df8:	e005      	b.n	8010e06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f000 8090 	beq.w	8010f2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e12:	4a44      	ldr	r2, [pc, #272]	; (8010f24 <UART_SetConfig+0x5c4>)
 8010e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e18:	461a      	mov	r2, r3
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e20:	005a      	lsls	r2, r3, #1
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	085b      	lsrs	r3, r3, #1
 8010e28:	441a      	add	r2, r3
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e34:	6a3b      	ldr	r3, [r7, #32]
 8010e36:	2b0f      	cmp	r3, #15
 8010e38:	d916      	bls.n	8010e68 <UART_SetConfig+0x508>
 8010e3a:	6a3b      	ldr	r3, [r7, #32]
 8010e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e40:	d212      	bcs.n	8010e68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e42:	6a3b      	ldr	r3, [r7, #32]
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	f023 030f 	bic.w	r3, r3, #15
 8010e4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e4c:	6a3b      	ldr	r3, [r7, #32]
 8010e4e:	085b      	lsrs	r3, r3, #1
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	f003 0307 	and.w	r3, r3, #7
 8010e56:	b29a      	uxth	r2, r3
 8010e58:	8bfb      	ldrh	r3, [r7, #30]
 8010e5a:	4313      	orrs	r3, r2
 8010e5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	8bfa      	ldrh	r2, [r7, #30]
 8010e64:	60da      	str	r2, [r3, #12]
 8010e66:	e062      	b.n	8010f2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010e6e:	e05e      	b.n	8010f2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010e74:	2b08      	cmp	r3, #8
 8010e76:	d828      	bhi.n	8010eca <UART_SetConfig+0x56a>
 8010e78:	a201      	add	r2, pc, #4	; (adr r2, 8010e80 <UART_SetConfig+0x520>)
 8010e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7e:	bf00      	nop
 8010e80:	08010ea5 	.word	0x08010ea5
 8010e84:	08010ead 	.word	0x08010ead
 8010e88:	08010eb5 	.word	0x08010eb5
 8010e8c:	08010ecb 	.word	0x08010ecb
 8010e90:	08010ebb 	.word	0x08010ebb
 8010e94:	08010ecb 	.word	0x08010ecb
 8010e98:	08010ecb 	.word	0x08010ecb
 8010e9c:	08010ecb 	.word	0x08010ecb
 8010ea0:	08010ec3 	.word	0x08010ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ea4:	f7fa fc4e 	bl	800b744 <HAL_RCC_GetPCLK1Freq>
 8010ea8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010eaa:	e014      	b.n	8010ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010eac:	f7fa fc60 	bl	800b770 <HAL_RCC_GetPCLK2Freq>
 8010eb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010eb2:	e010      	b.n	8010ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010eb4:	4b1a      	ldr	r3, [pc, #104]	; (8010f20 <UART_SetConfig+0x5c0>)
 8010eb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010eb8:	e00d      	b.n	8010ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010eba:	f7fa fbad 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 8010ebe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010ec0:	e009      	b.n	8010ed6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010ec8:	e005      	b.n	8010ed6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010ed4:	bf00      	nop
    }

    if (pclk != 0U)
 8010ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d028      	beq.n	8010f2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee0:	4a10      	ldr	r2, [pc, #64]	; (8010f24 <UART_SetConfig+0x5c4>)
 8010ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ee6:	461a      	mov	r2, r3
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	085b      	lsrs	r3, r3, #1
 8010ef4:	441a      	add	r2, r3
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8010efe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f00:	6a3b      	ldr	r3, [r7, #32]
 8010f02:	2b0f      	cmp	r3, #15
 8010f04:	d910      	bls.n	8010f28 <UART_SetConfig+0x5c8>
 8010f06:	6a3b      	ldr	r3, [r7, #32]
 8010f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f0c:	d20c      	bcs.n	8010f28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f0e:	6a3b      	ldr	r3, [r7, #32]
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	60da      	str	r2, [r3, #12]
 8010f18:	e009      	b.n	8010f2e <UART_SetConfig+0x5ce>
 8010f1a:	bf00      	nop
 8010f1c:	40008000 	.word	0x40008000
 8010f20:	00f42400 	.word	0x00f42400
 8010f24:	0801f424 	.word	0x0801f424
      }
      else
      {
        ret = HAL_ERROR;
 8010f28:	2301      	movs	r3, #1
 8010f2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	2201      	movs	r2, #1
 8010f32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	2201      	movs	r2, #1
 8010f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	2200      	movs	r2, #0
 8010f42:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	2200      	movs	r2, #0
 8010f48:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010f4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3730      	adds	r7, #48	; 0x30
 8010f52:	46bd      	mov	sp, r7
 8010f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f64:	f003 0301 	and.w	r3, r3, #1
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d00a      	beq.n	8010f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	430a      	orrs	r2, r1
 8010f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f86:	f003 0302 	and.w	r3, r3, #2
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00a      	beq.n	8010fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	430a      	orrs	r2, r1
 8010fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fa8:	f003 0304 	and.w	r3, r3, #4
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00a      	beq.n	8010fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	430a      	orrs	r2, r1
 8010fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fca:	f003 0308 	and.w	r3, r3, #8
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d00a      	beq.n	8010fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	430a      	orrs	r2, r1
 8010fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fec:	f003 0310 	and.w	r3, r3, #16
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d00a      	beq.n	801100a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	430a      	orrs	r2, r1
 8011008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801100e:	f003 0320 	and.w	r3, r3, #32
 8011012:	2b00      	cmp	r3, #0
 8011014:	d00a      	beq.n	801102c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	689b      	ldr	r3, [r3, #8]
 801101c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	430a      	orrs	r2, r1
 801102a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011034:	2b00      	cmp	r3, #0
 8011036:	d01a      	beq.n	801106e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	430a      	orrs	r2, r1
 801104c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011056:	d10a      	bne.n	801106e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	685b      	ldr	r3, [r3, #4]
 801105e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	430a      	orrs	r2, r1
 801106c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011076:	2b00      	cmp	r3, #0
 8011078:	d00a      	beq.n	8011090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	430a      	orrs	r2, r1
 801108e:	605a      	str	r2, [r3, #4]
  }
}
 8011090:	bf00      	nop
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af02      	add	r7, sp, #8
 80110a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2200      	movs	r2, #0
 80110a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80110ac:	f7f5 fb9e 	bl	80067ec <HAL_GetTick>
 80110b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f003 0308 	and.w	r3, r3, #8
 80110bc:	2b08      	cmp	r3, #8
 80110be:	d10e      	bne.n	80110de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80110c4:	9300      	str	r3, [sp, #0]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2200      	movs	r2, #0
 80110ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f000 f82f 	bl	8011132 <UART_WaitOnFlagUntilTimeout>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d001      	beq.n	80110de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110da:	2303      	movs	r3, #3
 80110dc:	e025      	b.n	801112a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f003 0304 	and.w	r3, r3, #4
 80110e8:	2b04      	cmp	r3, #4
 80110ea:	d10e      	bne.n	801110a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2200      	movs	r2, #0
 80110f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 f819 	bl	8011132 <UART_WaitOnFlagUntilTimeout>
 8011100:	4603      	mov	r3, r0
 8011102:	2b00      	cmp	r3, #0
 8011104:	d001      	beq.n	801110a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011106:	2303      	movs	r3, #3
 8011108:	e00f      	b.n	801112a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2220      	movs	r2, #32
 801110e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2220      	movs	r2, #32
 8011116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2200      	movs	r2, #0
 801111e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011128:	2300      	movs	r3, #0
}
 801112a:	4618      	mov	r0, r3
 801112c:	3710      	adds	r7, #16
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}

08011132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011132:	b580      	push	{r7, lr}
 8011134:	b09c      	sub	sp, #112	; 0x70
 8011136:	af00      	add	r7, sp, #0
 8011138:	60f8      	str	r0, [r7, #12]
 801113a:	60b9      	str	r1, [r7, #8]
 801113c:	603b      	str	r3, [r7, #0]
 801113e:	4613      	mov	r3, r2
 8011140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011142:	e0a9      	b.n	8011298 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801114a:	f000 80a5 	beq.w	8011298 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801114e:	f7f5 fb4d 	bl	80067ec <HAL_GetTick>
 8011152:	4602      	mov	r2, r0
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	1ad3      	subs	r3, r2, r3
 8011158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801115a:	429a      	cmp	r2, r3
 801115c:	d302      	bcc.n	8011164 <UART_WaitOnFlagUntilTimeout+0x32>
 801115e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011160:	2b00      	cmp	r3, #0
 8011162:	d140      	bne.n	80111e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801116a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801116c:	e853 3f00 	ldrex	r3, [r3]
 8011170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011178:	667b      	str	r3, [r7, #100]	; 0x64
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	461a      	mov	r2, r3
 8011180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011184:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801118a:	e841 2300 	strex	r3, r2, [r1]
 801118e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011192:	2b00      	cmp	r3, #0
 8011194:	d1e6      	bne.n	8011164 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	3308      	adds	r3, #8
 801119c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801119e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a0:	e853 3f00 	ldrex	r3, [r3]
 80111a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80111a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a8:	f023 0301 	bic.w	r3, r3, #1
 80111ac:	663b      	str	r3, [r7, #96]	; 0x60
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	3308      	adds	r3, #8
 80111b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80111b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80111b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80111bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80111be:	e841 2300 	strex	r3, r2, [r1]
 80111c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80111c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d1e5      	bne.n	8011196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2220      	movs	r2, #32
 80111ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2220      	movs	r2, #32
 80111d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80111e2:	2303      	movs	r3, #3
 80111e4:	e069      	b.n	80112ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	f003 0304 	and.w	r3, r3, #4
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d051      	beq.n	8011298 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	69db      	ldr	r3, [r3, #28]
 80111fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011202:	d149      	bne.n	8011298 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801120c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011216:	e853 3f00 	ldrex	r3, [r3]
 801121a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	461a      	mov	r2, r3
 801122a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801122c:	637b      	str	r3, [r7, #52]	; 0x34
 801122e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011234:	e841 2300 	strex	r3, r2, [r1]
 8011238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1e6      	bne.n	801120e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	3308      	adds	r3, #8
 8011246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	e853 3f00 	ldrex	r3, [r3]
 801124e:	613b      	str	r3, [r7, #16]
   return(result);
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	f023 0301 	bic.w	r3, r3, #1
 8011256:	66bb      	str	r3, [r7, #104]	; 0x68
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	3308      	adds	r3, #8
 801125e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011260:	623a      	str	r2, [r7, #32]
 8011262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011264:	69f9      	ldr	r1, [r7, #28]
 8011266:	6a3a      	ldr	r2, [r7, #32]
 8011268:	e841 2300 	strex	r3, r2, [r1]
 801126c:	61bb      	str	r3, [r7, #24]
   return(result);
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d1e5      	bne.n	8011240 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2220      	movs	r2, #32
 8011278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2220      	movs	r2, #32
 8011280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2220      	movs	r2, #32
 8011288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2200      	movs	r2, #0
 8011290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e010      	b.n	80112ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	69da      	ldr	r2, [r3, #28]
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	4013      	ands	r3, r2
 80112a2:	68ba      	ldr	r2, [r7, #8]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	bf0c      	ite	eq
 80112a8:	2301      	moveq	r3, #1
 80112aa:	2300      	movne	r3, #0
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	461a      	mov	r2, r3
 80112b0:	79fb      	ldrb	r3, [r7, #7]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	f43f af46 	beq.w	8011144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80112b8:	2300      	movs	r3, #0
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3770      	adds	r7, #112	; 0x70
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}

080112c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80112c2:	b480      	push	{r7}
 80112c4:	b085      	sub	sp, #20
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d101      	bne.n	80112d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80112d4:	2302      	movs	r3, #2
 80112d6:	e027      	b.n	8011328 <HAL_UARTEx_DisableFifoMode+0x66>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2201      	movs	r2, #1
 80112dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2224      	movs	r2, #36	; 0x24
 80112e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f022 0201 	bic.w	r2, r2, #1
 80112fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011306:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	68fa      	ldr	r2, [r7, #12]
 8011314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2220      	movs	r2, #32
 801131a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2200      	movs	r2, #0
 8011322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011326:	2300      	movs	r3, #0
}
 8011328:	4618      	mov	r0, r3
 801132a:	3714      	adds	r7, #20
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr

08011334 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011344:	2b01      	cmp	r3, #1
 8011346:	d101      	bne.n	801134c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011348:	2302      	movs	r3, #2
 801134a:	e02d      	b.n	80113a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2201      	movs	r2, #1
 8011350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2224      	movs	r2, #36	; 0x24
 8011358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f022 0201 	bic.w	r2, r2, #1
 8011372:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	683a      	ldr	r2, [r7, #0]
 8011384:	430a      	orrs	r2, r1
 8011386:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 f84f 	bl	801142c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	68fa      	ldr	r2, [r7, #12]
 8011394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2220      	movs	r2, #32
 801139a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	2200      	movs	r2, #0
 80113a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80113a6:	2300      	movs	r3, #0
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3710      	adds	r7, #16
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}

080113b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d101      	bne.n	80113c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80113c4:	2302      	movs	r3, #2
 80113c6:	e02d      	b.n	8011424 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2201      	movs	r2, #1
 80113cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	2224      	movs	r2, #36	; 0x24
 80113d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f022 0201 	bic.w	r2, r2, #1
 80113ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	683a      	ldr	r2, [r7, #0]
 8011400:	430a      	orrs	r2, r1
 8011402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f000 f811 	bl	801142c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	68fa      	ldr	r2, [r7, #12]
 8011410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2220      	movs	r2, #32
 8011416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2200      	movs	r2, #0
 801141e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011422:	2300      	movs	r3, #0
}
 8011424:	4618      	mov	r0, r3
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801142c:	b480      	push	{r7}
 801142e:	b085      	sub	sp, #20
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011438:	2b00      	cmp	r3, #0
 801143a:	d108      	bne.n	801144e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	2201      	movs	r2, #1
 8011440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2201      	movs	r2, #1
 8011448:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801144c:	e031      	b.n	80114b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801144e:	2308      	movs	r3, #8
 8011450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011452:	2308      	movs	r3, #8
 8011454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	689b      	ldr	r3, [r3, #8]
 801145c:	0e5b      	lsrs	r3, r3, #25
 801145e:	b2db      	uxtb	r3, r3
 8011460:	f003 0307 	and.w	r3, r3, #7
 8011464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	0f5b      	lsrs	r3, r3, #29
 801146e:	b2db      	uxtb	r3, r3
 8011470:	f003 0307 	and.w	r3, r3, #7
 8011474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011476:	7bbb      	ldrb	r3, [r7, #14]
 8011478:	7b3a      	ldrb	r2, [r7, #12]
 801147a:	4911      	ldr	r1, [pc, #68]	; (80114c0 <UARTEx_SetNbDataToProcess+0x94>)
 801147c:	5c8a      	ldrb	r2, [r1, r2]
 801147e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011482:	7b3a      	ldrb	r2, [r7, #12]
 8011484:	490f      	ldr	r1, [pc, #60]	; (80114c4 <UARTEx_SetNbDataToProcess+0x98>)
 8011486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011488:	fb93 f3f2 	sdiv	r3, r3, r2
 801148c:	b29a      	uxth	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011494:	7bfb      	ldrb	r3, [r7, #15]
 8011496:	7b7a      	ldrb	r2, [r7, #13]
 8011498:	4909      	ldr	r1, [pc, #36]	; (80114c0 <UARTEx_SetNbDataToProcess+0x94>)
 801149a:	5c8a      	ldrb	r2, [r1, r2]
 801149c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80114a0:	7b7a      	ldrb	r2, [r7, #13]
 80114a2:	4908      	ldr	r1, [pc, #32]	; (80114c4 <UARTEx_SetNbDataToProcess+0x98>)
 80114a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80114a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80114b2:	bf00      	nop
 80114b4:	3714      	adds	r7, #20
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	0801f43c 	.word	0x0801f43c
 80114c4:	0801f444 	.word	0x0801f444

080114c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80114c8:	b084      	sub	sp, #16
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b084      	sub	sp, #16
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
 80114d2:	f107 001c 	add.w	r0, r7, #28
 80114d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f001 faf6 	bl	8012ad8 <USB_CoreReset>
 80114ec:	4603      	mov	r3, r0
 80114ee:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80114f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d106      	bne.n	8011504 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	639a      	str	r2, [r3, #56]	; 0x38
 8011502:	e005      	b.n	8011510 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011508:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8011510:	7bfb      	ldrb	r3, [r7, #15]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801151c:	b004      	add	sp, #16
 801151e:	4770      	bx	lr

08011520 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011520:	b480      	push	{r7}
 8011522:	b087      	sub	sp, #28
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	4613      	mov	r3, r2
 801152c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801152e:	79fb      	ldrb	r3, [r7, #7]
 8011530:	2b02      	cmp	r3, #2
 8011532:	d165      	bne.n	8011600 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	4a3e      	ldr	r2, [pc, #248]	; (8011630 <USB_SetTurnaroundTime+0x110>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d906      	bls.n	801154a <USB_SetTurnaroundTime+0x2a>
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	4a3d      	ldr	r2, [pc, #244]	; (8011634 <USB_SetTurnaroundTime+0x114>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d202      	bcs.n	801154a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011544:	230f      	movs	r3, #15
 8011546:	617b      	str	r3, [r7, #20]
 8011548:	e05c      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	4a39      	ldr	r2, [pc, #228]	; (8011634 <USB_SetTurnaroundTime+0x114>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d306      	bcc.n	8011560 <USB_SetTurnaroundTime+0x40>
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	4a38      	ldr	r2, [pc, #224]	; (8011638 <USB_SetTurnaroundTime+0x118>)
 8011556:	4293      	cmp	r3, r2
 8011558:	d202      	bcs.n	8011560 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801155a:	230e      	movs	r3, #14
 801155c:	617b      	str	r3, [r7, #20]
 801155e:	e051      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	4a35      	ldr	r2, [pc, #212]	; (8011638 <USB_SetTurnaroundTime+0x118>)
 8011564:	4293      	cmp	r3, r2
 8011566:	d306      	bcc.n	8011576 <USB_SetTurnaroundTime+0x56>
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	4a34      	ldr	r2, [pc, #208]	; (801163c <USB_SetTurnaroundTime+0x11c>)
 801156c:	4293      	cmp	r3, r2
 801156e:	d202      	bcs.n	8011576 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011570:	230d      	movs	r3, #13
 8011572:	617b      	str	r3, [r7, #20]
 8011574:	e046      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	4a30      	ldr	r2, [pc, #192]	; (801163c <USB_SetTurnaroundTime+0x11c>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d306      	bcc.n	801158c <USB_SetTurnaroundTime+0x6c>
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	4a2f      	ldr	r2, [pc, #188]	; (8011640 <USB_SetTurnaroundTime+0x120>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d802      	bhi.n	801158c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011586:	230c      	movs	r3, #12
 8011588:	617b      	str	r3, [r7, #20]
 801158a:	e03b      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	4a2c      	ldr	r2, [pc, #176]	; (8011640 <USB_SetTurnaroundTime+0x120>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d906      	bls.n	80115a2 <USB_SetTurnaroundTime+0x82>
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	4a2b      	ldr	r2, [pc, #172]	; (8011644 <USB_SetTurnaroundTime+0x124>)
 8011598:	4293      	cmp	r3, r2
 801159a:	d802      	bhi.n	80115a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801159c:	230b      	movs	r3, #11
 801159e:	617b      	str	r3, [r7, #20]
 80115a0:	e030      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	4a27      	ldr	r2, [pc, #156]	; (8011644 <USB_SetTurnaroundTime+0x124>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d906      	bls.n	80115b8 <USB_SetTurnaroundTime+0x98>
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	4a26      	ldr	r2, [pc, #152]	; (8011648 <USB_SetTurnaroundTime+0x128>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d802      	bhi.n	80115b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80115b2:	230a      	movs	r3, #10
 80115b4:	617b      	str	r3, [r7, #20]
 80115b6:	e025      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	4a23      	ldr	r2, [pc, #140]	; (8011648 <USB_SetTurnaroundTime+0x128>)
 80115bc:	4293      	cmp	r3, r2
 80115be:	d906      	bls.n	80115ce <USB_SetTurnaroundTime+0xae>
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	4a22      	ldr	r2, [pc, #136]	; (801164c <USB_SetTurnaroundTime+0x12c>)
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d202      	bcs.n	80115ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80115c8:	2309      	movs	r3, #9
 80115ca:	617b      	str	r3, [r7, #20]
 80115cc:	e01a      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	4a1e      	ldr	r2, [pc, #120]	; (801164c <USB_SetTurnaroundTime+0x12c>)
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d306      	bcc.n	80115e4 <USB_SetTurnaroundTime+0xc4>
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	4a1d      	ldr	r2, [pc, #116]	; (8011650 <USB_SetTurnaroundTime+0x130>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d802      	bhi.n	80115e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80115de:	2308      	movs	r3, #8
 80115e0:	617b      	str	r3, [r7, #20]
 80115e2:	e00f      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	4a1a      	ldr	r2, [pc, #104]	; (8011650 <USB_SetTurnaroundTime+0x130>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d906      	bls.n	80115fa <USB_SetTurnaroundTime+0xda>
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	4a19      	ldr	r2, [pc, #100]	; (8011654 <USB_SetTurnaroundTime+0x134>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d202      	bcs.n	80115fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80115f4:	2307      	movs	r3, #7
 80115f6:	617b      	str	r3, [r7, #20]
 80115f8:	e004      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80115fa:	2306      	movs	r3, #6
 80115fc:	617b      	str	r3, [r7, #20]
 80115fe:	e001      	b.n	8011604 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011600:	2309      	movs	r3, #9
 8011602:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	68db      	ldr	r3, [r3, #12]
 8011608:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	68da      	ldr	r2, [r3, #12]
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	029b      	lsls	r3, r3, #10
 8011618:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801161c:	431a      	orrs	r2, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011622:	2300      	movs	r3, #0
}
 8011624:	4618      	mov	r0, r3
 8011626:	371c      	adds	r7, #28
 8011628:	46bd      	mov	sp, r7
 801162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162e:	4770      	bx	lr
 8011630:	00d8acbf 	.word	0x00d8acbf
 8011634:	00e4e1c0 	.word	0x00e4e1c0
 8011638:	00f42400 	.word	0x00f42400
 801163c:	01067380 	.word	0x01067380
 8011640:	011a499f 	.word	0x011a499f
 8011644:	01312cff 	.word	0x01312cff
 8011648:	014ca43f 	.word	0x014ca43f
 801164c:	016e3600 	.word	0x016e3600
 8011650:	01a6ab1f 	.word	0x01a6ab1f
 8011654:	01e84800 	.word	0x01e84800

08011658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	f043 0201 	orr.w	r2, r3, #1
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801166c:	2300      	movs	r3, #0
}
 801166e:	4618      	mov	r0, r3
 8011670:	370c      	adds	r7, #12
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr

0801167a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801167a:	b480      	push	{r7}
 801167c:	b083      	sub	sp, #12
 801167e:	af00      	add	r7, sp, #0
 8011680:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	f023 0201 	bic.w	r2, r3, #1
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801168e:	2300      	movs	r3, #0
}
 8011690:	4618      	mov	r0, r3
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr

0801169c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	460b      	mov	r3, r1
 80116a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80116a8:	2300      	movs	r3, #0
 80116aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80116b8:	78fb      	ldrb	r3, [r7, #3]
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	d115      	bne.n	80116ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80116ca:	2001      	movs	r0, #1
 80116cc:	f7f5 f89a 	bl	8006804 <HAL_Delay>
      ms++;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	3301      	adds	r3, #1
 80116d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f001 f985 	bl	80129e6 <USB_GetMode>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d01e      	beq.n	8011720 <USB_SetCurrentMode+0x84>
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	2b31      	cmp	r3, #49	; 0x31
 80116e6:	d9f0      	bls.n	80116ca <USB_SetCurrentMode+0x2e>
 80116e8:	e01a      	b.n	8011720 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80116ea:	78fb      	ldrb	r3, [r7, #3]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d115      	bne.n	801171c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80116fc:	2001      	movs	r0, #1
 80116fe:	f7f5 f881 	bl	8006804 <HAL_Delay>
      ms++;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	3301      	adds	r3, #1
 8011706:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f001 f96c 	bl	80129e6 <USB_GetMode>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d005      	beq.n	8011720 <USB_SetCurrentMode+0x84>
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2b31      	cmp	r3, #49	; 0x31
 8011718:	d9f0      	bls.n	80116fc <USB_SetCurrentMode+0x60>
 801171a:	e001      	b.n	8011720 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801171c:	2301      	movs	r3, #1
 801171e:	e005      	b.n	801172c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b32      	cmp	r3, #50	; 0x32
 8011724:	d101      	bne.n	801172a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	e000      	b.n	801172c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801172a:	2300      	movs	r3, #0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011734:	b084      	sub	sp, #16
 8011736:	b580      	push	{r7, lr}
 8011738:	b086      	sub	sp, #24
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011746:	2300      	movs	r3, #0
 8011748:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801174e:	2300      	movs	r3, #0
 8011750:	613b      	str	r3, [r7, #16]
 8011752:	e009      	b.n	8011768 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	3340      	adds	r3, #64	; 0x40
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	4413      	add	r3, r2
 801175e:	2200      	movs	r2, #0
 8011760:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	3301      	adds	r3, #1
 8011766:	613b      	str	r3, [r7, #16]
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	2b0e      	cmp	r3, #14
 801176c:	d9f2      	bls.n	8011754 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801176e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011770:	2b00      	cmp	r3, #0
 8011772:	d11c      	bne.n	80117ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	68fa      	ldr	r2, [r7, #12]
 801177e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011782:	f043 0302 	orr.w	r3, r3, #2
 8011786:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801178c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	601a      	str	r2, [r3, #0]
 80117ac:	e005      	b.n	80117ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80117c0:	461a      	mov	r2, r3
 80117c2:	2300      	movs	r3, #0
 80117c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117cc:	4619      	mov	r1, r3
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117d4:	461a      	mov	r2, r3
 80117d6:	680b      	ldr	r3, [r1, #0]
 80117d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80117da:	2103      	movs	r1, #3
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f000 f959 	bl	8011a94 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80117e2:	2110      	movs	r1, #16
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f000 f8f1 	bl	80119cc <USB_FlushTxFifo>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d001      	beq.n	80117f4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80117f0:	2301      	movs	r3, #1
 80117f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f000 f91d 	bl	8011a34 <USB_FlushRxFifo>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d001      	beq.n	8011804 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8011800:	2301      	movs	r3, #1
 8011802:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801180a:	461a      	mov	r2, r3
 801180c:	2300      	movs	r3, #0
 801180e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011816:	461a      	mov	r2, r3
 8011818:	2300      	movs	r3, #0
 801181a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011822:	461a      	mov	r2, r3
 8011824:	2300      	movs	r3, #0
 8011826:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011828:	2300      	movs	r3, #0
 801182a:	613b      	str	r3, [r7, #16]
 801182c:	e043      	b.n	80118b6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	015a      	lsls	r2, r3, #5
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	4413      	add	r3, r2
 8011836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011844:	d118      	bne.n	8011878 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d10a      	bne.n	8011862 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	015a      	lsls	r2, r3, #5
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	4413      	add	r3, r2
 8011854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011858:	461a      	mov	r2, r3
 801185a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801185e:	6013      	str	r3, [r2, #0]
 8011860:	e013      	b.n	801188a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011862:	693b      	ldr	r3, [r7, #16]
 8011864:	015a      	lsls	r2, r3, #5
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	4413      	add	r3, r2
 801186a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801186e:	461a      	mov	r2, r3
 8011870:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011874:	6013      	str	r3, [r2, #0]
 8011876:	e008      	b.n	801188a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	015a      	lsls	r2, r3, #5
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	4413      	add	r3, r2
 8011880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011884:	461a      	mov	r2, r3
 8011886:	2300      	movs	r3, #0
 8011888:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	015a      	lsls	r2, r3, #5
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	4413      	add	r3, r2
 8011892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011896:	461a      	mov	r2, r3
 8011898:	2300      	movs	r3, #0
 801189a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	015a      	lsls	r2, r3, #5
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	4413      	add	r3, r2
 80118a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80118a8:	461a      	mov	r2, r3
 80118aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80118ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	3301      	adds	r3, #1
 80118b4:	613b      	str	r3, [r7, #16]
 80118b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b8:	693a      	ldr	r2, [r7, #16]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d3b7      	bcc.n	801182e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80118be:	2300      	movs	r3, #0
 80118c0:	613b      	str	r3, [r7, #16]
 80118c2:	e043      	b.n	801194c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	015a      	lsls	r2, r3, #5
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	4413      	add	r3, r2
 80118cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80118d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80118da:	d118      	bne.n	801190e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10a      	bne.n	80118f8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	015a      	lsls	r2, r3, #5
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	4413      	add	r3, r2
 80118ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118ee:	461a      	mov	r2, r3
 80118f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80118f4:	6013      	str	r3, [r2, #0]
 80118f6:	e013      	b.n	8011920 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	015a      	lsls	r2, r3, #5
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	4413      	add	r3, r2
 8011900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011904:	461a      	mov	r2, r3
 8011906:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801190a:	6013      	str	r3, [r2, #0]
 801190c:	e008      	b.n	8011920 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	015a      	lsls	r2, r3, #5
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	4413      	add	r3, r2
 8011916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801191a:	461a      	mov	r2, r3
 801191c:	2300      	movs	r3, #0
 801191e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	015a      	lsls	r2, r3, #5
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	4413      	add	r3, r2
 8011928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801192c:	461a      	mov	r2, r3
 801192e:	2300      	movs	r3, #0
 8011930:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011932:	693b      	ldr	r3, [r7, #16]
 8011934:	015a      	lsls	r2, r3, #5
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	4413      	add	r3, r2
 801193a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801193e:	461a      	mov	r2, r3
 8011940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011944:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	3301      	adds	r3, #1
 801194a:	613b      	str	r3, [r7, #16]
 801194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194e:	693a      	ldr	r2, [r7, #16]
 8011950:	429a      	cmp	r2, r3
 8011952:	d3b7      	bcc.n	80118c4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801195a:	691b      	ldr	r3, [r3, #16]
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011962:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011966:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011974:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	699b      	ldr	r3, [r3, #24]
 801197a:	f043 0210 	orr.w	r2, r3, #16
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	699a      	ldr	r2, [r3, #24]
 8011986:	4b10      	ldr	r3, [pc, #64]	; (80119c8 <USB_DevInit+0x294>)
 8011988:	4313      	orrs	r3, r2
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011990:	2b00      	cmp	r3, #0
 8011992:	d005      	beq.n	80119a0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	f043 0208 	orr.w	r2, r3, #8
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80119a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119a2:	2b01      	cmp	r3, #1
 80119a4:	d107      	bne.n	80119b6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	699b      	ldr	r3, [r3, #24]
 80119aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80119ae:	f043 0304 	orr.w	r3, r3, #4
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80119b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3718      	adds	r7, #24
 80119bc:	46bd      	mov	sp, r7
 80119be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119c2:	b004      	add	sp, #16
 80119c4:	4770      	bx	lr
 80119c6:	bf00      	nop
 80119c8:	803c3800 	.word	0x803c3800

080119cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80119cc:	b480      	push	{r7}
 80119ce:	b085      	sub	sp, #20
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80119d6:	2300      	movs	r3, #0
 80119d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	3301      	adds	r3, #1
 80119de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	4a13      	ldr	r2, [pc, #76]	; (8011a30 <USB_FlushTxFifo+0x64>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d901      	bls.n	80119ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80119e8:	2303      	movs	r3, #3
 80119ea:	e01b      	b.n	8011a24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	691b      	ldr	r3, [r3, #16]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	daf2      	bge.n	80119da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80119f4:	2300      	movs	r3, #0
 80119f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	019b      	lsls	r3, r3, #6
 80119fc:	f043 0220 	orr.w	r2, r3, #32
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	3301      	adds	r3, #1
 8011a08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	4a08      	ldr	r2, [pc, #32]	; (8011a30 <USB_FlushTxFifo+0x64>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d901      	bls.n	8011a16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011a12:	2303      	movs	r3, #3
 8011a14:	e006      	b.n	8011a24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	691b      	ldr	r3, [r3, #16]
 8011a1a:	f003 0320 	and.w	r3, r3, #32
 8011a1e:	2b20      	cmp	r3, #32
 8011a20:	d0f0      	beq.n	8011a04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011a22:	2300      	movs	r3, #0
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	3714      	adds	r7, #20
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	00030d40 	.word	0x00030d40

08011a34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	3301      	adds	r3, #1
 8011a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	4a11      	ldr	r2, [pc, #68]	; (8011a90 <USB_FlushRxFifo+0x5c>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d901      	bls.n	8011a52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011a4e:	2303      	movs	r3, #3
 8011a50:	e018      	b.n	8011a84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	691b      	ldr	r3, [r3, #16]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	daf2      	bge.n	8011a40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2210      	movs	r2, #16
 8011a62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	3301      	adds	r3, #1
 8011a68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	4a08      	ldr	r2, [pc, #32]	; (8011a90 <USB_FlushRxFifo+0x5c>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d901      	bls.n	8011a76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011a72:	2303      	movs	r3, #3
 8011a74:	e006      	b.n	8011a84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	691b      	ldr	r3, [r3, #16]
 8011a7a:	f003 0310 	and.w	r3, r3, #16
 8011a7e:	2b10      	cmp	r3, #16
 8011a80:	d0f0      	beq.n	8011a64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3714      	adds	r7, #20
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr
 8011a90:	00030d40 	.word	0x00030d40

08011a94 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b085      	sub	sp, #20
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	78fb      	ldrb	r3, [r7, #3]
 8011aae:	68f9      	ldr	r1, [r7, #12]
 8011ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ab4:	4313      	orrs	r3, r2
 8011ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011ab8:	2300      	movs	r3, #0
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3714      	adds	r7, #20
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr

08011ac6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011ac6:	b480      	push	{r7}
 8011ac8:	b087      	sub	sp, #28
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ad8:	689b      	ldr	r3, [r3, #8]
 8011ada:	f003 0306 	and.w	r3, r3, #6
 8011ade:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2b02      	cmp	r3, #2
 8011ae4:	d002      	beq.n	8011aec <USB_GetDevSpeed+0x26>
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2b06      	cmp	r3, #6
 8011aea:	d102      	bne.n	8011af2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011aec:	2302      	movs	r3, #2
 8011aee:	75fb      	strb	r3, [r7, #23]
 8011af0:	e001      	b.n	8011af6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8011af2:	230f      	movs	r3, #15
 8011af4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	371c      	adds	r7, #28
 8011afc:	46bd      	mov	sp, r7
 8011afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b02:	4770      	bx	lr

08011b04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b04:	b480      	push	{r7}
 8011b06:	b085      	sub	sp, #20
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
 8011b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	785b      	ldrb	r3, [r3, #1]
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d13a      	bne.n	8011b96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b26:	69da      	ldr	r2, [r3, #28]
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	f003 030f 	and.w	r3, r3, #15
 8011b30:	2101      	movs	r1, #1
 8011b32:	fa01 f303 	lsl.w	r3, r1, r3
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	68f9      	ldr	r1, [r7, #12]
 8011b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b3e:	4313      	orrs	r3, r2
 8011b40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011b42:	68bb      	ldr	r3, [r7, #8]
 8011b44:	015a      	lsls	r2, r3, #5
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	4413      	add	r3, r2
 8011b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d155      	bne.n	8011c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	015a      	lsls	r2, r3, #5
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	4413      	add	r3, r2
 8011b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	683b      	ldr	r3, [r7, #0]
 8011b68:	68db      	ldr	r3, [r3, #12]
 8011b6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	791b      	ldrb	r3, [r3, #4]
 8011b72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	059b      	lsls	r3, r3, #22
 8011b7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011b7c:	4313      	orrs	r3, r2
 8011b7e:	68ba      	ldr	r2, [r7, #8]
 8011b80:	0151      	lsls	r1, r2, #5
 8011b82:	68fa      	ldr	r2, [r7, #12]
 8011b84:	440a      	add	r2, r1
 8011b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b92:	6013      	str	r3, [r2, #0]
 8011b94:	e036      	b.n	8011c04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b9c:	69da      	ldr	r2, [r3, #28]
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	f003 030f 	and.w	r3, r3, #15
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8011bac:	041b      	lsls	r3, r3, #16
 8011bae:	68f9      	ldr	r1, [r7, #12]
 8011bb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011bb4:	4313      	orrs	r3, r2
 8011bb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	015a      	lsls	r2, r3, #5
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d11a      	bne.n	8011c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	015a      	lsls	r2, r3, #5
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	791b      	ldrb	r3, [r3, #4]
 8011be8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011bea:	430b      	orrs	r3, r1
 8011bec:	4313      	orrs	r3, r2
 8011bee:	68ba      	ldr	r2, [r7, #8]
 8011bf0:	0151      	lsls	r1, r2, #5
 8011bf2:	68fa      	ldr	r2, [r7, #12]
 8011bf4:	440a      	add	r2, r1
 8011bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011c04:	2300      	movs	r3, #0
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
	...

08011c14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011c14:	b480      	push	{r7}
 8011c16:	b085      	sub	sp, #20
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	785b      	ldrb	r3, [r3, #1]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d161      	bne.n	8011cf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	015a      	lsls	r2, r3, #5
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	4413      	add	r3, r2
 8011c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c46:	d11f      	bne.n	8011c88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	015a      	lsls	r2, r3, #5
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	4413      	add	r3, r2
 8011c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	68ba      	ldr	r2, [r7, #8]
 8011c58:	0151      	lsls	r1, r2, #5
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	440a      	add	r2, r1
 8011c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	015a      	lsls	r2, r3, #5
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	4413      	add	r3, r2
 8011c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	68ba      	ldr	r2, [r7, #8]
 8011c78:	0151      	lsls	r1, r2, #5
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	440a      	add	r2, r1
 8011c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f003 030f 	and.w	r3, r3, #15
 8011c98:	2101      	movs	r1, #1
 8011c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	43db      	mvns	r3, r3
 8011ca2:	68f9      	ldr	r1, [r7, #12]
 8011ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ca8:	4013      	ands	r3, r2
 8011caa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011cb2:	69da      	ldr	r2, [r3, #28]
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	f003 030f 	and.w	r3, r3, #15
 8011cbc:	2101      	movs	r1, #1
 8011cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	43db      	mvns	r3, r3
 8011cc6:	68f9      	ldr	r1, [r7, #12]
 8011cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ccc:	4013      	ands	r3, r2
 8011cce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	015a      	lsls	r2, r3, #5
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	4413      	add	r3, r2
 8011cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	0159      	lsls	r1, r3, #5
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	440b      	add	r3, r1
 8011ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011cea:	4619      	mov	r1, r3
 8011cec:	4b35      	ldr	r3, [pc, #212]	; (8011dc4 <USB_DeactivateEndpoint+0x1b0>)
 8011cee:	4013      	ands	r3, r2
 8011cf0:	600b      	str	r3, [r1, #0]
 8011cf2:	e060      	b.n	8011db6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	015a      	lsls	r2, r3, #5
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011d0a:	d11f      	bne.n	8011d4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	015a      	lsls	r2, r3, #5
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	4413      	add	r3, r2
 8011d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	0151      	lsls	r1, r2, #5
 8011d1e:	68fa      	ldr	r2, [r7, #12]
 8011d20:	440a      	add	r2, r1
 8011d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011d2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011d2c:	68bb      	ldr	r3, [r7, #8]
 8011d2e:	015a      	lsls	r2, r3, #5
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	4413      	add	r3, r2
 8011d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	68ba      	ldr	r2, [r7, #8]
 8011d3c:	0151      	lsls	r1, r2, #5
 8011d3e:	68fa      	ldr	r2, [r7, #12]
 8011d40:	440a      	add	r2, r1
 8011d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	f003 030f 	and.w	r3, r3, #15
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8011d62:	041b      	lsls	r3, r3, #16
 8011d64:	43db      	mvns	r3, r3
 8011d66:	68f9      	ldr	r1, [r7, #12]
 8011d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d6c:	4013      	ands	r3, r2
 8011d6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011d76:	69da      	ldr	r2, [r3, #28]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	f003 030f 	and.w	r3, r3, #15
 8011d80:	2101      	movs	r1, #1
 8011d82:	fa01 f303 	lsl.w	r3, r1, r3
 8011d86:	041b      	lsls	r3, r3, #16
 8011d88:	43db      	mvns	r3, r3
 8011d8a:	68f9      	ldr	r1, [r7, #12]
 8011d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011d90:	4013      	ands	r3, r2
 8011d92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	015a      	lsls	r2, r3, #5
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	4413      	add	r3, r2
 8011d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011da0:	681a      	ldr	r2, [r3, #0]
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	0159      	lsls	r1, r3, #5
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	440b      	add	r3, r1
 8011daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011dae:	4619      	mov	r1, r3
 8011db0:	4b05      	ldr	r3, [pc, #20]	; (8011dc8 <USB_DeactivateEndpoint+0x1b4>)
 8011db2:	4013      	ands	r3, r2
 8011db4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3714      	adds	r7, #20
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr
 8011dc4:	ec337800 	.word	0xec337800
 8011dc8:	eff37800 	.word	0xeff37800

08011dcc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b086      	sub	sp, #24
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	785b      	ldrb	r3, [r3, #1]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	f040 810a 	bne.w	8011ffe <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	699b      	ldr	r3, [r3, #24]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d132      	bne.n	8011e58 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	015a      	lsls	r2, r3, #5
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	4413      	add	r3, r2
 8011dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dfe:	691b      	ldr	r3, [r3, #16]
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	0151      	lsls	r1, r2, #5
 8011e04:	697a      	ldr	r2, [r7, #20]
 8011e06:	440a      	add	r2, r1
 8011e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011e10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	015a      	lsls	r2, r3, #5
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	4413      	add	r3, r2
 8011e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e22:	691b      	ldr	r3, [r3, #16]
 8011e24:	693a      	ldr	r2, [r7, #16]
 8011e26:	0151      	lsls	r1, r2, #5
 8011e28:	697a      	ldr	r2, [r7, #20]
 8011e2a:	440a      	add	r2, r1
 8011e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e36:	693b      	ldr	r3, [r7, #16]
 8011e38:	015a      	lsls	r2, r3, #5
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e42:	691b      	ldr	r3, [r3, #16]
 8011e44:	693a      	ldr	r2, [r7, #16]
 8011e46:	0151      	lsls	r1, r2, #5
 8011e48:	697a      	ldr	r2, [r7, #20]
 8011e4a:	440a      	add	r2, r1
 8011e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e50:	0cdb      	lsrs	r3, r3, #19
 8011e52:	04db      	lsls	r3, r3, #19
 8011e54:	6113      	str	r3, [r2, #16]
 8011e56:	e074      	b.n	8011f42 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	015a      	lsls	r2, r3, #5
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	4413      	add	r3, r2
 8011e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e64:	691b      	ldr	r3, [r3, #16]
 8011e66:	693a      	ldr	r2, [r7, #16]
 8011e68:	0151      	lsls	r1, r2, #5
 8011e6a:	697a      	ldr	r2, [r7, #20]
 8011e6c:	440a      	add	r2, r1
 8011e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e72:	0cdb      	lsrs	r3, r3, #19
 8011e74:	04db      	lsls	r3, r3, #19
 8011e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	015a      	lsls	r2, r3, #5
 8011e7c:	697b      	ldr	r3, [r7, #20]
 8011e7e:	4413      	add	r3, r2
 8011e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e84:	691b      	ldr	r3, [r3, #16]
 8011e86:	693a      	ldr	r2, [r7, #16]
 8011e88:	0151      	lsls	r1, r2, #5
 8011e8a:	697a      	ldr	r2, [r7, #20]
 8011e8c:	440a      	add	r2, r1
 8011e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8011e96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8011e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	015a      	lsls	r2, r3, #5
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ea8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	6999      	ldr	r1, [r3, #24]
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	68db      	ldr	r3, [r3, #12]
 8011eb2:	440b      	add	r3, r1
 8011eb4:	1e59      	subs	r1, r3, #1
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	68db      	ldr	r3, [r3, #12]
 8011eba:	fbb1 f3f3 	udiv	r3, r1, r3
 8011ebe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011ec0:	4b9e      	ldr	r3, [pc, #632]	; (801213c <USB_EPStartXfer+0x370>)
 8011ec2:	400b      	ands	r3, r1
 8011ec4:	6939      	ldr	r1, [r7, #16]
 8011ec6:	0148      	lsls	r0, r1, #5
 8011ec8:	6979      	ldr	r1, [r7, #20]
 8011eca:	4401      	add	r1, r0
 8011ecc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	015a      	lsls	r2, r3, #5
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	4413      	add	r3, r2
 8011edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ee0:	691a      	ldr	r2, [r3, #16]
 8011ee2:	683b      	ldr	r3, [r7, #0]
 8011ee4:	699b      	ldr	r3, [r3, #24]
 8011ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011eea:	6939      	ldr	r1, [r7, #16]
 8011eec:	0148      	lsls	r0, r1, #5
 8011eee:	6979      	ldr	r1, [r7, #20]
 8011ef0:	4401      	add	r1, r0
 8011ef2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011ef6:	4313      	orrs	r3, r2
 8011ef8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	791b      	ldrb	r3, [r3, #4]
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d11f      	bne.n	8011f42 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	015a      	lsls	r2, r3, #5
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	4413      	add	r3, r2
 8011f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f0e:	691b      	ldr	r3, [r3, #16]
 8011f10:	693a      	ldr	r2, [r7, #16]
 8011f12:	0151      	lsls	r1, r2, #5
 8011f14:	697a      	ldr	r2, [r7, #20]
 8011f16:	440a      	add	r2, r1
 8011f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011f20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	015a      	lsls	r2, r3, #5
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	4413      	add	r3, r2
 8011f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	693a      	ldr	r2, [r7, #16]
 8011f32:	0151      	lsls	r1, r2, #5
 8011f34:	697a      	ldr	r2, [r7, #20]
 8011f36:	440a      	add	r2, r1
 8011f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011f40:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	015a      	lsls	r2, r3, #5
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	4413      	add	r3, r2
 8011f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	693a      	ldr	r2, [r7, #16]
 8011f52:	0151      	lsls	r1, r2, #5
 8011f54:	697a      	ldr	r2, [r7, #20]
 8011f56:	440a      	add	r2, r1
 8011f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011f60:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	791b      	ldrb	r3, [r3, #4]
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d015      	beq.n	8011f96 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	699b      	ldr	r3, [r3, #24]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	f000 8106 	beq.w	8012180 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	781b      	ldrb	r3, [r3, #0]
 8011f80:	f003 030f 	and.w	r3, r3, #15
 8011f84:	2101      	movs	r1, #1
 8011f86:	fa01 f303 	lsl.w	r3, r1, r3
 8011f8a:	6979      	ldr	r1, [r7, #20]
 8011f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f90:	4313      	orrs	r3, r2
 8011f92:	634b      	str	r3, [r1, #52]	; 0x34
 8011f94:	e0f4      	b.n	8012180 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f9c:	689b      	ldr	r3, [r3, #8]
 8011f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d110      	bne.n	8011fc8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	015a      	lsls	r2, r3, #5
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	4413      	add	r3, r2
 8011fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	693a      	ldr	r2, [r7, #16]
 8011fb6:	0151      	lsls	r1, r2, #5
 8011fb8:	697a      	ldr	r2, [r7, #20]
 8011fba:	440a      	add	r2, r1
 8011fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011fc4:	6013      	str	r3, [r2, #0]
 8011fc6:	e00f      	b.n	8011fe8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	015a      	lsls	r2, r3, #5
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	4413      	add	r3, r2
 8011fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	693a      	ldr	r2, [r7, #16]
 8011fd8:	0151      	lsls	r1, r2, #5
 8011fda:	697a      	ldr	r2, [r7, #20]
 8011fdc:	440a      	add	r2, r1
 8011fde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011fe6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	6919      	ldr	r1, [r3, #16]
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	781a      	ldrb	r2, [r3, #0]
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	699b      	ldr	r3, [r3, #24]
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 fa94 	bl	8012524 <USB_WritePacket>
 8011ffc:	e0c0      	b.n	8012180 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	015a      	lsls	r2, r3, #5
 8012002:	697b      	ldr	r3, [r7, #20]
 8012004:	4413      	add	r3, r2
 8012006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	693a      	ldr	r2, [r7, #16]
 801200e:	0151      	lsls	r1, r2, #5
 8012010:	697a      	ldr	r2, [r7, #20]
 8012012:	440a      	add	r2, r1
 8012014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012018:	0cdb      	lsrs	r3, r3, #19
 801201a:	04db      	lsls	r3, r3, #19
 801201c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	015a      	lsls	r2, r3, #5
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	4413      	add	r3, r2
 8012026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801202a:	691b      	ldr	r3, [r3, #16]
 801202c:	693a      	ldr	r2, [r7, #16]
 801202e:	0151      	lsls	r1, r2, #5
 8012030:	697a      	ldr	r2, [r7, #20]
 8012032:	440a      	add	r2, r1
 8012034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801203c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	699b      	ldr	r3, [r3, #24]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d123      	bne.n	8012092 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	015a      	lsls	r2, r3, #5
 801204e:	697b      	ldr	r3, [r7, #20]
 8012050:	4413      	add	r3, r2
 8012052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012056:	691a      	ldr	r2, [r3, #16]
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012060:	6939      	ldr	r1, [r7, #16]
 8012062:	0148      	lsls	r0, r1, #5
 8012064:	6979      	ldr	r1, [r7, #20]
 8012066:	4401      	add	r1, r0
 8012068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801206c:	4313      	orrs	r3, r2
 801206e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	015a      	lsls	r2, r3, #5
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	4413      	add	r3, r2
 8012078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801207c:	691b      	ldr	r3, [r3, #16]
 801207e:	693a      	ldr	r2, [r7, #16]
 8012080:	0151      	lsls	r1, r2, #5
 8012082:	697a      	ldr	r2, [r7, #20]
 8012084:	440a      	add	r2, r1
 8012086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801208a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801208e:	6113      	str	r3, [r2, #16]
 8012090:	e037      	b.n	8012102 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	699a      	ldr	r2, [r3, #24]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	4413      	add	r3, r2
 801209c:	1e5a      	subs	r2, r3, #1
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80120a6:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	89fa      	ldrh	r2, [r7, #14]
 80120ae:	fb03 f202 	mul.w	r2, r3, r2
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	015a      	lsls	r2, r3, #5
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	4413      	add	r3, r2
 80120be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120c2:	691a      	ldr	r2, [r3, #16]
 80120c4:	89fb      	ldrh	r3, [r7, #14]
 80120c6:	04d9      	lsls	r1, r3, #19
 80120c8:	4b1c      	ldr	r3, [pc, #112]	; (801213c <USB_EPStartXfer+0x370>)
 80120ca:	400b      	ands	r3, r1
 80120cc:	6939      	ldr	r1, [r7, #16]
 80120ce:	0148      	lsls	r0, r1, #5
 80120d0:	6979      	ldr	r1, [r7, #20]
 80120d2:	4401      	add	r1, r0
 80120d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80120d8:	4313      	orrs	r3, r2
 80120da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	015a      	lsls	r2, r3, #5
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	4413      	add	r3, r2
 80120e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120e8:	691a      	ldr	r2, [r3, #16]
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	69db      	ldr	r3, [r3, #28]
 80120ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80120f2:	6939      	ldr	r1, [r7, #16]
 80120f4:	0148      	lsls	r0, r1, #5
 80120f6:	6979      	ldr	r1, [r7, #20]
 80120f8:	4401      	add	r1, r0
 80120fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80120fe:	4313      	orrs	r3, r2
 8012100:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	791b      	ldrb	r3, [r3, #4]
 8012106:	2b01      	cmp	r3, #1
 8012108:	d12a      	bne.n	8012160 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012116:	2b00      	cmp	r3, #0
 8012118:	d112      	bne.n	8012140 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	015a      	lsls	r2, r3, #5
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	4413      	add	r3, r2
 8012122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	693a      	ldr	r2, [r7, #16]
 801212a:	0151      	lsls	r1, r2, #5
 801212c:	697a      	ldr	r2, [r7, #20]
 801212e:	440a      	add	r2, r1
 8012130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012138:	6013      	str	r3, [r2, #0]
 801213a:	e011      	b.n	8012160 <USB_EPStartXfer+0x394>
 801213c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	015a      	lsls	r2, r3, #5
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	4413      	add	r3, r2
 8012148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	693a      	ldr	r2, [r7, #16]
 8012150:	0151      	lsls	r1, r2, #5
 8012152:	697a      	ldr	r2, [r7, #20]
 8012154:	440a      	add	r2, r1
 8012156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801215e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	015a      	lsls	r2, r3, #5
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	4413      	add	r3, r2
 8012168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	693a      	ldr	r2, [r7, #16]
 8012170:	0151      	lsls	r1, r2, #5
 8012172:	697a      	ldr	r2, [r7, #20]
 8012174:	440a      	add	r2, r1
 8012176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801217a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801217e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3718      	adds	r7, #24
 8012186:	46bd      	mov	sp, r7
 8012188:	bd80      	pop	{r7, pc}
 801218a:	bf00      	nop

0801218c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	785b      	ldrb	r3, [r3, #1]
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	f040 80ab 	bne.w	8012300 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	699b      	ldr	r3, [r3, #24]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d132      	bne.n	8012218 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	015a      	lsls	r2, r3, #5
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	4413      	add	r3, r2
 80121ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121be:	691b      	ldr	r3, [r3, #16]
 80121c0:	68ba      	ldr	r2, [r7, #8]
 80121c2:	0151      	lsls	r1, r2, #5
 80121c4:	68fa      	ldr	r2, [r7, #12]
 80121c6:	440a      	add	r2, r1
 80121c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80121d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80121d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	015a      	lsls	r2, r3, #5
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	4413      	add	r3, r2
 80121de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80121e2:	691b      	ldr	r3, [r3, #16]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	0151      	lsls	r1, r2, #5
 80121e8:	68fa      	ldr	r2, [r7, #12]
 80121ea:	440a      	add	r2, r1
 80121ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80121f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80121f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	015a      	lsls	r2, r3, #5
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	4413      	add	r3, r2
 80121fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012202:	691b      	ldr	r3, [r3, #16]
 8012204:	68ba      	ldr	r2, [r7, #8]
 8012206:	0151      	lsls	r1, r2, #5
 8012208:	68fa      	ldr	r2, [r7, #12]
 801220a:	440a      	add	r2, r1
 801220c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012210:	0cdb      	lsrs	r3, r3, #19
 8012212:	04db      	lsls	r3, r3, #19
 8012214:	6113      	str	r3, [r2, #16]
 8012216:	e04e      	b.n	80122b6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	015a      	lsls	r2, r3, #5
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	4413      	add	r3, r2
 8012220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012224:	691b      	ldr	r3, [r3, #16]
 8012226:	68ba      	ldr	r2, [r7, #8]
 8012228:	0151      	lsls	r1, r2, #5
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	440a      	add	r2, r1
 801222e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012232:	0cdb      	lsrs	r3, r3, #19
 8012234:	04db      	lsls	r3, r3, #19
 8012236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	015a      	lsls	r2, r3, #5
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	4413      	add	r3, r2
 8012240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012244:	691b      	ldr	r3, [r3, #16]
 8012246:	68ba      	ldr	r2, [r7, #8]
 8012248:	0151      	lsls	r1, r2, #5
 801224a:	68fa      	ldr	r2, [r7, #12]
 801224c:	440a      	add	r2, r1
 801224e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012252:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012256:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801225a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	699a      	ldr	r2, [r3, #24]
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	429a      	cmp	r2, r3
 8012266:	d903      	bls.n	8012270 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	68da      	ldr	r2, [r3, #12]
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	015a      	lsls	r2, r3, #5
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	4413      	add	r3, r2
 8012278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	68ba      	ldr	r2, [r7, #8]
 8012280:	0151      	lsls	r1, r2, #5
 8012282:	68fa      	ldr	r2, [r7, #12]
 8012284:	440a      	add	r2, r1
 8012286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801228a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801228e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	015a      	lsls	r2, r3, #5
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	4413      	add	r3, r2
 8012298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801229c:	691a      	ldr	r2, [r3, #16]
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	699b      	ldr	r3, [r3, #24]
 80122a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80122a6:	68b9      	ldr	r1, [r7, #8]
 80122a8:	0148      	lsls	r0, r1, #5
 80122aa:	68f9      	ldr	r1, [r7, #12]
 80122ac:	4401      	add	r1, r0
 80122ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80122b2:	4313      	orrs	r3, r2
 80122b4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	015a      	lsls	r2, r3, #5
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	4413      	add	r3, r2
 80122be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	68ba      	ldr	r2, [r7, #8]
 80122c6:	0151      	lsls	r1, r2, #5
 80122c8:	68fa      	ldr	r2, [r7, #12]
 80122ca:	440a      	add	r2, r1
 80122cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80122d4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	699b      	ldr	r3, [r3, #24]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d071      	beq.n	80123c2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	f003 030f 	and.w	r3, r3, #15
 80122ee:	2101      	movs	r1, #1
 80122f0:	fa01 f303 	lsl.w	r3, r1, r3
 80122f4:	68f9      	ldr	r1, [r7, #12]
 80122f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122fa:	4313      	orrs	r3, r2
 80122fc:	634b      	str	r3, [r1, #52]	; 0x34
 80122fe:	e060      	b.n	80123c2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	015a      	lsls	r2, r3, #5
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	4413      	add	r3, r2
 8012308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801230c:	691b      	ldr	r3, [r3, #16]
 801230e:	68ba      	ldr	r2, [r7, #8]
 8012310:	0151      	lsls	r1, r2, #5
 8012312:	68fa      	ldr	r2, [r7, #12]
 8012314:	440a      	add	r2, r1
 8012316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801231a:	0cdb      	lsrs	r3, r3, #19
 801231c:	04db      	lsls	r3, r3, #19
 801231e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	015a      	lsls	r2, r3, #5
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4413      	add	r3, r2
 8012328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801232c:	691b      	ldr	r3, [r3, #16]
 801232e:	68ba      	ldr	r2, [r7, #8]
 8012330:	0151      	lsls	r1, r2, #5
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	440a      	add	r2, r1
 8012336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801233a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801233e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012342:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	699b      	ldr	r3, [r3, #24]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d003      	beq.n	8012354 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	68da      	ldr	r2, [r3, #12]
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	68da      	ldr	r2, [r3, #12]
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	015a      	lsls	r2, r3, #5
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	4413      	add	r3, r2
 8012364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012368:	691b      	ldr	r3, [r3, #16]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	0151      	lsls	r1, r2, #5
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	440a      	add	r2, r1
 8012372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801237a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	015a      	lsls	r2, r3, #5
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	4413      	add	r3, r2
 8012384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012388:	691a      	ldr	r2, [r3, #16]
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	69db      	ldr	r3, [r3, #28]
 801238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012392:	68b9      	ldr	r1, [r7, #8]
 8012394:	0148      	lsls	r0, r1, #5
 8012396:	68f9      	ldr	r1, [r7, #12]
 8012398:	4401      	add	r1, r0
 801239a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801239e:	4313      	orrs	r3, r2
 80123a0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	015a      	lsls	r2, r3, #5
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	4413      	add	r3, r2
 80123aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	68ba      	ldr	r2, [r7, #8]
 80123b2:	0151      	lsls	r1, r2, #5
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	440a      	add	r2, r1
 80123b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80123c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80123c2:	2300      	movs	r3, #0
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3714      	adds	r7, #20
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80123d0:	b480      	push	{r7}
 80123d2:	b087      	sub	sp, #28
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80123da:	2300      	movs	r3, #0
 80123dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80123de:	2300      	movs	r3, #0
 80123e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	785b      	ldrb	r3, [r3, #1]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d14a      	bne.n	8012484 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	015a      	lsls	r2, r3, #5
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	4413      	add	r3, r2
 80123f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012406:	f040 8086 	bne.w	8012516 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801240a:	683b      	ldr	r3, [r7, #0]
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	015a      	lsls	r2, r3, #5
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	4413      	add	r3, r2
 8012414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	683a      	ldr	r2, [r7, #0]
 801241c:	7812      	ldrb	r2, [r2, #0]
 801241e:	0151      	lsls	r1, r2, #5
 8012420:	693a      	ldr	r2, [r7, #16]
 8012422:	440a      	add	r2, r1
 8012424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012428:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801242c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	015a      	lsls	r2, r3, #5
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	4413      	add	r3, r2
 8012438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	683a      	ldr	r2, [r7, #0]
 8012440:	7812      	ldrb	r2, [r2, #0]
 8012442:	0151      	lsls	r1, r2, #5
 8012444:	693a      	ldr	r2, [r7, #16]
 8012446:	440a      	add	r2, r1
 8012448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801244c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012450:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	3301      	adds	r3, #1
 8012456:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f242 7210 	movw	r2, #10000	; 0x2710
 801245e:	4293      	cmp	r3, r2
 8012460:	d902      	bls.n	8012468 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012462:	2301      	movs	r3, #1
 8012464:	75fb      	strb	r3, [r7, #23]
          break;
 8012466:	e056      	b.n	8012516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	015a      	lsls	r2, r3, #5
 801246e:	693b      	ldr	r3, [r7, #16]
 8012470:	4413      	add	r3, r2
 8012472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801247c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012480:	d0e7      	beq.n	8012452 <USB_EPStopXfer+0x82>
 8012482:	e048      	b.n	8012516 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	015a      	lsls	r2, r3, #5
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	4413      	add	r3, r2
 801248e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801249c:	d13b      	bne.n	8012516 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	015a      	lsls	r2, r3, #5
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	4413      	add	r3, r2
 80124a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	7812      	ldrb	r2, [r2, #0]
 80124b2:	0151      	lsls	r1, r2, #5
 80124b4:	693a      	ldr	r2, [r7, #16]
 80124b6:	440a      	add	r2, r1
 80124b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80124c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	015a      	lsls	r2, r3, #5
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	4413      	add	r3, r2
 80124cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	683a      	ldr	r2, [r7, #0]
 80124d4:	7812      	ldrb	r2, [r2, #0]
 80124d6:	0151      	lsls	r1, r2, #5
 80124d8:	693a      	ldr	r2, [r7, #16]
 80124da:	440a      	add	r2, r1
 80124dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80124e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80124e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	3301      	adds	r3, #1
 80124ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d902      	bls.n	80124fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80124f6:	2301      	movs	r3, #1
 80124f8:	75fb      	strb	r3, [r7, #23]
          break;
 80124fa:	e00c      	b.n	8012516 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	015a      	lsls	r2, r3, #5
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	4413      	add	r3, r2
 8012506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012514:	d0e7      	beq.n	80124e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012516:	7dfb      	ldrb	r3, [r7, #23]
}
 8012518:	4618      	mov	r0, r3
 801251a:	371c      	adds	r7, #28
 801251c:	46bd      	mov	sp, r7
 801251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012522:	4770      	bx	lr

08012524 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8012524:	b480      	push	{r7}
 8012526:	b089      	sub	sp, #36	; 0x24
 8012528:	af00      	add	r7, sp, #0
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	4611      	mov	r1, r2
 8012530:	461a      	mov	r2, r3
 8012532:	460b      	mov	r3, r1
 8012534:	71fb      	strb	r3, [r7, #7]
 8012536:	4613      	mov	r3, r2
 8012538:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801253e:	68bb      	ldr	r3, [r7, #8]
 8012540:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8012542:	88bb      	ldrh	r3, [r7, #4]
 8012544:	3303      	adds	r3, #3
 8012546:	089b      	lsrs	r3, r3, #2
 8012548:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 801254a:	2300      	movs	r3, #0
 801254c:	61bb      	str	r3, [r7, #24]
 801254e:	e018      	b.n	8012582 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012550:	79fb      	ldrb	r3, [r7, #7]
 8012552:	031a      	lsls	r2, r3, #12
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	4413      	add	r3, r2
 8012558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801255c:	461a      	mov	r2, r3
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	6013      	str	r3, [r2, #0]
    pSrc++;
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	3301      	adds	r3, #1
 8012568:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801256a:	69fb      	ldr	r3, [r7, #28]
 801256c:	3301      	adds	r3, #1
 801256e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	3301      	adds	r3, #1
 8012574:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	3301      	adds	r3, #1
 801257a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	3301      	adds	r3, #1
 8012580:	61bb      	str	r3, [r7, #24]
 8012582:	69ba      	ldr	r2, [r7, #24]
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	429a      	cmp	r2, r3
 8012588:	d3e2      	bcc.n	8012550 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 801258a:	2300      	movs	r3, #0
}
 801258c:	4618      	mov	r0, r3
 801258e:	3724      	adds	r7, #36	; 0x24
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr

08012598 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012598:	b480      	push	{r7}
 801259a:	b08b      	sub	sp, #44	; 0x2c
 801259c:	af00      	add	r7, sp, #0
 801259e:	60f8      	str	r0, [r7, #12]
 80125a0:	60b9      	str	r1, [r7, #8]
 80125a2:	4613      	mov	r3, r2
 80125a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80125ae:	88fb      	ldrh	r3, [r7, #6]
 80125b0:	089b      	lsrs	r3, r3, #2
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80125b6:	88fb      	ldrh	r3, [r7, #6]
 80125b8:	f003 0303 	and.w	r3, r3, #3
 80125bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80125be:	2300      	movs	r3, #0
 80125c0:	623b      	str	r3, [r7, #32]
 80125c2:	e014      	b.n	80125ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80125c4:	69bb      	ldr	r3, [r7, #24]
 80125c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80125ca:	681a      	ldr	r2, [r3, #0]
 80125cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80125d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d2:	3301      	adds	r3, #1
 80125d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80125d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d8:	3301      	adds	r3, #1
 80125da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80125dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125de:	3301      	adds	r3, #1
 80125e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80125e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e4:	3301      	adds	r3, #1
 80125e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80125e8:	6a3b      	ldr	r3, [r7, #32]
 80125ea:	3301      	adds	r3, #1
 80125ec:	623b      	str	r3, [r7, #32]
 80125ee:	6a3a      	ldr	r2, [r7, #32]
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d3e6      	bcc.n	80125c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80125f6:	8bfb      	ldrh	r3, [r7, #30]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d01e      	beq.n	801263a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80125fc:	2300      	movs	r3, #0
 80125fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012606:	461a      	mov	r2, r3
 8012608:	f107 0310 	add.w	r3, r7, #16
 801260c:	6812      	ldr	r2, [r2, #0]
 801260e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012610:	693a      	ldr	r2, [r7, #16]
 8012612:	6a3b      	ldr	r3, [r7, #32]
 8012614:	b2db      	uxtb	r3, r3
 8012616:	00db      	lsls	r3, r3, #3
 8012618:	fa22 f303 	lsr.w	r3, r2, r3
 801261c:	b2da      	uxtb	r2, r3
 801261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012620:	701a      	strb	r2, [r3, #0]
      i++;
 8012622:	6a3b      	ldr	r3, [r7, #32]
 8012624:	3301      	adds	r3, #1
 8012626:	623b      	str	r3, [r7, #32]
      pDest++;
 8012628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262a:	3301      	adds	r3, #1
 801262c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801262e:	8bfb      	ldrh	r3, [r7, #30]
 8012630:	3b01      	subs	r3, #1
 8012632:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012634:	8bfb      	ldrh	r3, [r7, #30]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d1ea      	bne.n	8012610 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801263c:	4618      	mov	r0, r3
 801263e:	372c      	adds	r7, #44	; 0x2c
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr

08012648 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
 8012650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	785b      	ldrb	r3, [r3, #1]
 8012660:	2b01      	cmp	r3, #1
 8012662:	d12c      	bne.n	80126be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012664:	68bb      	ldr	r3, [r7, #8]
 8012666:	015a      	lsls	r2, r3, #5
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	4413      	add	r3, r2
 801266c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	db12      	blt.n	801269c <USB_EPSetStall+0x54>
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00f      	beq.n	801269c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	015a      	lsls	r2, r3, #5
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	4413      	add	r3, r2
 8012684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	68ba      	ldr	r2, [r7, #8]
 801268c:	0151      	lsls	r1, r2, #5
 801268e:	68fa      	ldr	r2, [r7, #12]
 8012690:	440a      	add	r2, r1
 8012692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012696:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801269a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	015a      	lsls	r2, r3, #5
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	4413      	add	r3, r2
 80126a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	68ba      	ldr	r2, [r7, #8]
 80126ac:	0151      	lsls	r1, r2, #5
 80126ae:	68fa      	ldr	r2, [r7, #12]
 80126b0:	440a      	add	r2, r1
 80126b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80126ba:	6013      	str	r3, [r2, #0]
 80126bc:	e02b      	b.n	8012716 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	015a      	lsls	r2, r3, #5
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	4413      	add	r3, r2
 80126c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	db12      	blt.n	80126f6 <USB_EPSetStall+0xae>
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00f      	beq.n	80126f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	015a      	lsls	r2, r3, #5
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	4413      	add	r3, r2
 80126de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	68ba      	ldr	r2, [r7, #8]
 80126e6:	0151      	lsls	r1, r2, #5
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	440a      	add	r2, r1
 80126ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80126f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80126f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80126f6:	68bb      	ldr	r3, [r7, #8]
 80126f8:	015a      	lsls	r2, r3, #5
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	4413      	add	r3, r2
 80126fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	68ba      	ldr	r2, [r7, #8]
 8012706:	0151      	lsls	r1, r2, #5
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	440a      	add	r2, r1
 801270c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	3714      	adds	r7, #20
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr

08012724 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012724:	b480      	push	{r7}
 8012726:	b085      	sub	sp, #20
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012738:	683b      	ldr	r3, [r7, #0]
 801273a:	785b      	ldrb	r3, [r3, #1]
 801273c:	2b01      	cmp	r3, #1
 801273e:	d128      	bne.n	8012792 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	015a      	lsls	r2, r3, #5
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	4413      	add	r3, r2
 8012748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	68ba      	ldr	r2, [r7, #8]
 8012750:	0151      	lsls	r1, r2, #5
 8012752:	68fa      	ldr	r2, [r7, #12]
 8012754:	440a      	add	r2, r1
 8012756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801275a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801275e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	791b      	ldrb	r3, [r3, #4]
 8012764:	2b03      	cmp	r3, #3
 8012766:	d003      	beq.n	8012770 <USB_EPClearStall+0x4c>
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	791b      	ldrb	r3, [r3, #4]
 801276c:	2b02      	cmp	r3, #2
 801276e:	d138      	bne.n	80127e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	015a      	lsls	r2, r3, #5
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	4413      	add	r3, r2
 8012778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	68ba      	ldr	r2, [r7, #8]
 8012780:	0151      	lsls	r1, r2, #5
 8012782:	68fa      	ldr	r2, [r7, #12]
 8012784:	440a      	add	r2, r1
 8012786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801278a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801278e:	6013      	str	r3, [r2, #0]
 8012790:	e027      	b.n	80127e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	015a      	lsls	r2, r3, #5
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	4413      	add	r3, r2
 801279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	68ba      	ldr	r2, [r7, #8]
 80127a2:	0151      	lsls	r1, r2, #5
 80127a4:	68fa      	ldr	r2, [r7, #12]
 80127a6:	440a      	add	r2, r1
 80127a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80127b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	791b      	ldrb	r3, [r3, #4]
 80127b6:	2b03      	cmp	r3, #3
 80127b8:	d003      	beq.n	80127c2 <USB_EPClearStall+0x9e>
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	791b      	ldrb	r3, [r3, #4]
 80127be:	2b02      	cmp	r3, #2
 80127c0:	d10f      	bne.n	80127e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	015a      	lsls	r2, r3, #5
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	4413      	add	r3, r2
 80127ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	68ba      	ldr	r2, [r7, #8]
 80127d2:	0151      	lsls	r1, r2, #5
 80127d4:	68fa      	ldr	r2, [r7, #12]
 80127d6:	440a      	add	r2, r1
 80127d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80127dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80127e2:	2300      	movs	r3, #0
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	3714      	adds	r7, #20
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr

080127f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b085      	sub	sp, #20
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	460b      	mov	r3, r1
 80127fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	68fa      	ldr	r2, [r7, #12]
 801280a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801280e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012812:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	78fb      	ldrb	r3, [r7, #3]
 801281e:	011b      	lsls	r3, r3, #4
 8012820:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012824:	68f9      	ldr	r1, [r7, #12]
 8012826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801282a:	4313      	orrs	r3, r2
 801282c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801282e:	2300      	movs	r3, #0
}
 8012830:	4618      	mov	r0, r3
 8012832:	3714      	adds	r7, #20
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr

0801283c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801283c:	b480      	push	{r7}
 801283e:	b085      	sub	sp, #20
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	68fa      	ldr	r2, [r7, #12]
 8012852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012856:	f023 0303 	bic.w	r3, r3, #3
 801285a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012862:	685b      	ldr	r3, [r3, #4]
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801286a:	f023 0302 	bic.w	r3, r3, #2
 801286e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012870:	2300      	movs	r3, #0
}
 8012872:	4618      	mov	r0, r3
 8012874:	3714      	adds	r7, #20
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr

0801287e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801287e:	b480      	push	{r7}
 8012880:	b085      	sub	sp, #20
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012898:	f023 0303 	bic.w	r3, r3, #3
 801289c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	68fa      	ldr	r2, [r7, #12]
 80128a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80128ac:	f043 0302 	orr.w	r3, r3, #2
 80128b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80128b2:	2300      	movs	r3, #0
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3714      	adds	r7, #20
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	695b      	ldr	r3, [r3, #20]
 80128cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	699b      	ldr	r3, [r3, #24]
 80128d2:	68fa      	ldr	r2, [r7, #12]
 80128d4:	4013      	ands	r3, r2
 80128d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80128d8:	68fb      	ldr	r3, [r7, #12]
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3714      	adds	r7, #20
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr

080128e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80128e6:	b480      	push	{r7}
 80128e8:	b085      	sub	sp, #20
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128f8:	699b      	ldr	r3, [r3, #24]
 80128fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012902:	69db      	ldr	r3, [r3, #28]
 8012904:	68ba      	ldr	r2, [r7, #8]
 8012906:	4013      	ands	r3, r2
 8012908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	0c1b      	lsrs	r3, r3, #16
}
 801290e:	4618      	mov	r0, r3
 8012910:	3714      	adds	r7, #20
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr

0801291a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801291a:	b480      	push	{r7}
 801291c:	b085      	sub	sp, #20
 801291e:	af00      	add	r7, sp, #0
 8012920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801292c:	699b      	ldr	r3, [r3, #24]
 801292e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012936:	69db      	ldr	r3, [r3, #28]
 8012938:	68ba      	ldr	r2, [r7, #8]
 801293a:	4013      	ands	r3, r2
 801293c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	b29b      	uxth	r3, r3
}
 8012942:	4618      	mov	r0, r3
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr

0801294e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801294e:	b480      	push	{r7}
 8012950:	b085      	sub	sp, #20
 8012952:	af00      	add	r7, sp, #0
 8012954:	6078      	str	r0, [r7, #4]
 8012956:	460b      	mov	r3, r1
 8012958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801295e:	78fb      	ldrb	r3, [r7, #3]
 8012960:	015a      	lsls	r2, r3, #5
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	4413      	add	r3, r2
 8012966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801296a:	689b      	ldr	r3, [r3, #8]
 801296c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012974:	695b      	ldr	r3, [r3, #20]
 8012976:	68ba      	ldr	r2, [r7, #8]
 8012978:	4013      	ands	r3, r2
 801297a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801297c:	68bb      	ldr	r3, [r7, #8]
}
 801297e:	4618      	mov	r0, r3
 8012980:	3714      	adds	r7, #20
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr

0801298a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801298a:	b480      	push	{r7}
 801298c:	b087      	sub	sp, #28
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
 8012992:	460b      	mov	r3, r1
 8012994:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129a0:	691b      	ldr	r3, [r3, #16]
 80129a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80129ae:	78fb      	ldrb	r3, [r7, #3]
 80129b0:	f003 030f 	and.w	r3, r3, #15
 80129b4:	68fa      	ldr	r2, [r7, #12]
 80129b6:	fa22 f303 	lsr.w	r3, r2, r3
 80129ba:	01db      	lsls	r3, r3, #7
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	693a      	ldr	r2, [r7, #16]
 80129c0:	4313      	orrs	r3, r2
 80129c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80129c4:	78fb      	ldrb	r3, [r7, #3]
 80129c6:	015a      	lsls	r2, r3, #5
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d0:	689b      	ldr	r3, [r3, #8]
 80129d2:	693a      	ldr	r2, [r7, #16]
 80129d4:	4013      	ands	r3, r2
 80129d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80129d8:	68bb      	ldr	r3, [r7, #8]
}
 80129da:	4618      	mov	r0, r3
 80129dc:	371c      	adds	r7, #28
 80129de:	46bd      	mov	sp, r7
 80129e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e4:	4770      	bx	lr

080129e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80129e6:	b480      	push	{r7}
 80129e8:	b083      	sub	sp, #12
 80129ea:	af00      	add	r7, sp, #0
 80129ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	695b      	ldr	r3, [r3, #20]
 80129f2:	f003 0301 	and.w	r3, r3, #1
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	370c      	adds	r7, #12
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr

08012a02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012a02:	b480      	push	{r7}
 8012a04:	b085      	sub	sp, #20
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	68fa      	ldr	r2, [r7, #12]
 8012a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8012a20:	f023 0307 	bic.w	r3, r3, #7
 8012a24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012a38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012a3a:	2300      	movs	r3, #0
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3714      	adds	r7, #20
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr

08012a48 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
 8012a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	333c      	adds	r3, #60	; 0x3c
 8012a5a:	3304      	adds	r3, #4
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	4a1c      	ldr	r2, [pc, #112]	; (8012ad4 <USB_EP0_OutStart+0x8c>)
 8012a64:	4293      	cmp	r3, r2
 8012a66:	d90a      	bls.n	8012a7e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012a78:	d101      	bne.n	8012a7e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	e024      	b.n	8012ac8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a84:	461a      	mov	r2, r3
 8012a86:	2300      	movs	r3, #0
 8012a88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a90:	691b      	ldr	r3, [r3, #16]
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012a98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012aa4:	691b      	ldr	r3, [r3, #16]
 8012aa6:	68fa      	ldr	r2, [r7, #12]
 8012aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012aac:	f043 0318 	orr.w	r3, r3, #24
 8012ab0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ab8:	691b      	ldr	r3, [r3, #16]
 8012aba:	68fa      	ldr	r2, [r7, #12]
 8012abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ac0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012ac4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8012ac6:	2300      	movs	r3, #0
}
 8012ac8:	4618      	mov	r0, r3
 8012aca:	3714      	adds	r7, #20
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr
 8012ad4:	4f54300a 	.word	0x4f54300a

08012ad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b085      	sub	sp, #20
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	4a13      	ldr	r2, [pc, #76]	; (8012b3c <USB_CoreReset+0x64>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d901      	bls.n	8012af6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012af2:	2303      	movs	r3, #3
 8012af4:	e01b      	b.n	8012b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	691b      	ldr	r3, [r3, #16]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	daf2      	bge.n	8012ae4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012afe:	2300      	movs	r3, #0
 8012b00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	691b      	ldr	r3, [r3, #16]
 8012b06:	f043 0201 	orr.w	r2, r3, #1
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	3301      	adds	r3, #1
 8012b12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	4a09      	ldr	r2, [pc, #36]	; (8012b3c <USB_CoreReset+0x64>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d901      	bls.n	8012b20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8012b1c:	2303      	movs	r3, #3
 8012b1e:	e006      	b.n	8012b2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	691b      	ldr	r3, [r3, #16]
 8012b24:	f003 0301 	and.w	r3, r3, #1
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d0f0      	beq.n	8012b0e <USB_CoreReset+0x36>

  return HAL_OK;
 8012b2c:	2300      	movs	r3, #0
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3714      	adds	r7, #20
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr
 8012b3a:	bf00      	nop
 8012b3c:	00030d40 	.word	0x00030d40

08012b40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	460b      	mov	r3, r1
 8012b4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012b4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012b50:	f002 fadc 	bl	801510c <USBD_static_malloc>
 8012b54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d105      	bne.n	8012b68 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012b64:	2302      	movs	r3, #2
 8012b66:	e066      	b.n	8012c36 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	68fa      	ldr	r2, [r7, #12]
 8012b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	7c1b      	ldrb	r3, [r3, #16]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d119      	bne.n	8012bac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b7c:	2202      	movs	r2, #2
 8012b7e:	2181      	movs	r1, #129	; 0x81
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f002 f8af 	bl	8014ce4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2201      	movs	r2, #1
 8012b8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b90:	2202      	movs	r2, #2
 8012b92:	2101      	movs	r1, #1
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f002 f8a5 	bl	8014ce4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2210      	movs	r2, #16
 8012ba6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012baa:	e016      	b.n	8012bda <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012bac:	2340      	movs	r3, #64	; 0x40
 8012bae:	2202      	movs	r2, #2
 8012bb0:	2181      	movs	r1, #129	; 0x81
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f002 f896 	bl	8014ce4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2201      	movs	r2, #1
 8012bbc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012bbe:	2340      	movs	r3, #64	; 0x40
 8012bc0:	2202      	movs	r2, #2
 8012bc2:	2101      	movs	r1, #1
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f002 f88d 	bl	8014ce4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2210      	movs	r2, #16
 8012bd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012bda:	2308      	movs	r3, #8
 8012bdc:	2203      	movs	r2, #3
 8012bde:	2182      	movs	r1, #130	; 0x82
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f002 f87f 	bl	8014ce4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2201      	movs	r2, #1
 8012bea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2200      	movs	r2, #0
 8012c04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	7c1b      	ldrb	r3, [r3, #16]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d109      	bne.n	8012c24 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f002 f9db 	bl	8014fd8 <USBD_LL_PrepareReceive>
 8012c22:	e007      	b.n	8012c34 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012c2a:	2340      	movs	r3, #64	; 0x40
 8012c2c:	2101      	movs	r1, #1
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f002 f9d2 	bl	8014fd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012c34:	2300      	movs	r3, #0
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3710      	adds	r7, #16
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}

08012c3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c3e:	b580      	push	{r7, lr}
 8012c40:	b082      	sub	sp, #8
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	6078      	str	r0, [r7, #4]
 8012c46:	460b      	mov	r3, r1
 8012c48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012c4a:	2181      	movs	r1, #129	; 0x81
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f002 f887 	bl	8014d60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2200      	movs	r2, #0
 8012c56:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012c58:	2101      	movs	r1, #1
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f002 f880 	bl	8014d60 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2200      	movs	r2, #0
 8012c64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012c68:	2182      	movs	r1, #130	; 0x82
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f002 f878 	bl	8014d60 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d00e      	beq.n	8012ca8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f002 fa44 	bl	8015128 <USBD_static_free>
    pdev->pClassData = NULL;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3708      	adds	r7, #8
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
	...

08012cb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b086      	sub	sp, #24
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012cc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012cd2:	693b      	ldr	r3, [r7, #16]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d101      	bne.n	8012cdc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012cd8:	2303      	movs	r3, #3
 8012cda:	e0af      	b.n	8012e3c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012cdc:	683b      	ldr	r3, [r7, #0]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d03f      	beq.n	8012d68 <USBD_CDC_Setup+0xb4>
 8012ce8:	2b20      	cmp	r3, #32
 8012cea:	f040 809f 	bne.w	8012e2c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	88db      	ldrh	r3, [r3, #6]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d02e      	beq.n	8012d54 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	b25b      	sxtb	r3, r3
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	da16      	bge.n	8012d2e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	683a      	ldr	r2, [r7, #0]
 8012d0a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012d0c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012d0e:	683a      	ldr	r2, [r7, #0]
 8012d10:	88d2      	ldrh	r2, [r2, #6]
 8012d12:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	88db      	ldrh	r3, [r3, #6]
 8012d18:	2b07      	cmp	r3, #7
 8012d1a:	bf28      	it	cs
 8012d1c:	2307      	movcs	r3, #7
 8012d1e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	89fa      	ldrh	r2, [r7, #14]
 8012d24:	4619      	mov	r1, r3
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f001 fb43 	bl	80143b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012d2c:	e085      	b.n	8012e3a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	785a      	ldrb	r2, [r3, #1]
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	88db      	ldrh	r3, [r3, #6]
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012d44:	6939      	ldr	r1, [r7, #16]
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	88db      	ldrh	r3, [r3, #6]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f001 fb5c 	bl	801440a <USBD_CtlPrepareRx>
      break;
 8012d52:	e072      	b.n	8012e3a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d5a:	689b      	ldr	r3, [r3, #8]
 8012d5c:	683a      	ldr	r2, [r7, #0]
 8012d5e:	7850      	ldrb	r0, [r2, #1]
 8012d60:	2200      	movs	r2, #0
 8012d62:	6839      	ldr	r1, [r7, #0]
 8012d64:	4798      	blx	r3
      break;
 8012d66:	e068      	b.n	8012e3a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	785b      	ldrb	r3, [r3, #1]
 8012d6c:	2b0b      	cmp	r3, #11
 8012d6e:	d852      	bhi.n	8012e16 <USBD_CDC_Setup+0x162>
 8012d70:	a201      	add	r2, pc, #4	; (adr r2, 8012d78 <USBD_CDC_Setup+0xc4>)
 8012d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d76:	bf00      	nop
 8012d78:	08012da9 	.word	0x08012da9
 8012d7c:	08012e25 	.word	0x08012e25
 8012d80:	08012e17 	.word	0x08012e17
 8012d84:	08012e17 	.word	0x08012e17
 8012d88:	08012e17 	.word	0x08012e17
 8012d8c:	08012e17 	.word	0x08012e17
 8012d90:	08012e17 	.word	0x08012e17
 8012d94:	08012e17 	.word	0x08012e17
 8012d98:	08012e17 	.word	0x08012e17
 8012d9c:	08012e17 	.word	0x08012e17
 8012da0:	08012dd3 	.word	0x08012dd3
 8012da4:	08012dfd 	.word	0x08012dfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012dae:	b2db      	uxtb	r3, r3
 8012db0:	2b03      	cmp	r3, #3
 8012db2:	d107      	bne.n	8012dc4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012db4:	f107 030a 	add.w	r3, r7, #10
 8012db8:	2202      	movs	r2, #2
 8012dba:	4619      	mov	r1, r3
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f001 faf8 	bl	80143b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012dc2:	e032      	b.n	8012e2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012dc4:	6839      	ldr	r1, [r7, #0]
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f001 fa82 	bl	80142d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8012dcc:	2303      	movs	r3, #3
 8012dce:	75fb      	strb	r3, [r7, #23]
          break;
 8012dd0:	e02b      	b.n	8012e2a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012dd8:	b2db      	uxtb	r3, r3
 8012dda:	2b03      	cmp	r3, #3
 8012ddc:	d107      	bne.n	8012dee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012dde:	f107 030d 	add.w	r3, r7, #13
 8012de2:	2201      	movs	r2, #1
 8012de4:	4619      	mov	r1, r3
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f001 fae3 	bl	80143b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012dec:	e01d      	b.n	8012e2a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012dee:	6839      	ldr	r1, [r7, #0]
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f001 fa6d 	bl	80142d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8012df6:	2303      	movs	r3, #3
 8012df8:	75fb      	strb	r3, [r7, #23]
          break;
 8012dfa:	e016      	b.n	8012e2a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	2b03      	cmp	r3, #3
 8012e06:	d00f      	beq.n	8012e28 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012e08:	6839      	ldr	r1, [r7, #0]
 8012e0a:	6878      	ldr	r0, [r7, #4]
 8012e0c:	f001 fa60 	bl	80142d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8012e10:	2303      	movs	r3, #3
 8012e12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012e14:	e008      	b.n	8012e28 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012e16:	6839      	ldr	r1, [r7, #0]
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f001 fa59 	bl	80142d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8012e1e:	2303      	movs	r3, #3
 8012e20:	75fb      	strb	r3, [r7, #23]
          break;
 8012e22:	e002      	b.n	8012e2a <USBD_CDC_Setup+0x176>
          break;
 8012e24:	bf00      	nop
 8012e26:	e008      	b.n	8012e3a <USBD_CDC_Setup+0x186>
          break;
 8012e28:	bf00      	nop
      }
      break;
 8012e2a:	e006      	b.n	8012e3a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012e2c:	6839      	ldr	r1, [r7, #0]
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f001 fa4e 	bl	80142d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8012e34:	2303      	movs	r3, #3
 8012e36:	75fb      	strb	r3, [r7, #23]
      break;
 8012e38:	bf00      	nop
  }

  return (uint8_t)ret;
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3718      	adds	r7, #24
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}

08012e44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012e56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012e62:	2303      	movs	r3, #3
 8012e64:	e04f      	b.n	8012f06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012e6e:	78fa      	ldrb	r2, [r7, #3]
 8012e70:	6879      	ldr	r1, [r7, #4]
 8012e72:	4613      	mov	r3, r2
 8012e74:	009b      	lsls	r3, r3, #2
 8012e76:	4413      	add	r3, r2
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	440b      	add	r3, r1
 8012e7c:	3318      	adds	r3, #24
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d029      	beq.n	8012ed8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012e84:	78fa      	ldrb	r2, [r7, #3]
 8012e86:	6879      	ldr	r1, [r7, #4]
 8012e88:	4613      	mov	r3, r2
 8012e8a:	009b      	lsls	r3, r3, #2
 8012e8c:	4413      	add	r3, r2
 8012e8e:	009b      	lsls	r3, r3, #2
 8012e90:	440b      	add	r3, r1
 8012e92:	3318      	adds	r3, #24
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	78f9      	ldrb	r1, [r7, #3]
 8012e98:	68f8      	ldr	r0, [r7, #12]
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	00db      	lsls	r3, r3, #3
 8012e9e:	440b      	add	r3, r1
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	4403      	add	r3, r0
 8012ea4:	3348      	adds	r3, #72	; 0x48
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	fbb2 f1f3 	udiv	r1, r2, r3
 8012eac:	fb01 f303 	mul.w	r3, r1, r3
 8012eb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d110      	bne.n	8012ed8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8012eb6:	78fa      	ldrb	r2, [r7, #3]
 8012eb8:	6879      	ldr	r1, [r7, #4]
 8012eba:	4613      	mov	r3, r2
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	4413      	add	r3, r2
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	440b      	add	r3, r1
 8012ec4:	3318      	adds	r3, #24
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012eca:	78f9      	ldrb	r1, [r7, #3]
 8012ecc:	2300      	movs	r3, #0
 8012ece:	2200      	movs	r2, #0
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f002 f849 	bl	8014f68 <USBD_LL_Transmit>
 8012ed6:	e015      	b.n	8012f04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	2200      	movs	r2, #0
 8012edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ee6:	691b      	ldr	r3, [r3, #16]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d00b      	beq.n	8012f04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	68ba      	ldr	r2, [r7, #8]
 8012ef6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012efa:	68ba      	ldr	r2, [r7, #8]
 8012efc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012f00:	78fa      	ldrb	r2, [r7, #3]
 8012f02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}

08012f0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b084      	sub	sp, #16
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
 8012f16:	460b      	mov	r3, r1
 8012f18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012f2c:	2303      	movs	r3, #3
 8012f2e:	e015      	b.n	8012f5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012f30:	78fb      	ldrb	r3, [r7, #3]
 8012f32:	4619      	mov	r1, r3
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f002 f887 	bl	8015048 <USBD_LL_GetRxDataSize>
 8012f3a:	4602      	mov	r2, r0
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	68fa      	ldr	r2, [r7, #12]
 8012f4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012f50:	68fa      	ldr	r2, [r7, #12]
 8012f52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012f56:	4611      	mov	r1, r2
 8012f58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012f5a:	2300      	movs	r3, #0
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3710      	adds	r7, #16
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}

08012f64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b084      	sub	sp, #16
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f72:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d101      	bne.n	8012f7e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8012f7a:	2303      	movs	r3, #3
 8012f7c:	e01b      	b.n	8012fb6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d015      	beq.n	8012fb4 <USBD_CDC_EP0_RxReady+0x50>
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012f8e:	2bff      	cmp	r3, #255	; 0xff
 8012f90:	d010      	beq.n	8012fb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012f98:	689b      	ldr	r3, [r3, #8]
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8012fa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012fa2:	68fa      	ldr	r2, [r7, #12]
 8012fa4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012fa8:	b292      	uxth	r2, r2
 8012faa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	22ff      	movs	r2, #255	; 0xff
 8012fb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
	...

08012fc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012fc0:	b480      	push	{r7}
 8012fc2:	b083      	sub	sp, #12
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2243      	movs	r2, #67	; 0x43
 8012fcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8012fce:	4b03      	ldr	r3, [pc, #12]	; (8012fdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	370c      	adds	r7, #12
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fda:	4770      	bx	lr
 8012fdc:	200000ec 	.word	0x200000ec

08012fe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b083      	sub	sp, #12
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2243      	movs	r2, #67	; 0x43
 8012fec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8012fee:	4b03      	ldr	r3, [pc, #12]	; (8012ffc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr
 8012ffc:	200000a8 	.word	0x200000a8

08013000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013000:	b480      	push	{r7}
 8013002:	b083      	sub	sp, #12
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2243      	movs	r2, #67	; 0x43
 801300c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801300e:	4b03      	ldr	r3, [pc, #12]	; (801301c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013010:	4618      	mov	r0, r3
 8013012:	370c      	adds	r7, #12
 8013014:	46bd      	mov	sp, r7
 8013016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301a:	4770      	bx	lr
 801301c:	20000130 	.word	0x20000130

08013020 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013020:	b480      	push	{r7}
 8013022:	b083      	sub	sp, #12
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	220a      	movs	r2, #10
 801302c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801302e:	4b03      	ldr	r3, [pc, #12]	; (801303c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013030:	4618      	mov	r0, r3
 8013032:	370c      	adds	r7, #12
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr
 801303c:	20000064 	.word	0x20000064

08013040 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013040:	b480      	push	{r7}
 8013042:	b083      	sub	sp, #12
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d101      	bne.n	8013054 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013050:	2303      	movs	r3, #3
 8013052:	e004      	b.n	801305e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	683a      	ldr	r2, [r7, #0]
 8013058:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	370c      	adds	r7, #12
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr

0801306a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801306a:	b480      	push	{r7}
 801306c:	b087      	sub	sp, #28
 801306e:	af00      	add	r7, sp, #0
 8013070:	60f8      	str	r0, [r7, #12]
 8013072:	60b9      	str	r1, [r7, #8]
 8013074:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801307c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d101      	bne.n	8013088 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013084:	2303      	movs	r3, #3
 8013086:	e008      	b.n	801309a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	68ba      	ldr	r2, [r7, #8]
 801308c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013098:	2300      	movs	r3, #0
}
 801309a:	4618      	mov	r0, r3
 801309c:	371c      	adds	r7, #28
 801309e:	46bd      	mov	sp, r7
 80130a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a4:	4770      	bx	lr

080130a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80130a6:	b480      	push	{r7}
 80130a8:	b085      	sub	sp, #20
 80130aa:	af00      	add	r7, sp, #0
 80130ac:	6078      	str	r0, [r7, #4]
 80130ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d101      	bne.n	80130c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80130be:	2303      	movs	r3, #3
 80130c0:	e004      	b.n	80130cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	683a      	ldr	r2, [r7, #0]
 80130c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80130ca:	2300      	movs	r3, #0
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3714      	adds	r7, #20
 80130d0:	46bd      	mov	sp, r7
 80130d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d6:	4770      	bx	lr

080130d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80130e8:	2301      	movs	r3, #1
 80130ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d101      	bne.n	80130fa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80130f6:	2303      	movs	r3, #3
 80130f8:	e01a      	b.n	8013130 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013100:	2b00      	cmp	r3, #0
 8013102:	d114      	bne.n	801312e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	2201      	movs	r2, #1
 8013108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8013122:	2181      	movs	r1, #129	; 0x81
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f001 ff1f 	bl	8014f68 <USBD_LL_Transmit>

    ret = USBD_OK;
 801312a:	2300      	movs	r3, #0
 801312c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013130:	4618      	mov	r0, r3
 8013132:	3710      	adds	r7, #16
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b084      	sub	sp, #16
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801314e:	2b00      	cmp	r3, #0
 8013150:	d101      	bne.n	8013156 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013152:	2303      	movs	r3, #3
 8013154:	e016      	b.n	8013184 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	7c1b      	ldrb	r3, [r3, #16]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d109      	bne.n	8013172 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013168:	2101      	movs	r1, #1
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f001 ff34 	bl	8014fd8 <USBD_LL_PrepareReceive>
 8013170:	e007      	b.n	8013182 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013178:	2340      	movs	r3, #64	; 0x40
 801317a:	2101      	movs	r1, #1
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f001 ff2b 	bl	8014fd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013182:	2300      	movs	r3, #0
}
 8013184:	4618      	mov	r0, r3
 8013186:	3710      	adds	r7, #16
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b086      	sub	sp, #24
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	4613      	mov	r3, r2
 8013198:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d101      	bne.n	80131a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80131a0:	2303      	movs	r3, #3
 80131a2:	e01f      	b.n	80131e4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2200      	movs	r2, #0
 80131a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2200      	movs	r2, #0
 80131b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2200      	movs	r2, #0
 80131b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d003      	beq.n	80131ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2201      	movs	r2, #1
 80131ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	79fa      	ldrb	r2, [r7, #7]
 80131d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80131d8:	68f8      	ldr	r0, [r7, #12]
 80131da:	f001 fd07 	bl	8014bec <USBD_LL_Init>
 80131de:	4603      	mov	r3, r0
 80131e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80131e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3718      	adds	r7, #24
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80131f6:	2300      	movs	r3, #0
 80131f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d101      	bne.n	8013204 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013200:	2303      	movs	r3, #3
 8013202:	e016      	b.n	8013232 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	683a      	ldr	r2, [r7, #0]
 8013208:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013214:	2b00      	cmp	r3, #0
 8013216:	d00b      	beq.n	8013230 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013220:	f107 020e 	add.w	r2, r7, #14
 8013224:	4610      	mov	r0, r2
 8013226:	4798      	blx	r3
 8013228:	4602      	mov	r2, r0
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3710      	adds	r7, #16
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}

0801323a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b082      	sub	sp, #8
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013242:	6878      	ldr	r0, [r7, #4]
 8013244:	f001 fd1c 	bl	8014c80 <USBD_LL_Start>
 8013248:	4603      	mov	r3, r0
}
 801324a:	4618      	mov	r0, r3
 801324c:	3708      	adds	r7, #8
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}

08013252 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013252:	b480      	push	{r7}
 8013254:	b083      	sub	sp, #12
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801325a:	2300      	movs	r3, #0
}
 801325c:	4618      	mov	r0, r3
 801325e:	370c      	adds	r7, #12
 8013260:	46bd      	mov	sp, r7
 8013262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013266:	4770      	bx	lr

08013268 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b084      	sub	sp, #16
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
 8013270:	460b      	mov	r3, r1
 8013272:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013274:	2303      	movs	r3, #3
 8013276:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801327e:	2b00      	cmp	r3, #0
 8013280:	d009      	beq.n	8013296 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	78fa      	ldrb	r2, [r7, #3]
 801328c:	4611      	mov	r1, r2
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	4798      	blx	r3
 8013292:	4603      	mov	r3, r0
 8013294:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8013296:	7bfb      	ldrb	r3, [r7, #15]
}
 8013298:	4618      	mov	r0, r3
 801329a:	3710      	adds	r7, #16
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	460b      	mov	r3, r1
 80132aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d007      	beq.n	80132c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	78fa      	ldrb	r2, [r7, #3]
 80132c0:	4611      	mov	r1, r2
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	4798      	blx	r3
  }

  return USBD_OK;
 80132c6:	2300      	movs	r3, #0
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3708      	adds	r7, #8
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80132e0:	6839      	ldr	r1, [r7, #0]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f000 ffba 	bl	801425c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2201      	movs	r2, #1
 80132ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80132f6:	461a      	mov	r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013304:	f003 031f 	and.w	r3, r3, #31
 8013308:	2b02      	cmp	r3, #2
 801330a:	d01a      	beq.n	8013342 <USBD_LL_SetupStage+0x72>
 801330c:	2b02      	cmp	r3, #2
 801330e:	d822      	bhi.n	8013356 <USBD_LL_SetupStage+0x86>
 8013310:	2b00      	cmp	r3, #0
 8013312:	d002      	beq.n	801331a <USBD_LL_SetupStage+0x4a>
 8013314:	2b01      	cmp	r3, #1
 8013316:	d00a      	beq.n	801332e <USBD_LL_SetupStage+0x5e>
 8013318:	e01d      	b.n	8013356 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013320:	4619      	mov	r1, r3
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f000 fa62 	bl	80137ec <USBD_StdDevReq>
 8013328:	4603      	mov	r3, r0
 801332a:	73fb      	strb	r3, [r7, #15]
      break;
 801332c:	e020      	b.n	8013370 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013334:	4619      	mov	r1, r3
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f000 fac6 	bl	80138c8 <USBD_StdItfReq>
 801333c:	4603      	mov	r3, r0
 801333e:	73fb      	strb	r3, [r7, #15]
      break;
 8013340:	e016      	b.n	8013370 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013348:	4619      	mov	r1, r3
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f000 fb05 	bl	801395a <USBD_StdEPReq>
 8013350:	4603      	mov	r3, r0
 8013352:	73fb      	strb	r3, [r7, #15]
      break;
 8013354:	e00c      	b.n	8013370 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801335c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013360:	b2db      	uxtb	r3, r3
 8013362:	4619      	mov	r1, r3
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f001 fd31 	bl	8014dcc <USBD_LL_StallEP>
 801336a:	4603      	mov	r3, r0
 801336c:	73fb      	strb	r3, [r7, #15]
      break;
 801336e:	bf00      	nop
  }

  return ret;
 8013370:	7bfb      	ldrb	r3, [r7, #15]
}
 8013372:	4618      	mov	r0, r3
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}

0801337a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801337a:	b580      	push	{r7, lr}
 801337c:	b086      	sub	sp, #24
 801337e:	af00      	add	r7, sp, #0
 8013380:	60f8      	str	r0, [r7, #12]
 8013382:	460b      	mov	r3, r1
 8013384:	607a      	str	r2, [r7, #4]
 8013386:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013388:	7afb      	ldrb	r3, [r7, #11]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d138      	bne.n	8013400 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013394:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801339c:	2b03      	cmp	r3, #3
 801339e:	d14a      	bne.n	8013436 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80133a0:	693b      	ldr	r3, [r7, #16]
 80133a2:	689a      	ldr	r2, [r3, #8]
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d913      	bls.n	80133d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	689a      	ldr	r2, [r3, #8]
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	1ad2      	subs	r2, r2, r3
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	68da      	ldr	r2, [r3, #12]
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	689b      	ldr	r3, [r3, #8]
 80133c2:	4293      	cmp	r3, r2
 80133c4:	bf28      	it	cs
 80133c6:	4613      	movcs	r3, r2
 80133c8:	461a      	mov	r2, r3
 80133ca:	6879      	ldr	r1, [r7, #4]
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f001 f839 	bl	8014444 <USBD_CtlContinueRx>
 80133d2:	e030      	b.n	8013436 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133da:	b2db      	uxtb	r3, r3
 80133dc:	2b03      	cmp	r3, #3
 80133de:	d10b      	bne.n	80133f8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133e6:	691b      	ldr	r3, [r3, #16]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d005      	beq.n	80133f8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133f2:	691b      	ldr	r3, [r3, #16]
 80133f4:	68f8      	ldr	r0, [r7, #12]
 80133f6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80133f8:	68f8      	ldr	r0, [r7, #12]
 80133fa:	f001 f834 	bl	8014466 <USBD_CtlSendStatus>
 80133fe:	e01a      	b.n	8013436 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013406:	b2db      	uxtb	r3, r3
 8013408:	2b03      	cmp	r3, #3
 801340a:	d114      	bne.n	8013436 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013412:	699b      	ldr	r3, [r3, #24]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d00e      	beq.n	8013436 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801341e:	699b      	ldr	r3, [r3, #24]
 8013420:	7afa      	ldrb	r2, [r7, #11]
 8013422:	4611      	mov	r1, r2
 8013424:	68f8      	ldr	r0, [r7, #12]
 8013426:	4798      	blx	r3
 8013428:	4603      	mov	r3, r0
 801342a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801342c:	7dfb      	ldrb	r3, [r7, #23]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d001      	beq.n	8013436 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8013432:	7dfb      	ldrb	r3, [r7, #23]
 8013434:	e000      	b.n	8013438 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8013436:	2300      	movs	r3, #0
}
 8013438:	4618      	mov	r0, r3
 801343a:	3718      	adds	r7, #24
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}

08013440 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b086      	sub	sp, #24
 8013444:	af00      	add	r7, sp, #0
 8013446:	60f8      	str	r0, [r7, #12]
 8013448:	460b      	mov	r3, r1
 801344a:	607a      	str	r2, [r7, #4]
 801344c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801344e:	7afb      	ldrb	r3, [r7, #11]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d16b      	bne.n	801352c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	3314      	adds	r3, #20
 8013458:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013460:	2b02      	cmp	r3, #2
 8013462:	d156      	bne.n	8013512 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	689a      	ldr	r2, [r3, #8]
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	429a      	cmp	r2, r3
 801346e:	d914      	bls.n	801349a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	689a      	ldr	r2, [r3, #8]
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	1ad2      	subs	r2, r2, r3
 801347a:	693b      	ldr	r3, [r7, #16]
 801347c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	689b      	ldr	r3, [r3, #8]
 8013482:	461a      	mov	r2, r3
 8013484:	6879      	ldr	r1, [r7, #4]
 8013486:	68f8      	ldr	r0, [r7, #12]
 8013488:	f000 ffae 	bl	80143e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801348c:	2300      	movs	r3, #0
 801348e:	2200      	movs	r2, #0
 8013490:	2100      	movs	r1, #0
 8013492:	68f8      	ldr	r0, [r7, #12]
 8013494:	f001 fda0 	bl	8014fd8 <USBD_LL_PrepareReceive>
 8013498:	e03b      	b.n	8013512 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	68da      	ldr	r2, [r3, #12]
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d11c      	bne.n	80134e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	685a      	ldr	r2, [r3, #4]
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d316      	bcc.n	80134e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	685a      	ldr	r2, [r3, #4]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80134bc:	429a      	cmp	r2, r3
 80134be:	d20f      	bcs.n	80134e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80134c0:	2200      	movs	r2, #0
 80134c2:	2100      	movs	r1, #0
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	f000 ff8f 	bl	80143e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2200      	movs	r2, #0
 80134ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80134d2:	2300      	movs	r3, #0
 80134d4:	2200      	movs	r2, #0
 80134d6:	2100      	movs	r1, #0
 80134d8:	68f8      	ldr	r0, [r7, #12]
 80134da:	f001 fd7d 	bl	8014fd8 <USBD_LL_PrepareReceive>
 80134de:	e018      	b.n	8013512 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	2b03      	cmp	r3, #3
 80134ea:	d10b      	bne.n	8013504 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134f2:	68db      	ldr	r3, [r3, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d005      	beq.n	8013504 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013504:	2180      	movs	r1, #128	; 0x80
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f001 fc60 	bl	8014dcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801350c:	68f8      	ldr	r0, [r7, #12]
 801350e:	f000 ffbd 	bl	801448c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013518:	2b01      	cmp	r3, #1
 801351a:	d122      	bne.n	8013562 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f7ff fe98 	bl	8013252 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	2200      	movs	r2, #0
 8013526:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801352a:	e01a      	b.n	8013562 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013532:	b2db      	uxtb	r3, r3
 8013534:	2b03      	cmp	r3, #3
 8013536:	d114      	bne.n	8013562 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801353e:	695b      	ldr	r3, [r3, #20]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d00e      	beq.n	8013562 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801354a:	695b      	ldr	r3, [r3, #20]
 801354c:	7afa      	ldrb	r2, [r7, #11]
 801354e:	4611      	mov	r1, r2
 8013550:	68f8      	ldr	r0, [r7, #12]
 8013552:	4798      	blx	r3
 8013554:	4603      	mov	r3, r0
 8013556:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013558:	7dfb      	ldrb	r3, [r7, #23]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d001      	beq.n	8013562 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801355e:	7dfb      	ldrb	r3, [r7, #23]
 8013560:	e000      	b.n	8013564 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8013562:	2300      	movs	r3, #0
}
 8013564:	4618      	mov	r0, r3
 8013566:	3718      	adds	r7, #24
 8013568:	46bd      	mov	sp, r7
 801356a:	bd80      	pop	{r7, pc}

0801356c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b082      	sub	sp, #8
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2201      	movs	r2, #1
 8013578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2200      	movs	r2, #0
 8013580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2200      	movs	r2, #0
 8013588:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	2200      	movs	r2, #0
 801358e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013598:	2b00      	cmp	r3, #0
 801359a:	d101      	bne.n	80135a0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801359c:	2303      	movs	r3, #3
 801359e:	e02f      	b.n	8013600 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d00f      	beq.n	80135ca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d009      	beq.n	80135ca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135bc:	685b      	ldr	r3, [r3, #4]
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	6852      	ldr	r2, [r2, #4]
 80135c2:	b2d2      	uxtb	r2, r2
 80135c4:	4611      	mov	r1, r2
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80135ca:	2340      	movs	r3, #64	; 0x40
 80135cc:	2200      	movs	r2, #0
 80135ce:	2100      	movs	r1, #0
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f001 fb87 	bl	8014ce4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2201      	movs	r2, #1
 80135da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2240      	movs	r2, #64	; 0x40
 80135e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80135e6:	2340      	movs	r3, #64	; 0x40
 80135e8:	2200      	movs	r2, #0
 80135ea:	2180      	movs	r1, #128	; 0x80
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f001 fb79 	bl	8014ce4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2201      	movs	r2, #1
 80135f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2240      	movs	r2, #64	; 0x40
 80135fc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80135fe:	2300      	movs	r3, #0
}
 8013600:	4618      	mov	r0, r3
 8013602:	3708      	adds	r7, #8
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}

08013608 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	460b      	mov	r3, r1
 8013612:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	78fa      	ldrb	r2, [r7, #3]
 8013618:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801361a:	2300      	movs	r3, #0
}
 801361c:	4618      	mov	r0, r3
 801361e:	370c      	adds	r7, #12
 8013620:	46bd      	mov	sp, r7
 8013622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013626:	4770      	bx	lr

08013628 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013628:	b480      	push	{r7}
 801362a:	b083      	sub	sp, #12
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013636:	b2da      	uxtb	r2, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2204      	movs	r2, #4
 8013642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013646:	2300      	movs	r3, #0
}
 8013648:	4618      	mov	r0, r3
 801364a:	370c      	adds	r7, #12
 801364c:	46bd      	mov	sp, r7
 801364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013652:	4770      	bx	lr

08013654 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013654:	b480      	push	{r7}
 8013656:	b083      	sub	sp, #12
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013662:	b2db      	uxtb	r3, r3
 8013664:	2b04      	cmp	r3, #4
 8013666:	d106      	bne.n	8013676 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801366e:	b2da      	uxtb	r2, r3
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013676:	2300      	movs	r3, #0
}
 8013678:	4618      	mov	r0, r3
 801367a:	370c      	adds	r7, #12
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b082      	sub	sp, #8
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013692:	2b00      	cmp	r3, #0
 8013694:	d101      	bne.n	801369a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013696:	2303      	movs	r3, #3
 8013698:	e012      	b.n	80136c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136a0:	b2db      	uxtb	r3, r3
 80136a2:	2b03      	cmp	r3, #3
 80136a4:	d10b      	bne.n	80136be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136ac:	69db      	ldr	r3, [r3, #28]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d005      	beq.n	80136be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136b8:	69db      	ldr	r3, [r3, #28]
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	460b      	mov	r3, r1
 80136d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d101      	bne.n	80136e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80136de:	2303      	movs	r3, #3
 80136e0:	e014      	b.n	801370c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	2b03      	cmp	r3, #3
 80136ec:	d10d      	bne.n	801370a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136f4:	6a1b      	ldr	r3, [r3, #32]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d007      	beq.n	801370a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013700:	6a1b      	ldr	r3, [r3, #32]
 8013702:	78fa      	ldrb	r2, [r7, #3]
 8013704:	4611      	mov	r1, r2
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801370a:	2300      	movs	r3, #0
}
 801370c:	4618      	mov	r0, r3
 801370e:	3708      	adds	r7, #8
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	460b      	mov	r3, r1
 801371e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013726:	2b00      	cmp	r3, #0
 8013728:	d101      	bne.n	801372e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801372a:	2303      	movs	r3, #3
 801372c:	e014      	b.n	8013758 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013734:	b2db      	uxtb	r3, r3
 8013736:	2b03      	cmp	r3, #3
 8013738:	d10d      	bne.n	8013756 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013742:	2b00      	cmp	r3, #0
 8013744:	d007      	beq.n	8013756 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801374e:	78fa      	ldrb	r2, [r7, #3]
 8013750:	4611      	mov	r1, r2
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013756:	2300      	movs	r3, #0
}
 8013758:	4618      	mov	r0, r3
 801375a:	3708      	adds	r7, #8
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013760:	b480      	push	{r7}
 8013762:	b083      	sub	sp, #12
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013768:	2300      	movs	r3, #0
}
 801376a:	4618      	mov	r0, r3
 801376c:	370c      	adds	r7, #12
 801376e:	46bd      	mov	sp, r7
 8013770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013774:	4770      	bx	lr

08013776 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013776:	b580      	push	{r7, lr}
 8013778:	b082      	sub	sp, #8
 801377a:	af00      	add	r7, sp, #0
 801377c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	2201      	movs	r2, #1
 8013782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801378c:	2b00      	cmp	r3, #0
 801378e:	d009      	beq.n	80137a4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	687a      	ldr	r2, [r7, #4]
 801379a:	6852      	ldr	r2, [r2, #4]
 801379c:	b2d2      	uxtb	r2, r2
 801379e:	4611      	mov	r1, r2
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	4798      	blx	r3
  }

  return USBD_OK;
 80137a4:	2300      	movs	r3, #0
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	3708      	adds	r7, #8
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}

080137ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80137ae:	b480      	push	{r7}
 80137b0:	b087      	sub	sp, #28
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	3301      	adds	r3, #1
 80137c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80137cc:	8a3b      	ldrh	r3, [r7, #16]
 80137ce:	021b      	lsls	r3, r3, #8
 80137d0:	b21a      	sxth	r2, r3
 80137d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80137d6:	4313      	orrs	r3, r2
 80137d8:	b21b      	sxth	r3, r3
 80137da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80137dc:	89fb      	ldrh	r3, [r7, #14]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	371c      	adds	r7, #28
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr
	...

080137ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013802:	2b40      	cmp	r3, #64	; 0x40
 8013804:	d005      	beq.n	8013812 <USBD_StdDevReq+0x26>
 8013806:	2b40      	cmp	r3, #64	; 0x40
 8013808:	d853      	bhi.n	80138b2 <USBD_StdDevReq+0xc6>
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00b      	beq.n	8013826 <USBD_StdDevReq+0x3a>
 801380e:	2b20      	cmp	r3, #32
 8013810:	d14f      	bne.n	80138b2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013818:	689b      	ldr	r3, [r3, #8]
 801381a:	6839      	ldr	r1, [r7, #0]
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	4798      	blx	r3
 8013820:	4603      	mov	r3, r0
 8013822:	73fb      	strb	r3, [r7, #15]
      break;
 8013824:	e04a      	b.n	80138bc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	785b      	ldrb	r3, [r3, #1]
 801382a:	2b09      	cmp	r3, #9
 801382c:	d83b      	bhi.n	80138a6 <USBD_StdDevReq+0xba>
 801382e:	a201      	add	r2, pc, #4	; (adr r2, 8013834 <USBD_StdDevReq+0x48>)
 8013830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013834:	08013889 	.word	0x08013889
 8013838:	0801389d 	.word	0x0801389d
 801383c:	080138a7 	.word	0x080138a7
 8013840:	08013893 	.word	0x08013893
 8013844:	080138a7 	.word	0x080138a7
 8013848:	08013867 	.word	0x08013867
 801384c:	0801385d 	.word	0x0801385d
 8013850:	080138a7 	.word	0x080138a7
 8013854:	0801387f 	.word	0x0801387f
 8013858:	08013871 	.word	0x08013871
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801385c:	6839      	ldr	r1, [r7, #0]
 801385e:	6878      	ldr	r0, [r7, #4]
 8013860:	f000 f9de 	bl	8013c20 <USBD_GetDescriptor>
          break;
 8013864:	e024      	b.n	80138b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013866:	6839      	ldr	r1, [r7, #0]
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f000 fb6d 	bl	8013f48 <USBD_SetAddress>
          break;
 801386e:	e01f      	b.n	80138b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013870:	6839      	ldr	r1, [r7, #0]
 8013872:	6878      	ldr	r0, [r7, #4]
 8013874:	f000 fbac 	bl	8013fd0 <USBD_SetConfig>
 8013878:	4603      	mov	r3, r0
 801387a:	73fb      	strb	r3, [r7, #15]
          break;
 801387c:	e018      	b.n	80138b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801387e:	6839      	ldr	r1, [r7, #0]
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f000 fc4b 	bl	801411c <USBD_GetConfig>
          break;
 8013886:	e013      	b.n	80138b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013888:	6839      	ldr	r1, [r7, #0]
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f000 fc7c 	bl	8014188 <USBD_GetStatus>
          break;
 8013890:	e00e      	b.n	80138b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013892:	6839      	ldr	r1, [r7, #0]
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f000 fcab 	bl	80141f0 <USBD_SetFeature>
          break;
 801389a:	e009      	b.n	80138b0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801389c:	6839      	ldr	r1, [r7, #0]
 801389e:	6878      	ldr	r0, [r7, #4]
 80138a0:	f000 fcba 	bl	8014218 <USBD_ClrFeature>
          break;
 80138a4:	e004      	b.n	80138b0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80138a6:	6839      	ldr	r1, [r7, #0]
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f000 fd11 	bl	80142d0 <USBD_CtlError>
          break;
 80138ae:	bf00      	nop
      }
      break;
 80138b0:	e004      	b.n	80138bc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80138b2:	6839      	ldr	r1, [r7, #0]
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 fd0b 	bl	80142d0 <USBD_CtlError>
      break;
 80138ba:	bf00      	nop
  }

  return ret;
 80138bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3710      	adds	r7, #16
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}
 80138c6:	bf00      	nop

080138c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
 80138d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80138d2:	2300      	movs	r3, #0
 80138d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	781b      	ldrb	r3, [r3, #0]
 80138da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80138de:	2b40      	cmp	r3, #64	; 0x40
 80138e0:	d005      	beq.n	80138ee <USBD_StdItfReq+0x26>
 80138e2:	2b40      	cmp	r3, #64	; 0x40
 80138e4:	d82f      	bhi.n	8013946 <USBD_StdItfReq+0x7e>
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d001      	beq.n	80138ee <USBD_StdItfReq+0x26>
 80138ea:	2b20      	cmp	r3, #32
 80138ec:	d12b      	bne.n	8013946 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	3b01      	subs	r3, #1
 80138f8:	2b02      	cmp	r3, #2
 80138fa:	d81d      	bhi.n	8013938 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	889b      	ldrh	r3, [r3, #4]
 8013900:	b2db      	uxtb	r3, r3
 8013902:	2b01      	cmp	r3, #1
 8013904:	d813      	bhi.n	801392e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801390c:	689b      	ldr	r3, [r3, #8]
 801390e:	6839      	ldr	r1, [r7, #0]
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	4798      	blx	r3
 8013914:	4603      	mov	r3, r0
 8013916:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	88db      	ldrh	r3, [r3, #6]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d110      	bne.n	8013942 <USBD_StdItfReq+0x7a>
 8013920:	7bfb      	ldrb	r3, [r7, #15]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d10d      	bne.n	8013942 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f000 fd9d 	bl	8014466 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801392c:	e009      	b.n	8013942 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801392e:	6839      	ldr	r1, [r7, #0]
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f000 fccd 	bl	80142d0 <USBD_CtlError>
          break;
 8013936:	e004      	b.n	8013942 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013938:	6839      	ldr	r1, [r7, #0]
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f000 fcc8 	bl	80142d0 <USBD_CtlError>
          break;
 8013940:	e000      	b.n	8013944 <USBD_StdItfReq+0x7c>
          break;
 8013942:	bf00      	nop
      }
      break;
 8013944:	e004      	b.n	8013950 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013946:	6839      	ldr	r1, [r7, #0]
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f000 fcc1 	bl	80142d0 <USBD_CtlError>
      break;
 801394e:	bf00      	nop
  }

  return ret;
 8013950:	7bfb      	ldrb	r3, [r7, #15]
}
 8013952:	4618      	mov	r0, r3
 8013954:	3710      	adds	r7, #16
 8013956:	46bd      	mov	sp, r7
 8013958:	bd80      	pop	{r7, pc}

0801395a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801395a:	b580      	push	{r7, lr}
 801395c:	b084      	sub	sp, #16
 801395e:	af00      	add	r7, sp, #0
 8013960:	6078      	str	r0, [r7, #4]
 8013962:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013964:	2300      	movs	r3, #0
 8013966:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	889b      	ldrh	r3, [r3, #4]
 801396c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013976:	2b40      	cmp	r3, #64	; 0x40
 8013978:	d007      	beq.n	801398a <USBD_StdEPReq+0x30>
 801397a:	2b40      	cmp	r3, #64	; 0x40
 801397c:	f200 8145 	bhi.w	8013c0a <USBD_StdEPReq+0x2b0>
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00c      	beq.n	801399e <USBD_StdEPReq+0x44>
 8013984:	2b20      	cmp	r3, #32
 8013986:	f040 8140 	bne.w	8013c0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	6839      	ldr	r1, [r7, #0]
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	4798      	blx	r3
 8013998:	4603      	mov	r3, r0
 801399a:	73fb      	strb	r3, [r7, #15]
      break;
 801399c:	e13a      	b.n	8013c14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	785b      	ldrb	r3, [r3, #1]
 80139a2:	2b03      	cmp	r3, #3
 80139a4:	d007      	beq.n	80139b6 <USBD_StdEPReq+0x5c>
 80139a6:	2b03      	cmp	r3, #3
 80139a8:	f300 8129 	bgt.w	8013bfe <USBD_StdEPReq+0x2a4>
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d07f      	beq.n	8013ab0 <USBD_StdEPReq+0x156>
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d03c      	beq.n	8013a2e <USBD_StdEPReq+0xd4>
 80139b4:	e123      	b.n	8013bfe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	2b02      	cmp	r3, #2
 80139c0:	d002      	beq.n	80139c8 <USBD_StdEPReq+0x6e>
 80139c2:	2b03      	cmp	r3, #3
 80139c4:	d016      	beq.n	80139f4 <USBD_StdEPReq+0x9a>
 80139c6:	e02c      	b.n	8013a22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80139c8:	7bbb      	ldrb	r3, [r7, #14]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d00d      	beq.n	80139ea <USBD_StdEPReq+0x90>
 80139ce:	7bbb      	ldrb	r3, [r7, #14]
 80139d0:	2b80      	cmp	r3, #128	; 0x80
 80139d2:	d00a      	beq.n	80139ea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80139d4:	7bbb      	ldrb	r3, [r7, #14]
 80139d6:	4619      	mov	r1, r3
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f001 f9f7 	bl	8014dcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80139de:	2180      	movs	r1, #128	; 0x80
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f001 f9f3 	bl	8014dcc <USBD_LL_StallEP>
 80139e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80139e8:	e020      	b.n	8013a2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80139ea:	6839      	ldr	r1, [r7, #0]
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 fc6f 	bl	80142d0 <USBD_CtlError>
              break;
 80139f2:	e01b      	b.n	8013a2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	885b      	ldrh	r3, [r3, #2]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d10e      	bne.n	8013a1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80139fc:	7bbb      	ldrb	r3, [r7, #14]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d00b      	beq.n	8013a1a <USBD_StdEPReq+0xc0>
 8013a02:	7bbb      	ldrb	r3, [r7, #14]
 8013a04:	2b80      	cmp	r3, #128	; 0x80
 8013a06:	d008      	beq.n	8013a1a <USBD_StdEPReq+0xc0>
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	88db      	ldrh	r3, [r3, #6]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d104      	bne.n	8013a1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a10:	7bbb      	ldrb	r3, [r7, #14]
 8013a12:	4619      	mov	r1, r3
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f001 f9d9 	bl	8014dcc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f000 fd23 	bl	8014466 <USBD_CtlSendStatus>

              break;
 8013a20:	e004      	b.n	8013a2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013a22:	6839      	ldr	r1, [r7, #0]
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f000 fc53 	bl	80142d0 <USBD_CtlError>
              break;
 8013a2a:	bf00      	nop
          }
          break;
 8013a2c:	e0ec      	b.n	8013c08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	2b02      	cmp	r3, #2
 8013a38:	d002      	beq.n	8013a40 <USBD_StdEPReq+0xe6>
 8013a3a:	2b03      	cmp	r3, #3
 8013a3c:	d016      	beq.n	8013a6c <USBD_StdEPReq+0x112>
 8013a3e:	e030      	b.n	8013aa2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013a40:	7bbb      	ldrb	r3, [r7, #14]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d00d      	beq.n	8013a62 <USBD_StdEPReq+0x108>
 8013a46:	7bbb      	ldrb	r3, [r7, #14]
 8013a48:	2b80      	cmp	r3, #128	; 0x80
 8013a4a:	d00a      	beq.n	8013a62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013a4c:	7bbb      	ldrb	r3, [r7, #14]
 8013a4e:	4619      	mov	r1, r3
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f001 f9bb 	bl	8014dcc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013a56:	2180      	movs	r1, #128	; 0x80
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f001 f9b7 	bl	8014dcc <USBD_LL_StallEP>
 8013a5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013a60:	e025      	b.n	8013aae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013a62:	6839      	ldr	r1, [r7, #0]
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f000 fc33 	bl	80142d0 <USBD_CtlError>
              break;
 8013a6a:	e020      	b.n	8013aae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	885b      	ldrh	r3, [r3, #2]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d11b      	bne.n	8013aac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013a74:	7bbb      	ldrb	r3, [r7, #14]
 8013a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d004      	beq.n	8013a88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013a7e:	7bbb      	ldrb	r3, [r7, #14]
 8013a80:	4619      	mov	r1, r3
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f001 f9d8 	bl	8014e38 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f000 fcec 	bl	8014466 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	6839      	ldr	r1, [r7, #0]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	4798      	blx	r3
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013aa0:	e004      	b.n	8013aac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013aa2:	6839      	ldr	r1, [r7, #0]
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f000 fc13 	bl	80142d0 <USBD_CtlError>
              break;
 8013aaa:	e000      	b.n	8013aae <USBD_StdEPReq+0x154>
              break;
 8013aac:	bf00      	nop
          }
          break;
 8013aae:	e0ab      	b.n	8013c08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ab6:	b2db      	uxtb	r3, r3
 8013ab8:	2b02      	cmp	r3, #2
 8013aba:	d002      	beq.n	8013ac2 <USBD_StdEPReq+0x168>
 8013abc:	2b03      	cmp	r3, #3
 8013abe:	d032      	beq.n	8013b26 <USBD_StdEPReq+0x1cc>
 8013ac0:	e097      	b.n	8013bf2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013ac2:	7bbb      	ldrb	r3, [r7, #14]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d007      	beq.n	8013ad8 <USBD_StdEPReq+0x17e>
 8013ac8:	7bbb      	ldrb	r3, [r7, #14]
 8013aca:	2b80      	cmp	r3, #128	; 0x80
 8013acc:	d004      	beq.n	8013ad8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013ace:	6839      	ldr	r1, [r7, #0]
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f000 fbfd 	bl	80142d0 <USBD_CtlError>
                break;
 8013ad6:	e091      	b.n	8013bfc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	da0b      	bge.n	8013af8 <USBD_StdEPReq+0x19e>
 8013ae0:	7bbb      	ldrb	r3, [r7, #14]
 8013ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	009b      	lsls	r3, r3, #2
 8013aea:	4413      	add	r3, r2
 8013aec:	009b      	lsls	r3, r3, #2
 8013aee:	3310      	adds	r3, #16
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	4413      	add	r3, r2
 8013af4:	3304      	adds	r3, #4
 8013af6:	e00b      	b.n	8013b10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013af8:	7bbb      	ldrb	r3, [r7, #14]
 8013afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013afe:	4613      	mov	r3, r2
 8013b00:	009b      	lsls	r3, r3, #2
 8013b02:	4413      	add	r3, r2
 8013b04:	009b      	lsls	r3, r3, #2
 8013b06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	3304      	adds	r3, #4
 8013b10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	2200      	movs	r2, #0
 8013b16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2202      	movs	r2, #2
 8013b1c:	4619      	mov	r1, r3
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f000 fc47 	bl	80143b2 <USBD_CtlSendData>
              break;
 8013b24:	e06a      	b.n	8013bfc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	da11      	bge.n	8013b52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013b2e:	7bbb      	ldrb	r3, [r7, #14]
 8013b30:	f003 020f 	and.w	r2, r3, #15
 8013b34:	6879      	ldr	r1, [r7, #4]
 8013b36:	4613      	mov	r3, r2
 8013b38:	009b      	lsls	r3, r3, #2
 8013b3a:	4413      	add	r3, r2
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	440b      	add	r3, r1
 8013b40:	3324      	adds	r3, #36	; 0x24
 8013b42:	881b      	ldrh	r3, [r3, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d117      	bne.n	8013b78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013b48:	6839      	ldr	r1, [r7, #0]
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f000 fbc0 	bl	80142d0 <USBD_CtlError>
                  break;
 8013b50:	e054      	b.n	8013bfc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013b52:	7bbb      	ldrb	r3, [r7, #14]
 8013b54:	f003 020f 	and.w	r2, r3, #15
 8013b58:	6879      	ldr	r1, [r7, #4]
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	009b      	lsls	r3, r3, #2
 8013b5e:	4413      	add	r3, r2
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	440b      	add	r3, r1
 8013b64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d104      	bne.n	8013b78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013b6e:	6839      	ldr	r1, [r7, #0]
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f000 fbad 	bl	80142d0 <USBD_CtlError>
                  break;
 8013b76:	e041      	b.n	8013bfc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	da0b      	bge.n	8013b98 <USBD_StdEPReq+0x23e>
 8013b80:	7bbb      	ldrb	r3, [r7, #14]
 8013b82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013b86:	4613      	mov	r3, r2
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	4413      	add	r3, r2
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	3310      	adds	r3, #16
 8013b90:	687a      	ldr	r2, [r7, #4]
 8013b92:	4413      	add	r3, r2
 8013b94:	3304      	adds	r3, #4
 8013b96:	e00b      	b.n	8013bb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013b98:	7bbb      	ldrb	r3, [r7, #14]
 8013b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	009b      	lsls	r3, r3, #2
 8013ba2:	4413      	add	r3, r2
 8013ba4:	009b      	lsls	r3, r3, #2
 8013ba6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013baa:	687a      	ldr	r2, [r7, #4]
 8013bac:	4413      	add	r3, r2
 8013bae:	3304      	adds	r3, #4
 8013bb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013bb2:	7bbb      	ldrb	r3, [r7, #14]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d002      	beq.n	8013bbe <USBD_StdEPReq+0x264>
 8013bb8:	7bbb      	ldrb	r3, [r7, #14]
 8013bba:	2b80      	cmp	r3, #128	; 0x80
 8013bbc:	d103      	bne.n	8013bc6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	601a      	str	r2, [r3, #0]
 8013bc4:	e00e      	b.n	8013be4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013bc6:	7bbb      	ldrb	r3, [r7, #14]
 8013bc8:	4619      	mov	r1, r3
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f001 f96a 	bl	8014ea4 <USBD_LL_IsStallEP>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d003      	beq.n	8013bde <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	2201      	movs	r2, #1
 8013bda:	601a      	str	r2, [r3, #0]
 8013bdc:	e002      	b.n	8013be4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	2200      	movs	r2, #0
 8013be2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	2202      	movs	r2, #2
 8013be8:	4619      	mov	r1, r3
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 fbe1 	bl	80143b2 <USBD_CtlSendData>
              break;
 8013bf0:	e004      	b.n	8013bfc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013bf2:	6839      	ldr	r1, [r7, #0]
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f000 fb6b 	bl	80142d0 <USBD_CtlError>
              break;
 8013bfa:	bf00      	nop
          }
          break;
 8013bfc:	e004      	b.n	8013c08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8013bfe:	6839      	ldr	r1, [r7, #0]
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f000 fb65 	bl	80142d0 <USBD_CtlError>
          break;
 8013c06:	bf00      	nop
      }
      break;
 8013c08:	e004      	b.n	8013c14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8013c0a:	6839      	ldr	r1, [r7, #0]
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f000 fb5f 	bl	80142d0 <USBD_CtlError>
      break;
 8013c12:	bf00      	nop
  }

  return ret;
 8013c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	3710      	adds	r7, #16
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
	...

08013c20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
 8013c28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013c32:	2300      	movs	r3, #0
 8013c34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	885b      	ldrh	r3, [r3, #2]
 8013c3a:	0a1b      	lsrs	r3, r3, #8
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	3b01      	subs	r3, #1
 8013c40:	2b0e      	cmp	r3, #14
 8013c42:	f200 8152 	bhi.w	8013eea <USBD_GetDescriptor+0x2ca>
 8013c46:	a201      	add	r2, pc, #4	; (adr r2, 8013c4c <USBD_GetDescriptor+0x2c>)
 8013c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c4c:	08013cbd 	.word	0x08013cbd
 8013c50:	08013cd5 	.word	0x08013cd5
 8013c54:	08013d15 	.word	0x08013d15
 8013c58:	08013eeb 	.word	0x08013eeb
 8013c5c:	08013eeb 	.word	0x08013eeb
 8013c60:	08013e8b 	.word	0x08013e8b
 8013c64:	08013eb7 	.word	0x08013eb7
 8013c68:	08013eeb 	.word	0x08013eeb
 8013c6c:	08013eeb 	.word	0x08013eeb
 8013c70:	08013eeb 	.word	0x08013eeb
 8013c74:	08013eeb 	.word	0x08013eeb
 8013c78:	08013eeb 	.word	0x08013eeb
 8013c7c:	08013eeb 	.word	0x08013eeb
 8013c80:	08013eeb 	.word	0x08013eeb
 8013c84:	08013c89 	.word	0x08013c89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c8e:	69db      	ldr	r3, [r3, #28]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d00b      	beq.n	8013cac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c9a:	69db      	ldr	r3, [r3, #28]
 8013c9c:	687a      	ldr	r2, [r7, #4]
 8013c9e:	7c12      	ldrb	r2, [r2, #16]
 8013ca0:	f107 0108 	add.w	r1, r7, #8
 8013ca4:	4610      	mov	r0, r2
 8013ca6:	4798      	blx	r3
 8013ca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013caa:	e126      	b.n	8013efa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013cac:	6839      	ldr	r1, [r7, #0]
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f000 fb0e 	bl	80142d0 <USBD_CtlError>
        err++;
 8013cb4:	7afb      	ldrb	r3, [r7, #11]
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	72fb      	strb	r3, [r7, #11]
      break;
 8013cba:	e11e      	b.n	8013efa <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	7c12      	ldrb	r2, [r2, #16]
 8013cc8:	f107 0108 	add.w	r1, r7, #8
 8013ccc:	4610      	mov	r0, r2
 8013cce:	4798      	blx	r3
 8013cd0:	60f8      	str	r0, [r7, #12]
      break;
 8013cd2:	e112      	b.n	8013efa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	7c1b      	ldrb	r3, [r3, #16]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d10d      	bne.n	8013cf8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ce4:	f107 0208 	add.w	r2, r7, #8
 8013ce8:	4610      	mov	r0, r2
 8013cea:	4798      	blx	r3
 8013cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	2202      	movs	r2, #2
 8013cf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013cf6:	e100      	b.n	8013efa <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d00:	f107 0208 	add.w	r2, r7, #8
 8013d04:	4610      	mov	r0, r2
 8013d06:	4798      	blx	r3
 8013d08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	2202      	movs	r2, #2
 8013d10:	701a      	strb	r2, [r3, #0]
      break;
 8013d12:	e0f2      	b.n	8013efa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013d14:	683b      	ldr	r3, [r7, #0]
 8013d16:	885b      	ldrh	r3, [r3, #2]
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	2b05      	cmp	r3, #5
 8013d1c:	f200 80ac 	bhi.w	8013e78 <USBD_GetDescriptor+0x258>
 8013d20:	a201      	add	r2, pc, #4	; (adr r2, 8013d28 <USBD_GetDescriptor+0x108>)
 8013d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d26:	bf00      	nop
 8013d28:	08013d41 	.word	0x08013d41
 8013d2c:	08013d75 	.word	0x08013d75
 8013d30:	08013da9 	.word	0x08013da9
 8013d34:	08013ddd 	.word	0x08013ddd
 8013d38:	08013e11 	.word	0x08013e11
 8013d3c:	08013e45 	.word	0x08013e45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d00b      	beq.n	8013d64 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	687a      	ldr	r2, [r7, #4]
 8013d56:	7c12      	ldrb	r2, [r2, #16]
 8013d58:	f107 0108 	add.w	r1, r7, #8
 8013d5c:	4610      	mov	r0, r2
 8013d5e:	4798      	blx	r3
 8013d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d62:	e091      	b.n	8013e88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d64:	6839      	ldr	r1, [r7, #0]
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f000 fab2 	bl	80142d0 <USBD_CtlError>
            err++;
 8013d6c:	7afb      	ldrb	r3, [r7, #11]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	72fb      	strb	r3, [r7, #11]
          break;
 8013d72:	e089      	b.n	8013e88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d00b      	beq.n	8013d98 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013d86:	689b      	ldr	r3, [r3, #8]
 8013d88:	687a      	ldr	r2, [r7, #4]
 8013d8a:	7c12      	ldrb	r2, [r2, #16]
 8013d8c:	f107 0108 	add.w	r1, r7, #8
 8013d90:	4610      	mov	r0, r2
 8013d92:	4798      	blx	r3
 8013d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013d96:	e077      	b.n	8013e88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013d98:	6839      	ldr	r1, [r7, #0]
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f000 fa98 	bl	80142d0 <USBD_CtlError>
            err++;
 8013da0:	7afb      	ldrb	r3, [r7, #11]
 8013da2:	3301      	adds	r3, #1
 8013da4:	72fb      	strb	r3, [r7, #11]
          break;
 8013da6:	e06f      	b.n	8013e88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dae:	68db      	ldr	r3, [r3, #12]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d00b      	beq.n	8013dcc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	7c12      	ldrb	r2, [r2, #16]
 8013dc0:	f107 0108 	add.w	r1, r7, #8
 8013dc4:	4610      	mov	r0, r2
 8013dc6:	4798      	blx	r3
 8013dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dca:	e05d      	b.n	8013e88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013dcc:	6839      	ldr	r1, [r7, #0]
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f000 fa7e 	bl	80142d0 <USBD_CtlError>
            err++;
 8013dd4:	7afb      	ldrb	r3, [r7, #11]
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8013dda:	e055      	b.n	8013e88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013de2:	691b      	ldr	r3, [r3, #16]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d00b      	beq.n	8013e00 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013dee:	691b      	ldr	r3, [r3, #16]
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	7c12      	ldrb	r2, [r2, #16]
 8013df4:	f107 0108 	add.w	r1, r7, #8
 8013df8:	4610      	mov	r0, r2
 8013dfa:	4798      	blx	r3
 8013dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013dfe:	e043      	b.n	8013e88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f000 fa64 	bl	80142d0 <USBD_CtlError>
            err++;
 8013e08:	7afb      	ldrb	r3, [r7, #11]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8013e0e:	e03b      	b.n	8013e88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e16:	695b      	ldr	r3, [r3, #20]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00b      	beq.n	8013e34 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e22:	695b      	ldr	r3, [r3, #20]
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	7c12      	ldrb	r2, [r2, #16]
 8013e28:	f107 0108 	add.w	r1, r7, #8
 8013e2c:	4610      	mov	r0, r2
 8013e2e:	4798      	blx	r3
 8013e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e32:	e029      	b.n	8013e88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e34:	6839      	ldr	r1, [r7, #0]
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f000 fa4a 	bl	80142d0 <USBD_CtlError>
            err++;
 8013e3c:	7afb      	ldrb	r3, [r7, #11]
 8013e3e:	3301      	adds	r3, #1
 8013e40:	72fb      	strb	r3, [r7, #11]
          break;
 8013e42:	e021      	b.n	8013e88 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e4a:	699b      	ldr	r3, [r3, #24]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d00b      	beq.n	8013e68 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013e56:	699b      	ldr	r3, [r3, #24]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	7c12      	ldrb	r2, [r2, #16]
 8013e5c:	f107 0108 	add.w	r1, r7, #8
 8013e60:	4610      	mov	r0, r2
 8013e62:	4798      	blx	r3
 8013e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013e66:	e00f      	b.n	8013e88 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013e68:	6839      	ldr	r1, [r7, #0]
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f000 fa30 	bl	80142d0 <USBD_CtlError>
            err++;
 8013e70:	7afb      	ldrb	r3, [r7, #11]
 8013e72:	3301      	adds	r3, #1
 8013e74:	72fb      	strb	r3, [r7, #11]
          break;
 8013e76:	e007      	b.n	8013e88 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013e78:	6839      	ldr	r1, [r7, #0]
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f000 fa28 	bl	80142d0 <USBD_CtlError>
          err++;
 8013e80:	7afb      	ldrb	r3, [r7, #11]
 8013e82:	3301      	adds	r3, #1
 8013e84:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013e86:	bf00      	nop
      }
      break;
 8013e88:	e037      	b.n	8013efa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	7c1b      	ldrb	r3, [r3, #16]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d109      	bne.n	8013ea6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e9a:	f107 0208 	add.w	r2, r7, #8
 8013e9e:	4610      	mov	r0, r2
 8013ea0:	4798      	blx	r3
 8013ea2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ea4:	e029      	b.n	8013efa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013ea6:	6839      	ldr	r1, [r7, #0]
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 fa11 	bl	80142d0 <USBD_CtlError>
        err++;
 8013eae:	7afb      	ldrb	r3, [r7, #11]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	72fb      	strb	r3, [r7, #11]
      break;
 8013eb4:	e021      	b.n	8013efa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	7c1b      	ldrb	r3, [r3, #16]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d10d      	bne.n	8013eda <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ec6:	f107 0208 	add.w	r2, r7, #8
 8013eca:	4610      	mov	r0, r2
 8013ecc:	4798      	blx	r3
 8013ece:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	2207      	movs	r2, #7
 8013ed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013ed8:	e00f      	b.n	8013efa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013eda:	6839      	ldr	r1, [r7, #0]
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f000 f9f7 	bl	80142d0 <USBD_CtlError>
        err++;
 8013ee2:	7afb      	ldrb	r3, [r7, #11]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8013ee8:	e007      	b.n	8013efa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013eea:	6839      	ldr	r1, [r7, #0]
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f000 f9ef 	bl	80142d0 <USBD_CtlError>
      err++;
 8013ef2:	7afb      	ldrb	r3, [r7, #11]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8013ef8:	bf00      	nop
  }

  if (err != 0U)
 8013efa:	7afb      	ldrb	r3, [r7, #11]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d11e      	bne.n	8013f3e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	88db      	ldrh	r3, [r3, #6]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d016      	beq.n	8013f36 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013f08:	893b      	ldrh	r3, [r7, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00e      	beq.n	8013f2c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	88da      	ldrh	r2, [r3, #6]
 8013f12:	893b      	ldrh	r3, [r7, #8]
 8013f14:	4293      	cmp	r3, r2
 8013f16:	bf28      	it	cs
 8013f18:	4613      	movcs	r3, r2
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013f1e:	893b      	ldrh	r3, [r7, #8]
 8013f20:	461a      	mov	r2, r3
 8013f22:	68f9      	ldr	r1, [r7, #12]
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f000 fa44 	bl	80143b2 <USBD_CtlSendData>
 8013f2a:	e009      	b.n	8013f40 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013f2c:	6839      	ldr	r1, [r7, #0]
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 f9ce 	bl	80142d0 <USBD_CtlError>
 8013f34:	e004      	b.n	8013f40 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 fa95 	bl	8014466 <USBD_CtlSendStatus>
 8013f3c:	e000      	b.n	8013f40 <USBD_GetDescriptor+0x320>
    return;
 8013f3e:	bf00      	nop
  }
}
 8013f40:	3710      	adds	r7, #16
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop

08013f48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	889b      	ldrh	r3, [r3, #4]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d131      	bne.n	8013fbe <USBD_SetAddress+0x76>
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	88db      	ldrh	r3, [r3, #6]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d12d      	bne.n	8013fbe <USBD_SetAddress+0x76>
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	885b      	ldrh	r3, [r3, #2]
 8013f66:	2b7f      	cmp	r3, #127	; 0x7f
 8013f68:	d829      	bhi.n	8013fbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	885b      	ldrh	r3, [r3, #2]
 8013f6e:	b2db      	uxtb	r3, r3
 8013f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	2b03      	cmp	r3, #3
 8013f80:	d104      	bne.n	8013f8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013f82:	6839      	ldr	r1, [r7, #0]
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f000 f9a3 	bl	80142d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f8a:	e01d      	b.n	8013fc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	7bfa      	ldrb	r2, [r7, #15]
 8013f90:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013f94:	7bfb      	ldrb	r3, [r7, #15]
 8013f96:	4619      	mov	r1, r3
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f000 ffaf 	bl	8014efc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 fa61 	bl	8014466 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013fa4:	7bfb      	ldrb	r3, [r7, #15]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d004      	beq.n	8013fb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2202      	movs	r2, #2
 8013fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fb2:	e009      	b.n	8013fc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fbc:	e004      	b.n	8013fc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013fbe:	6839      	ldr	r1, [r7, #0]
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f000 f985 	bl	80142d0 <USBD_CtlError>
  }
}
 8013fc6:	bf00      	nop
 8013fc8:	bf00      	nop
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	885b      	ldrh	r3, [r3, #2]
 8013fe2:	b2da      	uxtb	r2, r3
 8013fe4:	4b4c      	ldr	r3, [pc, #304]	; (8014118 <USBD_SetConfig+0x148>)
 8013fe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013fe8:	4b4b      	ldr	r3, [pc, #300]	; (8014118 <USBD_SetConfig+0x148>)
 8013fea:	781b      	ldrb	r3, [r3, #0]
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d905      	bls.n	8013ffc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013ff0:	6839      	ldr	r1, [r7, #0]
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f000 f96c 	bl	80142d0 <USBD_CtlError>
    return USBD_FAIL;
 8013ff8:	2303      	movs	r3, #3
 8013ffa:	e088      	b.n	801410e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014002:	b2db      	uxtb	r3, r3
 8014004:	2b02      	cmp	r3, #2
 8014006:	d002      	beq.n	801400e <USBD_SetConfig+0x3e>
 8014008:	2b03      	cmp	r3, #3
 801400a:	d025      	beq.n	8014058 <USBD_SetConfig+0x88>
 801400c:	e071      	b.n	80140f2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801400e:	4b42      	ldr	r3, [pc, #264]	; (8014118 <USBD_SetConfig+0x148>)
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d01c      	beq.n	8014050 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8014016:	4b40      	ldr	r3, [pc, #256]	; (8014118 <USBD_SetConfig+0x148>)
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	461a      	mov	r2, r3
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014020:	4b3d      	ldr	r3, [pc, #244]	; (8014118 <USBD_SetConfig+0x148>)
 8014022:	781b      	ldrb	r3, [r3, #0]
 8014024:	4619      	mov	r1, r3
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f7ff f91e 	bl	8013268 <USBD_SetClassConfig>
 801402c:	4603      	mov	r3, r0
 801402e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014030:	7bfb      	ldrb	r3, [r7, #15]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d004      	beq.n	8014040 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8014036:	6839      	ldr	r1, [r7, #0]
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 f949 	bl	80142d0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801403e:	e065      	b.n	801410c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f000 fa10 	bl	8014466 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2203      	movs	r2, #3
 801404a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801404e:	e05d      	b.n	801410c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 fa08 	bl	8014466 <USBD_CtlSendStatus>
      break;
 8014056:	e059      	b.n	801410c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014058:	4b2f      	ldr	r3, [pc, #188]	; (8014118 <USBD_SetConfig+0x148>)
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d112      	bne.n	8014086 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2202      	movs	r2, #2
 8014064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014068:	4b2b      	ldr	r3, [pc, #172]	; (8014118 <USBD_SetConfig+0x148>)
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	461a      	mov	r2, r3
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014072:	4b29      	ldr	r3, [pc, #164]	; (8014118 <USBD_SetConfig+0x148>)
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	4619      	mov	r1, r3
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f7ff f911 	bl	80132a0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 f9f1 	bl	8014466 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014084:	e042      	b.n	801410c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014086:	4b24      	ldr	r3, [pc, #144]	; (8014118 <USBD_SetConfig+0x148>)
 8014088:	781b      	ldrb	r3, [r3, #0]
 801408a:	461a      	mov	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	429a      	cmp	r2, r3
 8014092:	d02a      	beq.n	80140ea <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	b2db      	uxtb	r3, r3
 801409a:	4619      	mov	r1, r3
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f7ff f8ff 	bl	80132a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80140a2:	4b1d      	ldr	r3, [pc, #116]	; (8014118 <USBD_SetConfig+0x148>)
 80140a4:	781b      	ldrb	r3, [r3, #0]
 80140a6:	461a      	mov	r2, r3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80140ac:	4b1a      	ldr	r3, [pc, #104]	; (8014118 <USBD_SetConfig+0x148>)
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	4619      	mov	r1, r3
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	f7ff f8d8 	bl	8013268 <USBD_SetClassConfig>
 80140b8:	4603      	mov	r3, r0
 80140ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80140bc:	7bfb      	ldrb	r3, [r7, #15]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d00f      	beq.n	80140e2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80140c2:	6839      	ldr	r1, [r7, #0]
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 f903 	bl	80142d0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	b2db      	uxtb	r3, r3
 80140d0:	4619      	mov	r1, r3
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f7ff f8e4 	bl	80132a0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2202      	movs	r2, #2
 80140dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80140e0:	e014      	b.n	801410c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 f9bf 	bl	8014466 <USBD_CtlSendStatus>
      break;
 80140e8:	e010      	b.n	801410c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 f9bb 	bl	8014466 <USBD_CtlSendStatus>
      break;
 80140f0:	e00c      	b.n	801410c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 f8eb 	bl	80142d0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80140fa:	4b07      	ldr	r3, [pc, #28]	; (8014118 <USBD_SetConfig+0x148>)
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	4619      	mov	r1, r3
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f7ff f8cd 	bl	80132a0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014106:	2303      	movs	r3, #3
 8014108:	73fb      	strb	r3, [r7, #15]
      break;
 801410a:	bf00      	nop
  }

  return ret;
 801410c:	7bfb      	ldrb	r3, [r7, #15]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3710      	adds	r7, #16
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
 8014116:	bf00      	nop
 8014118:	200023b0 	.word	0x200023b0

0801411c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	88db      	ldrh	r3, [r3, #6]
 801412a:	2b01      	cmp	r3, #1
 801412c:	d004      	beq.n	8014138 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801412e:	6839      	ldr	r1, [r7, #0]
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f000 f8cd 	bl	80142d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014136:	e023      	b.n	8014180 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801413e:	b2db      	uxtb	r3, r3
 8014140:	2b02      	cmp	r3, #2
 8014142:	dc02      	bgt.n	801414a <USBD_GetConfig+0x2e>
 8014144:	2b00      	cmp	r3, #0
 8014146:	dc03      	bgt.n	8014150 <USBD_GetConfig+0x34>
 8014148:	e015      	b.n	8014176 <USBD_GetConfig+0x5a>
 801414a:	2b03      	cmp	r3, #3
 801414c:	d00b      	beq.n	8014166 <USBD_GetConfig+0x4a>
 801414e:	e012      	b.n	8014176 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2200      	movs	r2, #0
 8014154:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	3308      	adds	r3, #8
 801415a:	2201      	movs	r2, #1
 801415c:	4619      	mov	r1, r3
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f000 f927 	bl	80143b2 <USBD_CtlSendData>
        break;
 8014164:	e00c      	b.n	8014180 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	3304      	adds	r3, #4
 801416a:	2201      	movs	r2, #1
 801416c:	4619      	mov	r1, r3
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 f91f 	bl	80143b2 <USBD_CtlSendData>
        break;
 8014174:	e004      	b.n	8014180 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014176:	6839      	ldr	r1, [r7, #0]
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f000 f8a9 	bl	80142d0 <USBD_CtlError>
        break;
 801417e:	bf00      	nop
}
 8014180:	bf00      	nop
 8014182:	3708      	adds	r7, #8
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b082      	sub	sp, #8
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014198:	b2db      	uxtb	r3, r3
 801419a:	3b01      	subs	r3, #1
 801419c:	2b02      	cmp	r3, #2
 801419e:	d81e      	bhi.n	80141de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80141a0:	683b      	ldr	r3, [r7, #0]
 80141a2:	88db      	ldrh	r3, [r3, #6]
 80141a4:	2b02      	cmp	r3, #2
 80141a6:	d004      	beq.n	80141b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80141a8:	6839      	ldr	r1, [r7, #0]
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	f000 f890 	bl	80142d0 <USBD_CtlError>
        break;
 80141b0:	e01a      	b.n	80141e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2201      	movs	r2, #1
 80141b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d005      	beq.n	80141ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	f043 0202 	orr.w	r2, r3, #2
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	330c      	adds	r3, #12
 80141d2:	2202      	movs	r2, #2
 80141d4:	4619      	mov	r1, r3
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f000 f8eb 	bl	80143b2 <USBD_CtlSendData>
      break;
 80141dc:	e004      	b.n	80141e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80141de:	6839      	ldr	r1, [r7, #0]
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f000 f875 	bl	80142d0 <USBD_CtlError>
      break;
 80141e6:	bf00      	nop
  }
}
 80141e8:	bf00      	nop
 80141ea:	3708      	adds	r7, #8
 80141ec:	46bd      	mov	sp, r7
 80141ee:	bd80      	pop	{r7, pc}

080141f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b082      	sub	sp, #8
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
 80141f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	885b      	ldrh	r3, [r3, #2]
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d106      	bne.n	8014210 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2201      	movs	r2, #1
 8014206:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 f92b 	bl	8014466 <USBD_CtlSendStatus>
  }
}
 8014210:	bf00      	nop
 8014212:	3708      	adds	r7, #8
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b082      	sub	sp, #8
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014228:	b2db      	uxtb	r3, r3
 801422a:	3b01      	subs	r3, #1
 801422c:	2b02      	cmp	r3, #2
 801422e:	d80b      	bhi.n	8014248 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	885b      	ldrh	r3, [r3, #2]
 8014234:	2b01      	cmp	r3, #1
 8014236:	d10c      	bne.n	8014252 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	2200      	movs	r2, #0
 801423c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 f910 	bl	8014466 <USBD_CtlSendStatus>
      }
      break;
 8014246:	e004      	b.n	8014252 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014248:	6839      	ldr	r1, [r7, #0]
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f000 f840 	bl	80142d0 <USBD_CtlError>
      break;
 8014250:	e000      	b.n	8014254 <USBD_ClrFeature+0x3c>
      break;
 8014252:	bf00      	nop
  }
}
 8014254:	bf00      	nop
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	781a      	ldrb	r2, [r3, #0]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	3301      	adds	r3, #1
 8014276:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	781a      	ldrb	r2, [r3, #0]
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	3301      	adds	r3, #1
 8014284:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014286:	68f8      	ldr	r0, [r7, #12]
 8014288:	f7ff fa91 	bl	80137ae <SWAPBYTE>
 801428c:	4603      	mov	r3, r0
 801428e:	461a      	mov	r2, r3
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	3301      	adds	r3, #1
 8014298:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	3301      	adds	r3, #1
 801429e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80142a0:	68f8      	ldr	r0, [r7, #12]
 80142a2:	f7ff fa84 	bl	80137ae <SWAPBYTE>
 80142a6:	4603      	mov	r3, r0
 80142a8:	461a      	mov	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	3301      	adds	r3, #1
 80142b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	3301      	adds	r3, #1
 80142b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80142ba:	68f8      	ldr	r0, [r7, #12]
 80142bc:	f7ff fa77 	bl	80137ae <SWAPBYTE>
 80142c0:	4603      	mov	r3, r0
 80142c2:	461a      	mov	r2, r3
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	80da      	strh	r2, [r3, #6]
}
 80142c8:	bf00      	nop
 80142ca:	3710      	adds	r7, #16
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}

080142d0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80142da:	2180      	movs	r1, #128	; 0x80
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f000 fd75 	bl	8014dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80142e2:	2100      	movs	r1, #0
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f000 fd71 	bl	8014dcc <USBD_LL_StallEP>
}
 80142ea:	bf00      	nop
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}

080142f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80142f2:	b580      	push	{r7, lr}
 80142f4:	b086      	sub	sp, #24
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	60f8      	str	r0, [r7, #12]
 80142fa:	60b9      	str	r1, [r7, #8]
 80142fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80142fe:	2300      	movs	r3, #0
 8014300:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d036      	beq.n	8014376 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801430c:	6938      	ldr	r0, [r7, #16]
 801430e:	f000 f836 	bl	801437e <USBD_GetLen>
 8014312:	4603      	mov	r3, r0
 8014314:	3301      	adds	r3, #1
 8014316:	b29b      	uxth	r3, r3
 8014318:	005b      	lsls	r3, r3, #1
 801431a:	b29a      	uxth	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014320:	7dfb      	ldrb	r3, [r7, #23]
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	4413      	add	r3, r2
 8014326:	687a      	ldr	r2, [r7, #4]
 8014328:	7812      	ldrb	r2, [r2, #0]
 801432a:	701a      	strb	r2, [r3, #0]
  idx++;
 801432c:	7dfb      	ldrb	r3, [r7, #23]
 801432e:	3301      	adds	r3, #1
 8014330:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014332:	7dfb      	ldrb	r3, [r7, #23]
 8014334:	68ba      	ldr	r2, [r7, #8]
 8014336:	4413      	add	r3, r2
 8014338:	2203      	movs	r2, #3
 801433a:	701a      	strb	r2, [r3, #0]
  idx++;
 801433c:	7dfb      	ldrb	r3, [r7, #23]
 801433e:	3301      	adds	r3, #1
 8014340:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014342:	e013      	b.n	801436c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014344:	7dfb      	ldrb	r3, [r7, #23]
 8014346:	68ba      	ldr	r2, [r7, #8]
 8014348:	4413      	add	r3, r2
 801434a:	693a      	ldr	r2, [r7, #16]
 801434c:	7812      	ldrb	r2, [r2, #0]
 801434e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	3301      	adds	r3, #1
 8014354:	613b      	str	r3, [r7, #16]
    idx++;
 8014356:	7dfb      	ldrb	r3, [r7, #23]
 8014358:	3301      	adds	r3, #1
 801435a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801435c:	7dfb      	ldrb	r3, [r7, #23]
 801435e:	68ba      	ldr	r2, [r7, #8]
 8014360:	4413      	add	r3, r2
 8014362:	2200      	movs	r2, #0
 8014364:	701a      	strb	r2, [r3, #0]
    idx++;
 8014366:	7dfb      	ldrb	r3, [r7, #23]
 8014368:	3301      	adds	r3, #1
 801436a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d1e7      	bne.n	8014344 <USBD_GetString+0x52>
 8014374:	e000      	b.n	8014378 <USBD_GetString+0x86>
    return;
 8014376:	bf00      	nop
  }
}
 8014378:	3718      	adds	r7, #24
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}

0801437e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801437e:	b480      	push	{r7}
 8014380:	b085      	sub	sp, #20
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014386:	2300      	movs	r3, #0
 8014388:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801438e:	e005      	b.n	801439c <USBD_GetLen+0x1e>
  {
    len++;
 8014390:	7bfb      	ldrb	r3, [r7, #15]
 8014392:	3301      	adds	r3, #1
 8014394:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	3301      	adds	r3, #1
 801439a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d1f5      	bne.n	8014390 <USBD_GetLen+0x12>
  }

  return len;
 80143a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3714      	adds	r7, #20
 80143aa:	46bd      	mov	sp, r7
 80143ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b0:	4770      	bx	lr

080143b2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b084      	sub	sp, #16
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	60f8      	str	r0, [r7, #12]
 80143ba:	60b9      	str	r1, [r7, #8]
 80143bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	2202      	movs	r2, #2
 80143c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	2100      	movs	r1, #0
 80143d8:	68f8      	ldr	r0, [r7, #12]
 80143da:	f000 fdc5 	bl	8014f68 <USBD_LL_Transmit>

  return USBD_OK;
 80143de:	2300      	movs	r3, #0
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3710      	adds	r7, #16
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}

080143e8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80143e8:	b580      	push	{r7, lr}
 80143ea:	b084      	sub	sp, #16
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	60f8      	str	r0, [r7, #12]
 80143f0:	60b9      	str	r1, [r7, #8]
 80143f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	68ba      	ldr	r2, [r7, #8]
 80143f8:	2100      	movs	r1, #0
 80143fa:	68f8      	ldr	r0, [r7, #12]
 80143fc:	f000 fdb4 	bl	8014f68 <USBD_LL_Transmit>

  return USBD_OK;
 8014400:	2300      	movs	r3, #0
}
 8014402:	4618      	mov	r0, r3
 8014404:	3710      	adds	r7, #16
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}

0801440a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801440a:	b580      	push	{r7, lr}
 801440c:	b084      	sub	sp, #16
 801440e:	af00      	add	r7, sp, #0
 8014410:	60f8      	str	r0, [r7, #12]
 8014412:	60b9      	str	r1, [r7, #8]
 8014414:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	2203      	movs	r2, #3
 801441a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	687a      	ldr	r2, [r7, #4]
 801442a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	68ba      	ldr	r2, [r7, #8]
 8014432:	2100      	movs	r1, #0
 8014434:	68f8      	ldr	r0, [r7, #12]
 8014436:	f000 fdcf 	bl	8014fd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801443a:	2300      	movs	r3, #0
}
 801443c:	4618      	mov	r0, r3
 801443e:	3710      	adds	r7, #16
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b084      	sub	sp, #16
 8014448:	af00      	add	r7, sp, #0
 801444a:	60f8      	str	r0, [r7, #12]
 801444c:	60b9      	str	r1, [r7, #8]
 801444e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	68ba      	ldr	r2, [r7, #8]
 8014454:	2100      	movs	r1, #0
 8014456:	68f8      	ldr	r0, [r7, #12]
 8014458:	f000 fdbe 	bl	8014fd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801445c:	2300      	movs	r3, #0
}
 801445e:	4618      	mov	r0, r3
 8014460:	3710      	adds	r7, #16
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}

08014466 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b082      	sub	sp, #8
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	2204      	movs	r2, #4
 8014472:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014476:	2300      	movs	r3, #0
 8014478:	2200      	movs	r2, #0
 801447a:	2100      	movs	r1, #0
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 fd73 	bl	8014f68 <USBD_LL_Transmit>

  return USBD_OK;
 8014482:	2300      	movs	r3, #0
}
 8014484:	4618      	mov	r0, r3
 8014486:	3708      	adds	r7, #8
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2205      	movs	r2, #5
 8014498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801449c:	2300      	movs	r3, #0
 801449e:	2200      	movs	r2, #0
 80144a0:	2100      	movs	r1, #0
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f000 fd98 	bl	8014fd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80144a8:	2300      	movs	r3, #0
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3708      	adds	r7, #8
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
	...

080144b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80144b8:	2200      	movs	r2, #0
 80144ba:	4912      	ldr	r1, [pc, #72]	; (8014504 <MX_USB_DEVICE_Init+0x50>)
 80144bc:	4812      	ldr	r0, [pc, #72]	; (8014508 <MX_USB_DEVICE_Init+0x54>)
 80144be:	f7fe fe65 	bl	801318c <USBD_Init>
 80144c2:	4603      	mov	r3, r0
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d001      	beq.n	80144cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80144c8:	f7ed ffb2 	bl	8002430 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80144cc:	490f      	ldr	r1, [pc, #60]	; (801450c <MX_USB_DEVICE_Init+0x58>)
 80144ce:	480e      	ldr	r0, [pc, #56]	; (8014508 <MX_USB_DEVICE_Init+0x54>)
 80144d0:	f7fe fe8c 	bl	80131ec <USBD_RegisterClass>
 80144d4:	4603      	mov	r3, r0
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d001      	beq.n	80144de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80144da:	f7ed ffa9 	bl	8002430 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80144de:	490c      	ldr	r1, [pc, #48]	; (8014510 <MX_USB_DEVICE_Init+0x5c>)
 80144e0:	4809      	ldr	r0, [pc, #36]	; (8014508 <MX_USB_DEVICE_Init+0x54>)
 80144e2:	f7fe fdad 	bl	8013040 <USBD_CDC_RegisterInterface>
 80144e6:	4603      	mov	r3, r0
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d001      	beq.n	80144f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80144ec:	f7ed ffa0 	bl	8002430 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80144f0:	4805      	ldr	r0, [pc, #20]	; (8014508 <MX_USB_DEVICE_Init+0x54>)
 80144f2:	f7fe fea2 	bl	801323a <USBD_Start>
 80144f6:	4603      	mov	r3, r0
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d001      	beq.n	8014500 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80144fc:	f7ed ff98 	bl	8002430 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014500:	bf00      	nop
 8014502:	bd80      	pop	{r7, pc}
 8014504:	20000188 	.word	0x20000188
 8014508:	200023b4 	.word	0x200023b4
 801450c:	20000070 	.word	0x20000070
 8014510:	20000174 	.word	0x20000174

08014514 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014518:	2200      	movs	r2, #0
 801451a:	4905      	ldr	r1, [pc, #20]	; (8014530 <CDC_Init_FS+0x1c>)
 801451c:	4805      	ldr	r0, [pc, #20]	; (8014534 <CDC_Init_FS+0x20>)
 801451e:	f7fe fda4 	bl	801306a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014522:	4905      	ldr	r1, [pc, #20]	; (8014538 <CDC_Init_FS+0x24>)
 8014524:	4803      	ldr	r0, [pc, #12]	; (8014534 <CDC_Init_FS+0x20>)
 8014526:	f7fe fdbe 	bl	80130a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801452a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801452c:	4618      	mov	r0, r3
 801452e:	bd80      	pop	{r7, pc}
 8014530:	20002e84 	.word	0x20002e84
 8014534:	200023b4 	.word	0x200023b4
 8014538:	20002684 	.word	0x20002684

0801453c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801453c:	b480      	push	{r7}
 801453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014540:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014542:	4618      	mov	r0, r3
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801454c:	b480      	push	{r7}
 801454e:	b083      	sub	sp, #12
 8014550:	af00      	add	r7, sp, #0
 8014552:	4603      	mov	r3, r0
 8014554:	6039      	str	r1, [r7, #0]
 8014556:	71fb      	strb	r3, [r7, #7]
 8014558:	4613      	mov	r3, r2
 801455a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801455c:	79fb      	ldrb	r3, [r7, #7]
 801455e:	2b23      	cmp	r3, #35	; 0x23
 8014560:	d84a      	bhi.n	80145f8 <CDC_Control_FS+0xac>
 8014562:	a201      	add	r2, pc, #4	; (adr r2, 8014568 <CDC_Control_FS+0x1c>)
 8014564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014568:	080145f9 	.word	0x080145f9
 801456c:	080145f9 	.word	0x080145f9
 8014570:	080145f9 	.word	0x080145f9
 8014574:	080145f9 	.word	0x080145f9
 8014578:	080145f9 	.word	0x080145f9
 801457c:	080145f9 	.word	0x080145f9
 8014580:	080145f9 	.word	0x080145f9
 8014584:	080145f9 	.word	0x080145f9
 8014588:	080145f9 	.word	0x080145f9
 801458c:	080145f9 	.word	0x080145f9
 8014590:	080145f9 	.word	0x080145f9
 8014594:	080145f9 	.word	0x080145f9
 8014598:	080145f9 	.word	0x080145f9
 801459c:	080145f9 	.word	0x080145f9
 80145a0:	080145f9 	.word	0x080145f9
 80145a4:	080145f9 	.word	0x080145f9
 80145a8:	080145f9 	.word	0x080145f9
 80145ac:	080145f9 	.word	0x080145f9
 80145b0:	080145f9 	.word	0x080145f9
 80145b4:	080145f9 	.word	0x080145f9
 80145b8:	080145f9 	.word	0x080145f9
 80145bc:	080145f9 	.word	0x080145f9
 80145c0:	080145f9 	.word	0x080145f9
 80145c4:	080145f9 	.word	0x080145f9
 80145c8:	080145f9 	.word	0x080145f9
 80145cc:	080145f9 	.word	0x080145f9
 80145d0:	080145f9 	.word	0x080145f9
 80145d4:	080145f9 	.word	0x080145f9
 80145d8:	080145f9 	.word	0x080145f9
 80145dc:	080145f9 	.word	0x080145f9
 80145e0:	080145f9 	.word	0x080145f9
 80145e4:	080145f9 	.word	0x080145f9
 80145e8:	080145f9 	.word	0x080145f9
 80145ec:	080145f9 	.word	0x080145f9
 80145f0:	080145f9 	.word	0x080145f9
 80145f4:	080145f9 	.word	0x080145f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80145f8:	bf00      	nop
  }

  return (USBD_OK);
 80145fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014612:	6879      	ldr	r1, [r7, #4]
 8014614:	4805      	ldr	r0, [pc, #20]	; (801462c <CDC_Receive_FS+0x24>)
 8014616:	f7fe fd46 	bl	80130a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801461a:	4804      	ldr	r0, [pc, #16]	; (801462c <CDC_Receive_FS+0x24>)
 801461c:	f7fe fd8c 	bl	8013138 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014620:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014622:	4618      	mov	r0, r3
 8014624:	3708      	adds	r7, #8
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	200023b4 	.word	0x200023b4

08014630 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b084      	sub	sp, #16
 8014634:	af00      	add	r7, sp, #0
 8014636:	6078      	str	r0, [r7, #4]
 8014638:	460b      	mov	r3, r1
 801463a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801463c:	2300      	movs	r3, #0
 801463e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014640:	4b0d      	ldr	r3, [pc, #52]	; (8014678 <CDC_Transmit_FS+0x48>)
 8014642:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014646:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801464e:	2b00      	cmp	r3, #0
 8014650:	d001      	beq.n	8014656 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014652:	2301      	movs	r3, #1
 8014654:	e00b      	b.n	801466e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014656:	887b      	ldrh	r3, [r7, #2]
 8014658:	461a      	mov	r2, r3
 801465a:	6879      	ldr	r1, [r7, #4]
 801465c:	4806      	ldr	r0, [pc, #24]	; (8014678 <CDC_Transmit_FS+0x48>)
 801465e:	f7fe fd04 	bl	801306a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014662:	4805      	ldr	r0, [pc, #20]	; (8014678 <CDC_Transmit_FS+0x48>)
 8014664:	f7fe fd38 	bl	80130d8 <USBD_CDC_TransmitPacket>
 8014668:	4603      	mov	r3, r0
 801466a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801466c:	7bfb      	ldrb	r3, [r7, #15]
}
 801466e:	4618      	mov	r0, r3
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	200023b4 	.word	0x200023b4

0801467c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801467c:	b480      	push	{r7}
 801467e:	b087      	sub	sp, #28
 8014680:	af00      	add	r7, sp, #0
 8014682:	60f8      	str	r0, [r7, #12]
 8014684:	60b9      	str	r1, [r7, #8]
 8014686:	4613      	mov	r3, r2
 8014688:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801468a:	2300      	movs	r3, #0
 801468c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801468e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014692:	4618      	mov	r0, r3
 8014694:	371c      	adds	r7, #28
 8014696:	46bd      	mov	sp, r7
 8014698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469c:	4770      	bx	lr
	...

080146a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b083      	sub	sp, #12
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	4603      	mov	r3, r0
 80146a8:	6039      	str	r1, [r7, #0]
 80146aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	2212      	movs	r2, #18
 80146b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80146b2:	4b03      	ldr	r3, [pc, #12]	; (80146c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80146b4:	4618      	mov	r0, r3
 80146b6:	370c      	adds	r7, #12
 80146b8:	46bd      	mov	sp, r7
 80146ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146be:	4770      	bx	lr
 80146c0:	200001a8 	.word	0x200001a8

080146c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146c4:	b480      	push	{r7}
 80146c6:	b083      	sub	sp, #12
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	4603      	mov	r3, r0
 80146cc:	6039      	str	r1, [r7, #0]
 80146ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	2204      	movs	r2, #4
 80146d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80146d6:	4b03      	ldr	r3, [pc, #12]	; (80146e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80146d8:	4618      	mov	r0, r3
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr
 80146e4:	200001c8 	.word	0x200001c8

080146e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	4603      	mov	r3, r0
 80146f0:	6039      	str	r1, [r7, #0]
 80146f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80146f4:	79fb      	ldrb	r3, [r7, #7]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d105      	bne.n	8014706 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80146fa:	683a      	ldr	r2, [r7, #0]
 80146fc:	4907      	ldr	r1, [pc, #28]	; (801471c <USBD_FS_ProductStrDescriptor+0x34>)
 80146fe:	4808      	ldr	r0, [pc, #32]	; (8014720 <USBD_FS_ProductStrDescriptor+0x38>)
 8014700:	f7ff fdf7 	bl	80142f2 <USBD_GetString>
 8014704:	e004      	b.n	8014710 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014706:	683a      	ldr	r2, [r7, #0]
 8014708:	4904      	ldr	r1, [pc, #16]	; (801471c <USBD_FS_ProductStrDescriptor+0x34>)
 801470a:	4805      	ldr	r0, [pc, #20]	; (8014720 <USBD_FS_ProductStrDescriptor+0x38>)
 801470c:	f7ff fdf1 	bl	80142f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014710:	4b02      	ldr	r3, [pc, #8]	; (801471c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014712:	4618      	mov	r0, r3
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	20003684 	.word	0x20003684
 8014720:	0801f360 	.word	0x0801f360

08014724 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	4603      	mov	r3, r0
 801472c:	6039      	str	r1, [r7, #0]
 801472e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014730:	683a      	ldr	r2, [r7, #0]
 8014732:	4904      	ldr	r1, [pc, #16]	; (8014744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014734:	4804      	ldr	r0, [pc, #16]	; (8014748 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014736:	f7ff fddc 	bl	80142f2 <USBD_GetString>
  return USBD_StrDesc;
 801473a:	4b02      	ldr	r3, [pc, #8]	; (8014744 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801473c:	4618      	mov	r0, r3
 801473e:	3708      	adds	r7, #8
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	20003684 	.word	0x20003684
 8014748:	0801f378 	.word	0x0801f378

0801474c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b082      	sub	sp, #8
 8014750:	af00      	add	r7, sp, #0
 8014752:	4603      	mov	r3, r0
 8014754:	6039      	str	r1, [r7, #0]
 8014756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014758:	683b      	ldr	r3, [r7, #0]
 801475a:	221a      	movs	r2, #26
 801475c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801475e:	f000 f855 	bl	801480c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014762:	4b02      	ldr	r3, [pc, #8]	; (801476c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014764:	4618      	mov	r0, r3
 8014766:	3708      	adds	r7, #8
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}
 801476c:	200001cc 	.word	0x200001cc

08014770 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
 8014776:	4603      	mov	r3, r0
 8014778:	6039      	str	r1, [r7, #0]
 801477a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801477c:	79fb      	ldrb	r3, [r7, #7]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d105      	bne.n	801478e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014782:	683a      	ldr	r2, [r7, #0]
 8014784:	4907      	ldr	r1, [pc, #28]	; (80147a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014786:	4808      	ldr	r0, [pc, #32]	; (80147a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014788:	f7ff fdb3 	bl	80142f2 <USBD_GetString>
 801478c:	e004      	b.n	8014798 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801478e:	683a      	ldr	r2, [r7, #0]
 8014790:	4904      	ldr	r1, [pc, #16]	; (80147a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014792:	4805      	ldr	r0, [pc, #20]	; (80147a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014794:	f7ff fdad 	bl	80142f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014798:	4b02      	ldr	r3, [pc, #8]	; (80147a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801479a:	4618      	mov	r0, r3
 801479c:	3708      	adds	r7, #8
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	20003684 	.word	0x20003684
 80147a8:	0801f38c 	.word	0x0801f38c

080147ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	4603      	mov	r3, r0
 80147b4:	6039      	str	r1, [r7, #0]
 80147b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147b8:	79fb      	ldrb	r3, [r7, #7]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d105      	bne.n	80147ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80147be:	683a      	ldr	r2, [r7, #0]
 80147c0:	4907      	ldr	r1, [pc, #28]	; (80147e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80147c2:	4808      	ldr	r0, [pc, #32]	; (80147e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80147c4:	f7ff fd95 	bl	80142f2 <USBD_GetString>
 80147c8:	e004      	b.n	80147d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80147ca:	683a      	ldr	r2, [r7, #0]
 80147cc:	4904      	ldr	r1, [pc, #16]	; (80147e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80147ce:	4805      	ldr	r0, [pc, #20]	; (80147e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80147d0:	f7ff fd8f 	bl	80142f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147d4:	4b02      	ldr	r3, [pc, #8]	; (80147e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3708      	adds	r7, #8
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	20003684 	.word	0x20003684
 80147e4:	0801f398 	.word	0x0801f398

080147e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147e8:	b480      	push	{r7}
 80147ea:	b083      	sub	sp, #12
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	4603      	mov	r3, r0
 80147f0:	6039      	str	r1, [r7, #0]
 80147f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80147f4:	683b      	ldr	r3, [r7, #0]
 80147f6:	220c      	movs	r2, #12
 80147f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80147fa:	4b03      	ldr	r3, [pc, #12]	; (8014808 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	370c      	adds	r7, #12
 8014800:	46bd      	mov	sp, r7
 8014802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014806:	4770      	bx	lr
 8014808:	200001bc 	.word	0x200001bc

0801480c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b084      	sub	sp, #16
 8014810:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014812:	4b0f      	ldr	r3, [pc, #60]	; (8014850 <Get_SerialNum+0x44>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014818:	4b0e      	ldr	r3, [pc, #56]	; (8014854 <Get_SerialNum+0x48>)
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801481e:	4b0e      	ldr	r3, [pc, #56]	; (8014858 <Get_SerialNum+0x4c>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014824:	68fa      	ldr	r2, [r7, #12]
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	4413      	add	r3, r2
 801482a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d009      	beq.n	8014846 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014832:	2208      	movs	r2, #8
 8014834:	4909      	ldr	r1, [pc, #36]	; (801485c <Get_SerialNum+0x50>)
 8014836:	68f8      	ldr	r0, [r7, #12]
 8014838:	f000 f814 	bl	8014864 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801483c:	2204      	movs	r2, #4
 801483e:	4908      	ldr	r1, [pc, #32]	; (8014860 <Get_SerialNum+0x54>)
 8014840:	68b8      	ldr	r0, [r7, #8]
 8014842:	f000 f80f 	bl	8014864 <IntToUnicode>
  }
}
 8014846:	bf00      	nop
 8014848:	3710      	adds	r7, #16
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}
 801484e:	bf00      	nop
 8014850:	1fff7590 	.word	0x1fff7590
 8014854:	1fff7594 	.word	0x1fff7594
 8014858:	1fff7598 	.word	0x1fff7598
 801485c:	200001ce 	.word	0x200001ce
 8014860:	200001de 	.word	0x200001de

08014864 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014864:	b480      	push	{r7}
 8014866:	b087      	sub	sp, #28
 8014868:	af00      	add	r7, sp, #0
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	4613      	mov	r3, r2
 8014870:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014872:	2300      	movs	r3, #0
 8014874:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014876:	2300      	movs	r3, #0
 8014878:	75fb      	strb	r3, [r7, #23]
 801487a:	e027      	b.n	80148cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	0f1b      	lsrs	r3, r3, #28
 8014880:	2b09      	cmp	r3, #9
 8014882:	d80b      	bhi.n	801489c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	0f1b      	lsrs	r3, r3, #28
 8014888:	b2da      	uxtb	r2, r3
 801488a:	7dfb      	ldrb	r3, [r7, #23]
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	4619      	mov	r1, r3
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	440b      	add	r3, r1
 8014894:	3230      	adds	r2, #48	; 0x30
 8014896:	b2d2      	uxtb	r2, r2
 8014898:	701a      	strb	r2, [r3, #0]
 801489a:	e00a      	b.n	80148b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	0f1b      	lsrs	r3, r3, #28
 80148a0:	b2da      	uxtb	r2, r3
 80148a2:	7dfb      	ldrb	r3, [r7, #23]
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	4619      	mov	r1, r3
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	440b      	add	r3, r1
 80148ac:	3237      	adds	r2, #55	; 0x37
 80148ae:	b2d2      	uxtb	r2, r2
 80148b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	011b      	lsls	r3, r3, #4
 80148b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80148b8:	7dfb      	ldrb	r3, [r7, #23]
 80148ba:	005b      	lsls	r3, r3, #1
 80148bc:	3301      	adds	r3, #1
 80148be:	68ba      	ldr	r2, [r7, #8]
 80148c0:	4413      	add	r3, r2
 80148c2:	2200      	movs	r2, #0
 80148c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80148c6:	7dfb      	ldrb	r3, [r7, #23]
 80148c8:	3301      	adds	r3, #1
 80148ca:	75fb      	strb	r3, [r7, #23]
 80148cc:	7dfa      	ldrb	r2, [r7, #23]
 80148ce:	79fb      	ldrb	r3, [r7, #7]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d3d3      	bcc.n	801487c <IntToUnicode+0x18>
  }
}
 80148d4:	bf00      	nop
 80148d6:	bf00      	nop
 80148d8:	371c      	adds	r7, #28
 80148da:	46bd      	mov	sp, r7
 80148dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e0:	4770      	bx	lr
	...

080148e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b0b2      	sub	sp, #200	; 0xc8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80148ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80148f0:	2200      	movs	r2, #0
 80148f2:	601a      	str	r2, [r3, #0]
 80148f4:	605a      	str	r2, [r3, #4]
 80148f6:	609a      	str	r2, [r3, #8]
 80148f8:	60da      	str	r2, [r3, #12]
 80148fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80148fc:	f107 0318 	add.w	r3, r7, #24
 8014900:	229c      	movs	r2, #156	; 0x9c
 8014902:	2100      	movs	r1, #0
 8014904:	4618      	mov	r0, r3
 8014906:	f005 fc51 	bl	801a1ac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014912:	d163      	bne.n	80149dc <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014918:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801491a:	2300      	movs	r3, #0
 801491c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014920:	f107 0318 	add.w	r3, r7, #24
 8014924:	4618      	mov	r0, r3
 8014926:	f7f6 fff7 	bl	800b918 <HAL_RCCEx_PeriphCLKConfig>
 801492a:	4603      	mov	r3, r0
 801492c:	2b00      	cmp	r3, #0
 801492e:	d001      	beq.n	8014934 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8014930:	f7ed fd7e 	bl	8002430 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014934:	4b2b      	ldr	r3, [pc, #172]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 8014936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014938:	4a2a      	ldr	r2, [pc, #168]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 801493a:	f043 0301 	orr.w	r3, r3, #1
 801493e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014940:	4b28      	ldr	r3, [pc, #160]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 8014942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014944:	f003 0301 	and.w	r3, r3, #1
 8014948:	617b      	str	r3, [r7, #20]
 801494a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 801494c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014954:	2302      	movs	r3, #2
 8014956:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801495a:	2300      	movs	r3, #0
 801495c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014960:	2303      	movs	r3, #3
 8014962:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014966:	230a      	movs	r3, #10
 8014968:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801496c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8014970:	4619      	mov	r1, r3
 8014972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8014976:	f7f3 ffc9 	bl	800890c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801497a:	4b1a      	ldr	r3, [pc, #104]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 801497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801497e:	4a19      	ldr	r2, [pc, #100]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 8014980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8014986:	4b17      	ldr	r3, [pc, #92]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 8014988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801498a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801498e:	613b      	str	r3, [r7, #16]
 8014990:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014992:	4b14      	ldr	r3, [pc, #80]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 8014994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801499a:	2b00      	cmp	r3, #0
 801499c:	d114      	bne.n	80149c8 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801499e:	4b11      	ldr	r3, [pc, #68]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 80149a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149a2:	4a10      	ldr	r2, [pc, #64]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 80149a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80149a8:	6593      	str	r3, [r2, #88]	; 0x58
 80149aa:	4b0e      	ldr	r3, [pc, #56]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 80149ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80149b2:	60fb      	str	r3, [r7, #12]
 80149b4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80149b6:	f7f6 f8bb 	bl	800ab30 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80149ba:	4b0a      	ldr	r3, [pc, #40]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 80149bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149be:	4a09      	ldr	r2, [pc, #36]	; (80149e4 <HAL_PCD_MspInit+0x100>)
 80149c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80149c4:	6593      	str	r3, [r2, #88]	; 0x58
 80149c6:	e001      	b.n	80149cc <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80149c8:	f7f6 f8b2 	bl	800ab30 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80149cc:	2200      	movs	r2, #0
 80149ce:	2100      	movs	r1, #0
 80149d0:	2043      	movs	r0, #67	; 0x43
 80149d2:	f7f2 ff22 	bl	800781a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80149d6:	2043      	movs	r0, #67	; 0x43
 80149d8:	f7f2 ff3b 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80149dc:	bf00      	nop
 80149de:	37c8      	adds	r7, #200	; 0xc8
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}
 80149e4:	40021000 	.word	0x40021000

080149e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149e8:	b580      	push	{r7, lr}
 80149ea:	b082      	sub	sp, #8
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80149fc:	4619      	mov	r1, r3
 80149fe:	4610      	mov	r0, r2
 8014a00:	f7fe fc66 	bl	80132d0 <USBD_LL_SetupStage>
}
 8014a04:	bf00      	nop
 8014a06:	3708      	adds	r7, #8
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014a1e:	78fa      	ldrb	r2, [r7, #3]
 8014a20:	6879      	ldr	r1, [r7, #4]
 8014a22:	4613      	mov	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	4413      	add	r3, r2
 8014a28:	009b      	lsls	r3, r3, #2
 8014a2a:	440b      	add	r3, r1
 8014a2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	78fb      	ldrb	r3, [r7, #3]
 8014a34:	4619      	mov	r1, r3
 8014a36:	f7fe fca0 	bl	801337a <USBD_LL_DataOutStage>
}
 8014a3a:	bf00      	nop
 8014a3c:	3708      	adds	r7, #8
 8014a3e:	46bd      	mov	sp, r7
 8014a40:	bd80      	pop	{r7, pc}

08014a42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a42:	b580      	push	{r7, lr}
 8014a44:	b082      	sub	sp, #8
 8014a46:	af00      	add	r7, sp, #0
 8014a48:	6078      	str	r0, [r7, #4]
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8014a54:	78fa      	ldrb	r2, [r7, #3]
 8014a56:	6879      	ldr	r1, [r7, #4]
 8014a58:	4613      	mov	r3, r2
 8014a5a:	00db      	lsls	r3, r3, #3
 8014a5c:	4413      	add	r3, r2
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	440b      	add	r3, r1
 8014a62:	334c      	adds	r3, #76	; 0x4c
 8014a64:	681a      	ldr	r2, [r3, #0]
 8014a66:	78fb      	ldrb	r3, [r7, #3]
 8014a68:	4619      	mov	r1, r3
 8014a6a:	f7fe fce9 	bl	8013440 <USBD_LL_DataInStage>
}
 8014a6e:	bf00      	nop
 8014a70:	3708      	adds	r7, #8
 8014a72:	46bd      	mov	sp, r7
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a76:	b580      	push	{r7, lr}
 8014a78:	b082      	sub	sp, #8
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7fe fdfd 	bl	8013684 <USBD_LL_SOF>
}
 8014a8a:	bf00      	nop
 8014a8c:	3708      	adds	r7, #8
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}

08014a92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a92:	b580      	push	{r7, lr}
 8014a94:	b084      	sub	sp, #16
 8014a96:	af00      	add	r7, sp, #0
 8014a98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	68db      	ldr	r3, [r3, #12]
 8014aa2:	2b02      	cmp	r3, #2
 8014aa4:	d001      	beq.n	8014aaa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014aa6:	f7ed fcc3 	bl	8002430 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014ab0:	7bfa      	ldrb	r2, [r7, #15]
 8014ab2:	4611      	mov	r1, r2
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f7fe fda7 	bl	8013608 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fe fd53 	bl	801356c <USBD_LL_Reset>
}
 8014ac6:	bf00      	nop
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
	...

08014ad0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	6812      	ldr	r2, [r2, #0]
 8014ae6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014aea:	f043 0301 	orr.w	r3, r3, #1
 8014aee:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7fe fd96 	bl	8013628 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	6a1b      	ldr	r3, [r3, #32]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d005      	beq.n	8014b10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014b04:	4b04      	ldr	r3, [pc, #16]	; (8014b18 <HAL_PCD_SuspendCallback+0x48>)
 8014b06:	691b      	ldr	r3, [r3, #16]
 8014b08:	4a03      	ldr	r2, [pc, #12]	; (8014b18 <HAL_PCD_SuspendCallback+0x48>)
 8014b0a:	f043 0306 	orr.w	r3, r3, #6
 8014b0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014b10:	bf00      	nop
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	e000ed00 	.word	0xe000ed00

08014b1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b082      	sub	sp, #8
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	6812      	ldr	r2, [r2, #0]
 8014b32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014b36:	f023 0301 	bic.w	r3, r3, #1
 8014b3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6a1b      	ldr	r3, [r3, #32]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d007      	beq.n	8014b54 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014b44:	4b08      	ldr	r3, [pc, #32]	; (8014b68 <HAL_PCD_ResumeCallback+0x4c>)
 8014b46:	691b      	ldr	r3, [r3, #16]
 8014b48:	4a07      	ldr	r2, [pc, #28]	; (8014b68 <HAL_PCD_ResumeCallback+0x4c>)
 8014b4a:	f023 0306 	bic.w	r3, r3, #6
 8014b4e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014b50:	f000 faf4 	bl	801513c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7fe fd7a 	bl	8013654 <USBD_LL_Resume>
}
 8014b60:	bf00      	nop
 8014b62:	3708      	adds	r7, #8
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	e000ed00 	.word	0xe000ed00

08014b6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	460b      	mov	r3, r1
 8014b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014b7e:	78fa      	ldrb	r2, [r7, #3]
 8014b80:	4611      	mov	r1, r2
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fe fdc6 	bl	8013714 <USBD_LL_IsoOUTIncomplete>
}
 8014b88:	bf00      	nop
 8014b8a:	3708      	adds	r7, #8
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
 8014b98:	460b      	mov	r3, r1
 8014b9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014ba2:	78fa      	ldrb	r2, [r7, #3]
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fe fd8e 	bl	80136c8 <USBD_LL_IsoINIncomplete>
}
 8014bac:	bf00      	nop
 8014bae:	3708      	adds	r7, #8
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fe fdcc 	bl	8013760 <USBD_LL_DevConnected>
}
 8014bc8:	bf00      	nop
 8014bca:	3708      	adds	r7, #8
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}

08014bd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b082      	sub	sp, #8
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7fe fdc9 	bl	8013776 <USBD_LL_DevDisconnected>
}
 8014be4:	bf00      	nop
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	781b      	ldrb	r3, [r3, #0]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d139      	bne.n	8014c70 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8014bfc:	4a1f      	ldr	r2, [pc, #124]	; (8014c7c <USBD_LL_Init+0x90>)
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	4a1d      	ldr	r2, [pc, #116]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014c0c:	4b1b      	ldr	r3, [pc, #108]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014c12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8014c14:	4b19      	ldr	r3, [pc, #100]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c16:	2206      	movs	r2, #6
 8014c18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014c1a:	4b18      	ldr	r3, [pc, #96]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c1c:	2202      	movs	r2, #2
 8014c1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014c20:	4b16      	ldr	r3, [pc, #88]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c22:	2200      	movs	r2, #0
 8014c24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014c26:	4b15      	ldr	r3, [pc, #84]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c28:	2200      	movs	r2, #0
 8014c2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014c2c:	4b13      	ldr	r3, [pc, #76]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c2e:	2200      	movs	r2, #0
 8014c30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8014c32:	4b12      	ldr	r3, [pc, #72]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c34:	2200      	movs	r2, #0
 8014c36:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014c38:	4b10      	ldr	r3, [pc, #64]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8014c3e:	4b0f      	ldr	r3, [pc, #60]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c40:	2200      	movs	r2, #0
 8014c42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014c44:	480d      	ldr	r0, [pc, #52]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c46:	f7f4 fce0 	bl	800960a <HAL_PCD_Init>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d001      	beq.n	8014c54 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8014c50:	f7ed fbee 	bl	8002430 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014c54:	2180      	movs	r1, #128	; 0x80
 8014c56:	4809      	ldr	r0, [pc, #36]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c58:	f7f5 fe61 	bl	800a91e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014c5c:	2240      	movs	r2, #64	; 0x40
 8014c5e:	2100      	movs	r1, #0
 8014c60:	4806      	ldr	r0, [pc, #24]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c62:	f7f5 fe15 	bl	800a890 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014c66:	2280      	movs	r2, #128	; 0x80
 8014c68:	2101      	movs	r1, #1
 8014c6a:	4804      	ldr	r0, [pc, #16]	; (8014c7c <USBD_LL_Init+0x90>)
 8014c6c:	f7f5 fe10 	bl	800a890 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3708      	adds	r7, #8
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20003884 	.word	0x20003884

08014c80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7f4 fddb 	bl	8009852 <HAL_PCD_Start>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014ca0:	7bbb      	ldrb	r3, [r7, #14]
 8014ca2:	2b03      	cmp	r3, #3
 8014ca4:	d816      	bhi.n	8014cd4 <USBD_LL_Start+0x54>
 8014ca6:	a201      	add	r2, pc, #4	; (adr r2, 8014cac <USBD_LL_Start+0x2c>)
 8014ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cac:	08014cbd 	.word	0x08014cbd
 8014cb0:	08014cc3 	.word	0x08014cc3
 8014cb4:	08014cc9 	.word	0x08014cc9
 8014cb8:	08014ccf 	.word	0x08014ccf
    case HAL_OK :
      usb_status = USBD_OK;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8014cc0:	e00b      	b.n	8014cda <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014cc2:	2303      	movs	r3, #3
 8014cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8014cc6:	e008      	b.n	8014cda <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014cc8:	2301      	movs	r3, #1
 8014cca:	73fb      	strb	r3, [r7, #15]
    break;
 8014ccc:	e005      	b.n	8014cda <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014cce:	2303      	movs	r3, #3
 8014cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8014cd2:	e002      	b.n	8014cda <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014cd4:	2303      	movs	r3, #3
 8014cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8014cd8:	bf00      	nop
  }
  return usb_status;
 8014cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3710      	adds	r7, #16
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	4608      	mov	r0, r1
 8014cee:	4611      	mov	r1, r2
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	70fb      	strb	r3, [r7, #3]
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	70bb      	strb	r3, [r7, #2]
 8014cfa:	4613      	mov	r3, r2
 8014cfc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d02:	2300      	movs	r3, #0
 8014d04:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014d0c:	78bb      	ldrb	r3, [r7, #2]
 8014d0e:	883a      	ldrh	r2, [r7, #0]
 8014d10:	78f9      	ldrb	r1, [r7, #3]
 8014d12:	f7f5 fa85 	bl	800a220 <HAL_PCD_EP_Open>
 8014d16:	4603      	mov	r3, r0
 8014d18:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014d1a:	7bbb      	ldrb	r3, [r7, #14]
 8014d1c:	2b03      	cmp	r3, #3
 8014d1e:	d817      	bhi.n	8014d50 <USBD_LL_OpenEP+0x6c>
 8014d20:	a201      	add	r2, pc, #4	; (adr r2, 8014d28 <USBD_LL_OpenEP+0x44>)
 8014d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d26:	bf00      	nop
 8014d28:	08014d39 	.word	0x08014d39
 8014d2c:	08014d3f 	.word	0x08014d3f
 8014d30:	08014d45 	.word	0x08014d45
 8014d34:	08014d4b 	.word	0x08014d4b
    case HAL_OK :
      usb_status = USBD_OK;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8014d3c:	e00b      	b.n	8014d56 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014d3e:	2303      	movs	r3, #3
 8014d40:	73fb      	strb	r3, [r7, #15]
    break;
 8014d42:	e008      	b.n	8014d56 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014d44:	2301      	movs	r3, #1
 8014d46:	73fb      	strb	r3, [r7, #15]
    break;
 8014d48:	e005      	b.n	8014d56 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014d4a:	2303      	movs	r3, #3
 8014d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8014d4e:	e002      	b.n	8014d56 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8014d50:	2303      	movs	r3, #3
 8014d52:	73fb      	strb	r3, [r7, #15]
    break;
 8014d54:	bf00      	nop
  }
  return usb_status;
 8014d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b084      	sub	sp, #16
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	460b      	mov	r3, r1
 8014d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d70:	2300      	movs	r3, #0
 8014d72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d7a:	78fa      	ldrb	r2, [r7, #3]
 8014d7c:	4611      	mov	r1, r2
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f5 fab6 	bl	800a2f0 <HAL_PCD_EP_Close>
 8014d84:	4603      	mov	r3, r0
 8014d86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014d88:	7bbb      	ldrb	r3, [r7, #14]
 8014d8a:	2b03      	cmp	r3, #3
 8014d8c:	d816      	bhi.n	8014dbc <USBD_LL_CloseEP+0x5c>
 8014d8e:	a201      	add	r2, pc, #4	; (adr r2, 8014d94 <USBD_LL_CloseEP+0x34>)
 8014d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d94:	08014da5 	.word	0x08014da5
 8014d98:	08014dab 	.word	0x08014dab
 8014d9c:	08014db1 	.word	0x08014db1
 8014da0:	08014db7 	.word	0x08014db7
    case HAL_OK :
      usb_status = USBD_OK;
 8014da4:	2300      	movs	r3, #0
 8014da6:	73fb      	strb	r3, [r7, #15]
    break;
 8014da8:	e00b      	b.n	8014dc2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014daa:	2303      	movs	r3, #3
 8014dac:	73fb      	strb	r3, [r7, #15]
    break;
 8014dae:	e008      	b.n	8014dc2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014db0:	2301      	movs	r3, #1
 8014db2:	73fb      	strb	r3, [r7, #15]
    break;
 8014db4:	e005      	b.n	8014dc2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014db6:	2303      	movs	r3, #3
 8014db8:	73fb      	strb	r3, [r7, #15]
    break;
 8014dba:	e002      	b.n	8014dc2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014dbc:	2303      	movs	r3, #3
 8014dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8014dc0:	bf00      	nop
  }
  return usb_status;
 8014dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b084      	sub	sp, #16
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014de6:	78fa      	ldrb	r2, [r7, #3]
 8014de8:	4611      	mov	r1, r2
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7f5 fb5d 	bl	800a4aa <HAL_PCD_EP_SetStall>
 8014df0:	4603      	mov	r3, r0
 8014df2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014df4:	7bbb      	ldrb	r3, [r7, #14]
 8014df6:	2b03      	cmp	r3, #3
 8014df8:	d816      	bhi.n	8014e28 <USBD_LL_StallEP+0x5c>
 8014dfa:	a201      	add	r2, pc, #4	; (adr r2, 8014e00 <USBD_LL_StallEP+0x34>)
 8014dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e00:	08014e11 	.word	0x08014e11
 8014e04:	08014e17 	.word	0x08014e17
 8014e08:	08014e1d 	.word	0x08014e1d
 8014e0c:	08014e23 	.word	0x08014e23
    case HAL_OK :
      usb_status = USBD_OK;
 8014e10:	2300      	movs	r3, #0
 8014e12:	73fb      	strb	r3, [r7, #15]
    break;
 8014e14:	e00b      	b.n	8014e2e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014e16:	2303      	movs	r3, #3
 8014e18:	73fb      	strb	r3, [r7, #15]
    break;
 8014e1a:	e008      	b.n	8014e2e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8014e20:	e005      	b.n	8014e2e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014e22:	2303      	movs	r3, #3
 8014e24:	73fb      	strb	r3, [r7, #15]
    break;
 8014e26:	e002      	b.n	8014e2e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014e28:	2303      	movs	r3, #3
 8014e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8014e2c:	bf00      	nop
  }
  return usb_status;
 8014e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3710      	adds	r7, #16
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}

08014e38 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b084      	sub	sp, #16
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	460b      	mov	r3, r1
 8014e42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014e44:	2300      	movs	r3, #0
 8014e46:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014e52:	78fa      	ldrb	r2, [r7, #3]
 8014e54:	4611      	mov	r1, r2
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7f5 fb89 	bl	800a56e <HAL_PCD_EP_ClrStall>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014e60:	7bbb      	ldrb	r3, [r7, #14]
 8014e62:	2b03      	cmp	r3, #3
 8014e64:	d816      	bhi.n	8014e94 <USBD_LL_ClearStallEP+0x5c>
 8014e66:	a201      	add	r2, pc, #4	; (adr r2, 8014e6c <USBD_LL_ClearStallEP+0x34>)
 8014e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e6c:	08014e7d 	.word	0x08014e7d
 8014e70:	08014e83 	.word	0x08014e83
 8014e74:	08014e89 	.word	0x08014e89
 8014e78:	08014e8f 	.word	0x08014e8f
    case HAL_OK :
      usb_status = USBD_OK;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8014e80:	e00b      	b.n	8014e9a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014e82:	2303      	movs	r3, #3
 8014e84:	73fb      	strb	r3, [r7, #15]
    break;
 8014e86:	e008      	b.n	8014e9a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014e88:	2301      	movs	r3, #1
 8014e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8014e8c:	e005      	b.n	8014e9a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014e8e:	2303      	movs	r3, #3
 8014e90:	73fb      	strb	r3, [r7, #15]
    break;
 8014e92:	e002      	b.n	8014e9a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014e94:	2303      	movs	r3, #3
 8014e96:	73fb      	strb	r3, [r7, #15]
    break;
 8014e98:	bf00      	nop
  }
  return usb_status;
 8014e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3710      	adds	r7, #16
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b085      	sub	sp, #20
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	460b      	mov	r3, r1
 8014eae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014eb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	da0b      	bge.n	8014ed8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014ec0:	78fb      	ldrb	r3, [r7, #3]
 8014ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ec6:	68f9      	ldr	r1, [r7, #12]
 8014ec8:	4613      	mov	r3, r2
 8014eca:	00db      	lsls	r3, r3, #3
 8014ecc:	4413      	add	r3, r2
 8014ece:	009b      	lsls	r3, r3, #2
 8014ed0:	440b      	add	r3, r1
 8014ed2:	333e      	adds	r3, #62	; 0x3e
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	e00b      	b.n	8014ef0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014ed8:	78fb      	ldrb	r3, [r7, #3]
 8014eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ede:	68f9      	ldr	r1, [r7, #12]
 8014ee0:	4613      	mov	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	4413      	add	r3, r2
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	440b      	add	r3, r1
 8014eea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8014eee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3714      	adds	r7, #20
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
 8014f04:	460b      	mov	r3, r1
 8014f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014f16:	78fa      	ldrb	r2, [r7, #3]
 8014f18:	4611      	mov	r1, r2
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f5 f95b 	bl	800a1d6 <HAL_PCD_SetAddress>
 8014f20:	4603      	mov	r3, r0
 8014f22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014f24:	7bbb      	ldrb	r3, [r7, #14]
 8014f26:	2b03      	cmp	r3, #3
 8014f28:	d816      	bhi.n	8014f58 <USBD_LL_SetUSBAddress+0x5c>
 8014f2a:	a201      	add	r2, pc, #4	; (adr r2, 8014f30 <USBD_LL_SetUSBAddress+0x34>)
 8014f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f30:	08014f41 	.word	0x08014f41
 8014f34:	08014f47 	.word	0x08014f47
 8014f38:	08014f4d 	.word	0x08014f4d
 8014f3c:	08014f53 	.word	0x08014f53
    case HAL_OK :
      usb_status = USBD_OK;
 8014f40:	2300      	movs	r3, #0
 8014f42:	73fb      	strb	r3, [r7, #15]
    break;
 8014f44:	e00b      	b.n	8014f5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014f46:	2303      	movs	r3, #3
 8014f48:	73fb      	strb	r3, [r7, #15]
    break;
 8014f4a:	e008      	b.n	8014f5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8014f50:	e005      	b.n	8014f5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014f52:	2303      	movs	r3, #3
 8014f54:	73fb      	strb	r3, [r7, #15]
    break;
 8014f56:	e002      	b.n	8014f5e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014f58:	2303      	movs	r3, #3
 8014f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8014f5c:	bf00      	nop
  }
  return usb_status;
 8014f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f60:	4618      	mov	r0, r3
 8014f62:	3710      	adds	r7, #16
 8014f64:	46bd      	mov	sp, r7
 8014f66:	bd80      	pop	{r7, pc}

08014f68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b086      	sub	sp, #24
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	607a      	str	r2, [r7, #4]
 8014f72:	603b      	str	r3, [r7, #0]
 8014f74:	460b      	mov	r3, r1
 8014f76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014f86:	7af9      	ldrb	r1, [r7, #11]
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	687a      	ldr	r2, [r7, #4]
 8014f8c:	f7f5 fa50 	bl	800a430 <HAL_PCD_EP_Transmit>
 8014f90:	4603      	mov	r3, r0
 8014f92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8014f94:	7dbb      	ldrb	r3, [r7, #22]
 8014f96:	2b03      	cmp	r3, #3
 8014f98:	d816      	bhi.n	8014fc8 <USBD_LL_Transmit+0x60>
 8014f9a:	a201      	add	r2, pc, #4	; (adr r2, 8014fa0 <USBD_LL_Transmit+0x38>)
 8014f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fa0:	08014fb1 	.word	0x08014fb1
 8014fa4:	08014fb7 	.word	0x08014fb7
 8014fa8:	08014fbd 	.word	0x08014fbd
 8014fac:	08014fc3 	.word	0x08014fc3
    case HAL_OK :
      usb_status = USBD_OK;
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	75fb      	strb	r3, [r7, #23]
    break;
 8014fb4:	e00b      	b.n	8014fce <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014fb6:	2303      	movs	r3, #3
 8014fb8:	75fb      	strb	r3, [r7, #23]
    break;
 8014fba:	e008      	b.n	8014fce <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	75fb      	strb	r3, [r7, #23]
    break;
 8014fc0:	e005      	b.n	8014fce <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014fc2:	2303      	movs	r3, #3
 8014fc4:	75fb      	strb	r3, [r7, #23]
    break;
 8014fc6:	e002      	b.n	8014fce <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014fc8:	2303      	movs	r3, #3
 8014fca:	75fb      	strb	r3, [r7, #23]
    break;
 8014fcc:	bf00      	nop
  }
  return usb_status;
 8014fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3718      	adds	r7, #24
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	bd80      	pop	{r7, pc}

08014fd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b086      	sub	sp, #24
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	607a      	str	r2, [r7, #4]
 8014fe2:	603b      	str	r3, [r7, #0]
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fec:	2300      	movs	r3, #0
 8014fee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014ff6:	7af9      	ldrb	r1, [r7, #11]
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	687a      	ldr	r2, [r7, #4]
 8014ffc:	f7f5 f9c2 	bl	800a384 <HAL_PCD_EP_Receive>
 8015000:	4603      	mov	r3, r0
 8015002:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8015004:	7dbb      	ldrb	r3, [r7, #22]
 8015006:	2b03      	cmp	r3, #3
 8015008:	d816      	bhi.n	8015038 <USBD_LL_PrepareReceive+0x60>
 801500a:	a201      	add	r2, pc, #4	; (adr r2, 8015010 <USBD_LL_PrepareReceive+0x38>)
 801500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015010:	08015021 	.word	0x08015021
 8015014:	08015027 	.word	0x08015027
 8015018:	0801502d 	.word	0x0801502d
 801501c:	08015033 	.word	0x08015033
    case HAL_OK :
      usb_status = USBD_OK;
 8015020:	2300      	movs	r3, #0
 8015022:	75fb      	strb	r3, [r7, #23]
    break;
 8015024:	e00b      	b.n	801503e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015026:	2303      	movs	r3, #3
 8015028:	75fb      	strb	r3, [r7, #23]
    break;
 801502a:	e008      	b.n	801503e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801502c:	2301      	movs	r3, #1
 801502e:	75fb      	strb	r3, [r7, #23]
    break;
 8015030:	e005      	b.n	801503e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015032:	2303      	movs	r3, #3
 8015034:	75fb      	strb	r3, [r7, #23]
    break;
 8015036:	e002      	b.n	801503e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8015038:	2303      	movs	r3, #3
 801503a:	75fb      	strb	r3, [r7, #23]
    break;
 801503c:	bf00      	nop
  }
  return usb_status;
 801503e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015040:	4618      	mov	r0, r3
 8015042:	3718      	adds	r7, #24
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
 8015050:	460b      	mov	r3, r1
 8015052:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801505a:	78fa      	ldrb	r2, [r7, #3]
 801505c:	4611      	mov	r1, r2
 801505e:	4618      	mov	r0, r3
 8015060:	f7f5 f9ce 	bl	800a400 <HAL_PCD_EP_GetRxCount>
 8015064:	4603      	mov	r3, r0
}
 8015066:	4618      	mov	r0, r3
 8015068:	3708      	adds	r7, #8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
	...

08015070 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	460b      	mov	r3, r1
 801507a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801507c:	78fb      	ldrb	r3, [r7, #3]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d002      	beq.n	8015088 <HAL_PCDEx_LPM_Callback+0x18>
 8015082:	2b01      	cmp	r3, #1
 8015084:	d01f      	beq.n	80150c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8015086:	e03b      	b.n	8015100 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6a1b      	ldr	r3, [r3, #32]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d007      	beq.n	80150a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015090:	f000 f854 	bl	801513c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015094:	4b1c      	ldr	r3, [pc, #112]	; (8015108 <HAL_PCDEx_LPM_Callback+0x98>)
 8015096:	691b      	ldr	r3, [r3, #16]
 8015098:	4a1b      	ldr	r2, [pc, #108]	; (8015108 <HAL_PCDEx_LPM_Callback+0x98>)
 801509a:	f023 0306 	bic.w	r3, r3, #6
 801509e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	6812      	ldr	r2, [r2, #0]
 80150ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80150b2:	f023 0301 	bic.w	r3, r3, #1
 80150b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150be:	4618      	mov	r0, r3
 80150c0:	f7fe fac8 	bl	8013654 <USBD_LL_Resume>
    break;
 80150c4:	e01c      	b.n	8015100 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	687a      	ldr	r2, [r7, #4]
 80150d2:	6812      	ldr	r2, [r2, #0]
 80150d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80150d8:	f043 0301 	orr.w	r3, r3, #1
 80150dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fe fa9f 	bl	8013628 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6a1b      	ldr	r3, [r3, #32]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d005      	beq.n	80150fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80150f2:	4b05      	ldr	r3, [pc, #20]	; (8015108 <HAL_PCDEx_LPM_Callback+0x98>)
 80150f4:	691b      	ldr	r3, [r3, #16]
 80150f6:	4a04      	ldr	r2, [pc, #16]	; (8015108 <HAL_PCDEx_LPM_Callback+0x98>)
 80150f8:	f043 0306 	orr.w	r3, r3, #6
 80150fc:	6113      	str	r3, [r2, #16]
    break;
 80150fe:	bf00      	nop
}
 8015100:	bf00      	nop
 8015102:	3708      	adds	r7, #8
 8015104:	46bd      	mov	sp, r7
 8015106:	bd80      	pop	{r7, pc}
 8015108:	e000ed00 	.word	0xe000ed00

0801510c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801510c:	b480      	push	{r7}
 801510e:	b083      	sub	sp, #12
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015114:	4b03      	ldr	r3, [pc, #12]	; (8015124 <USBD_static_malloc+0x18>)
}
 8015116:	4618      	mov	r0, r3
 8015118:	370c      	adds	r7, #12
 801511a:	46bd      	mov	sp, r7
 801511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop
 8015124:	20003d90 	.word	0x20003d90

08015128 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015128:	b480      	push	{r7}
 801512a:	b083      	sub	sp, #12
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]

}
 8015130:	bf00      	nop
 8015132:	370c      	adds	r7, #12
 8015134:	46bd      	mov	sp, r7
 8015136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513a:	4770      	bx	lr

0801513c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015140:	f7ec f910 	bl	8001364 <SystemClock_Config>
}
 8015144:	bf00      	nop
 8015146:	bd80      	pop	{r7, pc}

08015148 <aiInit>:
float32_t *p_out1;



int aiInit(void)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create and initialize the c-model */
  const ai_handle acts[] = { activations };
 801514e:	4b10      	ldr	r3, [pc, #64]	; (8015190 <aiInit+0x48>)
 8015150:	603b      	str	r3, [r7, #0]
  err = ai_network_create_and_init(&network, acts, NULL);
 8015152:	463b      	mov	r3, r7
 8015154:	2200      	movs	r2, #0
 8015156:	4619      	mov	r1, r3
 8015158:	480e      	ldr	r0, [pc, #56]	; (8015194 <aiInit+0x4c>)
 801515a:	f000 f973 	bl	8015444 <ai_network_create_and_init>
 801515e:	4603      	mov	r3, r0
 8015160:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {

  };

  /* Retrieve pointers to the model's input/output tensors */
  ai_input = ai_network_inputs_get(network , NULL);
 8015162:	4b0c      	ldr	r3, [pc, #48]	; (8015194 <aiInit+0x4c>)
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	2100      	movs	r1, #0
 8015168:	4618      	mov	r0, r3
 801516a:	f000 f9df 	bl	801552c <ai_network_inputs_get>
 801516e:	4603      	mov	r3, r0
 8015170:	4a09      	ldr	r2, [pc, #36]	; (8015198 <aiInit+0x50>)
 8015172:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8015174:	4b07      	ldr	r3, [pc, #28]	; (8015194 <aiInit+0x4c>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	2100      	movs	r1, #0
 801517a:	4618      	mov	r0, r3
 801517c:	f000 f9f0 	bl	8015560 <ai_network_outputs_get>
 8015180:	4603      	mov	r3, r0
 8015182:	4a06      	ldr	r2, [pc, #24]	; (801519c <aiInit+0x54>)
 8015184:	6013      	str	r3, [r2, #0]

  return 0;
 8015186:	2300      	movs	r3, #0
}
 8015188:	4618      	mov	r0, r3
 801518a:	3708      	adds	r7, #8
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	20003fc0 	.word	0x20003fc0
 8015194:	20003fbc 	.word	0x20003fbc
 8015198:	20004150 	.word	0x20004150
 801519c:	20004154 	.word	0x20004154

080151a0 <aiProcess>:



int aiProcess(float *p_inData, float p_out_data[2])
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b086      	sub	sp, #24
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
  ai_i32 n_batch;

  /* 1 - Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(p_inData);
 80151aa:	4b23      	ldr	r3, [pc, #140]	; (8015238 <aiProcess+0x98>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data[0]);
 80151b2:	4b22      	ldr	r3, [pc, #136]	; (801523c <aiProcess+0x9c>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	4a22      	ldr	r2, [pc, #136]	; (8015240 <aiProcess+0xa0>)
 80151b8:	6812      	ldr	r2, [r2, #0]
 80151ba:	605a      	str	r2, [r3, #4]
	  ai_output[1].data = AI_HANDLE_PTR(out_data[1]);
  }

  if (AI_NETWORK_OUT_NUM == 1){
	  /* 2 - Perform the inference */
	  n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80151bc:	4b21      	ldr	r3, [pc, #132]	; (8015244 <aiProcess+0xa4>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	4a1d      	ldr	r2, [pc, #116]	; (8015238 <aiProcess+0x98>)
 80151c2:	6811      	ldr	r1, [r2, #0]
 80151c4:	4a1d      	ldr	r2, [pc, #116]	; (801523c <aiProcess+0x9c>)
 80151c6:	6812      	ldr	r2, [r2, #0]
 80151c8:	4618      	mov	r0, r3
 80151ca:	f000 fa1f 	bl	801560c <ai_network_run>
 80151ce:	6178      	str	r0, [r7, #20]
	  p_out0 = (float32_t*) ai_output[0].data;
 80151d0:	4b1a      	ldr	r3, [pc, #104]	; (801523c <aiProcess+0x9c>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	685b      	ldr	r3, [r3, #4]
 80151d6:	4a1c      	ldr	r2, [pc, #112]	; (8015248 <aiProcess+0xa8>)
 80151d8:	6013      	str	r3, [r2, #0]
	  float32_t max_out = *p_out0;
 80151da:	4b1b      	ldr	r3, [pc, #108]	; (8015248 <aiProcess+0xa8>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	613b      	str	r3, [r7, #16]
	  uint32_t max_idx = 0;
 80151e2:	2300      	movs	r3, #0
 80151e4:	60fb      	str	r3, [r7, #12]

	  arm_max_f32(p_out0,AI_NETWORK_OUT_1_SIZE, &max_out, &max_idx);
 80151e6:	4b18      	ldr	r3, [pc, #96]	; (8015248 <aiProcess+0xa8>)
 80151e8:	6818      	ldr	r0, [r3, #0]
 80151ea:	f107 030c 	add.w	r3, r7, #12
 80151ee:	f107 0210 	add.w	r2, r7, #16
 80151f2:	2103      	movs	r1, #3
 80151f4:	f000 fecc 	bl	8015f90 <arm_max_f32>
	  p_out_data[0] = (float32_t)max_idx;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	ee07 3a90 	vmov	s15, r3
 80151fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015202:	683b      	ldr	r3, [r7, #0]
 8015204:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out * 100.0;
 8015208:	edd7 7a04 	vldr	s15, [r7, #16]
 801520c:	683b      	ldr	r3, [r7, #0]
 801520e:	3304      	adds	r3, #4
 8015210:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801524c <aiProcess+0xac>
 8015214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015218:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[0] = (float32_t)p_out0[0];
	  p_out_data[1] = (float32_t)p_out1[(int) p_out0[0]];

  }

  if (n_batch != 1) {
 801521c:	697b      	ldr	r3, [r7, #20]
 801521e:	2b01      	cmp	r3, #1
 8015220:	d004      	beq.n	801522c <aiProcess+0x8c>
	  ai_network_get_error(network);
 8015222:	4b08      	ldr	r3, [pc, #32]	; (8015244 <aiProcess+0xa4>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	4618      	mov	r0, r3
 8015228:	f000 f8ea 	bl	8015400 <ai_network_get_error>
  };


  return 0;
 801522c:	2300      	movs	r3, #0
}
 801522e:	4618      	mov	r0, r3
 8015230:	3718      	adds	r7, #24
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
 8015236:	bf00      	nop
 8015238:	20004150 	.word	0x20004150
 801523c:	20004154 	.word	0x20004154
 8015240:	200001e8 	.word	0x200001e8
 8015244:	20003fbc 	.word	0x20003fbc
 8015248:	20004158 	.word	0x20004158
 801524c:	42c80000 	.word	0x42c80000

08015250 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 801525a:	2300      	movs	r3, #0
 801525c:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 801525e:	f107 030c 	add.w	r3, r7, #12
 8015262:	683a      	ldr	r2, [r7, #0]
 8015264:	2101      	movs	r1, #1
 8015266:	4618      	mov	r0, r3
 8015268:	f003 f88e 	bl	8018388 <ai_platform_get_activations_map>
 801526c:	4603      	mov	r3, r0
 801526e:	2b00      	cmp	r3, #0
 8015270:	d023      	beq.n	80152ba <network_configure_activations+0x6a>
    /* Updating activations (byte) offsets */
    dense_3_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	4a16      	ldr	r2, [pc, #88]	; (80152d0 <network_configure_activations+0x80>)
 8015276:	6093      	str	r3, [r2, #8]
    dense_3_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	4a15      	ldr	r2, [pc, #84]	; (80152d0 <network_configure_activations+0x80>)
 801527c:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations_map[0] + 0);
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	4a14      	ldr	r2, [pc, #80]	; (80152d4 <network_configure_activations+0x84>)
 8015282:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	4a13      	ldr	r2, [pc, #76]	; (80152d4 <network_configure_activations+0x84>)
 8015288:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	33c8      	adds	r3, #200	; 0xc8
 801528e:	4a12      	ldr	r2, [pc, #72]	; (80152d8 <network_configure_activations+0x88>)
 8015290:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	33c8      	adds	r3, #200	; 0xc8
 8015296:	4a10      	ldr	r2, [pc, #64]	; (80152d8 <network_configure_activations+0x88>)
 8015298:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 0);
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	4a0f      	ldr	r2, [pc, #60]	; (80152dc <network_configure_activations+0x8c>)
 801529e:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	4a0e      	ldr	r2, [pc, #56]	; (80152dc <network_configure_activations+0x8c>)
 80152a4:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 200);
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	33c8      	adds	r3, #200	; 0xc8
 80152aa:	4a0d      	ldr	r2, [pc, #52]	; (80152e0 <network_configure_activations+0x90>)
 80152ac:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 200);
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	33c8      	adds	r3, #200	; 0xc8
 80152b2:	4a0b      	ldr	r2, [pc, #44]	; (80152e0 <network_configure_activations+0x90>)
 80152b4:	60d3      	str	r3, [r2, #12]
    
    return true;
 80152b6:	2301      	movs	r3, #1
 80152b8:	e005      	b.n	80152c6 <network_configure_activations+0x76>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80152ba:	2213      	movs	r2, #19
 80152bc:	2130      	movs	r1, #48	; 0x30
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f003 f94a 	bl	8018558 <ai_platform_network_set_error>
  return false;
 80152c4:	2300      	movs	r3, #0
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3710      	adds	r7, #16
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	200001fc 	.word	0x200001fc
 80152d4:	2000020c 	.word	0x2000020c
 80152d8:	2000021c 	.word	0x2000021c
 80152dc:	2000022c 	.word	0x2000022c
 80152e0:	2000023c 	.word	0x2000023c

080152e4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b084      	sub	sp, #16
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80152ee:	2300      	movs	r3, #0
 80152f0:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80152f2:	f107 030c 	add.w	r3, r7, #12
 80152f6:	683a      	ldr	r2, [r7, #0]
 80152f8:	2101      	movs	r1, #1
 80152fa:	4618      	mov	r0, r3
 80152fc:	f002 fff4 	bl	80182e8 <ai_platform_get_weights_map>
 8015300:	4603      	mov	r3, r0
 8015302:	2b00      	cmp	r3, #0
 8015304:	d065      	beq.n	80153d2 <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8015306:	4b38      	ldr	r3, [pc, #224]	; (80153e8 <network_configure_weights+0x104>)
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801530e:	4a36      	ldr	r2, [pc, #216]	; (80153e8 <network_configure_weights+0x104>)
 8015310:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(weights_map[0] + 0);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	4a34      	ldr	r2, [pc, #208]	; (80153e8 <network_configure_weights+0x104>)
 8015316:	6093      	str	r3, [r2, #8]
    dense_3_dense_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	4a33      	ldr	r2, [pc, #204]	; (80153e8 <network_configure_weights+0x104>)
 801531c:	60d3      	str	r3, [r2, #12]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801531e:	4b33      	ldr	r3, [pc, #204]	; (80153ec <network_configure_weights+0x108>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015326:	4a31      	ldr	r2, [pc, #196]	; (80153ec <network_configure_weights+0x108>)
 8015328:	6013      	str	r3, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(weights_map[0] + 25600);
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8015330:	4a2e      	ldr	r2, [pc, #184]	; (80153ec <network_configure_weights+0x108>)
 8015332:	6093      	str	r3, [r2, #8]
    dense_3_dense_bias_array.data_start = AI_PTR(weights_map[0] + 25600);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 801533a:	4a2c      	ldr	r2, [pc, #176]	; (80153ec <network_configure_weights+0x108>)
 801533c:	60d3      	str	r3, [r2, #12]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801533e:	4b2c      	ldr	r3, [pc, #176]	; (80153f0 <network_configure_weights+0x10c>)
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015346:	4a2a      	ldr	r2, [pc, #168]	; (80153f0 <network_configure_weights+0x10c>)
 8015348:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 25800);
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 8015350:	3348      	adds	r3, #72	; 0x48
 8015352:	4a27      	ldr	r2, [pc, #156]	; (80153f0 <network_configure_weights+0x10c>)
 8015354:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 25800);
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f503 43c9 	add.w	r3, r3, #25728	; 0x6480
 801535c:	3348      	adds	r3, #72	; 0x48
 801535e:	4a24      	ldr	r2, [pc, #144]	; (80153f0 <network_configure_weights+0x10c>)
 8015360:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8015362:	4b24      	ldr	r3, [pc, #144]	; (80153f4 <network_configure_weights+0x110>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801536a:	4a22      	ldr	r2, [pc, #136]	; (80153f4 <network_configure_weights+0x110>)
 801536c:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 35800);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 8015374:	33d8      	adds	r3, #216	; 0xd8
 8015376:	4a1f      	ldr	r2, [pc, #124]	; (80153f4 <network_configure_weights+0x110>)
 8015378:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 35800);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	f503 430b 	add.w	r3, r3, #35584	; 0x8b00
 8015380:	33d8      	adds	r3, #216	; 0xd8
 8015382:	4a1c      	ldr	r2, [pc, #112]	; (80153f4 <network_configure_weights+0x110>)
 8015384:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8015386:	4b1c      	ldr	r3, [pc, #112]	; (80153f8 <network_configure_weights+0x114>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801538e:	4a1a      	ldr	r2, [pc, #104]	; (80153f8 <network_configure_weights+0x114>)
 8015390:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 36000);
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8015398:	33a0      	adds	r3, #160	; 0xa0
 801539a:	4a17      	ldr	r2, [pc, #92]	; (80153f8 <network_configure_weights+0x114>)
 801539c:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 36000);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 80153a4:	33a0      	adds	r3, #160	; 0xa0
 80153a6:	4a14      	ldr	r2, [pc, #80]	; (80153f8 <network_configure_weights+0x114>)
 80153a8:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80153aa:	4b14      	ldr	r3, [pc, #80]	; (80153fc <network_configure_weights+0x118>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80153b2:	4a12      	ldr	r2, [pc, #72]	; (80153fc <network_configure_weights+0x118>)
 80153b4:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 36600);
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 80153bc:	33f8      	adds	r3, #248	; 0xf8
 80153be:	4a0f      	ldr	r2, [pc, #60]	; (80153fc <network_configure_weights+0x118>)
 80153c0:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 36600);
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 80153c8:	33f8      	adds	r3, #248	; 0xf8
 80153ca:	4a0c      	ldr	r2, [pc, #48]	; (80153fc <network_configure_weights+0x118>)
 80153cc:	60d3      	str	r3, [r2, #12]
    return true;
 80153ce:	2301      	movs	r3, #1
 80153d0:	e005      	b.n	80153de <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80153d2:	2212      	movs	r2, #18
 80153d4:	2130      	movs	r1, #48	; 0x30
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f003 f8be 	bl	8018558 <ai_platform_network_set_error>
  return false;
 80153dc:	2300      	movs	r3, #0
}
 80153de:	4618      	mov	r0, r3
 80153e0:	3710      	adds	r7, #16
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}
 80153e6:	bf00      	nop
 80153e8:	2000025c 	.word	0x2000025c
 80153ec:	2000026c 	.word	0x2000026c
 80153f0:	2000027c 	.word	0x2000027c
 80153f4:	2000028c 	.word	0x2000028c
 80153f8:	2000029c 	.word	0x2000029c
 80153fc:	200002ac 	.word	0x200002ac

08015400 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f003 f82b 	bl	8018464 <ai_platform_network_get_error>
 801540e:	4603      	mov	r3, r0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3708      	adds	r7, #8
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af02      	add	r7, sp, #8
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8015422:	2300      	movs	r3, #0
 8015424:	9301      	str	r3, [sp, #4]
 8015426:	2305      	movs	r3, #5
 8015428:	9300      	str	r3, [sp, #0]
 801542a:	2301      	movs	r3, #1
 801542c:	4a04      	ldr	r2, [pc, #16]	; (8015440 <ai_network_create+0x28>)
 801542e:	6839      	ldr	r1, [r7, #0]
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f003 fa85 	bl	8018940 <ai_platform_network_create>
 8015436:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8015438:	4618      	mov	r0, r3
 801543a:	3708      	adds	r7, #8
 801543c:	46bd      	mov	sp, r7
 801543e:	bd80      	pop	{r7, pc}
 8015440:	20000874 	.word	0x20000874

08015444 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b096      	sub	sp, #88	; 0x58
 8015448:	af00      	add	r7, sp, #0
 801544a:	60f8      	str	r0, [r7, #12]
 801544c:	60b9      	str	r1, [r7, #8]
 801544e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8015450:	2100      	movs	r1, #0
 8015452:	68f8      	ldr	r0, [r7, #12]
 8015454:	f7ff ffe0 	bl	8015418 <ai_network_create>
 8015458:	4603      	mov	r3, r0
 801545a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 801545c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8015460:	2b00      	cmp	r3, #0
 8015462:	d001      	beq.n	8015468 <ai_network_create_and_init+0x24>
        return err;
 8015464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015466:	e05d      	b.n	8015524 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8015468:	f107 0314 	add.w	r3, r7, #20
 801546c:	4618      	mov	r0, r3
 801546e:	f000 f8dd 	bl	801562c <ai_network_data_params_get>
 8015472:	4603      	mov	r3, r0
 8015474:	f083 0301 	eor.w	r3, r3, #1
 8015478:	b2db      	uxtb	r3, r3
 801547a:	2b00      	cmp	r3, #0
 801547c:	d008      	beq.n	8015490 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	4618      	mov	r0, r3
 8015484:	f7ff ffbc 	bl	8015400 <ai_network_get_error>
 8015488:	4603      	mov	r3, r0
 801548a:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 801548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801548e:	e049      	b.n	8015524 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d016      	beq.n	80154c4 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8015496:	2300      	movs	r3, #0
 8015498:	657b      	str	r3, [r7, #84]	; 0x54
 801549a:	e00e      	b.n	80154ba <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801549c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801549e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154a0:	009b      	lsls	r3, r3, #2
 80154a2:	68ba      	ldr	r2, [r7, #8]
 80154a4:	4413      	add	r3, r2
 80154a6:	681a      	ldr	r2, [r3, #0]
 80154a8:	f107 0314 	add.w	r3, r7, #20
 80154ac:	330c      	adds	r3, #12
 80154ae:	4618      	mov	r0, r3
 80154b0:	f002 ff04 	bl	80182bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80154b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154b6:	3301      	adds	r3, #1
 80154b8:	657b      	str	r3, [r7, #84]	; 0x54
 80154ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154bc:	461a      	mov	r2, r3
 80154be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154c0:	4293      	cmp	r3, r2
 80154c2:	dbeb      	blt.n	801549c <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d016      	beq.n	80154f8 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80154ca:	2300      	movs	r3, #0
 80154cc:	653b      	str	r3, [r7, #80]	; 0x50
 80154ce:	e00e      	b.n	80154ee <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80154d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80154d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154d4:	009b      	lsls	r3, r3, #2
 80154d6:	687a      	ldr	r2, [r7, #4]
 80154d8:	4413      	add	r3, r2
 80154da:	681a      	ldr	r2, [r3, #0]
 80154dc:	f107 0314 	add.w	r3, r7, #20
 80154e0:	3304      	adds	r3, #4
 80154e2:	4618      	mov	r0, r3
 80154e4:	f002 feea 	bl	80182bc <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80154e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154ea:	3301      	adds	r3, #1
 80154ec:	653b      	str	r3, [r7, #80]	; 0x50
 80154ee:	8b7b      	ldrh	r3, [r7, #26]
 80154f0:	461a      	mov	r2, r3
 80154f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154f4:	4293      	cmp	r3, r2
 80154f6:	dbeb      	blt.n	80154d0 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	f107 0214 	add.w	r2, r7, #20
 8015500:	4611      	mov	r1, r2
 8015502:	4618      	mov	r0, r3
 8015504:	f000 f846 	bl	8015594 <ai_network_init>
 8015508:	4603      	mov	r3, r0
 801550a:	f083 0301 	eor.w	r3, r3, #1
 801550e:	b2db      	uxtb	r3, r3
 8015510:	2b00      	cmp	r3, #0
 8015512:	d006      	beq.n	8015522 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	4618      	mov	r0, r3
 801551a:	f7ff ff71 	bl	8015400 <ai_network_get_error>
 801551e:	4603      	mov	r3, r0
 8015520:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8015522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015524:	4618      	mov	r0, r3
 8015526:	3758      	adds	r7, #88	; 0x58
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d104      	bne.n	8015546 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801553c:	4b06      	ldr	r3, [pc, #24]	; (8015558 <ai_network_inputs_get+0x2c>)
 801553e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	4a06      	ldr	r2, [pc, #24]	; (801555c <ai_network_inputs_get+0x30>)
 8015544:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8015546:	6839      	ldr	r1, [r7, #0]
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f003 f80b 	bl	8018564 <ai_platform_inputs_get>
 801554e:	4603      	mov	r3, r0
}
 8015550:	4618      	mov	r0, r3
 8015552:	3708      	adds	r7, #8
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}
 8015558:	20000874 	.word	0x20000874
 801555c:	a1c00100 	.word	0xa1c00100

08015560 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b082      	sub	sp, #8
 8015564:	af00      	add	r7, sp, #0
 8015566:	6078      	str	r0, [r7, #4]
 8015568:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d104      	bne.n	801557a <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8015570:	4b06      	ldr	r3, [pc, #24]	; (801558c <ai_network_outputs_get+0x2c>)
 8015572:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	4a06      	ldr	r2, [pc, #24]	; (8015590 <ai_network_outputs_get+0x30>)
 8015578:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801557a:	6839      	ldr	r1, [r7, #0]
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f003 f8e5 	bl	801874c <ai_platform_outputs_get>
 8015582:	4603      	mov	r3, r0
}
 8015584:	4618      	mov	r0, r3
 8015586:	3708      	adds	r7, #8
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	20000874 	.word	0x20000874
 8015590:	a1c00100 	.word	0xa1c00100

08015594 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 801559e:	6839      	ldr	r1, [r7, #0]
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f003 faad 	bl	8018b00 <ai_platform_network_init>
 80155a6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d101      	bne.n	80155b2 <ai_network_init+0x1e>
 80155ae:	2300      	movs	r3, #0
 80155b0:	e028      	b.n	8015604 <ai_network_init+0x70>

  ai_bool ok = true;
 80155b2:	2301      	movs	r3, #1
 80155b4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80155b6:	6839      	ldr	r1, [r7, #0]
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f7ff fe93 	bl	80152e4 <network_configure_weights>
 80155be:	4603      	mov	r3, r0
 80155c0:	461a      	mov	r2, r3
 80155c2:	7afb      	ldrb	r3, [r7, #11]
 80155c4:	4013      	ands	r3, r2
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	bf14      	ite	ne
 80155ca:	2301      	movne	r3, #1
 80155cc:	2300      	moveq	r3, #0
 80155ce:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 80155d0:	6839      	ldr	r1, [r7, #0]
 80155d2:	68f8      	ldr	r0, [r7, #12]
 80155d4:	f7ff fe3c 	bl	8015250 <network_configure_activations>
 80155d8:	4603      	mov	r3, r0
 80155da:	461a      	mov	r2, r3
 80155dc:	7afb      	ldrb	r3, [r7, #11]
 80155de:	4013      	ands	r3, r2
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	bf14      	ite	ne
 80155e4:	2301      	movne	r3, #1
 80155e6:	2300      	moveq	r3, #0
 80155e8:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f003 fb94 	bl	8018d18 <ai_platform_network_post_init>
 80155f0:	4603      	mov	r3, r0
 80155f2:	461a      	mov	r2, r3
 80155f4:	7afb      	ldrb	r3, [r7, #11]
 80155f6:	4013      	ands	r3, r2
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	bf14      	ite	ne
 80155fc:	2301      	movne	r3, #1
 80155fe:	2300      	moveq	r3, #0
 8015600:	72fb      	strb	r3, [r7, #11]

  return ok;
 8015602:	7afb      	ldrb	r3, [r7, #11]
}
 8015604:	4618      	mov	r0, r3
 8015606:	3710      	adds	r7, #16
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}

0801560c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b084      	sub	sp, #16
 8015610:	af00      	add	r7, sp, #0
 8015612:	60f8      	str	r0, [r7, #12]
 8015614:	60b9      	str	r1, [r7, #8]
 8015616:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8015618:	687a      	ldr	r2, [r7, #4]
 801561a:	68b9      	ldr	r1, [r7, #8]
 801561c:	68f8      	ldr	r0, [r7, #12]
 801561e:	f003 fc0f 	bl	8018e40 <ai_platform_network_process>
 8015622:	4603      	mov	r3, r0
}
 8015624:	4618      	mov	r0, r3
 8015626:	3710      	adds	r7, #16
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}

0801562c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b086      	sub	sp, #24
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d101      	bne.n	801563e <ai_network_data_params_get+0x12>
 801563a:	2300      	movs	r3, #0
 801563c:	e016      	b.n	801566c <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801563e:	4a0d      	ldr	r2, [pc, #52]	; (8015674 <ai_network_data_params_get+0x48>)
 8015640:	f107 0310 	add.w	r3, r7, #16
 8015644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015648:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801564c:	4a0a      	ldr	r2, [pc, #40]	; (8015678 <ai_network_data_params_get+0x4c>)
 801564e:	f107 0308 	add.w	r3, r7, #8
 8015652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015656:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801565a:	f107 0210 	add.w	r2, r7, #16
 801565e:	f107 0308 	add.w	r3, r7, #8
 8015662:	4619      	mov	r1, r3
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f002 fee1 	bl	801842c <ai_platform_bind_network_params>
 801566a:	4603      	mov	r3, r0
}
 801566c:	4618      	mov	r0, r3
 801566e:	3718      	adds	r7, #24
 8015670:	46bd      	mov	sp, r7
 8015672:	bd80      	pop	{r7, pc}
 8015674:	0801f3c8 	.word	0x0801f3c8
 8015678:	0801f3d0 	.word	0x0801f3d0

0801567c <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b08e      	sub	sp, #56	; 0x38
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8015686:	2300      	movs	r3, #0
 8015688:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 801568a:	2301      	movs	r3, #1
 801568c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 801568e:	2300      	movs	r3, #0
 8015690:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d131      	bne.n	80156fc <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case CUSTOM_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8015698:	6838      	ldr	r0, [r7, #0]
 801569a:	f000 f945 	bl	8015928 <ISM330DHCX_0_Probe>
 801569e:	4603      	mov	r3, r0
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d002      	beq.n	80156aa <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 80156a4:	f04f 33ff 	mov.w	r3, #4294967295
 80156a8:	e064      	b.n	8015774 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80156aa:	4a34      	ldr	r2, [pc, #208]	; (801577c <CUSTOM_MOTION_SENSOR_Init+0x100>)
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156b2:	68db      	ldr	r3, [r3, #12]
 80156b4:	4932      	ldr	r1, [pc, #200]	; (8015780 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 80156b6:	687a      	ldr	r2, [r7, #4]
 80156b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80156bc:	f107 010c 	add.w	r1, r7, #12
 80156c0:	4610      	mov	r0, r2
 80156c2:	4798      	blx	r3
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d002      	beq.n	80156d0 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80156ca:	f06f 0306 	mvn.w	r3, #6
 80156ce:	e051      	b.n	8015774 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 80156d0:	7b3b      	ldrb	r3, [r7, #12]
 80156d2:	2b01      	cmp	r3, #1
 80156d4:	d103      	bne.n	80156de <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 80156d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d8:	f043 0302 	orr.w	r3, r3, #2
 80156dc:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80156de:	7b7b      	ldrb	r3, [r7, #13]
 80156e0:	2b01      	cmp	r3, #1
 80156e2:	d103      	bne.n	80156ec <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 80156e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e6:	f043 0301 	orr.w	r3, r3, #1
 80156ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80156ec:	7bbb      	ldrb	r3, [r7, #14]
 80156ee:	2b01      	cmp	r3, #1
 80156f0:	d108      	bne.n	8015704 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 80156f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f4:	f043 0304 	orr.w	r3, r3, #4
 80156f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80156fa:	e003      	b.n	8015704 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80156fc:	f06f 0301 	mvn.w	r3, #1
 8015700:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8015702:	e000      	b.n	8015706 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8015704:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8015706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015708:	2b00      	cmp	r3, #0
 801570a:	d001      	beq.n	8015710 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 801570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801570e:	e031      	b.n	8015774 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8015710:	2300      	movs	r3, #0
 8015712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015714:	e02a      	b.n	801576c <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8015716:	683a      	ldr	r2, [r7, #0]
 8015718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571a:	4013      	ands	r3, r2
 801571c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801571e:	429a      	cmp	r2, r3
 8015720:	d11e      	bne.n	8015760 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 8015722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015726:	4013      	ands	r3, r2
 8015728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801572a:	429a      	cmp	r2, r3
 801572c:	d118      	bne.n	8015760 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 801572e:	4a15      	ldr	r2, [pc, #84]	; (8015784 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8015730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015732:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8015736:	4814      	ldr	r0, [pc, #80]	; (8015788 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	4613      	mov	r3, r2
 801573c:	005b      	lsls	r3, r3, #1
 801573e:	4413      	add	r3, r2
 8015740:	440b      	add	r3, r1
 8015742:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	490d      	ldr	r1, [pc, #52]	; (8015780 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015750:	4610      	mov	r0, r2
 8015752:	4798      	blx	r3
 8015754:	4603      	mov	r3, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	d002      	beq.n	8015760 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 801575a:	f06f 0304 	mvn.w	r3, #4
 801575e:	e009      	b.n	8015774 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8015760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015762:	005b      	lsls	r3, r3, #1
 8015764:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8015766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015768:	3301      	adds	r3, #1
 801576a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576e:	2b02      	cmp	r3, #2
 8015770:	d9d1      	bls.n	8015716 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8015772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015774:	4618      	mov	r0, r3
 8015776:	3738      	adds	r7, #56	; 0x38
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}
 801577c:	200041f8 	.word	0x200041f8
 8015780:	200041e8 	.word	0x200041e8
 8015784:	20000914 	.word	0x20000914
 8015788:	200041ec 	.word	0x200041ec

0801578c <CUSTOM_MOTION_SENSOR_GetSensitivity>:
 *         - MOTION_MAGNETO
 * @param  Sensitivity pointer to sensitivity read value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetSensitivity(uint32_t Instance, uint32_t Function, float *Sensitivity)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b086      	sub	sp, #24
 8015790:	af00      	add	r7, sp, #0
 8015792:	60f8      	str	r0, [r7, #12]
 8015794:	60b9      	str	r1, [r7, #8]
 8015796:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d003      	beq.n	80157a6 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801579e:	f06f 0301 	mvn.w	r3, #1
 80157a2:	617b      	str	r3, [r7, #20]
 80157a4:	e029      	b.n	80157fa <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80157a6:	4a17      	ldr	r2, [pc, #92]	; (8015804 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x78>)
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	4013      	ands	r3, r2
 80157b2:	68ba      	ldr	r2, [r7, #8]
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d11d      	bne.n	80157f4 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetSensitivity(MotionCompObj[Instance], Sensitivity) != BSP_ERROR_NONE)
 80157b8:	4a13      	ldr	r2, [pc, #76]	; (8015808 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x7c>)
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80157c0:	4812      	ldr	r0, [pc, #72]	; (801580c <CUSTOM_MOTION_SENSOR_GetSensitivity+0x80>)
 80157c2:	68fa      	ldr	r2, [r7, #12]
 80157c4:	4613      	mov	r3, r2
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	4413      	add	r3, r2
 80157ca:	440b      	add	r3, r1
 80157cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80157d0:	689b      	ldr	r3, [r3, #8]
 80157d2:	490f      	ldr	r1, [pc, #60]	; (8015810 <CUSTOM_MOTION_SENSOR_GetSensitivity+0x84>)
 80157d4:	68fa      	ldr	r2, [r7, #12]
 80157d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80157da:	6879      	ldr	r1, [r7, #4]
 80157dc:	4610      	mov	r0, r2
 80157de:	4798      	blx	r3
 80157e0:	4603      	mov	r3, r0
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d003      	beq.n	80157ee <CUSTOM_MOTION_SENSOR_GetSensitivity+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80157e6:	f06f 0304 	mvn.w	r3, #4
 80157ea:	617b      	str	r3, [r7, #20]
 80157ec:	e005      	b.n	80157fa <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80157ee:	2300      	movs	r3, #0
 80157f0:	617b      	str	r3, [r7, #20]
 80157f2:	e002      	b.n	80157fa <CUSTOM_MOTION_SENSOR_GetSensitivity+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80157f4:	f06f 0301 	mvn.w	r3, #1
 80157f8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80157fa:	697b      	ldr	r3, [r7, #20]
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3718      	adds	r7, #24
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	200041fc 	.word	0x200041fc
 8015808:	20000914 	.word	0x20000914
 801580c:	200041ec 	.word	0x200041ec
 8015810:	200041e8 	.word	0x200041e8

08015814 <CUSTOM_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b086      	sub	sp, #24
 8015818:	af00      	add	r7, sp, #0
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d003      	beq.n	8015830 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015828:	f06f 0301 	mvn.w	r3, #1
 801582c:	617b      	str	r3, [r7, #20]
 801582e:	e02a      	b.n	8015886 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8015830:	4a17      	ldr	r2, [pc, #92]	; (8015890 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	4013      	ands	r3, r2
 801583c:	68ba      	ldr	r2, [r7, #8]
 801583e:	429a      	cmp	r2, r3
 8015840:	d11e      	bne.n	8015880 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8015842:	4a14      	ldr	r2, [pc, #80]	; (8015894 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801584a:	4813      	ldr	r0, [pc, #76]	; (8015898 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x84>)
 801584c:	68fa      	ldr	r2, [r7, #12]
 801584e:	4613      	mov	r3, r2
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	4413      	add	r3, r2
 8015854:	440b      	add	r3, r1
 8015856:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	490f      	ldr	r1, [pc, #60]	; (801589c <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x88>)
 801585e:	68fa      	ldr	r2, [r7, #12]
 8015860:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015864:	ed97 0a01 	vldr	s0, [r7, #4]
 8015868:	4610      	mov	r0, r2
 801586a:	4798      	blx	r3
 801586c:	4603      	mov	r3, r0
 801586e:	2b00      	cmp	r3, #0
 8015870:	d003      	beq.n	801587a <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8015872:	f06f 0304 	mvn.w	r3, #4
 8015876:	617b      	str	r3, [r7, #20]
 8015878:	e005      	b.n	8015886 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 801587a:	2300      	movs	r3, #0
 801587c:	617b      	str	r3, [r7, #20]
 801587e:	e002      	b.n	8015886 <CUSTOM_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8015880:	f06f 0301 	mvn.w	r3, #1
 8015884:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8015886:	697b      	ldr	r3, [r7, #20]
}
 8015888:	4618      	mov	r0, r3
 801588a:	3718      	adds	r7, #24
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	200041fc 	.word	0x200041fc
 8015894:	20000914 	.word	0x20000914
 8015898:	200041ec 	.word	0x200041ec
 801589c:	200041e8 	.word	0x200041e8

080158a0 <CUSTOM_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b086      	sub	sp, #24
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d003      	beq.n	80158ba <CUSTOM_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80158b2:	f06f 0301 	mvn.w	r3, #1
 80158b6:	617b      	str	r3, [r7, #20]
 80158b8:	e029      	b.n	801590e <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80158ba:	4a17      	ldr	r2, [pc, #92]	; (8015918 <CUSTOM_MOTION_SENSOR_SetFullScale+0x78>)
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	4013      	ands	r3, r2
 80158c6:	68ba      	ldr	r2, [r7, #8]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d11d      	bne.n	8015908 <CUSTOM_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance], Fullscale) != BSP_ERROR_NONE)
 80158cc:	4a13      	ldr	r2, [pc, #76]	; (801591c <CUSTOM_MOTION_SENSOR_SetFullScale+0x7c>)
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80158d4:	4812      	ldr	r0, [pc, #72]	; (8015920 <CUSTOM_MOTION_SENSOR_SetFullScale+0x80>)
 80158d6:	68fa      	ldr	r2, [r7, #12]
 80158d8:	4613      	mov	r3, r2
 80158da:	005b      	lsls	r3, r3, #1
 80158dc:	4413      	add	r3, r2
 80158de:	440b      	add	r3, r1
 80158e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80158e4:	699b      	ldr	r3, [r3, #24]
 80158e6:	490f      	ldr	r1, [pc, #60]	; (8015924 <CUSTOM_MOTION_SENSOR_SetFullScale+0x84>)
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80158ee:	6879      	ldr	r1, [r7, #4]
 80158f0:	4610      	mov	r0, r2
 80158f2:	4798      	blx	r3
 80158f4:	4603      	mov	r3, r0
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d003      	beq.n	8015902 <CUSTOM_MOTION_SENSOR_SetFullScale+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80158fa:	f06f 0304 	mvn.w	r3, #4
 80158fe:	617b      	str	r3, [r7, #20]
 8015900:	e005      	b.n	801590e <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8015902:	2300      	movs	r3, #0
 8015904:	617b      	str	r3, [r7, #20]
 8015906:	e002      	b.n	801590e <CUSTOM_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8015908:	f06f 0301 	mvn.w	r3, #1
 801590c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 801590e:	697b      	ldr	r3, [r7, #20]
}
 8015910:	4618      	mov	r0, r3
 8015912:	3718      	adds	r7, #24
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	200041fc 	.word	0x200041fc
 801591c:	20000914 	.word	0x20000914
 8015920:	200041ec 	.word	0x200041ec
 8015924:	200041e8 	.word	0x200041e8

08015928 <ISM330DHCX_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b094      	sub	sp, #80	; 0x50
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 8015930:	2300      	movs	r3, #0
 8015932:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the driver */
  io_ctx.BusType     = ISM330DHCX_SPI_4WIRES_BUS; /* SPI 4-Wires */
 8015934:	2301      	movs	r3, #1
 8015936:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = 0x0;
 8015938:	2300      	movs	r3, #0
 801593a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = CUSTOM_ISM330DHCX_0_Init;
 801593e:	4b4a      	ldr	r3, [pc, #296]	; (8015a68 <ISM330DHCX_0_Probe+0x140>)
 8015940:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = CUSTOM_ISM330DHCX_0_DeInit;
 8015942:	4b4a      	ldr	r3, [pc, #296]	; (8015a6c <ISM330DHCX_0_Probe+0x144>)
 8015944:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = CUSTOM_ISM330DHCX_0_ReadReg;
 8015946:	4b4a      	ldr	r3, [pc, #296]	; (8015a70 <ISM330DHCX_0_Probe+0x148>)
 8015948:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = CUSTOM_ISM330DHCX_0_WriteReg;
 801594a:	4b4a      	ldr	r3, [pc, #296]	; (8015a74 <ISM330DHCX_0_Probe+0x14c>)
 801594c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = BSP_GetTick;
 801594e:	4b4a      	ldr	r3, [pc, #296]	; (8015a78 <ISM330DHCX_0_Probe+0x150>)
 8015950:	647b      	str	r3, [r7, #68]	; 0x44

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 8015952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015956:	4619      	mov	r1, r3
 8015958:	4848      	ldr	r0, [pc, #288]	; (8015a7c <ISM330DHCX_0_Probe+0x154>)
 801595a:	f7ee fb77 	bl	800404c <ISM330DHCX_RegisterBusIO>
 801595e:	4603      	mov	r3, r0
 8015960:	2b00      	cmp	r3, #0
 8015962:	d003      	beq.n	801596c <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8015964:	f06f 0306 	mvn.w	r3, #6
 8015968:	64fb      	str	r3, [r7, #76]	; 0x4c
 801596a:	e077      	b.n	8015a5c <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 801596c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8015970:	4619      	mov	r1, r3
 8015972:	4842      	ldr	r0, [pc, #264]	; (8015a7c <ISM330DHCX_0_Probe+0x154>)
 8015974:	f7ee fc88 	bl	8004288 <ISM330DHCX_ReadID>
 8015978:	4603      	mov	r3, r0
 801597a:	2b00      	cmp	r3, #0
 801597c:	d003      	beq.n	8015986 <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 801597e:	f06f 0306 	mvn.w	r3, #6
 8015982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015984:	e06a      	b.n	8015a5c <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != (uint8_t)ISM330DHCX_ID)
 8015986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801598a:	2b6b      	cmp	r3, #107	; 0x6b
 801598c:	d003      	beq.n	8015996 <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 801598e:	f06f 0306 	mvn.w	r3, #6
 8015992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015994:	e062      	b.n	8015a5c <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8015996:	f107 030c 	add.w	r3, r7, #12
 801599a:	4619      	mov	r1, r3
 801599c:	4837      	ldr	r0, [pc, #220]	; (8015a7c <ISM330DHCX_0_Probe+0x154>)
 801599e:	f7ee fc89 	bl	80042b4 <ISM330DHCX_GetCapabilities>
    MotionCtx[CUSTOM_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80159a2:	7b7b      	ldrb	r3, [r7, #13]
 80159a4:	461a      	mov	r2, r3
 80159a6:	7b3b      	ldrb	r3, [r7, #12]
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	431a      	orrs	r2, r3
 80159ac:	7bbb      	ldrb	r3, [r7, #14]
 80159ae:	009b      	lsls	r3, r3, #2
 80159b0:	4313      	orrs	r3, r2
 80159b2:	4a33      	ldr	r2, [pc, #204]	; (8015a80 <ISM330DHCX_0_Probe+0x158>)
 80159b4:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_ISM330DHCX_0] = &ism330dhcx_obj_0;
 80159b6:	4b33      	ldr	r3, [pc, #204]	; (8015a84 <ISM330DHCX_0_Probe+0x15c>)
 80159b8:	4a30      	ldr	r2, [pc, #192]	; (8015a7c <ISM330DHCX_0_Probe+0x154>)
 80159ba:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 80159bc:	4b32      	ldr	r3, [pc, #200]	; (8015a88 <ISM330DHCX_0_Probe+0x160>)
 80159be:	4a33      	ldr	r2, [pc, #204]	; (8015a8c <ISM330DHCX_0_Probe+0x164>)
 80159c0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80159c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d11d      	bne.n	8015a04 <ISM330DHCX_0_Probe+0xdc>
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f003 0301 	and.w	r3, r3, #1
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d018      	beq.n	8015a04 <ISM330DHCX_0_Probe+0xdc>
 80159d2:	7b7b      	ldrb	r3, [r7, #13]
 80159d4:	2b01      	cmp	r3, #1
 80159d6:	d115      	bne.n	8015a04 <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 80159d8:	4b2d      	ldr	r3, [pc, #180]	; (8015a90 <ISM330DHCX_0_Probe+0x168>)
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	4a2d      	ldr	r2, [pc, #180]	; (8015a94 <ISM330DHCX_0_Probe+0x16c>)
 80159de:	492e      	ldr	r1, [pc, #184]	; (8015a98 <ISM330DHCX_0_Probe+0x170>)
 80159e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ISM330DHCX_0]->Init(MotionCompObj[CUSTOM_ISM330DHCX_0]) != ISM330DHCX_OK)
 80159e4:	4b28      	ldr	r3, [pc, #160]	; (8015a88 <ISM330DHCX_0_Probe+0x160>)
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4a26      	ldr	r2, [pc, #152]	; (8015a84 <ISM330DHCX_0_Probe+0x15c>)
 80159ec:	6812      	ldr	r2, [r2, #0]
 80159ee:	4610      	mov	r0, r2
 80159f0:	4798      	blx	r3
 80159f2:	4603      	mov	r3, r0
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d003      	beq.n	8015a00 <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80159f8:	f06f 0304 	mvn.w	r3, #4
 80159fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80159fe:	e001      	b.n	8015a04 <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8015a00:	2300      	movs	r3, #0
 8015a02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8015a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d11d      	bne.n	8015a46 <ISM330DHCX_0_Probe+0x11e>
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f003 0302 	and.w	r3, r3, #2
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d018      	beq.n	8015a46 <ISM330DHCX_0_Probe+0x11e>
 8015a14:	7b3b      	ldrb	r3, [r7, #12]
 8015a16:	2b01      	cmp	r3, #1
 8015a18:	d115      	bne.n	8015a46 <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_ACC_Driver;
 8015a1a:	4b1d      	ldr	r3, [pc, #116]	; (8015a90 <ISM330DHCX_0_Probe+0x168>)
 8015a1c:	689b      	ldr	r3, [r3, #8]
 8015a1e:	4a1d      	ldr	r2, [pc, #116]	; (8015a94 <ISM330DHCX_0_Probe+0x16c>)
 8015a20:	491e      	ldr	r1, [pc, #120]	; (8015a9c <ISM330DHCX_0_Probe+0x174>)
 8015a22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_ISM330DHCX_0]->Init(MotionCompObj[CUSTOM_ISM330DHCX_0]) != ISM330DHCX_OK)
 8015a26:	4b18      	ldr	r3, [pc, #96]	; (8015a88 <ISM330DHCX_0_Probe+0x160>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	4a15      	ldr	r2, [pc, #84]	; (8015a84 <ISM330DHCX_0_Probe+0x15c>)
 8015a2e:	6812      	ldr	r2, [r2, #0]
 8015a30:	4610      	mov	r0, r2
 8015a32:	4798      	blx	r3
 8015a34:	4603      	mov	r3, r0
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d003      	beq.n	8015a42 <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8015a3a:	f06f 0304 	mvn.w	r3, #4
 8015a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015a40:	e001      	b.n	8015a46 <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8015a42:	2300      	movs	r3, #0
 8015a44:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8015a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d107      	bne.n	8015a5c <ISM330DHCX_0_Probe+0x134>
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f003 0304 	and.w	r3, r3, #4
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d002      	beq.n	8015a5c <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8015a56:	f06f 0304 	mvn.w	r3, #4
 8015a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8015a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3750      	adds	r7, #80	; 0x50
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	08015aa1 	.word	0x08015aa1
 8015a6c:	08015ac5 	.word	0x08015ac5
 8015a70:	08015b5d 	.word	0x08015b5d
 8015a74:	08015ae9 	.word	0x08015ae9
 8015a78:	0800658d 	.word	0x0800658d
 8015a7c:	20004200 	.word	0x20004200
 8015a80:	200041fc 	.word	0x200041fc
 8015a84:	200041e8 	.word	0x200041e8
 8015a88:	200041f8 	.word	0x200041f8
 8015a8c:	20000004 	.word	0x20000004
 8015a90:	20000914 	.word	0x20000914
 8015a94:	200041ec 	.word	0x200041ec
 8015a98:	20000038 	.word	0x20000038
 8015a9c:	20000014 	.word	0x20000014

08015aa0 <CUSTOM_ISM330DHCX_0_Init>:
/**
 * @brief  Initialize SPI bus for ISM330DHCX
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_Init(void)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b082      	sub	sp, #8
 8015aa4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8015aa6:	f06f 0305 	mvn.w	r3, #5
 8015aaa:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ISM330DHCX_0_SPI_Init() == BSP_ERROR_NONE)
 8015aac:	f7f0 fcde 	bl	800646c <BSP_SPI3_Init>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d101      	bne.n	8015aba <CUSTOM_ISM330DHCX_0_Init+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8015aba:	687b      	ldr	r3, [r7, #4]
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3708      	adds	r7, #8
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}

08015ac4 <CUSTOM_ISM330DHCX_0_DeInit>:
/**
 * @brief  DeInitialize SPI bus for ISM330DHCX
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_DeInit(void)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8015aca:	f06f 0305 	mvn.w	r3, #5
 8015ace:	607b      	str	r3, [r7, #4]

  if(CUSTOM_ISM330DHCX_0_SPI_DeInit() == BSP_ERROR_NONE)
 8015ad0:	f7f0 fcfc 	bl	80064cc <BSP_SPI3_DeInit>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d101      	bne.n	8015ade <CUSTOM_ISM330DHCX_0_DeInit+0x1a>
  {
    ret = BSP_ERROR_NONE;
 8015ada:	2300      	movs	r3, #0
 8015adc:	607b      	str	r3, [r7, #4]
  }

  return ret;
 8015ade:	687b      	ldr	r3, [r7, #4]
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3708      	adds	r7, #8
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}

08015ae8 <CUSTOM_ISM330DHCX_0_WriteReg>:
 * @param  pdata the pointer to the data to be written
 * @param  len the length of the data to be written
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_WriteReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b086      	sub	sp, #24
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	60ba      	str	r2, [r7, #8]
 8015af0:	461a      	mov	r2, r3
 8015af2:	4603      	mov	r3, r0
 8015af4:	81fb      	strh	r3, [r7, #14]
 8015af6:	460b      	mov	r3, r1
 8015af8:	81bb      	strh	r3, [r7, #12]
 8015afa:	4613      	mov	r3, r2
 8015afc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8015afe:	2300      	movs	r3, #0
 8015b00:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8015b02:	89bb      	ldrh	r3, [r7, #12]
 8015b04:	b2db      	uxtb	r3, r3
 8015b06:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_RESET);
 8015b08:	2200      	movs	r2, #0
 8015b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015b0e:	4812      	ldr	r0, [pc, #72]	; (8015b58 <CUSTOM_ISM330DHCX_0_WriteReg+0x70>)
 8015b10:	f7f3 f980 	bl	8008e14 <HAL_GPIO_WritePin>

  if (CUSTOM_ISM330DHCX_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8015b14:	f107 0313 	add.w	r3, r7, #19
 8015b18:	2101      	movs	r1, #1
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	f7f0 fcfe 	bl	800651c <BSP_SPI3_Send>
 8015b20:	4603      	mov	r3, r0
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d002      	beq.n	8015b2c <CUSTOM_ISM330DHCX_0_WriteReg+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8015b26:	f06f 0305 	mvn.w	r3, #5
 8015b2a:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ISM330DHCX_0_SPI_Send(pdata, len) != BSP_ERROR_NONE)
 8015b2c:	88fb      	ldrh	r3, [r7, #6]
 8015b2e:	4619      	mov	r1, r3
 8015b30:	68b8      	ldr	r0, [r7, #8]
 8015b32:	f7f0 fcf3 	bl	800651c <BSP_SPI3_Send>
 8015b36:	4603      	mov	r3, r0
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d002      	beq.n	8015b42 <CUSTOM_ISM330DHCX_0_WriteReg+0x5a>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8015b3c:	f06f 0305 	mvn.w	r3, #5
 8015b40:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_SET);
 8015b42:	2201      	movs	r2, #1
 8015b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015b48:	4803      	ldr	r0, [pc, #12]	; (8015b58 <CUSTOM_ISM330DHCX_0_WriteReg+0x70>)
 8015b4a:	f7f3 f963 	bl	8008e14 <HAL_GPIO_WritePin>

  return ret;
 8015b4e:	697b      	ldr	r3, [r7, #20]
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	3718      	adds	r7, #24
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}
 8015b58:	48001400 	.word	0x48001400

08015b5c <CUSTOM_ISM330DHCX_0_ReadReg>:
 * @param  pdata the pointer to the data to be read
 * @param  len the length of the data to be read
 * @retval BSP status
 */
static int32_t CUSTOM_ISM330DHCX_0_ReadReg(uint16_t Addr, uint16_t Reg, uint8_t *pdata, uint16_t len)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b086      	sub	sp, #24
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	60ba      	str	r2, [r7, #8]
 8015b64:	461a      	mov	r2, r3
 8015b66:	4603      	mov	r3, r0
 8015b68:	81fb      	strh	r3, [r7, #14]
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	81bb      	strh	r3, [r7, #12]
 8015b6e:	4613      	mov	r3, r2
 8015b70:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8015b72:	2300      	movs	r3, #0
 8015b74:	617b      	str	r3, [r7, #20]
  uint8_t dataReg = (uint8_t)Reg;
 8015b76:	89bb      	ldrh	r3, [r7, #12]
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	74fb      	strb	r3, [r7, #19]

  dataReg |= 0x80;
 8015b7c:	7cfb      	ldrb	r3, [r7, #19]
 8015b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	74fb      	strb	r3, [r7, #19]

  /* CS Enable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_RESET);
 8015b86:	2200      	movs	r2, #0
 8015b88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015b8c:	4812      	ldr	r0, [pc, #72]	; (8015bd8 <CUSTOM_ISM330DHCX_0_ReadReg+0x7c>)
 8015b8e:	f7f3 f941 	bl	8008e14 <HAL_GPIO_WritePin>

  if (CUSTOM_ISM330DHCX_0_SPI_Send(&dataReg, 1) != BSP_ERROR_NONE)
 8015b92:	f107 0313 	add.w	r3, r7, #19
 8015b96:	2101      	movs	r1, #1
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f7f0 fcbf 	bl	800651c <BSP_SPI3_Send>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d002      	beq.n	8015baa <CUSTOM_ISM330DHCX_0_ReadReg+0x4e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8015ba4:	f06f 0305 	mvn.w	r3, #5
 8015ba8:	617b      	str	r3, [r7, #20]
  }

  if (CUSTOM_ISM330DHCX_0_SPI_Recv(pdata, len) != BSP_ERROR_NONE)
 8015baa:	88fb      	ldrh	r3, [r7, #6]
 8015bac:	4619      	mov	r1, r3
 8015bae:	68b8      	ldr	r0, [r7, #8]
 8015bb0:	f7f0 fcd0 	bl	8006554 <BSP_SPI3_Recv>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d002      	beq.n	8015bc0 <CUSTOM_ISM330DHCX_0_ReadReg+0x64>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 8015bba:	f06f 0305 	mvn.w	r3, #5
 8015bbe:	617b      	str	r3, [r7, #20]
  }

  /* CS Disable */
  HAL_GPIO_WritePin(CUSTOM_ISM330DHCX_0_CS_PORT, CUSTOM_ISM330DHCX_0_CS_PIN, GPIO_PIN_SET);
 8015bc0:	2201      	movs	r2, #1
 8015bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015bc6:	4804      	ldr	r0, [pc, #16]	; (8015bd8 <CUSTOM_ISM330DHCX_0_ReadReg+0x7c>)
 8015bc8:	f7f3 f924 	bl	8008e14 <HAL_GPIO_WritePin>

  return ret;
 8015bcc:	697b      	ldr	r3, [r7, #20]
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3718      	adds	r7, #24
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}
 8015bd6:	bf00      	nop
 8015bd8:	48001400 	.word	0x48001400

08015bdc <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full>:
 * @param  Instance the device instance
 * @param  Status FIFO full interrupt on INT1 pin
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full(uint32_t Instance, uint8_t Status)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b084      	sub	sp, #16
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	460b      	mov	r3, r1
 8015be6:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d112      	bne.n	8015c14 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_INT1_FIFO_Full(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8015bee:	4a0e      	ldr	r2, [pc, #56]	; (8015c28 <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x4c>)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bf6:	78fa      	ldrb	r2, [r7, #3]
 8015bf8:	4611      	mov	r1, r2
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ef f926 	bl	8004e4c <ISM330DHCX_FIFO_Set_INT1_FIFO_Full>
 8015c00:	4603      	mov	r3, r0
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d003      	beq.n	8015c0e <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 8015c06:	f06f 0304 	mvn.w	r3, #4
 8015c0a:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8015c0c:	e006      	b.n	8015c1c <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
			ret = BSP_ERROR_NONE;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	60fb      	str	r3, [r7, #12]
		break;
 8015c12:	e003      	b.n	8015c1c <CUSTOM_MOTION_SENSOR_FIFO_Set_INT1_FIFO_Full+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8015c14:	f06f 0301 	mvn.w	r3, #1
 8015c18:	60fb      	str	r3, [r7, #12]
		break;
 8015c1a:	bf00      	nop
	}

	return ret;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3710      	adds	r7, #16
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
 8015c26:	bf00      	nop
 8015c28:	200041e8 	.word	0x200041e8

08015c2c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level>:
 * @param  Instance the device instance
 * @param  Watermark FIFO watermark level
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level(uint32_t Instance, uint16_t Watermark)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	460b      	mov	r3, r1
 8015c36:	807b      	strh	r3, [r7, #2]
	int32_t ret;

	switch(Instance)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d112      	bne.n	8015c64 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_Watermark_Level(MotionCompObj[Instance], Watermark) != BSP_ERROR_NONE)
 8015c3e:	4a0e      	ldr	r2, [pc, #56]	; (8015c78 <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x4c>)
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c46:	887a      	ldrh	r2, [r7, #2]
 8015c48:	4611      	mov	r1, r2
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7ef f92f 	bl	8004eae <ISM330DHCX_FIFO_Set_Watermark_Level>
 8015c50:	4603      	mov	r3, r0
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d003      	beq.n	8015c5e <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 8015c56:	f06f 0304 	mvn.w	r3, #4
 8015c5a:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8015c5c:	e006      	b.n	8015c6c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
			ret = BSP_ERROR_NONE;
 8015c5e:	2300      	movs	r3, #0
 8015c60:	60fb      	str	r3, [r7, #12]
		break;
 8015c62:	e003      	b.n	8015c6c <CUSTOM_MOTION_SENSOR_FIFO_Set_Watermark_Level+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8015c64:	f06f 0301 	mvn.w	r3, #1
 8015c68:	60fb      	str	r3, [r7, #12]
		break;
 8015c6a:	bf00      	nop
	}

	return ret;
 8015c6c:	68fb      	ldr	r3, [r7, #12]
}
 8015c6e:	4618      	mov	r0, r3
 8015c70:	3710      	adds	r7, #16
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	200041e8 	.word	0x200041e8

08015c7c <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth>:
 * @param  Instance the device instance
 * @param  Status FIFO stop on watermark status
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth(uint32_t Instance, uint8_t Status)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b084      	sub	sp, #16
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	460b      	mov	r3, r1
 8015c86:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d112      	bne.n	8015cb4 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_Stop_On_Fth(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8015c8e:	4a0e      	ldr	r2, [pc, #56]	; (8015cc8 <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x4c>)
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c96:	78fa      	ldrb	r2, [r7, #3]
 8015c98:	4611      	mov	r1, r2
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7ef f91f 	bl	8004ede <ISM330DHCX_FIFO_Set_Stop_On_Fth>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d003      	beq.n	8015cae <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 8015ca6:	f06f 0304 	mvn.w	r3, #4
 8015caa:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8015cac:	e006      	b.n	8015cbc <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
			ret = BSP_ERROR_NONE;
 8015cae:	2300      	movs	r3, #0
 8015cb0:	60fb      	str	r3, [r7, #12]
		break;
 8015cb2:	e003      	b.n	8015cbc <CUSTOM_MOTION_SENSOR_FIFO_Set_Stop_On_Fth+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8015cb4:	f06f 0301 	mvn.w	r3, #1
 8015cb8:	60fb      	str	r3, [r7, #12]
		break;
 8015cba:	bf00      	nop
	}

	return ret;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3710      	adds	r7, #16
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	200041e8 	.word	0x200041e8

08015ccc <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode>:
 * @param  Instance the device instance
 * @param  Mode FIFO mode
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_Mode(uint32_t Instance, uint8_t Mode)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b084      	sub	sp, #16
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	460b      	mov	r3, r1
 8015cd6:	70fb      	strb	r3, [r7, #3]
	int32_t ret;

	switch(Instance)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d112      	bne.n	8015d04 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x38>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if(ISM330DHCX_FIFO_Set_Mode(MotionCompObj[Instance], Mode) != BSP_ERROR_NONE)
 8015cde:	4a0e      	ldr	r2, [pc, #56]	; (8015d18 <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x4c>)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ce6:	78fa      	ldrb	r2, [r7, #3]
 8015ce8:	4611      	mov	r1, r2
 8015cea:	4618      	mov	r0, r3
 8015cec:	f7ef f90f 	bl	8004f0e <ISM330DHCX_FIFO_Set_Mode>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d003      	beq.n	8015cfe <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x32>
		{
			ret = BSP_ERROR_COMPONENT_FAILURE;
 8015cf6:	f06f 0304 	mvn.w	r3, #4
 8015cfa:	60fb      	str	r3, [r7, #12]
		}
		else
		{
			ret = BSP_ERROR_NONE;
		}
		break;
 8015cfc:	e006      	b.n	8015d0c <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
			ret = BSP_ERROR_NONE;
 8015cfe:	2300      	movs	r3, #0
 8015d00:	60fb      	str	r3, [r7, #12]
		break;
 8015d02:	e003      	b.n	8015d0c <CUSTOM_MOTION_SENSOR_FIFO_Set_Mode+0x40>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8015d04:	f06f 0301 	mvn.w	r3, #1
 8015d08:	60fb      	str	r3, [r7, #12]
		break;
 8015d0a:	bf00      	nop
	}

	return ret;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	3710      	adds	r7, #16
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}
 8015d16:	bf00      	nop
 8015d18:	200041e8 	.word	0x200041e8

08015d1c <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word>:
 *         - MOTION_GYRO or MOTION_ACCELERO
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word(uint32_t Instance, uint32_t Function, int16_t *Data)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b086      	sub	sp, #24
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	607a      	str	r2, [r7, #4]
	int32_t ret;

	switch(Instance)
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d131      	bne.n	8015d92 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x76>
	{
#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	f003 0302 	and.w	r3, r3, #2
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d011      	beq.n	8015d5c <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x40>
		{
			if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 8015d38:	4a1a      	ldr	r2, [pc, #104]	; (8015da4 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d40:	6879      	ldr	r1, [r7, #4]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7ef f932 	bl	8004fac <ISM330DHCX_FIFO_Get_Data_Word>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d003      	beq.n	8015d56 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x3a>
			{
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8015d4e:	f06f 0304 	mvn.w	r3, #4
 8015d52:	617b      	str	r3, [r7, #20]
		}
		else
		{
			ret = BSP_ERROR_WRONG_PARAM;
		}
		break;
 8015d54:	e021      	b.n	8015d9a <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
				ret = BSP_ERROR_NONE;
 8015d56:	2300      	movs	r3, #0
 8015d58:	617b      	str	r3, [r7, #20]
		break;
 8015d5a:	e01e      	b.n	8015d9a <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
		else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	f003 0301 	and.w	r3, r3, #1
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d011      	beq.n	8015d8a <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x6e>
			if(ISM330DHCX_FIFO_Get_Data_Word(MotionCompObj[Instance], Data) != BSP_ERROR_NONE)
 8015d66:	4a0f      	ldr	r2, [pc, #60]	; (8015da4 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x88>)
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d6e:	6879      	ldr	r1, [r7, #4]
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7ef f91b 	bl	8004fac <ISM330DHCX_FIFO_Get_Data_Word>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d003      	beq.n	8015d84 <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x68>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8015d7c:	f06f 0304 	mvn.w	r3, #4
 8015d80:	617b      	str	r3, [r7, #20]
		break;
 8015d82:	e00a      	b.n	8015d9a <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
				ret = BSP_ERROR_NONE;
 8015d84:	2300      	movs	r3, #0
 8015d86:	617b      	str	r3, [r7, #20]
		break;
 8015d88:	e007      	b.n	8015d9a <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
			ret = BSP_ERROR_WRONG_PARAM;
 8015d8a:	f06f 0301 	mvn.w	r3, #1
 8015d8e:	617b      	str	r3, [r7, #20]
		break;
 8015d90:	e003      	b.n	8015d9a <CUSTOM_MOTION_SENSOR_FIFO_Get_Data_Word+0x7e>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8015d92:	f06f 0301 	mvn.w	r3, #1
 8015d96:	617b      	str	r3, [r7, #20]
		break;
 8015d98:	bf00      	nop
	}

	return ret;
 8015d9a:	697b      	ldr	r3, [r7, #20]
}
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	3718      	adds	r7, #24
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	200041e8 	.word	0x200041e8

08015da8 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR>:
 * @param  Function Motion sensor function
 * @param  Odr FIFO BDR value
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_FIFO_Set_BDR(uint32_t Instance, uint32_t Function, float Bdr)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b086      	sub	sp, #24
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	60f8      	str	r0, [r7, #12]
 8015db0:	60b9      	str	r1, [r7, #8]
 8015db2:	ed87 0a01 	vstr	s0, [r7, #4]
	int32_t ret;

	switch(Instance)
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d133      	bne.n	8015e24 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x7c>
		break;
#endif

#if (USE_CUSTOM_MOTION_SENSOR_ISM330DHCX_0 == 1)
	case CUSTOM_ISM330DHCX_0:
		if((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	f003 0302 	and.w	r3, r3, #2
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d012      	beq.n	8015dec <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x44>
		{
			if(ISM330DHCX_FIFO_ACC_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8015dc6:	4a1c      	ldr	r2, [pc, #112]	; (8015e38 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015dce:	ed97 0a01 	vldr	s0, [r7, #4]
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7ee ff22 	bl	8004c1c <ISM330DHCX_FIFO_ACC_Set_BDR>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d003      	beq.n	8015de6 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x3e>
			{
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8015dde:	f06f 0304 	mvn.w	r3, #4
 8015de2:	617b      	str	r3, [r7, #20]
		}
		else
		{
			ret = BSP_ERROR_WRONG_PARAM;
		}
		break;
 8015de4:	e022      	b.n	8015e2c <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
				ret = BSP_ERROR_NONE;
 8015de6:	2300      	movs	r3, #0
 8015de8:	617b      	str	r3, [r7, #20]
		break;
 8015dea:	e01f      	b.n	8015e2c <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
		else if((Function & MOTION_GYRO) == MOTION_GYRO)
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	f003 0301 	and.w	r3, r3, #1
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d012      	beq.n	8015e1c <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x74>
			if(ISM330DHCX_FIFO_GYRO_Set_BDR(MotionCompObj[Instance], Bdr) != BSP_ERROR_NONE)
 8015df6:	4a10      	ldr	r2, [pc, #64]	; (8015e38 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x90>)
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015dfe:	ed97 0a01 	vldr	s0, [r7, #4]
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7ee ff96 	bl	8004d34 <ISM330DHCX_FIFO_GYRO_Set_BDR>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d003      	beq.n	8015e16 <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x6e>
				ret = BSP_ERROR_COMPONENT_FAILURE;
 8015e0e:	f06f 0304 	mvn.w	r3, #4
 8015e12:	617b      	str	r3, [r7, #20]
		break;
 8015e14:	e00a      	b.n	8015e2c <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
				ret = BSP_ERROR_NONE;
 8015e16:	2300      	movs	r3, #0
 8015e18:	617b      	str	r3, [r7, #20]
		break;
 8015e1a:	e007      	b.n	8015e2c <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
			ret = BSP_ERROR_WRONG_PARAM;
 8015e1c:	f06f 0301 	mvn.w	r3, #1
 8015e20:	617b      	str	r3, [r7, #20]
		break;
 8015e22:	e003      	b.n	8015e2c <CUSTOM_MOTION_SENSOR_FIFO_Set_BDR+0x84>
#endif

	default:
		ret = BSP_ERROR_WRONG_PARAM;
 8015e24:	f06f 0301 	mvn.w	r3, #1
 8015e28:	617b      	str	r3, [r7, #20]
		break;
 8015e2a:	bf00      	nop
	}

	return ret;
 8015e2c:	697b      	ldr	r3, [r7, #20]
}
 8015e2e:	4618      	mov	r0, r3
 8015e30:	3718      	adds	r7, #24
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bd80      	pop	{r7, pc}
 8015e36:	bf00      	nop
 8015e38:	200041e8 	.word	0x200041e8

08015e3c <arm_min_f32>:
 8015e3c:	f101 3cff 	add.w	ip, r1, #4294967295
 8015e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e42:	4607      	mov	r7, r0
 8015e44:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8015e48:	ecf7 7a01 	vldmia	r7!, {s15}
 8015e4c:	d060      	beq.n	8015f10 <arm_min_f32+0xd4>
 8015e4e:	2400      	movs	r4, #0
 8015e50:	3014      	adds	r0, #20
 8015e52:	4625      	mov	r5, r4
 8015e54:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8015e58:	ed10 7a04 	vldr	s14, [r0, #-16]
 8015e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e64:	bfc8      	it	gt
 8015e66:	eef0 7a47 	vmovgt.f32	s15, s14
 8015e6a:	ed10 7a03 	vldr	s14, [r0, #-12]
 8015e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e72:	bfc8      	it	gt
 8015e74:	1c65      	addgt	r5, r4, #1
 8015e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e7a:	bfc8      	it	gt
 8015e7c:	eef0 7a47 	vmovgt.f32	s15, s14
 8015e80:	ed10 7a02 	vldr	s14, [r0, #-8]
 8015e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e88:	bfc8      	it	gt
 8015e8a:	1ca5      	addgt	r5, r4, #2
 8015e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e90:	bfc8      	it	gt
 8015e92:	eef0 7a47 	vmovgt.f32	s15, s14
 8015e96:	ed10 7a01 	vldr	s14, [r0, #-4]
 8015e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015e9e:	bfc8      	it	gt
 8015ea0:	1ce5      	addgt	r5, r4, #3
 8015ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea6:	f104 0404 	add.w	r4, r4, #4
 8015eaa:	bfc4      	itt	gt
 8015eac:	eef0 7a47 	vmovgt.f32	s15, s14
 8015eb0:	4625      	movgt	r5, r4
 8015eb2:	42a6      	cmp	r6, r4
 8015eb4:	f100 0010 	add.w	r0, r0, #16
 8015eb8:	d1ce      	bne.n	8015e58 <arm_min_f32+0x1c>
 8015eba:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8015ebe:	f01c 0003 	ands.w	r0, ip, #3
 8015ec2:	d021      	beq.n	8015f08 <arm_min_f32+0xcc>
 8015ec4:	ed97 7a00 	vldr	s14, [r7]
 8015ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed0:	bf44      	itt	mi
 8015ed2:	eef0 7a47 	vmovmi.f32	s15, s14
 8015ed6:	1a0d      	submi	r5, r1, r0
 8015ed8:	3801      	subs	r0, #1
 8015eda:	d015      	beq.n	8015f08 <arm_min_f32+0xcc>
 8015edc:	ed97 7a01 	vldr	s14, [r7, #4]
 8015ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee8:	bfc4      	itt	gt
 8015eea:	eef0 7a47 	vmovgt.f32	s15, s14
 8015eee:	1a0d      	subgt	r5, r1, r0
 8015ef0:	2801      	cmp	r0, #1
 8015ef2:	d009      	beq.n	8015f08 <arm_min_f32+0xcc>
 8015ef4:	ed97 7a02 	vldr	s14, [r7, #8]
 8015ef8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f00:	bf44      	itt	mi
 8015f02:	eef0 7a47 	vmovmi.f32	s15, s14
 8015f06:	4665      	movmi	r5, ip
 8015f08:	edc2 7a00 	vstr	s15, [r2]
 8015f0c:	601d      	str	r5, [r3, #0]
 8015f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f10:	4675      	mov	r5, lr
 8015f12:	e7d4      	b.n	8015ebe <arm_min_f32+0x82>

08015f14 <arm_mean_f32>:
 8015f14:	b430      	push	{r4, r5}
 8015f16:	088d      	lsrs	r5, r1, #2
 8015f18:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8015f8c <arm_mean_f32+0x78>
 8015f1c:	d018      	beq.n	8015f50 <arm_mean_f32+0x3c>
 8015f1e:	f100 0310 	add.w	r3, r0, #16
 8015f22:	462c      	mov	r4, r5
 8015f24:	ed53 5a04 	vldr	s11, [r3, #-16]
 8015f28:	ed13 6a03 	vldr	s12, [r3, #-12]
 8015f2c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8015f30:	ed13 7a01 	vldr	s14, [r3, #-4]
 8015f34:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8015f38:	3c01      	subs	r4, #1
 8015f3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015f3e:	f103 0310 	add.w	r3, r3, #16
 8015f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f4a:	d1eb      	bne.n	8015f24 <arm_mean_f32+0x10>
 8015f4c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8015f50:	f011 0303 	ands.w	r3, r1, #3
 8015f54:	d00f      	beq.n	8015f76 <arm_mean_f32+0x62>
 8015f56:	ed90 7a00 	vldr	s14, [r0]
 8015f5a:	3b01      	subs	r3, #1
 8015f5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f60:	d009      	beq.n	8015f76 <arm_mean_f32+0x62>
 8015f62:	ed90 7a01 	vldr	s14, [r0, #4]
 8015f66:	2b01      	cmp	r3, #1
 8015f68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f6c:	bf1c      	itt	ne
 8015f6e:	ed90 7a02 	vldrne	s14, [r0, #8]
 8015f72:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8015f76:	ee07 1a10 	vmov	s14, r1
 8015f7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015f7e:	bc30      	pop	{r4, r5}
 8015f80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015f84:	edc2 6a00 	vstr	s13, [r2]
 8015f88:	4770      	bx	lr
 8015f8a:	bf00      	nop
 8015f8c:	00000000 	.word	0x00000000

08015f90 <arm_max_f32>:
 8015f90:	f101 3cff 	add.w	ip, r1, #4294967295
 8015f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f96:	4607      	mov	r7, r0
 8015f98:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8015f9c:	ecf7 7a01 	vldmia	r7!, {s15}
 8015fa0:	d060      	beq.n	8016064 <arm_max_f32+0xd4>
 8015fa2:	2400      	movs	r4, #0
 8015fa4:	3014      	adds	r0, #20
 8015fa6:	4625      	mov	r5, r4
 8015fa8:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8015fac:	ed10 7a04 	vldr	s14, [r0, #-16]
 8015fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fb8:	bf48      	it	mi
 8015fba:	eef0 7a47 	vmovmi.f32	s15, s14
 8015fbe:	ed10 7a03 	vldr	s14, [r0, #-12]
 8015fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015fc6:	bf48      	it	mi
 8015fc8:	1c65      	addmi	r5, r4, #1
 8015fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fce:	bf48      	it	mi
 8015fd0:	eef0 7a47 	vmovmi.f32	s15, s14
 8015fd4:	ed10 7a02 	vldr	s14, [r0, #-8]
 8015fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015fdc:	bf48      	it	mi
 8015fde:	1ca5      	addmi	r5, r4, #2
 8015fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe4:	bf48      	it	mi
 8015fe6:	eef0 7a47 	vmovmi.f32	s15, s14
 8015fea:	ed10 7a01 	vldr	s14, [r0, #-4]
 8015fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015ff2:	bf48      	it	mi
 8015ff4:	1ce5      	addmi	r5, r4, #3
 8015ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ffa:	f104 0404 	add.w	r4, r4, #4
 8015ffe:	bf44      	itt	mi
 8016000:	eef0 7a47 	vmovmi.f32	s15, s14
 8016004:	4625      	movmi	r5, r4
 8016006:	42a6      	cmp	r6, r4
 8016008:	f100 0010 	add.w	r0, r0, #16
 801600c:	d1ce      	bne.n	8015fac <arm_max_f32+0x1c>
 801600e:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8016012:	f01c 0003 	ands.w	r0, ip, #3
 8016016:	d021      	beq.n	801605c <arm_max_f32+0xcc>
 8016018:	ed97 7a00 	vldr	s14, [r7]
 801601c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016024:	bfc4      	itt	gt
 8016026:	eef0 7a47 	vmovgt.f32	s15, s14
 801602a:	1a0d      	subgt	r5, r1, r0
 801602c:	3801      	subs	r0, #1
 801602e:	d015      	beq.n	801605c <arm_max_f32+0xcc>
 8016030:	ed97 7a01 	vldr	s14, [r7, #4]
 8016034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801603c:	bf44      	itt	mi
 801603e:	eef0 7a47 	vmovmi.f32	s15, s14
 8016042:	1a0d      	submi	r5, r1, r0
 8016044:	2801      	cmp	r0, #1
 8016046:	d009      	beq.n	801605c <arm_max_f32+0xcc>
 8016048:	ed97 7a02 	vldr	s14, [r7, #8]
 801604c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016054:	bfc4      	itt	gt
 8016056:	eef0 7a47 	vmovgt.f32	s15, s14
 801605a:	4665      	movgt	r5, ip
 801605c:	edc2 7a00 	vstr	s15, [r2]
 8016060:	601d      	str	r5, [r3, #0]
 8016062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016064:	4675      	mov	r5, lr
 8016066:	e7d4      	b.n	8016012 <arm_max_f32+0x82>

08016068 <arm_rfft_32_fast_init_f32>:
 8016068:	b178      	cbz	r0, 801608a <arm_rfft_32_fast_init_f32+0x22>
 801606a:	b430      	push	{r4, r5}
 801606c:	4908      	ldr	r1, [pc, #32]	; (8016090 <arm_rfft_32_fast_init_f32+0x28>)
 801606e:	4a09      	ldr	r2, [pc, #36]	; (8016094 <arm_rfft_32_fast_init_f32+0x2c>)
 8016070:	2310      	movs	r3, #16
 8016072:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8016076:	8003      	strh	r3, [r0, #0]
 8016078:	2520      	movs	r5, #32
 801607a:	2414      	movs	r4, #20
 801607c:	4b06      	ldr	r3, [pc, #24]	; (8016098 <arm_rfft_32_fast_init_f32+0x30>)
 801607e:	8205      	strh	r5, [r0, #16]
 8016080:	8184      	strh	r4, [r0, #12]
 8016082:	6143      	str	r3, [r0, #20]
 8016084:	bc30      	pop	{r4, r5}
 8016086:	2000      	movs	r0, #0
 8016088:	4770      	bx	lr
 801608a:	f04f 30ff 	mov.w	r0, #4294967295
 801608e:	4770      	bx	lr
 8016090:	0803e738 	.word	0x0803e738
 8016094:	0805ea74 	.word	0x0805ea74
 8016098:	0806f7f4 	.word	0x0806f7f4

0801609c <arm_rfft_64_fast_init_f32>:
 801609c:	b178      	cbz	r0, 80160be <arm_rfft_64_fast_init_f32+0x22>
 801609e:	b430      	push	{r4, r5}
 80160a0:	4908      	ldr	r1, [pc, #32]	; (80160c4 <arm_rfft_64_fast_init_f32+0x28>)
 80160a2:	4a09      	ldr	r2, [pc, #36]	; (80160c8 <arm_rfft_64_fast_init_f32+0x2c>)
 80160a4:	2320      	movs	r3, #32
 80160a6:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80160aa:	8003      	strh	r3, [r0, #0]
 80160ac:	2540      	movs	r5, #64	; 0x40
 80160ae:	2430      	movs	r4, #48	; 0x30
 80160b0:	4b06      	ldr	r3, [pc, #24]	; (80160cc <arm_rfft_64_fast_init_f32+0x30>)
 80160b2:	8205      	strh	r5, [r0, #16]
 80160b4:	8184      	strh	r4, [r0, #12]
 80160b6:	6143      	str	r3, [r0, #20]
 80160b8:	bc30      	pop	{r4, r5}
 80160ba:	2000      	movs	r0, #0
 80160bc:	4770      	bx	lr
 80160be:	f04f 30ff 	mov.w	r0, #4294967295
 80160c2:	4770      	bx	lr
 80160c4:	08040890 	.word	0x08040890
 80160c8:	080632f4 	.word	0x080632f4
 80160cc:	08074074 	.word	0x08074074

080160d0 <arm_rfft_256_fast_init_f32>:
 80160d0:	b180      	cbz	r0, 80160f4 <arm_rfft_256_fast_init_f32+0x24>
 80160d2:	b430      	push	{r4, r5}
 80160d4:	4909      	ldr	r1, [pc, #36]	; (80160fc <arm_rfft_256_fast_init_f32+0x2c>)
 80160d6:	4a0a      	ldr	r2, [pc, #40]	; (8016100 <arm_rfft_256_fast_init_f32+0x30>)
 80160d8:	2380      	movs	r3, #128	; 0x80
 80160da:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80160de:	8003      	strh	r3, [r0, #0]
 80160e0:	f44f 7580 	mov.w	r5, #256	; 0x100
 80160e4:	24d0      	movs	r4, #208	; 0xd0
 80160e6:	4b07      	ldr	r3, [pc, #28]	; (8016104 <arm_rfft_256_fast_init_f32+0x34>)
 80160e8:	8205      	strh	r5, [r0, #16]
 80160ea:	8184      	strh	r4, [r0, #12]
 80160ec:	6143      	str	r3, [r0, #20]
 80160ee:	bc30      	pop	{r4, r5}
 80160f0:	2000      	movs	r0, #0
 80160f2:	4770      	bx	lr
 80160f4:	f04f 30ff 	mov.w	r0, #4294967295
 80160f8:	4770      	bx	lr
 80160fa:	bf00      	nop
 80160fc:	0803e598 	.word	0x0803e598
 8016100:	0805e674 	.word	0x0805e674
 8016104:	0806f3f4 	.word	0x0806f3f4

08016108 <arm_rfft_512_fast_init_f32>:
 8016108:	b190      	cbz	r0, 8016130 <arm_rfft_512_fast_init_f32+0x28>
 801610a:	b430      	push	{r4, r5}
 801610c:	490a      	ldr	r1, [pc, #40]	; (8016138 <arm_rfft_512_fast_init_f32+0x30>)
 801610e:	4a0b      	ldr	r2, [pc, #44]	; (801613c <arm_rfft_512_fast_init_f32+0x34>)
 8016110:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016114:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8016118:	8003      	strh	r3, [r0, #0]
 801611a:	f44f 7500 	mov.w	r5, #512	; 0x200
 801611e:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8016122:	4b07      	ldr	r3, [pc, #28]	; (8016140 <arm_rfft_512_fast_init_f32+0x38>)
 8016124:	8205      	strh	r5, [r0, #16]
 8016126:	8184      	strh	r4, [r0, #12]
 8016128:	6143      	str	r3, [r0, #20]
 801612a:	bc30      	pop	{r4, r5}
 801612c:	2000      	movs	r0, #0
 801612e:	4770      	bx	lr
 8016130:	f04f 30ff 	mov.w	r0, #4294967295
 8016134:	4770      	bx	lr
 8016136:	bf00      	nop
 8016138:	08040520 	.word	0x08040520
 801613c:	08062af4 	.word	0x08062af4
 8016140:	08073874 	.word	0x08073874

08016144 <arm_rfft_1024_fast_init_f32>:
 8016144:	b190      	cbz	r0, 801616c <arm_rfft_1024_fast_init_f32+0x28>
 8016146:	b430      	push	{r4, r5}
 8016148:	490a      	ldr	r1, [pc, #40]	; (8016174 <arm_rfft_1024_fast_init_f32+0x30>)
 801614a:	4a0b      	ldr	r2, [pc, #44]	; (8016178 <arm_rfft_1024_fast_init_f32+0x34>)
 801614c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016150:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8016154:	8003      	strh	r3, [r0, #0]
 8016156:	f44f 6580 	mov.w	r5, #1024	; 0x400
 801615a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 801615e:	4b07      	ldr	r3, [pc, #28]	; (801617c <arm_rfft_1024_fast_init_f32+0x38>)
 8016160:	8205      	strh	r5, [r0, #16]
 8016162:	8184      	strh	r4, [r0, #12]
 8016164:	6143      	str	r3, [r0, #20]
 8016166:	bc30      	pop	{r4, r5}
 8016168:	2000      	movs	r0, #0
 801616a:	4770      	bx	lr
 801616c:	f04f 30ff 	mov.w	r0, #4294967295
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	080408f0 	.word	0x080408f0
 8016178:	0806b3f4 	.word	0x0806b3f4
 801617c:	0806c3f4 	.word	0x0806c3f4

08016180 <arm_rfft_2048_fast_init_f32>:
 8016180:	b190      	cbz	r0, 80161a8 <arm_rfft_2048_fast_init_f32+0x28>
 8016182:	b430      	push	{r4, r5}
 8016184:	490a      	ldr	r1, [pc, #40]	; (80161b0 <arm_rfft_2048_fast_init_f32+0x30>)
 8016186:	4a0b      	ldr	r2, [pc, #44]	; (80161b4 <arm_rfft_2048_fast_init_f32+0x34>)
 8016188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801618c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8016190:	8003      	strh	r3, [r0, #0]
 8016192:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8016196:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 801619a:	4b07      	ldr	r3, [pc, #28]	; (80161b8 <arm_rfft_2048_fast_init_f32+0x38>)
 801619c:	8205      	strh	r5, [r0, #16]
 801619e:	8184      	strh	r4, [r0, #12]
 80161a0:	6143      	str	r3, [r0, #20]
 80161a2:	bc30      	pop	{r4, r5}
 80161a4:	2000      	movs	r0, #0
 80161a6:	4770      	bx	lr
 80161a8:	f04f 30ff 	mov.w	r0, #4294967295
 80161ac:	4770      	bx	lr
 80161ae:	bf00      	nop
 80161b0:	0803d788 	.word	0x0803d788
 80161b4:	0805c674 	.word	0x0805c674
 80161b8:	0806d3f4 	.word	0x0806d3f4

080161bc <arm_rfft_4096_fast_init_f32>:
 80161bc:	b190      	cbz	r0, 80161e4 <arm_rfft_4096_fast_init_f32+0x28>
 80161be:	b430      	push	{r4, r5}
 80161c0:	490a      	ldr	r1, [pc, #40]	; (80161ec <arm_rfft_4096_fast_init_f32+0x30>)
 80161c2:	4a0b      	ldr	r2, [pc, #44]	; (80161f0 <arm_rfft_4096_fast_init_f32+0x34>)
 80161c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80161c8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80161cc:	8003      	strh	r3, [r0, #0]
 80161ce:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80161d2:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80161d6:	4b07      	ldr	r3, [pc, #28]	; (80161f4 <arm_rfft_4096_fast_init_f32+0x38>)
 80161d8:	8205      	strh	r5, [r0, #16]
 80161da:	8184      	strh	r4, [r0, #12]
 80161dc:	6143      	str	r3, [r0, #20]
 80161de:	bc30      	pop	{r4, r5}
 80161e0:	2000      	movs	r0, #0
 80161e2:	4770      	bx	lr
 80161e4:	f04f 30ff 	mov.w	r0, #4294967295
 80161e8:	4770      	bx	lr
 80161ea:	bf00      	nop
 80161ec:	0803e760 	.word	0x0803e760
 80161f0:	0805eaf4 	.word	0x0805eaf4
 80161f4:	0806f874 	.word	0x0806f874

080161f8 <arm_rfft_fast_init_f32>:
 80161f8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80161fc:	d01f      	beq.n	801623e <arm_rfft_fast_init_f32+0x46>
 80161fe:	d90b      	bls.n	8016218 <arm_rfft_fast_init_f32+0x20>
 8016200:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8016204:	d019      	beq.n	801623a <arm_rfft_fast_init_f32+0x42>
 8016206:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 801620a:	d012      	beq.n	8016232 <arm_rfft_fast_init_f32+0x3a>
 801620c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016210:	d00d      	beq.n	801622e <arm_rfft_fast_init_f32+0x36>
 8016212:	f04f 30ff 	mov.w	r0, #4294967295
 8016216:	4770      	bx	lr
 8016218:	2940      	cmp	r1, #64	; 0x40
 801621a:	d00c      	beq.n	8016236 <arm_rfft_fast_init_f32+0x3e>
 801621c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8016220:	d003      	beq.n	801622a <arm_rfft_fast_init_f32+0x32>
 8016222:	2920      	cmp	r1, #32
 8016224:	d1f5      	bne.n	8016212 <arm_rfft_fast_init_f32+0x1a>
 8016226:	4b07      	ldr	r3, [pc, #28]	; (8016244 <arm_rfft_fast_init_f32+0x4c>)
 8016228:	4718      	bx	r3
 801622a:	4b07      	ldr	r3, [pc, #28]	; (8016248 <arm_rfft_fast_init_f32+0x50>)
 801622c:	4718      	bx	r3
 801622e:	4b07      	ldr	r3, [pc, #28]	; (801624c <arm_rfft_fast_init_f32+0x54>)
 8016230:	4718      	bx	r3
 8016232:	4b07      	ldr	r3, [pc, #28]	; (8016250 <arm_rfft_fast_init_f32+0x58>)
 8016234:	4718      	bx	r3
 8016236:	4b07      	ldr	r3, [pc, #28]	; (8016254 <arm_rfft_fast_init_f32+0x5c>)
 8016238:	e7f6      	b.n	8016228 <arm_rfft_fast_init_f32+0x30>
 801623a:	4b07      	ldr	r3, [pc, #28]	; (8016258 <arm_rfft_fast_init_f32+0x60>)
 801623c:	e7f4      	b.n	8016228 <arm_rfft_fast_init_f32+0x30>
 801623e:	4b07      	ldr	r3, [pc, #28]	; (801625c <arm_rfft_fast_init_f32+0x64>)
 8016240:	e7f2      	b.n	8016228 <arm_rfft_fast_init_f32+0x30>
 8016242:	bf00      	nop
 8016244:	08016069 	.word	0x08016069
 8016248:	080160d1 	.word	0x080160d1
 801624c:	08016145 	.word	0x08016145
 8016250:	080161bd 	.word	0x080161bd
 8016254:	0801609d 	.word	0x0801609d
 8016258:	08016181 	.word	0x08016181
 801625c:	08016109 	.word	0x08016109

08016260 <stage_rfft_f32>:
 8016260:	b410      	push	{r4}
 8016262:	edd1 7a00 	vldr	s15, [r1]
 8016266:	ed91 7a01 	vldr	s14, [r1, #4]
 801626a:	8804      	ldrh	r4, [r0, #0]
 801626c:	6940      	ldr	r0, [r0, #20]
 801626e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8016272:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016276:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 801627a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801627e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016282:	3c01      	subs	r4, #1
 8016284:	ee26 7a84 	vmul.f32	s14, s13, s8
 8016288:	ee67 7a84 	vmul.f32	s15, s15, s8
 801628c:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8016290:	ed82 7a00 	vstr	s14, [r2]
 8016294:	edc2 7a01 	vstr	s15, [r2, #4]
 8016298:	3010      	adds	r0, #16
 801629a:	3210      	adds	r2, #16
 801629c:	3b08      	subs	r3, #8
 801629e:	3110      	adds	r1, #16
 80162a0:	ed11 5a02 	vldr	s10, [r1, #-8]
 80162a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80162a8:	ed50 6a02 	vldr	s13, [r0, #-8]
 80162ac:	edd3 4a03 	vldr	s9, [r3, #12]
 80162b0:	ed51 7a01 	vldr	s15, [r1, #-4]
 80162b4:	ed10 6a01 	vldr	s12, [r0, #-4]
 80162b8:	ee77 5a45 	vsub.f32	s11, s14, s10
 80162bc:	ee37 7a05 	vadd.f32	s14, s14, s10
 80162c0:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80162c4:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80162c8:	ee66 5a25 	vmul.f32	s11, s12, s11
 80162cc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80162d0:	ee37 7a23 	vadd.f32	s14, s14, s7
 80162d4:	ee66 6a85 	vmul.f32	s13, s13, s10
 80162d8:	ee26 6a05 	vmul.f32	s12, s12, s10
 80162dc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80162e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80162e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80162e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80162ec:	ee67 7a84 	vmul.f32	s15, s15, s8
 80162f0:	3c01      	subs	r4, #1
 80162f2:	ed02 7a02 	vstr	s14, [r2, #-8]
 80162f6:	ed42 7a01 	vstr	s15, [r2, #-4]
 80162fa:	f1a3 0308 	sub.w	r3, r3, #8
 80162fe:	f101 0108 	add.w	r1, r1, #8
 8016302:	f100 0008 	add.w	r0, r0, #8
 8016306:	f102 0208 	add.w	r2, r2, #8
 801630a:	d1c9      	bne.n	80162a0 <stage_rfft_f32+0x40>
 801630c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016310:	4770      	bx	lr
 8016312:	bf00      	nop

08016314 <merge_rfft_f32>:
 8016314:	b410      	push	{r4}
 8016316:	edd1 7a00 	vldr	s15, [r1]
 801631a:	edd1 6a01 	vldr	s13, [r1, #4]
 801631e:	8804      	ldrh	r4, [r0, #0]
 8016320:	6940      	ldr	r0, [r0, #20]
 8016322:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016326:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801632a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 801632e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8016332:	ee67 7a84 	vmul.f32	s15, s15, s8
 8016336:	3c01      	subs	r4, #1
 8016338:	ed82 7a00 	vstr	s14, [r2]
 801633c:	edc2 7a01 	vstr	s15, [r2, #4]
 8016340:	b3dc      	cbz	r4, 80163ba <merge_rfft_f32+0xa6>
 8016342:	00e3      	lsls	r3, r4, #3
 8016344:	3b08      	subs	r3, #8
 8016346:	440b      	add	r3, r1
 8016348:	3010      	adds	r0, #16
 801634a:	3210      	adds	r2, #16
 801634c:	3110      	adds	r1, #16
 801634e:	ed11 5a02 	vldr	s10, [r1, #-8]
 8016352:	ed93 7a02 	vldr	s14, [r3, #8]
 8016356:	ed50 6a02 	vldr	s13, [r0, #-8]
 801635a:	edd3 4a03 	vldr	s9, [r3, #12]
 801635e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8016362:	ed10 6a01 	vldr	s12, [r0, #-4]
 8016366:	ee75 5a47 	vsub.f32	s11, s10, s14
 801636a:	ee37 7a05 	vadd.f32	s14, s14, s10
 801636e:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8016372:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8016376:	ee66 5a25 	vmul.f32	s11, s12, s11
 801637a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 801637e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8016382:	ee66 6a85 	vmul.f32	s13, s13, s10
 8016386:	ee26 6a05 	vmul.f32	s12, s12, s10
 801638a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801638e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8016392:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016396:	ee27 7a04 	vmul.f32	s14, s14, s8
 801639a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801639e:	3c01      	subs	r4, #1
 80163a0:	ed02 7a02 	vstr	s14, [r2, #-8]
 80163a4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80163a8:	f1a3 0308 	sub.w	r3, r3, #8
 80163ac:	f101 0108 	add.w	r1, r1, #8
 80163b0:	f100 0008 	add.w	r0, r0, #8
 80163b4:	f102 0208 	add.w	r2, r2, #8
 80163b8:	d1c9      	bne.n	801634e <merge_rfft_f32+0x3a>
 80163ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163be:	4770      	bx	lr

080163c0 <arm_rfft_fast_f32>:
 80163c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c4:	8a05      	ldrh	r5, [r0, #16]
 80163c6:	086d      	lsrs	r5, r5, #1
 80163c8:	8005      	strh	r5, [r0, #0]
 80163ca:	4604      	mov	r4, r0
 80163cc:	4616      	mov	r6, r2
 80163ce:	461d      	mov	r5, r3
 80163d0:	b14b      	cbz	r3, 80163e6 <arm_rfft_fast_f32+0x26>
 80163d2:	f7ff ff9f 	bl	8016314 <merge_rfft_f32>
 80163d6:	462a      	mov	r2, r5
 80163d8:	4631      	mov	r1, r6
 80163da:	4620      	mov	r0, r4
 80163dc:	2301      	movs	r3, #1
 80163de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163e2:	f000 bb33 	b.w	8016a4c <arm_cfft_f32>
 80163e6:	460f      	mov	r7, r1
 80163e8:	461a      	mov	r2, r3
 80163ea:	2301      	movs	r3, #1
 80163ec:	f000 fb2e 	bl	8016a4c <arm_cfft_f32>
 80163f0:	4632      	mov	r2, r6
 80163f2:	4639      	mov	r1, r7
 80163f4:	4620      	mov	r0, r4
 80163f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163fa:	f7ff bf31 	b.w	8016260 <stage_rfft_f32>
 80163fe:	bf00      	nop

08016400 <arm_cfft_radix8by2_f32>:
 8016400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016404:	ed2d 8b08 	vpush	{d8-d11}
 8016408:	4607      	mov	r7, r0
 801640a:	4608      	mov	r0, r1
 801640c:	f8b7 c000 	ldrh.w	ip, [r7]
 8016410:	687a      	ldr	r2, [r7, #4]
 8016412:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8016416:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 801641a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801641e:	f000 80b0 	beq.w	8016582 <arm_cfft_radix8by2_f32+0x182>
 8016422:	008c      	lsls	r4, r1, #2
 8016424:	3410      	adds	r4, #16
 8016426:	f100 0310 	add.w	r3, r0, #16
 801642a:	1906      	adds	r6, r0, r4
 801642c:	3210      	adds	r2, #16
 801642e:	4444      	add	r4, r8
 8016430:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8016434:	f108 0510 	add.w	r5, r8, #16
 8016438:	ed15 2a04 	vldr	s4, [r5, #-16]
 801643c:	ed55 2a03 	vldr	s5, [r5, #-12]
 8016440:	ed54 4a04 	vldr	s9, [r4, #-16]
 8016444:	ed14 4a03 	vldr	s8, [r4, #-12]
 8016448:	ed14 6a02 	vldr	s12, [r4, #-8]
 801644c:	ed54 5a01 	vldr	s11, [r4, #-4]
 8016450:	ed53 3a04 	vldr	s7, [r3, #-16]
 8016454:	ed15 0a02 	vldr	s0, [r5, #-8]
 8016458:	ed55 0a01 	vldr	s1, [r5, #-4]
 801645c:	ed56 6a04 	vldr	s13, [r6, #-16]
 8016460:	ed16 3a03 	vldr	s6, [r6, #-12]
 8016464:	ed13 7a03 	vldr	s14, [r3, #-12]
 8016468:	ed13 5a02 	vldr	s10, [r3, #-8]
 801646c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8016470:	ed16 1a02 	vldr	s2, [r6, #-8]
 8016474:	ed56 1a01 	vldr	s3, [r6, #-4]
 8016478:	ee73 ba82 	vadd.f32	s23, s7, s4
 801647c:	ee37 ba22 	vadd.f32	s22, s14, s5
 8016480:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8016484:	ee33 9a04 	vadd.f32	s18, s6, s8
 8016488:	ee31 8aa5 	vadd.f32	s16, s3, s11
 801648c:	ee75 aa00 	vadd.f32	s21, s10, s0
 8016490:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8016494:	ee71 8a06 	vadd.f32	s17, s2, s12
 8016498:	ed43 ba04 	vstr	s23, [r3, #-16]
 801649c:	ed03 ba03 	vstr	s22, [r3, #-12]
 80164a0:	ed43 aa02 	vstr	s21, [r3, #-8]
 80164a4:	ed03 aa01 	vstr	s20, [r3, #-4]
 80164a8:	ed06 8a01 	vstr	s16, [r6, #-4]
 80164ac:	ed46 9a04 	vstr	s19, [r6, #-16]
 80164b0:	ed06 9a03 	vstr	s18, [r6, #-12]
 80164b4:	ed46 8a02 	vstr	s17, [r6, #-8]
 80164b8:	ee37 7a62 	vsub.f32	s14, s14, s5
 80164bc:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80164c0:	ee34 4a43 	vsub.f32	s8, s8, s6
 80164c4:	ed52 6a03 	vldr	s13, [r2, #-12]
 80164c8:	ed12 3a04 	vldr	s6, [r2, #-16]
 80164cc:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80164d0:	ee27 8a26 	vmul.f32	s16, s14, s13
 80164d4:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80164d8:	ee23 2a83 	vmul.f32	s4, s7, s6
 80164dc:	ee64 4a83 	vmul.f32	s9, s9, s6
 80164e0:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80164e4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80164e8:	ee64 6a26 	vmul.f32	s13, s8, s13
 80164ec:	ee24 4a03 	vmul.f32	s8, s8, s6
 80164f0:	ee37 7a63 	vsub.f32	s14, s14, s7
 80164f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80164f8:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80164fc:	ee32 3a08 	vadd.f32	s6, s4, s16
 8016500:	ed05 7a03 	vstr	s14, [r5, #-12]
 8016504:	ed05 3a04 	vstr	s6, [r5, #-16]
 8016508:	ed04 4a04 	vstr	s8, [r4, #-16]
 801650c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8016510:	ed12 7a01 	vldr	s14, [r2, #-4]
 8016514:	ee76 6a41 	vsub.f32	s13, s12, s2
 8016518:	ee35 5a40 	vsub.f32	s10, s10, s0
 801651c:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8016520:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016524:	ed52 5a02 	vldr	s11, [r2, #-8]
 8016528:	ee67 3a87 	vmul.f32	s7, s15, s14
 801652c:	ee66 4a87 	vmul.f32	s9, s13, s14
 8016530:	ee25 4a25 	vmul.f32	s8, s10, s11
 8016534:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016538:	ee25 5a07 	vmul.f32	s10, s10, s14
 801653c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016540:	ee26 7a07 	vmul.f32	s14, s12, s14
 8016544:	ee26 6a25 	vmul.f32	s12, s12, s11
 8016548:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801654c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8016550:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8016554:	ee37 7a26 	vadd.f32	s14, s14, s13
 8016558:	3310      	adds	r3, #16
 801655a:	4563      	cmp	r3, ip
 801655c:	ed45 5a02 	vstr	s11, [r5, #-8]
 8016560:	f106 0610 	add.w	r6, r6, #16
 8016564:	ed45 7a01 	vstr	s15, [r5, #-4]
 8016568:	f102 0210 	add.w	r2, r2, #16
 801656c:	ed04 6a02 	vstr	s12, [r4, #-8]
 8016570:	ed04 7a01 	vstr	s14, [r4, #-4]
 8016574:	f105 0510 	add.w	r5, r5, #16
 8016578:	f104 0410 	add.w	r4, r4, #16
 801657c:	f47f af5c 	bne.w	8016438 <arm_cfft_radix8by2_f32+0x38>
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	b28c      	uxth	r4, r1
 8016584:	4621      	mov	r1, r4
 8016586:	2302      	movs	r3, #2
 8016588:	f000 fe38 	bl	80171fc <arm_radix8_butterfly_f32>
 801658c:	ecbd 8b08 	vpop	{d8-d11}
 8016590:	4621      	mov	r1, r4
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	4640      	mov	r0, r8
 8016596:	2302      	movs	r3, #2
 8016598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801659c:	f000 be2e 	b.w	80171fc <arm_radix8_butterfly_f32>

080165a0 <arm_cfft_radix8by4_f32>:
 80165a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a4:	ed2d 8b0a 	vpush	{d8-d12}
 80165a8:	b08d      	sub	sp, #52	; 0x34
 80165aa:	460d      	mov	r5, r1
 80165ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80165ae:	8801      	ldrh	r1, [r0, #0]
 80165b0:	6842      	ldr	r2, [r0, #4]
 80165b2:	900a      	str	r0, [sp, #40]	; 0x28
 80165b4:	0849      	lsrs	r1, r1, #1
 80165b6:	008b      	lsls	r3, r1, #2
 80165b8:	18ee      	adds	r6, r5, r3
 80165ba:	18f0      	adds	r0, r6, r3
 80165bc:	edd0 5a00 	vldr	s11, [r0]
 80165c0:	edd5 7a00 	vldr	s15, [r5]
 80165c4:	ed96 7a00 	vldr	s14, [r6]
 80165c8:	edd0 3a01 	vldr	s7, [r0, #4]
 80165cc:	ed96 4a01 	vldr	s8, [r6, #4]
 80165d0:	ed95 5a01 	vldr	s10, [r5, #4]
 80165d4:	9008      	str	r0, [sp, #32]
 80165d6:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80165da:	18c7      	adds	r7, r0, r3
 80165dc:	edd7 4a00 	vldr	s9, [r7]
 80165e0:	ed97 3a01 	vldr	s6, [r7, #4]
 80165e4:	9701      	str	r7, [sp, #4]
 80165e6:	ee77 6a06 	vadd.f32	s13, s14, s12
 80165ea:	462c      	mov	r4, r5
 80165ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80165f0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80165f4:	ee16 ca90 	vmov	ip, s13
 80165f8:	f844 cb08 	str.w	ip, [r4], #8
 80165fc:	ee75 6a23 	vadd.f32	s13, s10, s7
 8016600:	edd6 5a01 	vldr	s11, [r6, #4]
 8016604:	edd7 2a01 	vldr	s5, [r7, #4]
 8016608:	9404      	str	r4, [sp, #16]
 801660a:	ee35 5a63 	vsub.f32	s10, s10, s7
 801660e:	ee74 3a27 	vadd.f32	s7, s8, s15
 8016612:	ee36 6a47 	vsub.f32	s12, s12, s14
 8016616:	ee76 5aa5 	vadd.f32	s11, s13, s11
 801661a:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801661e:	0849      	lsrs	r1, r1, #1
 8016620:	f102 0e08 	add.w	lr, r2, #8
 8016624:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8016628:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801662c:	9109      	str	r1, [sp, #36]	; 0x24
 801662e:	ee35 4a47 	vsub.f32	s8, s10, s14
 8016632:	f1a1 0902 	sub.w	r9, r1, #2
 8016636:	f8cd e00c 	str.w	lr, [sp, #12]
 801663a:	4631      	mov	r1, r6
 801663c:	ee13 ea90 	vmov	lr, s7
 8016640:	ee36 6a64 	vsub.f32	s12, s12, s9
 8016644:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8016648:	4604      	mov	r4, r0
 801664a:	edc5 5a01 	vstr	s11, [r5, #4]
 801664e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8016652:	f841 eb08 	str.w	lr, [r1], #8
 8016656:	ee34 5a24 	vadd.f32	s10, s8, s9
 801665a:	ee16 ea10 	vmov	lr, s12
 801665e:	ed86 5a01 	vstr	s10, [r6, #4]
 8016662:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8016666:	f844 eb08 	str.w	lr, [r4], #8
 801666a:	ee77 7a83 	vadd.f32	s15, s15, s6
 801666e:	edc0 6a01 	vstr	s13, [r0, #4]
 8016672:	9405      	str	r4, [sp, #20]
 8016674:	4604      	mov	r4, r0
 8016676:	ee17 0a90 	vmov	r0, s15
 801667a:	9106      	str	r1, [sp, #24]
 801667c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016680:	f102 0110 	add.w	r1, r2, #16
 8016684:	46bc      	mov	ip, r7
 8016686:	9100      	str	r1, [sp, #0]
 8016688:	f847 0b08 	str.w	r0, [r7], #8
 801668c:	f102 0118 	add.w	r1, r2, #24
 8016690:	ea5f 0059 	movs.w	r0, r9, lsr #1
 8016694:	9102      	str	r1, [sp, #8]
 8016696:	ed8c 7a01 	vstr	s14, [ip, #4]
 801669a:	9007      	str	r0, [sp, #28]
 801669c:	f000 8134 	beq.w	8016908 <arm_cfft_radix8by4_f32+0x368>
 80166a0:	f102 0920 	add.w	r9, r2, #32
 80166a4:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80166a8:	9a01      	ldr	r2, [sp, #4]
 80166aa:	f8dd a000 	ldr.w	sl, [sp]
 80166ae:	3b0c      	subs	r3, #12
 80166b0:	4683      	mov	fp, r0
 80166b2:	4463      	add	r3, ip
 80166b4:	f105 0e10 	add.w	lr, r5, #16
 80166b8:	f1a4 010c 	sub.w	r1, r4, #12
 80166bc:	f104 0510 	add.w	r5, r4, #16
 80166c0:	f1a6 0c0c 	sub.w	ip, r6, #12
 80166c4:	f1a2 040c 	sub.w	r4, r2, #12
 80166c8:	f106 0010 	add.w	r0, r6, #16
 80166cc:	3210      	adds	r2, #16
 80166ce:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80166d2:	ed55 5a02 	vldr	s11, [r5, #-8]
 80166d6:	ed50 7a02 	vldr	s15, [r0, #-8]
 80166da:	ed52 1a02 	vldr	s3, [r2, #-8]
 80166de:	ed55 6a01 	vldr	s13, [r5, #-4]
 80166e2:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80166e6:	ed12 1a01 	vldr	s2, [r2, #-4]
 80166ea:	ed10 8a01 	vldr	s16, [r0, #-4]
 80166ee:	ee35 4a25 	vadd.f32	s8, s10, s11
 80166f2:	ee30 6a26 	vadd.f32	s12, s0, s13
 80166f6:	ee37 7a84 	vadd.f32	s14, s15, s8
 80166fa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80166fe:	ee37 7a21 	vadd.f32	s14, s14, s3
 8016702:	ee75 5a65 	vsub.f32	s11, s10, s11
 8016706:	ed0e 7a02 	vstr	s14, [lr, #-8]
 801670a:	ed10 7a01 	vldr	s14, [r0, #-4]
 801670e:	ed52 6a01 	vldr	s13, [r2, #-4]
 8016712:	ee36 7a07 	vadd.f32	s14, s12, s14
 8016716:	ee78 aa25 	vadd.f32	s21, s16, s11
 801671a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801671e:	ee70 3a67 	vsub.f32	s7, s0, s15
 8016722:	ed0e 7a01 	vstr	s14, [lr, #-4]
 8016726:	ed94 7a02 	vldr	s14, [r4, #8]
 801672a:	ed9c 2a02 	vldr	s4, [ip, #8]
 801672e:	ed91 ba02 	vldr	s22, [r1, #8]
 8016732:	edd3 9a02 	vldr	s19, [r3, #8]
 8016736:	edd4 2a01 	vldr	s5, [r4, #4]
 801673a:	ed9c 9a01 	vldr	s18, [ip, #4]
 801673e:	ed93 5a01 	vldr	s10, [r3, #4]
 8016742:	edd1 0a01 	vldr	s1, [r1, #4]
 8016746:	ee72 6a07 	vadd.f32	s13, s4, s14
 801674a:	ee32 2a47 	vsub.f32	s4, s4, s14
 801674e:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8016752:	ee79 4a22 	vadd.f32	s9, s18, s5
 8016756:	ee38 7aa9 	vadd.f32	s14, s17, s19
 801675a:	ee79 2a62 	vsub.f32	s5, s18, s5
 801675e:	ed8c 7a02 	vstr	s14, [ip, #8]
 8016762:	ed91 7a01 	vldr	s14, [r1, #4]
 8016766:	edd3 8a01 	vldr	s17, [r3, #4]
 801676a:	ee34 7a87 	vadd.f32	s14, s9, s14
 801676e:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8016772:	ee37 7a28 	vadd.f32	s14, s14, s17
 8016776:	ee32 9a60 	vsub.f32	s18, s4, s1
 801677a:	ed8c 7a01 	vstr	s14, [ip, #4]
 801677e:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8016782:	ed1a aa02 	vldr	s20, [sl, #-8]
 8016786:	ee73 8a22 	vadd.f32	s17, s6, s5
 801678a:	ee39 9a05 	vadd.f32	s18, s18, s10
 801678e:	ee7a aac1 	vsub.f32	s21, s21, s2
 8016792:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8016796:	ee2a ca8a 	vmul.f32	s24, s21, s20
 801679a:	ee69 ba07 	vmul.f32	s23, s18, s14
 801679e:	ee6a aa87 	vmul.f32	s21, s21, s14
 80167a2:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80167a6:	ee63 ca87 	vmul.f32	s25, s7, s14
 80167aa:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80167ae:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80167b2:	ee68 8a87 	vmul.f32	s17, s17, s14
 80167b6:	ee73 3aea 	vsub.f32	s7, s7, s21
 80167ba:	ee78 8a89 	vadd.f32	s17, s17, s18
 80167be:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80167c2:	ee3b aaca 	vsub.f32	s20, s23, s20
 80167c6:	ee34 4a67 	vsub.f32	s8, s8, s15
 80167ca:	ee76 6acb 	vsub.f32	s13, s13, s22
 80167ce:	ee36 6a48 	vsub.f32	s12, s12, s16
 80167d2:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80167d6:	ed00 7a02 	vstr	s14, [r0, #-8]
 80167da:	ed40 3a01 	vstr	s7, [r0, #-4]
 80167de:	edc1 8a01 	vstr	s17, [r1, #4]
 80167e2:	ed81 aa02 	vstr	s20, [r1, #8]
 80167e6:	ed59 3a04 	vldr	s7, [r9, #-16]
 80167ea:	ee36 7ae9 	vsub.f32	s14, s13, s19
 80167ee:	ee74 4ac5 	vsub.f32	s9, s9, s10
 80167f2:	ed59 6a03 	vldr	s13, [r9, #-12]
 80167f6:	ee34 4a61 	vsub.f32	s8, s8, s3
 80167fa:	ee36 6a41 	vsub.f32	s12, s12, s2
 80167fe:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8016802:	ee66 9a26 	vmul.f32	s19, s12, s13
 8016806:	ee24 9a23 	vmul.f32	s18, s8, s7
 801680a:	ee26 6a23 	vmul.f32	s12, s12, s7
 801680e:	ee24 4a26 	vmul.f32	s8, s8, s13
 8016812:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016816:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801681a:	ee64 4aa3 	vmul.f32	s9, s9, s7
 801681e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8016822:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016826:	ee38 4ae6 	vsub.f32	s8, s17, s13
 801682a:	ee79 3a29 	vadd.f32	s7, s18, s19
 801682e:	ee75 6a60 	vsub.f32	s13, s10, s1
 8016832:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8016836:	ee77 7a80 	vadd.f32	s15, s15, s0
 801683a:	ed45 3a02 	vstr	s7, [r5, #-8]
 801683e:	ed05 6a01 	vstr	s12, [r5, #-4]
 8016842:	ed84 7a01 	vstr	s14, [r4, #4]
 8016846:	ed84 4a02 	vstr	s8, [r4, #8]
 801684a:	ee35 6a81 	vadd.f32	s12, s11, s2
 801684e:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8016852:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8016856:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 801685a:	ee33 3a62 	vsub.f32	s6, s6, s5
 801685e:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8016862:	ee67 2a26 	vmul.f32	s5, s14, s13
 8016866:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801686a:	ee26 5a25 	vmul.f32	s10, s12, s11
 801686e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016872:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016876:	ee27 7a25 	vmul.f32	s14, s14, s11
 801687a:	ee63 6a26 	vmul.f32	s13, s6, s13
 801687e:	ee23 3a25 	vmul.f32	s6, s6, s11
 8016882:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016886:	ee75 5a24 	vadd.f32	s11, s10, s9
 801688a:	ee32 3ac3 	vsub.f32	s6, s5, s6
 801688e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8016892:	f1bb 0b01 	subs.w	fp, fp, #1
 8016896:	ed42 5a02 	vstr	s11, [r2, #-8]
 801689a:	ed42 7a01 	vstr	s15, [r2, #-4]
 801689e:	f10e 0e08 	add.w	lr, lr, #8
 80168a2:	ed83 3a02 	vstr	s6, [r3, #8]
 80168a6:	ed83 7a01 	vstr	s14, [r3, #4]
 80168aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80168ae:	f10a 0a08 	add.w	sl, sl, #8
 80168b2:	f100 0008 	add.w	r0, r0, #8
 80168b6:	f1a1 0108 	sub.w	r1, r1, #8
 80168ba:	f109 0910 	add.w	r9, r9, #16
 80168be:	f105 0508 	add.w	r5, r5, #8
 80168c2:	f1a4 0408 	sub.w	r4, r4, #8
 80168c6:	f108 0818 	add.w	r8, r8, #24
 80168ca:	f102 0208 	add.w	r2, r2, #8
 80168ce:	f1a3 0308 	sub.w	r3, r3, #8
 80168d2:	f47f aefc 	bne.w	80166ce <arm_cfft_radix8by4_f32+0x12e>
 80168d6:	9907      	ldr	r1, [sp, #28]
 80168d8:	9800      	ldr	r0, [sp, #0]
 80168da:	00cb      	lsls	r3, r1, #3
 80168dc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80168e0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80168e4:	9100      	str	r1, [sp, #0]
 80168e6:	9904      	ldr	r1, [sp, #16]
 80168e8:	4419      	add	r1, r3
 80168ea:	9104      	str	r1, [sp, #16]
 80168ec:	9903      	ldr	r1, [sp, #12]
 80168ee:	4419      	add	r1, r3
 80168f0:	9103      	str	r1, [sp, #12]
 80168f2:	9906      	ldr	r1, [sp, #24]
 80168f4:	4419      	add	r1, r3
 80168f6:	9106      	str	r1, [sp, #24]
 80168f8:	9905      	ldr	r1, [sp, #20]
 80168fa:	441f      	add	r7, r3
 80168fc:	4419      	add	r1, r3
 80168fe:	9b02      	ldr	r3, [sp, #8]
 8016900:	9105      	str	r1, [sp, #20]
 8016902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016906:	9302      	str	r3, [sp, #8]
 8016908:	9904      	ldr	r1, [sp, #16]
 801690a:	9805      	ldr	r0, [sp, #20]
 801690c:	ed91 4a00 	vldr	s8, [r1]
 8016910:	edd0 6a00 	vldr	s13, [r0]
 8016914:	9b06      	ldr	r3, [sp, #24]
 8016916:	ed97 3a00 	vldr	s6, [r7]
 801691a:	edd3 7a00 	vldr	s15, [r3]
 801691e:	edd0 4a01 	vldr	s9, [r0, #4]
 8016922:	edd1 3a01 	vldr	s7, [r1, #4]
 8016926:	ed97 2a01 	vldr	s4, [r7, #4]
 801692a:	ed93 7a01 	vldr	s14, [r3, #4]
 801692e:	9a03      	ldr	r2, [sp, #12]
 8016930:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8016934:	ee34 6a26 	vadd.f32	s12, s8, s13
 8016938:	ee73 5aa4 	vadd.f32	s11, s7, s9
 801693c:	ee37 5a86 	vadd.f32	s10, s15, s12
 8016940:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8016944:	ee35 5a03 	vadd.f32	s10, s10, s6
 8016948:	ee74 6a66 	vsub.f32	s13, s8, s13
 801694c:	ed81 5a00 	vstr	s10, [r1]
 8016950:	ed93 5a01 	vldr	s10, [r3, #4]
 8016954:	edd7 4a01 	vldr	s9, [r7, #4]
 8016958:	ee35 5a85 	vadd.f32	s10, s11, s10
 801695c:	ee37 4a26 	vadd.f32	s8, s14, s13
 8016960:	ee35 5a24 	vadd.f32	s10, s10, s9
 8016964:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8016968:	ed81 5a01 	vstr	s10, [r1, #4]
 801696c:	edd2 1a00 	vldr	s3, [r2]
 8016970:	edd2 2a01 	vldr	s5, [r2, #4]
 8016974:	ee34 5a83 	vadd.f32	s10, s9, s6
 8016978:	ee34 4a42 	vsub.f32	s8, s8, s4
 801697c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8016980:	ee64 4a21 	vmul.f32	s9, s8, s3
 8016984:	ee24 4a22 	vmul.f32	s8, s8, s5
 8016988:	ee65 2a22 	vmul.f32	s5, s10, s5
 801698c:	ee25 5a21 	vmul.f32	s10, s10, s3
 8016990:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8016994:	ee35 5a44 	vsub.f32	s10, s10, s8
 8016998:	edc3 2a00 	vstr	s5, [r3]
 801699c:	ed83 5a01 	vstr	s10, [r3, #4]
 80169a0:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80169a4:	9b00      	ldr	r3, [sp, #0]
 80169a6:	ee36 6a43 	vsub.f32	s12, s12, s6
 80169aa:	ed93 4a01 	vldr	s8, [r3, #4]
 80169ae:	ed93 5a00 	vldr	s10, [r3]
 80169b2:	9b02      	ldr	r3, [sp, #8]
 80169b4:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80169b8:	ee66 4a05 	vmul.f32	s9, s12, s10
 80169bc:	ee25 5a85 	vmul.f32	s10, s11, s10
 80169c0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80169c4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80169c8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80169cc:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80169d0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80169d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80169d8:	ed80 6a01 	vstr	s12, [r0, #4]
 80169dc:	edc0 5a00 	vstr	s11, [r0]
 80169e0:	edd3 5a01 	vldr	s11, [r3, #4]
 80169e4:	edd3 6a00 	vldr	s13, [r3]
 80169e8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80169ec:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80169f0:	ee27 6a26 	vmul.f32	s12, s14, s13
 80169f4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80169f8:	ee27 7a25 	vmul.f32	s14, s14, s11
 80169fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016a00:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016a04:	ee76 7a27 	vadd.f32	s15, s12, s15
 8016a08:	ed87 7a01 	vstr	s14, [r7, #4]
 8016a0c:	edc7 7a00 	vstr	s15, [r7]
 8016a10:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8016a14:	4621      	mov	r1, r4
 8016a16:	686a      	ldr	r2, [r5, #4]
 8016a18:	2304      	movs	r3, #4
 8016a1a:	f000 fbef 	bl	80171fc <arm_radix8_butterfly_f32>
 8016a1e:	4630      	mov	r0, r6
 8016a20:	4621      	mov	r1, r4
 8016a22:	686a      	ldr	r2, [r5, #4]
 8016a24:	2304      	movs	r3, #4
 8016a26:	f000 fbe9 	bl	80171fc <arm_radix8_butterfly_f32>
 8016a2a:	9808      	ldr	r0, [sp, #32]
 8016a2c:	686a      	ldr	r2, [r5, #4]
 8016a2e:	4621      	mov	r1, r4
 8016a30:	2304      	movs	r3, #4
 8016a32:	f000 fbe3 	bl	80171fc <arm_radix8_butterfly_f32>
 8016a36:	686a      	ldr	r2, [r5, #4]
 8016a38:	9801      	ldr	r0, [sp, #4]
 8016a3a:	4621      	mov	r1, r4
 8016a3c:	2304      	movs	r3, #4
 8016a3e:	b00d      	add	sp, #52	; 0x34
 8016a40:	ecbd 8b0a 	vpop	{d8-d12}
 8016a44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a48:	f000 bbd8 	b.w	80171fc <arm_radix8_butterfly_f32>

08016a4c <arm_cfft_f32>:
 8016a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a50:	2a01      	cmp	r2, #1
 8016a52:	4606      	mov	r6, r0
 8016a54:	4617      	mov	r7, r2
 8016a56:	460c      	mov	r4, r1
 8016a58:	4698      	mov	r8, r3
 8016a5a:	8805      	ldrh	r5, [r0, #0]
 8016a5c:	d056      	beq.n	8016b0c <arm_cfft_f32+0xc0>
 8016a5e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8016a62:	d063      	beq.n	8016b2c <arm_cfft_f32+0xe0>
 8016a64:	d916      	bls.n	8016a94 <arm_cfft_f32+0x48>
 8016a66:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8016a6a:	d01a      	beq.n	8016aa2 <arm_cfft_f32+0x56>
 8016a6c:	d947      	bls.n	8016afe <arm_cfft_f32+0xb2>
 8016a6e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8016a72:	d05b      	beq.n	8016b2c <arm_cfft_f32+0xe0>
 8016a74:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8016a78:	d105      	bne.n	8016a86 <arm_cfft_f32+0x3a>
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	6872      	ldr	r2, [r6, #4]
 8016a7e:	4629      	mov	r1, r5
 8016a80:	4620      	mov	r0, r4
 8016a82:	f000 fbbb 	bl	80171fc <arm_radix8_butterfly_f32>
 8016a86:	f1b8 0f00 	cmp.w	r8, #0
 8016a8a:	d111      	bne.n	8016ab0 <arm_cfft_f32+0x64>
 8016a8c:	2f01      	cmp	r7, #1
 8016a8e:	d016      	beq.n	8016abe <arm_cfft_f32+0x72>
 8016a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a94:	2d20      	cmp	r5, #32
 8016a96:	d049      	beq.n	8016b2c <arm_cfft_f32+0xe0>
 8016a98:	d935      	bls.n	8016b06 <arm_cfft_f32+0xba>
 8016a9a:	2d40      	cmp	r5, #64	; 0x40
 8016a9c:	d0ed      	beq.n	8016a7a <arm_cfft_f32+0x2e>
 8016a9e:	2d80      	cmp	r5, #128	; 0x80
 8016aa0:	d1f1      	bne.n	8016a86 <arm_cfft_f32+0x3a>
 8016aa2:	4621      	mov	r1, r4
 8016aa4:	4630      	mov	r0, r6
 8016aa6:	f7ff fcab 	bl	8016400 <arm_cfft_radix8by2_f32>
 8016aaa:	f1b8 0f00 	cmp.w	r8, #0
 8016aae:	d0ed      	beq.n	8016a8c <arm_cfft_f32+0x40>
 8016ab0:	68b2      	ldr	r2, [r6, #8]
 8016ab2:	89b1      	ldrh	r1, [r6, #12]
 8016ab4:	4620      	mov	r0, r4
 8016ab6:	f000 f975 	bl	8016da4 <arm_bitreversal_32>
 8016aba:	2f01      	cmp	r7, #1
 8016abc:	d1e8      	bne.n	8016a90 <arm_cfft_f32+0x44>
 8016abe:	ee07 5a90 	vmov	s15, r5
 8016ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016aca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8016ace:	2d00      	cmp	r5, #0
 8016ad0:	d0de      	beq.n	8016a90 <arm_cfft_f32+0x44>
 8016ad2:	f104 0108 	add.w	r1, r4, #8
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	3301      	adds	r3, #1
 8016ada:	429d      	cmp	r5, r3
 8016adc:	f101 0108 	add.w	r1, r1, #8
 8016ae0:	ed11 7a04 	vldr	s14, [r1, #-16]
 8016ae4:	ed51 7a03 	vldr	s15, [r1, #-12]
 8016ae8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016aec:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016af0:	ed01 7a04 	vstr	s14, [r1, #-16]
 8016af4:	ed41 7a03 	vstr	s15, [r1, #-12]
 8016af8:	d1ee      	bne.n	8016ad8 <arm_cfft_f32+0x8c>
 8016afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016afe:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8016b02:	d0ba      	beq.n	8016a7a <arm_cfft_f32+0x2e>
 8016b04:	e7bf      	b.n	8016a86 <arm_cfft_f32+0x3a>
 8016b06:	2d10      	cmp	r5, #16
 8016b08:	d0cb      	beq.n	8016aa2 <arm_cfft_f32+0x56>
 8016b0a:	e7bc      	b.n	8016a86 <arm_cfft_f32+0x3a>
 8016b0c:	b19d      	cbz	r5, 8016b36 <arm_cfft_f32+0xea>
 8016b0e:	f101 030c 	add.w	r3, r1, #12
 8016b12:	2200      	movs	r2, #0
 8016b14:	ed53 7a02 	vldr	s15, [r3, #-8]
 8016b18:	3201      	adds	r2, #1
 8016b1a:	eef1 7a67 	vneg.f32	s15, s15
 8016b1e:	4295      	cmp	r5, r2
 8016b20:	ed43 7a02 	vstr	s15, [r3, #-8]
 8016b24:	f103 0308 	add.w	r3, r3, #8
 8016b28:	d1f4      	bne.n	8016b14 <arm_cfft_f32+0xc8>
 8016b2a:	e798      	b.n	8016a5e <arm_cfft_f32+0x12>
 8016b2c:	4621      	mov	r1, r4
 8016b2e:	4630      	mov	r0, r6
 8016b30:	f7ff fd36 	bl	80165a0 <arm_cfft_radix8by4_f32>
 8016b34:	e7a7      	b.n	8016a86 <arm_cfft_f32+0x3a>
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d0aa      	beq.n	8016a90 <arm_cfft_f32+0x44>
 8016b3a:	e7b9      	b.n	8016ab0 <arm_cfft_f32+0x64>

08016b3c <arm_dct4_init_f32>:
 8016b3c:	b570      	push	{r4, r5, r6, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	460c      	mov	r4, r1
 8016b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b46:	4611      	mov	r1, r2
 8016b48:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8016b4c:	ed80 0a01 	vstr	s0, [r0, #4]
 8016b50:	e9c0 4104 	strd	r4, r1, [r0, #16]
 8016b54:	8003      	strh	r3, [r0, #0]
 8016b56:	8042      	strh	r2, [r0, #2]
 8016b58:	d020      	beq.n	8016b9c <arm_dct4_init_f32+0x60>
 8016b5a:	d914      	bls.n	8016b86 <arm_dct4_init_f32+0x4a>
 8016b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016b60:	d022      	beq.n	8016ba8 <arm_dct4_init_f32+0x6c>
 8016b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016b66:	d116      	bne.n	8016b96 <arm_dct4_init_f32+0x5a>
 8016b68:	4d12      	ldr	r5, [pc, #72]	; (8016bb4 <arm_dct4_init_f32+0x78>)
 8016b6a:	4a13      	ldr	r2, [pc, #76]	; (8016bb8 <arm_dct4_init_f32+0x7c>)
 8016b6c:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8016b70:	2500      	movs	r5, #0
 8016b72:	2601      	movs	r6, #1
 8016b74:	461a      	mov	r2, r3
 8016b76:	4620      	mov	r0, r4
 8016b78:	9600      	str	r6, [sp, #0]
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	f000 fdfe 	bl	801777c <arm_rfft_init_f32>
 8016b80:	4628      	mov	r0, r5
 8016b82:	b002      	add	sp, #8
 8016b84:	bd70      	pop	{r4, r5, r6, pc}
 8016b86:	2b80      	cmp	r3, #128	; 0x80
 8016b88:	d105      	bne.n	8016b96 <arm_dct4_init_f32+0x5a>
 8016b8a:	4d0c      	ldr	r5, [pc, #48]	; (8016bbc <arm_dct4_init_f32+0x80>)
 8016b8c:	4a0c      	ldr	r2, [pc, #48]	; (8016bc0 <arm_dct4_init_f32+0x84>)
 8016b8e:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8016b92:	2500      	movs	r5, #0
 8016b94:	e7ed      	b.n	8016b72 <arm_dct4_init_f32+0x36>
 8016b96:	f04f 35ff 	mov.w	r5, #4294967295
 8016b9a:	e7ea      	b.n	8016b72 <arm_dct4_init_f32+0x36>
 8016b9c:	4d09      	ldr	r5, [pc, #36]	; (8016bc4 <arm_dct4_init_f32+0x88>)
 8016b9e:	4a0a      	ldr	r2, [pc, #40]	; (8016bc8 <arm_dct4_init_f32+0x8c>)
 8016ba0:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8016ba4:	2500      	movs	r5, #0
 8016ba6:	e7e4      	b.n	8016b72 <arm_dct4_init_f32+0x36>
 8016ba8:	4d08      	ldr	r5, [pc, #32]	; (8016bcc <arm_dct4_init_f32+0x90>)
 8016baa:	4a09      	ldr	r2, [pc, #36]	; (8016bd0 <arm_dct4_init_f32+0x94>)
 8016bac:	e9c0 5202 	strd	r5, r2, [r0, #8]
 8016bb0:	2500      	movs	r5, #0
 8016bb2:	e7de      	b.n	8016b72 <arm_dct4_init_f32+0x36>
 8016bb4:	0802d788 	.word	0x0802d788
 8016bb8:	08043e70 	.word	0x08043e70
 8016bbc:	08028388 	.word	0x08028388
 8016bc0:	08041470 	.word	0x08041470
 8016bc4:	0802c788 	.word	0x0802c788
 8016bc8:	08043670 	.word	0x08043670
 8016bcc:	08028788 	.word	0x08028788
 8016bd0:	08041670 	.word	0x08041670

08016bd4 <arm_dct4_f32>:
 8016bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd8:	4617      	mov	r7, r2
 8016bda:	4606      	mov	r6, r0
 8016bdc:	68c4      	ldr	r4, [r0, #12]
 8016bde:	8802      	ldrh	r2, [r0, #0]
 8016be0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8016be4:	460d      	mov	r5, r1
 8016be6:	4638      	mov	r0, r7
 8016be8:	4639      	mov	r1, r7
 8016bea:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8016bee:	f000 fa0d 	bl	801700c <arm_scale_f32>
 8016bf2:	4621      	mov	r1, r4
 8016bf4:	8833      	ldrh	r3, [r6, #0]
 8016bf6:	463a      	mov	r2, r7
 8016bf8:	4638      	mov	r0, r7
 8016bfa:	f000 fa4b 	bl	8017094 <arm_mult_f32>
 8016bfe:	8832      	ldrh	r2, [r6, #0]
 8016c00:	8874      	ldrh	r4, [r6, #2]
 8016c02:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8016c06:	f105 0110 	add.w	r1, r5, #16
 8016c0a:	3a14      	subs	r2, #20
 8016c0c:	08a4      	lsrs	r4, r4, #2
 8016c0e:	4608      	mov	r0, r1
 8016c10:	f107 0320 	add.w	r3, r7, #32
 8016c14:	f853 cc20 	ldr.w	ip, [r3, #-32]
 8016c18:	f840 cc10 	str.w	ip, [r0, #-16]
 8016c1c:	f853 cc1c 	ldr.w	ip, [r3, #-28]
 8016c20:	f8c2 c010 	str.w	ip, [r2, #16]
 8016c24:	f853 cc18 	ldr.w	ip, [r3, #-24]
 8016c28:	f840 cc0c 	str.w	ip, [r0, #-12]
 8016c2c:	f853 cc14 	ldr.w	ip, [r3, #-20]
 8016c30:	f8c2 c00c 	str.w	ip, [r2, #12]
 8016c34:	f853 cc10 	ldr.w	ip, [r3, #-16]
 8016c38:	f840 cc08 	str.w	ip, [r0, #-8]
 8016c3c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8016c40:	f8c2 c008 	str.w	ip, [r2, #8]
 8016c44:	f853 cc08 	ldr.w	ip, [r3, #-8]
 8016c48:	f840 cc04 	str.w	ip, [r0, #-4]
 8016c4c:	f853 cc04 	ldr.w	ip, [r3, #-4]
 8016c50:	f8c2 c004 	str.w	ip, [r2, #4]
 8016c54:	3c01      	subs	r4, #1
 8016c56:	f100 0010 	add.w	r0, r0, #16
 8016c5a:	f103 0320 	add.w	r3, r3, #32
 8016c5e:	f1a2 0210 	sub.w	r2, r2, #16
 8016c62:	d1d7      	bne.n	8016c14 <arm_dct4_f32+0x40>
 8016c64:	8832      	ldrh	r2, [r6, #0]
 8016c66:	f107 0410 	add.w	r4, r7, #16
 8016c6a:	0892      	lsrs	r2, r2, #2
 8016c6c:	4623      	mov	r3, r4
 8016c6e:	f851 0c10 	ldr.w	r0, [r1, #-16]
 8016c72:	f843 0c10 	str.w	r0, [r3, #-16]
 8016c76:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8016c7a:	f843 0c0c 	str.w	r0, [r3, #-12]
 8016c7e:	f851 0c08 	ldr.w	r0, [r1, #-8]
 8016c82:	f843 0c08 	str.w	r0, [r3, #-8]
 8016c86:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016c8a:	f843 0c04 	str.w	r0, [r3, #-4]
 8016c8e:	3a01      	subs	r2, #1
 8016c90:	f101 0110 	add.w	r1, r1, #16
 8016c94:	f103 0310 	add.w	r3, r3, #16
 8016c98:	d1e9      	bne.n	8016c6e <arm_dct4_f32+0x9a>
 8016c9a:	462a      	mov	r2, r5
 8016c9c:	4639      	mov	r1, r7
 8016c9e:	6930      	ldr	r0, [r6, #16]
 8016ca0:	f000 fe22 	bl	80178e8 <arm_rfft_f32>
 8016ca4:	4641      	mov	r1, r8
 8016ca6:	8833      	ldrh	r3, [r6, #0]
 8016ca8:	462a      	mov	r2, r5
 8016caa:	4628      	mov	r0, r5
 8016cac:	f000 f89a 	bl	8016de4 <arm_cmplx_mult_cmplx_f32>
 8016cb0:	edd5 7a00 	vldr	s15, [r5]
 8016cb4:	8830      	ldrh	r0, [r6, #0]
 8016cb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016cba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016cbe:	463b      	mov	r3, r7
 8016cc0:	ee17 2a90 	vmov	r2, s15
 8016cc4:	3801      	subs	r0, #1
 8016cc6:	0880      	lsrs	r0, r0, #2
 8016cc8:	f843 2b14 	str.w	r2, [r3], #20
 8016ccc:	f105 0c08 	add.w	ip, r5, #8
 8016cd0:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8016cd4:	4601      	mov	r1, r0
 8016cd6:	ed12 7a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
 8016cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016cde:	3901      	subs	r1, #1
 8016ce0:	ed43 7a04 	vstr	s15, [r3, #-16]
 8016ce4:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 8016ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016cec:	f102 0220 	add.w	r2, r2, #32
 8016cf0:	ed03 7a03 	vstr	s14, [r3, #-12]
 8016cf4:	ed52 7a0c 	vldr	s15, [r2, #-48]	; 0xffffffd0
 8016cf8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8016cfc:	f103 0310 	add.w	r3, r3, #16
 8016d00:	ed03 7a06 	vstr	s14, [r3, #-24]	; 0xffffffe8
 8016d04:	ed52 7a0a 	vldr	s15, [r2, #-40]	; 0xffffffd8
 8016d08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d0c:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8016d10:	d1e1      	bne.n	8016cd6 <arm_dct4_f32+0x102>
 8016d12:	8833      	ldrh	r3, [r6, #0]
 8016d14:	1e5a      	subs	r2, r3, #1
 8016d16:	eb07 1700 	add.w	r7, r7, r0, lsl #4
 8016d1a:	f012 0203 	ands.w	r2, r2, #3
 8016d1e:	f107 0704 	add.w	r7, r7, #4
 8016d22:	eb0c 1040 	add.w	r0, ip, r0, lsl #5
 8016d26:	d016      	beq.n	8016d56 <arm_dct4_f32+0x182>
 8016d28:	ed90 7a00 	vldr	s14, [r0]
 8016d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d30:	3a01      	subs	r2, #1
 8016d32:	edc7 7a00 	vstr	s15, [r7]
 8016d36:	d00d      	beq.n	8016d54 <arm_dct4_f32+0x180>
 8016d38:	ed90 7a02 	vldr	s14, [r0, #8]
 8016d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d40:	2a01      	cmp	r2, #1
 8016d42:	edc7 7a01 	vstr	s15, [r7, #4]
 8016d46:	d005      	beq.n	8016d54 <arm_dct4_f32+0x180>
 8016d48:	ed90 7a04 	vldr	s14, [r0, #16]
 8016d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016d50:	edc7 7a02 	vstr	s15, [r7, #8]
 8016d54:	8833      	ldrh	r3, [r6, #0]
 8016d56:	089b      	lsrs	r3, r3, #2
 8016d58:	edd6 5a01 	vldr	s11, [r6, #4]
 8016d5c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8016d60:	ed54 6a03 	vldr	s13, [r4, #-12]
 8016d64:	ed14 7a02 	vldr	s14, [r4, #-8]
 8016d68:	ed54 7a01 	vldr	s15, [r4, #-4]
 8016d6c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8016d70:	3b01      	subs	r3, #1
 8016d72:	ed04 6a04 	vstr	s12, [r4, #-16]
 8016d76:	ed96 6a01 	vldr	s12, [r6, #4]
 8016d7a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016d7e:	f104 0410 	add.w	r4, r4, #16
 8016d82:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8016d86:	edd6 6a01 	vldr	s13, [r6, #4]
 8016d8a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016d8e:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 8016d92:	ed96 7a01 	vldr	s14, [r6, #4]
 8016d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d9a:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8016d9e:	d1db      	bne.n	8016d58 <arm_dct4_f32+0x184>
 8016da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016da4 <arm_bitreversal_32>:
 8016da4:	b1e9      	cbz	r1, 8016de2 <arm_bitreversal_32+0x3e>
 8016da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016da8:	2500      	movs	r5, #0
 8016daa:	f102 0e02 	add.w	lr, r2, #2
 8016dae:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8016db2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8016db6:	08a4      	lsrs	r4, r4, #2
 8016db8:	089b      	lsrs	r3, r3, #2
 8016dba:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8016dbe:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8016dc2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8016dc6:	00a6      	lsls	r6, r4, #2
 8016dc8:	009b      	lsls	r3, r3, #2
 8016dca:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8016dce:	3304      	adds	r3, #4
 8016dd0:	1d34      	adds	r4, r6, #4
 8016dd2:	3502      	adds	r5, #2
 8016dd4:	58c6      	ldr	r6, [r0, r3]
 8016dd6:	5907      	ldr	r7, [r0, r4]
 8016dd8:	50c7      	str	r7, [r0, r3]
 8016dda:	428d      	cmp	r5, r1
 8016ddc:	5106      	str	r6, [r0, r4]
 8016dde:	d3e6      	bcc.n	8016dae <arm_bitreversal_32+0xa>
 8016de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016de2:	4770      	bx	lr

08016de4 <arm_cmplx_mult_cmplx_f32>:
 8016de4:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8016de8:	b4f0      	push	{r4, r5, r6, r7}
 8016dea:	d073      	beq.n	8016ed4 <arm_cmplx_mult_cmplx_f32+0xf0>
 8016dec:	f100 0620 	add.w	r6, r0, #32
 8016df0:	f101 0520 	add.w	r5, r1, #32
 8016df4:	f102 0420 	add.w	r4, r2, #32
 8016df8:	4667      	mov	r7, ip
 8016dfa:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8016dfe:	ed56 7a08 	vldr	s15, [r6, #-32]	; 0xffffffe0
 8016e02:	ed15 7a08 	vldr	s14, [r5, #-32]	; 0xffffffe0
 8016e06:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8016e0a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016e0e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016e12:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016e16:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016e1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e1e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016e22:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 8016e26:	ed44 6a08 	vstr	s13, [r4, #-32]	; 0xffffffe0
 8016e2a:	ed55 5a05 	vldr	s11, [r5, #-20]	; 0xffffffec
 8016e2e:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8016e32:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 8016e36:	ed56 6a05 	vldr	s13, [r6, #-20]	; 0xffffffec
 8016e3a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016e3e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016e42:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016e46:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016e4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e4e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016e52:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8016e56:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8016e5a:	ed55 5a03 	vldr	s11, [r5, #-12]
 8016e5e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8016e62:	ed15 7a04 	vldr	s14, [r5, #-16]
 8016e66:	ed56 6a03 	vldr	s13, [r6, #-12]
 8016e6a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016e6e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016e72:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016e76:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016e7e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016e82:	ed44 7a03 	vstr	s15, [r4, #-12]
 8016e86:	ed44 6a04 	vstr	s13, [r4, #-16]
 8016e8a:	ed56 7a02 	vldr	s15, [r6, #-8]
 8016e8e:	ed15 7a02 	vldr	s14, [r5, #-8]
 8016e92:	ed56 6a01 	vldr	s13, [r6, #-4]
 8016e96:	ed55 5a01 	vldr	s11, [r5, #-4]
 8016e9a:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016e9e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016ea2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016ea6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016eae:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016eb2:	3f01      	subs	r7, #1
 8016eb4:	ed44 6a02 	vstr	s13, [r4, #-8]
 8016eb8:	ed44 7a01 	vstr	s15, [r4, #-4]
 8016ebc:	f106 0620 	add.w	r6, r6, #32
 8016ec0:	f105 0520 	add.w	r5, r5, #32
 8016ec4:	f104 0420 	add.w	r4, r4, #32
 8016ec8:	d197      	bne.n	8016dfa <arm_cmplx_mult_cmplx_f32+0x16>
 8016eca:	ea4f 144c 	mov.w	r4, ip, lsl #5
 8016ece:	4420      	add	r0, r4
 8016ed0:	4421      	add	r1, r4
 8016ed2:	4422      	add	r2, r4
 8016ed4:	f013 0303 	ands.w	r3, r3, #3
 8016ed8:	d04b      	beq.n	8016f72 <arm_cmplx_mult_cmplx_f32+0x18e>
 8016eda:	edd0 5a00 	vldr	s11, [r0]
 8016ede:	edd1 7a00 	vldr	s15, [r1]
 8016ee2:	edd0 6a01 	vldr	s13, [r0, #4]
 8016ee6:	ed91 7a01 	vldr	s14, [r1, #4]
 8016eea:	ee27 6aa5 	vmul.f32	s12, s15, s11
 8016eee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016ef2:	ee67 6a26 	vmul.f32	s13, s14, s13
 8016ef6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8016efa:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f02:	3b01      	subs	r3, #1
 8016f04:	edc2 6a00 	vstr	s13, [r2]
 8016f08:	edc2 7a01 	vstr	s15, [r2, #4]
 8016f0c:	d031      	beq.n	8016f72 <arm_cmplx_mult_cmplx_f32+0x18e>
 8016f0e:	edd0 7a02 	vldr	s15, [r0, #8]
 8016f12:	ed91 7a02 	vldr	s14, [r1, #8]
 8016f16:	edd0 6a03 	vldr	s13, [r0, #12]
 8016f1a:	edd1 5a03 	vldr	s11, [r1, #12]
 8016f1e:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016f22:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016f26:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016f2a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f32:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	edc2 6a02 	vstr	s13, [r2, #8]
 8016f3c:	edc2 7a03 	vstr	s15, [r2, #12]
 8016f40:	d017      	beq.n	8016f72 <arm_cmplx_mult_cmplx_f32+0x18e>
 8016f42:	edd0 7a04 	vldr	s15, [r0, #16]
 8016f46:	ed91 7a04 	vldr	s14, [r1, #16]
 8016f4a:	edd0 6a05 	vldr	s13, [r0, #20]
 8016f4e:	edd1 5a05 	vldr	s11, [r1, #20]
 8016f52:	ee27 6a87 	vmul.f32	s12, s15, s14
 8016f56:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016f5a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8016f5e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016f62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f66:	ee76 6a66 	vsub.f32	s13, s12, s13
 8016f6a:	edc2 7a05 	vstr	s15, [r2, #20]
 8016f6e:	edc2 6a04 	vstr	s13, [r2, #16]
 8016f72:	bcf0      	pop	{r4, r5, r6, r7}
 8016f74:	4770      	bx	lr
 8016f76:	bf00      	nop

08016f78 <arm_cos_f32>:
 8016f78:	eddf 7a21 	vldr	s15, [pc, #132]	; 8017000 <arm_cos_f32+0x88>
 8016f7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016f80:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016f84:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016f88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f90:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016f94:	d504      	bpl.n	8016fa0 <arm_cos_f32+0x28>
 8016f96:	ee17 3a90 	vmov	r3, s15
 8016f9a:	3b01      	subs	r3, #1
 8016f9c:	ee07 3a90 	vmov	s15, r3
 8016fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fa4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8017004 <arm_cos_f32+0x8c>
 8016fa8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016fac:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016fb0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016fb4:	ee17 3a90 	vmov	r3, s15
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fbe:	d21a      	bcs.n	8016ff6 <arm_cos_f32+0x7e>
 8016fc0:	ee07 3a90 	vmov	s15, r3
 8016fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016fc8:	1c59      	adds	r1, r3, #1
 8016fca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016fce:	4a0e      	ldr	r2, [pc, #56]	; (8017008 <arm_cos_f32+0x90>)
 8016fd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016fd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016fd8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016fdc:	ed93 7a00 	vldr	s14, [r3]
 8016fe0:	edd2 6a00 	vldr	s13, [r2]
 8016fe4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016fe8:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016ff0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016ff4:	4770      	bx	lr
 8016ff6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016ffa:	2101      	movs	r1, #1
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	e7e6      	b.n	8016fce <arm_cos_f32+0x56>
 8017000:	3e22f983 	.word	0x3e22f983
 8017004:	44000000 	.word	0x44000000
 8017008:	0805be70 	.word	0x0805be70

0801700c <arm_scale_f32>:
 801700c:	b470      	push	{r4, r5, r6}
 801700e:	0896      	lsrs	r6, r2, #2
 8017010:	d025      	beq.n	801705e <arm_scale_f32+0x52>
 8017012:	f100 0410 	add.w	r4, r0, #16
 8017016:	f101 0310 	add.w	r3, r1, #16
 801701a:	4635      	mov	r5, r6
 801701c:	ed54 7a04 	vldr	s15, [r4, #-16]
 8017020:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017024:	3d01      	subs	r5, #1
 8017026:	ed43 7a04 	vstr	s15, [r3, #-16]
 801702a:	ed54 7a03 	vldr	s15, [r4, #-12]
 801702e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017032:	f104 0410 	add.w	r4, r4, #16
 8017036:	ed43 7a03 	vstr	s15, [r3, #-12]
 801703a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 801703e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017042:	f103 0310 	add.w	r3, r3, #16
 8017046:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 801704a:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 801704e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017052:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8017056:	d1e1      	bne.n	801701c <arm_scale_f32+0x10>
 8017058:	0136      	lsls	r6, r6, #4
 801705a:	4430      	add	r0, r6
 801705c:	4431      	add	r1, r6
 801705e:	f012 0203 	ands.w	r2, r2, #3
 8017062:	d015      	beq.n	8017090 <arm_scale_f32+0x84>
 8017064:	edd0 7a00 	vldr	s15, [r0]
 8017068:	ee67 7a80 	vmul.f32	s15, s15, s0
 801706c:	3a01      	subs	r2, #1
 801706e:	edc1 7a00 	vstr	s15, [r1]
 8017072:	d00d      	beq.n	8017090 <arm_scale_f32+0x84>
 8017074:	edd0 7a01 	vldr	s15, [r0, #4]
 8017078:	ee67 7a80 	vmul.f32	s15, s15, s0
 801707c:	2a01      	cmp	r2, #1
 801707e:	edc1 7a01 	vstr	s15, [r1, #4]
 8017082:	d005      	beq.n	8017090 <arm_scale_f32+0x84>
 8017084:	edd0 7a02 	vldr	s15, [r0, #8]
 8017088:	ee27 0a80 	vmul.f32	s0, s15, s0
 801708c:	ed81 0a02 	vstr	s0, [r1, #8]
 8017090:	bc70      	pop	{r4, r5, r6}
 8017092:	4770      	bx	lr

08017094 <arm_mult_f32>:
 8017094:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8017098:	b4f0      	push	{r4, r5, r6, r7}
 801709a:	d033      	beq.n	8017104 <arm_mult_f32+0x70>
 801709c:	f100 0610 	add.w	r6, r0, #16
 80170a0:	f101 0510 	add.w	r5, r1, #16
 80170a4:	f102 0410 	add.w	r4, r2, #16
 80170a8:	4667      	mov	r7, ip
 80170aa:	ed15 7a04 	vldr	s14, [r5, #-16]
 80170ae:	ed56 7a04 	vldr	s15, [r6, #-16]
 80170b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80170b6:	3f01      	subs	r7, #1
 80170b8:	ed44 7a04 	vstr	s15, [r4, #-16]
 80170bc:	ed15 7a03 	vldr	s14, [r5, #-12]
 80170c0:	ed56 7a03 	vldr	s15, [r6, #-12]
 80170c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80170c8:	f106 0610 	add.w	r6, r6, #16
 80170cc:	ed44 7a03 	vstr	s15, [r4, #-12]
 80170d0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80170d4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80170d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80170dc:	f105 0510 	add.w	r5, r5, #16
 80170e0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80170e4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80170e8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80170ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80170f0:	f104 0410 	add.w	r4, r4, #16
 80170f4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80170f8:	d1d7      	bne.n	80170aa <arm_mult_f32+0x16>
 80170fa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80170fe:	4420      	add	r0, r4
 8017100:	4421      	add	r1, r4
 8017102:	4422      	add	r2, r4
 8017104:	f013 0303 	ands.w	r3, r3, #3
 8017108:	d01b      	beq.n	8017142 <arm_mult_f32+0xae>
 801710a:	edd1 7a00 	vldr	s15, [r1]
 801710e:	ed90 7a00 	vldr	s14, [r0]
 8017112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017116:	3b01      	subs	r3, #1
 8017118:	edc2 7a00 	vstr	s15, [r2]
 801711c:	d011      	beq.n	8017142 <arm_mult_f32+0xae>
 801711e:	edd0 7a01 	vldr	s15, [r0, #4]
 8017122:	ed91 7a01 	vldr	s14, [r1, #4]
 8017126:	ee67 7a87 	vmul.f32	s15, s15, s14
 801712a:	2b01      	cmp	r3, #1
 801712c:	edc2 7a01 	vstr	s15, [r2, #4]
 8017130:	d007      	beq.n	8017142 <arm_mult_f32+0xae>
 8017132:	edd0 7a02 	vldr	s15, [r0, #8]
 8017136:	ed91 7a02 	vldr	s14, [r1, #8]
 801713a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801713e:	edc2 7a02 	vstr	s15, [r2, #8]
 8017142:	bcf0      	pop	{r4, r5, r6, r7}
 8017144:	4770      	bx	lr
 8017146:	bf00      	nop

08017148 <arm_add_f32>:
 8017148:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 801714c:	b4f0      	push	{r4, r5, r6, r7}
 801714e:	d033      	beq.n	80171b8 <arm_add_f32+0x70>
 8017150:	f100 0610 	add.w	r6, r0, #16
 8017154:	f101 0510 	add.w	r5, r1, #16
 8017158:	f102 0410 	add.w	r4, r2, #16
 801715c:	4667      	mov	r7, ip
 801715e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8017162:	ed56 7a04 	vldr	s15, [r6, #-16]
 8017166:	ee77 7a87 	vadd.f32	s15, s15, s14
 801716a:	3f01      	subs	r7, #1
 801716c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8017170:	ed15 7a03 	vldr	s14, [r5, #-12]
 8017174:	ed56 7a03 	vldr	s15, [r6, #-12]
 8017178:	ee77 7a87 	vadd.f32	s15, s15, s14
 801717c:	f106 0610 	add.w	r6, r6, #16
 8017180:	ed44 7a03 	vstr	s15, [r4, #-12]
 8017184:	ed15 7a02 	vldr	s14, [r5, #-8]
 8017188:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 801718c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017190:	f105 0510 	add.w	r5, r5, #16
 8017194:	ed44 7a02 	vstr	s15, [r4, #-8]
 8017198:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 801719c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80171a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80171a4:	f104 0410 	add.w	r4, r4, #16
 80171a8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80171ac:	d1d7      	bne.n	801715e <arm_add_f32+0x16>
 80171ae:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80171b2:	4420      	add	r0, r4
 80171b4:	4421      	add	r1, r4
 80171b6:	4422      	add	r2, r4
 80171b8:	f013 0303 	ands.w	r3, r3, #3
 80171bc:	d01b      	beq.n	80171f6 <arm_add_f32+0xae>
 80171be:	edd1 7a00 	vldr	s15, [r1]
 80171c2:	ed90 7a00 	vldr	s14, [r0]
 80171c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80171ca:	3b01      	subs	r3, #1
 80171cc:	edc2 7a00 	vstr	s15, [r2]
 80171d0:	d011      	beq.n	80171f6 <arm_add_f32+0xae>
 80171d2:	edd0 7a01 	vldr	s15, [r0, #4]
 80171d6:	ed91 7a01 	vldr	s14, [r1, #4]
 80171da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80171de:	2b01      	cmp	r3, #1
 80171e0:	edc2 7a01 	vstr	s15, [r2, #4]
 80171e4:	d007      	beq.n	80171f6 <arm_add_f32+0xae>
 80171e6:	edd0 7a02 	vldr	s15, [r0, #8]
 80171ea:	ed91 7a02 	vldr	s14, [r1, #8]
 80171ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80171f2:	edc2 7a02 	vstr	s15, [r2, #8]
 80171f6:	bcf0      	pop	{r4, r5, r6, r7}
 80171f8:	4770      	bx	lr
 80171fa:	bf00      	nop

080171fc <arm_radix8_butterfly_f32>:
 80171fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017200:	ed2d 8b10 	vpush	{d8-d15}
 8017204:	b095      	sub	sp, #84	; 0x54
 8017206:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801720a:	4603      	mov	r3, r0
 801720c:	3304      	adds	r3, #4
 801720e:	ed9f bab9 	vldr	s22, [pc, #740]	; 80174f4 <arm_radix8_butterfly_f32+0x2f8>
 8017212:	9012      	str	r0, [sp, #72]	; 0x48
 8017214:	468b      	mov	fp, r1
 8017216:	9313      	str	r3, [sp, #76]	; 0x4c
 8017218:	4689      	mov	r9, r1
 801721a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 801721e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017220:	960f      	str	r6, [sp, #60]	; 0x3c
 8017222:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8017226:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 801722a:	eb03 0508 	add.w	r5, r3, r8
 801722e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8017232:	eb05 040e 	add.w	r4, r5, lr
 8017236:	0137      	lsls	r7, r6, #4
 8017238:	eba6 030a 	sub.w	r3, r6, sl
 801723c:	eb04 000e 	add.w	r0, r4, lr
 8017240:	44b2      	add	sl, r6
 8017242:	1d3a      	adds	r2, r7, #4
 8017244:	9702      	str	r7, [sp, #8]
 8017246:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801724a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 801724e:	ebae 0c06 	sub.w	ip, lr, r6
 8017252:	9703      	str	r7, [sp, #12]
 8017254:	eb03 0708 	add.w	r7, r3, r8
 8017258:	9701      	str	r7, [sp, #4]
 801725a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 801725e:	9706      	str	r7, [sp, #24]
 8017260:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017262:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017266:	f10e 0104 	add.w	r1, lr, #4
 801726a:	4439      	add	r1, r7
 801726c:	443a      	add	r2, r7
 801726e:	0137      	lsls	r7, r6, #4
 8017270:	00f6      	lsls	r6, r6, #3
 8017272:	9704      	str	r7, [sp, #16]
 8017274:	9605      	str	r6, [sp, #20]
 8017276:	9f01      	ldr	r7, [sp, #4]
 8017278:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801727a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 801727e:	f04f 0c00 	mov.w	ip, #0
 8017282:	edd4 6a00 	vldr	s13, [r4]
 8017286:	edd7 1a00 	vldr	s3, [r7]
 801728a:	ed16 aa01 	vldr	s20, [r6, #-4]
 801728e:	edd5 5a00 	vldr	s11, [r5]
 8017292:	ed52 9a01 	vldr	s19, [r2, #-4]
 8017296:	ed90 6a00 	vldr	s12, [r0]
 801729a:	ed51 7a01 	vldr	s15, [r1, #-4]
 801729e:	ed93 3a00 	vldr	s6, [r3]
 80172a2:	ee39 0a86 	vadd.f32	s0, s19, s12
 80172a6:	ee33 2a21 	vadd.f32	s4, s6, s3
 80172aa:	ee37 5aa6 	vadd.f32	s10, s15, s13
 80172ae:	ee7a 4a25 	vadd.f32	s9, s20, s11
 80172b2:	ee35 7a02 	vadd.f32	s14, s10, s4
 80172b6:	ee34 4a80 	vadd.f32	s8, s9, s0
 80172ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80172be:	ee74 6a07 	vadd.f32	s13, s8, s14
 80172c2:	ee34 4a47 	vsub.f32	s8, s8, s14
 80172c6:	ed46 6a01 	vstr	s13, [r6, #-4]
 80172ca:	ed85 4a00 	vstr	s8, [r5]
 80172ce:	edd1 6a00 	vldr	s13, [r1]
 80172d2:	ed94 9a01 	vldr	s18, [r4, #4]
 80172d6:	edd3 2a01 	vldr	s5, [r3, #4]
 80172da:	edd7 8a01 	vldr	s17, [r7, #4]
 80172de:	edd6 0a00 	vldr	s1, [r6]
 80172e2:	edd5 3a01 	vldr	s7, [r5, #4]
 80172e6:	ed90 8a01 	vldr	s16, [r0, #4]
 80172ea:	ed92 7a00 	vldr	s14, [r2]
 80172ee:	ee33 3a61 	vsub.f32	s6, s6, s3
 80172f2:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80172f6:	ee72 aae8 	vsub.f32	s21, s5, s17
 80172fa:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80172fe:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8017302:	ee77 7a83 	vadd.f32	s15, s15, s6
 8017306:	ee34 4a6a 	vsub.f32	s8, s8, s21
 801730a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 801730e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8017312:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8017316:	ee72 2aa8 	vadd.f32	s5, s5, s17
 801731a:	ee77 0a08 	vadd.f32	s1, s14, s16
 801731e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8017322:	ee37 7a48 	vsub.f32	s14, s14, s16
 8017326:	ee61 1a8b 	vmul.f32	s3, s3, s22
 801732a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 801732e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8017332:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8017336:	ee67 7a8b 	vmul.f32	s15, s15, s22
 801733a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 801733e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8017342:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8017346:	ee33 2a20 	vadd.f32	s4, s6, s1
 801734a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801734e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8017352:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8017356:	ee77 0a01 	vadd.f32	s1, s14, s2
 801735a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 801735e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8017362:	ee73 1a84 	vadd.f32	s3, s7, s8
 8017366:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801736a:	ee76 3a27 	vadd.f32	s7, s12, s15
 801736e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8017372:	ee32 8a00 	vadd.f32	s16, s4, s0
 8017376:	ee33 1a45 	vsub.f32	s2, s6, s10
 801737a:	ee32 2a40 	vsub.f32	s4, s4, s0
 801737e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8017382:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8017386:	ee32 3aa0 	vadd.f32	s6, s5, s1
 801738a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 801738e:	ee34 6a67 	vsub.f32	s12, s8, s15
 8017392:	ee75 4a87 	vadd.f32	s9, s11, s14
 8017396:	ee72 2ae0 	vsub.f32	s5, s5, s1
 801739a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801739e:	ee77 7a84 	vadd.f32	s15, s15, s8
 80173a2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80173a6:	44dc      	add	ip, fp
 80173a8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80173ac:	45e1      	cmp	r9, ip
 80173ae:	ed86 8a00 	vstr	s16, [r6]
 80173b2:	ed85 2a01 	vstr	s4, [r5, #4]
 80173b6:	4456      	add	r6, sl
 80173b8:	ed02 0a01 	vstr	s0, [r2, #-4]
 80173bc:	4455      	add	r5, sl
 80173be:	edc0 6a00 	vstr	s13, [r0]
 80173c2:	ed82 1a00 	vstr	s2, [r2]
 80173c6:	ed80 5a01 	vstr	s10, [r0, #4]
 80173ca:	4452      	add	r2, sl
 80173cc:	ed01 3a01 	vstr	s6, [r1, #-4]
 80173d0:	4450      	add	r0, sl
 80173d2:	edc7 2a00 	vstr	s5, [r7]
 80173d6:	edc4 4a00 	vstr	s9, [r4]
 80173da:	ed83 7a00 	vstr	s14, [r3]
 80173de:	edc1 5a00 	vstr	s11, [r1]
 80173e2:	edc7 3a01 	vstr	s7, [r7, #4]
 80173e6:	4451      	add	r1, sl
 80173e8:	ed84 6a01 	vstr	s12, [r4, #4]
 80173ec:	4457      	add	r7, sl
 80173ee:	edc3 7a01 	vstr	s15, [r3, #4]
 80173f2:	4454      	add	r4, sl
 80173f4:	4453      	add	r3, sl
 80173f6:	f63f af44 	bhi.w	8017282 <arm_radix8_butterfly_f32+0x86>
 80173fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80173fc:	2b07      	cmp	r3, #7
 80173fe:	f240 81b7 	bls.w	8017770 <arm_radix8_butterfly_f32+0x574>
 8017402:	9b06      	ldr	r3, [sp, #24]
 8017404:	9903      	ldr	r1, [sp, #12]
 8017406:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017408:	9e05      	ldr	r6, [sp, #20]
 801740a:	9a04      	ldr	r2, [sp, #16]
 801740c:	f103 0c08 	add.w	ip, r3, #8
 8017410:	9b02      	ldr	r3, [sp, #8]
 8017412:	3108      	adds	r1, #8
 8017414:	f108 0808 	add.w	r8, r8, #8
 8017418:	1841      	adds	r1, r0, r1
 801741a:	3608      	adds	r6, #8
 801741c:	330c      	adds	r3, #12
 801741e:	4604      	mov	r4, r0
 8017420:	4444      	add	r4, r8
 8017422:	18c3      	adds	r3, r0, r3
 8017424:	9109      	str	r1, [sp, #36]	; 0x24
 8017426:	1981      	adds	r1, r0, r6
 8017428:	f10e 0e08 	add.w	lr, lr, #8
 801742c:	3208      	adds	r2, #8
 801742e:	940b      	str	r4, [sp, #44]	; 0x2c
 8017430:	9107      	str	r1, [sp, #28]
 8017432:	4604      	mov	r4, r0
 8017434:	4601      	mov	r1, r0
 8017436:	9304      	str	r3, [sp, #16]
 8017438:	f100 030c 	add.w	r3, r0, #12
 801743c:	4474      	add	r4, lr
 801743e:	f04f 0801 	mov.w	r8, #1
 8017442:	1882      	adds	r2, r0, r2
 8017444:	4461      	add	r1, ip
 8017446:	9305      	str	r3, [sp, #20]
 8017448:	464b      	mov	r3, r9
 801744a:	940a      	str	r4, [sp, #40]	; 0x28
 801744c:	46c1      	mov	r9, r8
 801744e:	9208      	str	r2, [sp, #32]
 8017450:	46d8      	mov	r8, fp
 8017452:	9106      	str	r1, [sp, #24]
 8017454:	f04f 0e00 	mov.w	lr, #0
 8017458:	469b      	mov	fp, r3
 801745a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801745c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801745e:	449e      	add	lr, r3
 8017460:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8017464:	441a      	add	r2, r3
 8017466:	920e      	str	r2, [sp, #56]	; 0x38
 8017468:	441a      	add	r2, r3
 801746a:	18d4      	adds	r4, r2, r3
 801746c:	18e5      	adds	r5, r4, r3
 801746e:	18ee      	adds	r6, r5, r3
 8017470:	18f7      	adds	r7, r6, r3
 8017472:	eb07 0c03 	add.w	ip, r7, r3
 8017476:	920d      	str	r2, [sp, #52]	; 0x34
 8017478:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 801747c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8017480:	910c      	str	r1, [sp, #48]	; 0x30
 8017482:	4419      	add	r1, r3
 8017484:	9103      	str	r1, [sp, #12]
 8017486:	4419      	add	r1, r3
 8017488:	18ca      	adds	r2, r1, r3
 801748a:	9202      	str	r2, [sp, #8]
 801748c:	441a      	add	r2, r3
 801748e:	18d0      	adds	r0, r2, r3
 8017490:	ed92 ea01 	vldr	s28, [r2, #4]
 8017494:	9a02      	ldr	r2, [sp, #8]
 8017496:	edd4 7a00 	vldr	s15, [r4]
 801749a:	edd2 da01 	vldr	s27, [r2, #4]
 801749e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80174a0:	ed91 da01 	vldr	s26, [r1, #4]
 80174a4:	ed92 ca01 	vldr	s24, [r2, #4]
 80174a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80174aa:	9903      	ldr	r1, [sp, #12]
 80174ac:	edcd 7a03 	vstr	s15, [sp, #12]
 80174b0:	edd2 7a00 	vldr	s15, [r2]
 80174b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80174b6:	edcd 7a02 	vstr	s15, [sp, #8]
 80174ba:	edd2 7a00 	vldr	s15, [r2]
 80174be:	edd0 ea01 	vldr	s29, [r0, #4]
 80174c2:	edd1 ca01 	vldr	s25, [r1, #4]
 80174c6:	eddc ba00 	vldr	s23, [ip]
 80174ca:	edd7 aa00 	vldr	s21, [r7]
 80174ce:	ed96 aa00 	vldr	s20, [r6]
 80174d2:	edd5 9a00 	vldr	s19, [r5]
 80174d6:	edcd 7a01 	vstr	s15, [sp, #4]
 80174da:	4403      	add	r3, r0
 80174dc:	ed93 fa01 	vldr	s30, [r3, #4]
 80174e0:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80174e4:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80174e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80174ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80174f0:	46cc      	mov	ip, r9
 80174f2:	e001      	b.n	80174f8 <arm_radix8_butterfly_f32+0x2fc>
 80174f4:	3f3504f3 	.word	0x3f3504f3
 80174f8:	ed91 6a00 	vldr	s12, [r1]
 80174fc:	ed93 5a00 	vldr	s10, [r3]
 8017500:	edd0 fa00 	vldr	s31, [r0]
 8017504:	edd4 7a00 	vldr	s15, [r4]
 8017508:	ed95 7a00 	vldr	s14, [r5]
 801750c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8017510:	ed17 3a01 	vldr	s6, [r7, #-4]
 8017514:	ed92 2a00 	vldr	s4, [r2]
 8017518:	ed96 0a00 	vldr	s0, [r6]
 801751c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8017520:	ee32 1a06 	vadd.f32	s2, s4, s12
 8017524:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8017528:	ee77 4a87 	vadd.f32	s9, s15, s14
 801752c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8017530:	ee71 6a24 	vadd.f32	s13, s2, s9
 8017534:	ee32 2a46 	vsub.f32	s4, s4, s12
 8017538:	ee31 6aa6 	vadd.f32	s12, s3, s13
 801753c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017540:	ed06 6a01 	vstr	s12, [r6, #-4]
 8017544:	edd4 8a01 	vldr	s17, [r4, #4]
 8017548:	ed92 9a01 	vldr	s18, [r2, #4]
 801754c:	edd7 0a00 	vldr	s1, [r7]
 8017550:	edd1 2a01 	vldr	s5, [r1, #4]
 8017554:	ed95 7a01 	vldr	s14, [r5, #4]
 8017558:	ed93 6a01 	vldr	s12, [r3, #4]
 801755c:	edd0 5a01 	vldr	s11, [r0, #4]
 8017560:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8017564:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8017568:	ee39 5a62 	vsub.f32	s10, s18, s5
 801756c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8017570:	ee38 4a44 	vsub.f32	s8, s16, s8
 8017574:	ee38 7a87 	vadd.f32	s14, s17, s14
 8017578:	ee30 8aa5 	vadd.f32	s16, s1, s11
 801757c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8017580:	ee32 9a27 	vadd.f32	s18, s4, s15
 8017584:	ee72 7a67 	vsub.f32	s15, s4, s15
 8017588:	ee30 2a06 	vadd.f32	s4, s0, s12
 801758c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8017590:	ee71 4a64 	vsub.f32	s9, s2, s9
 8017594:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8017598:	ee32 1a08 	vadd.f32	s2, s4, s16
 801759c:	ee72 fa87 	vadd.f32	s31, s5, s14
 80175a0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80175a4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80175a8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80175ac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80175b0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80175b4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80175b8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80175bc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80175c0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80175c4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80175c8:	ee74 0a22 	vadd.f32	s1, s8, s5
 80175cc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80175d0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80175d4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80175d8:	ee32 4a64 	vsub.f32	s8, s4, s9
 80175dc:	ee73 8a09 	vadd.f32	s17, s6, s18
 80175e0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80175e4:	ee33 9a49 	vsub.f32	s18, s6, s18
 80175e8:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80175ec:	ee35 3a85 	vadd.f32	s6, s11, s10
 80175f0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80175f4:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80175f8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80175fc:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8017600:	ee30 7a68 	vsub.f32	s14, s0, s17
 8017604:	ee35 8a03 	vadd.f32	s16, s10, s6
 8017608:	ee38 0a80 	vadd.f32	s0, s17, s0
 801760c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8017610:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8017614:	ed9d 2a01 	vldr	s4, [sp, #4]
 8017618:	eddd 1a02 	vldr	s3, [sp, #8]
 801761c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8017620:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8017624:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8017628:	ee21 1aa0 	vmul.f32	s2, s3, s1
 801762c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8017630:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8017634:	ee76 5a49 	vsub.f32	s11, s12, s18
 8017638:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 801763c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8017640:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8017644:	ee21 4a84 	vmul.f32	s8, s3, s8
 8017648:	ee6c 1a07 	vmul.f32	s3, s24, s14
 801764c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8017650:	ee22 2a08 	vmul.f32	s4, s4, s16
 8017654:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8017658:	ee78 6ae6 	vsub.f32	s13, s17, s13
 801765c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8017660:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8017664:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8017668:	ee74 0a60 	vsub.f32	s1, s8, s1
 801766c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8017670:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8017674:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8017678:	ee72 1a21 	vadd.f32	s3, s4, s3
 801767c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8017680:	ee38 2a89 	vadd.f32	s4, s17, s18
 8017684:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8017688:	ee38 8a04 	vadd.f32	s16, s16, s8
 801768c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8017690:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8017694:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8017698:	eddd 5a03 	vldr	s11, [sp, #12]
 801769c:	edc6 fa00 	vstr	s31, [r6]
 80176a0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80176a4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80176a8:	ee30 0a45 	vsub.f32	s0, s0, s10
 80176ac:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80176b0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80176b4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80176b8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80176bc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80176c0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80176c4:	ee74 4a89 	vadd.f32	s9, s9, s18
 80176c8:	ee34 3a43 	vsub.f32	s6, s8, s6
 80176cc:	ee78 8a85 	vadd.f32	s17, s17, s10
 80176d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80176d4:	44c4      	add	ip, r8
 80176d6:	45e3      	cmp	fp, ip
 80176d8:	edc3 3a00 	vstr	s7, [r3]
 80176dc:	edc3 6a01 	vstr	s13, [r3, #4]
 80176e0:	4456      	add	r6, sl
 80176e2:	ed07 1a01 	vstr	s2, [r7, #-4]
 80176e6:	edc7 0a00 	vstr	s1, [r7]
 80176ea:	4453      	add	r3, sl
 80176ec:	ed80 2a00 	vstr	s4, [r0]
 80176f0:	edc0 2a01 	vstr	s5, [r0, #4]
 80176f4:	4457      	add	r7, sl
 80176f6:	edc2 1a00 	vstr	s3, [r2]
 80176fa:	ed82 7a01 	vstr	s14, [r2, #4]
 80176fe:	4450      	add	r0, sl
 8017700:	ed85 8a00 	vstr	s16, [r5]
 8017704:	ed85 0a01 	vstr	s0, [r5, #4]
 8017708:	4452      	add	r2, sl
 801770a:	edc1 4a00 	vstr	s9, [r1]
 801770e:	4455      	add	r5, sl
 8017710:	ed81 3a01 	vstr	s6, [r1, #4]
 8017714:	edc4 8a00 	vstr	s17, [r4]
 8017718:	ed84 6a01 	vstr	s12, [r4, #4]
 801771c:	4451      	add	r1, sl
 801771e:	4454      	add	r4, sl
 8017720:	f63f aeea 	bhi.w	80174f8 <arm_radix8_butterfly_f32+0x2fc>
 8017724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017726:	3308      	adds	r3, #8
 8017728:	930b      	str	r3, [sp, #44]	; 0x2c
 801772a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801772c:	3308      	adds	r3, #8
 801772e:	930a      	str	r3, [sp, #40]	; 0x28
 8017730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017732:	3308      	adds	r3, #8
 8017734:	9309      	str	r3, [sp, #36]	; 0x24
 8017736:	9b08      	ldr	r3, [sp, #32]
 8017738:	3308      	adds	r3, #8
 801773a:	9308      	str	r3, [sp, #32]
 801773c:	9b07      	ldr	r3, [sp, #28]
 801773e:	3308      	adds	r3, #8
 8017740:	9307      	str	r3, [sp, #28]
 8017742:	9b06      	ldr	r3, [sp, #24]
 8017744:	3308      	adds	r3, #8
 8017746:	9306      	str	r3, [sp, #24]
 8017748:	9b05      	ldr	r3, [sp, #20]
 801774a:	3308      	adds	r3, #8
 801774c:	9305      	str	r3, [sp, #20]
 801774e:	9b04      	ldr	r3, [sp, #16]
 8017750:	3308      	adds	r3, #8
 8017752:	9304      	str	r3, [sp, #16]
 8017754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017756:	f109 0901 	add.w	r9, r9, #1
 801775a:	454b      	cmp	r3, r9
 801775c:	f47f ae7d 	bne.w	801745a <arm_radix8_butterfly_f32+0x25e>
 8017760:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	b29b      	uxth	r3, r3
 8017766:	46d9      	mov	r9, fp
 8017768:	9310      	str	r3, [sp, #64]	; 0x40
 801776a:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 801776e:	e554      	b.n	801721a <arm_radix8_butterfly_f32+0x1e>
 8017770:	b015      	add	sp, #84	; 0x54
 8017772:	ecbd 8b10 	vpop	{d8-d15}
 8017776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801777a:	bf00      	nop

0801777c <arm_rfft_init_f32>:
 801777c:	b570      	push	{r4, r5, r6, lr}
 801777e:	4c22      	ldr	r4, [pc, #136]	; (8017808 <arm_rfft_init_f32+0x8c>)
 8017780:	4e22      	ldr	r6, [pc, #136]	; (801780c <arm_rfft_init_f32+0x90>)
 8017782:	6104      	str	r4, [r0, #16]
 8017784:	b294      	uxth	r4, r2
 8017786:	b2db      	uxtb	r3, r3
 8017788:	460d      	mov	r5, r1
 801778a:	60c6      	str	r6, [r0, #12]
 801778c:	f3c2 014e 	ubfx	r1, r2, #1, #15
 8017790:	9e04      	ldr	r6, [sp, #16]
 8017792:	7183      	strb	r3, [r0, #6]
 8017794:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8017798:	71c6      	strb	r6, [r0, #7]
 801779a:	6004      	str	r4, [r0, #0]
 801779c:	8081      	strh	r1, [r0, #4]
 801779e:	d02f      	beq.n	8017800 <arm_rfft_init_f32+0x84>
 80177a0:	d910      	bls.n	80177c4 <arm_rfft_init_f32+0x48>
 80177a2:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80177a6:	d023      	beq.n	80177f0 <arm_rfft_init_f32+0x74>
 80177a8:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80177ac:	d114      	bne.n	80177d8 <arm_rfft_init_f32+0x5c>
 80177ae:	2201      	movs	r2, #1
 80177b0:	6082      	str	r2, [r0, #8]
 80177b2:	2400      	movs	r4, #0
 80177b4:	6145      	str	r5, [r0, #20]
 80177b6:	4628      	mov	r0, r5
 80177b8:	b9a3      	cbnz	r3, 80177e4 <arm_rfft_init_f32+0x68>
 80177ba:	461a      	mov	r2, r3
 80177bc:	f000 f910 	bl	80179e0 <arm_cfft_radix4_init_f32>
 80177c0:	4620      	mov	r0, r4
 80177c2:	bd70      	pop	{r4, r5, r6, pc}
 80177c4:	2c80      	cmp	r4, #128	; 0x80
 80177c6:	d107      	bne.n	80177d8 <arm_rfft_init_f32+0x5c>
 80177c8:	2240      	movs	r2, #64	; 0x40
 80177ca:	6082      	str	r2, [r0, #8]
 80177cc:	6145      	str	r5, [r0, #20]
 80177ce:	2400      	movs	r4, #0
 80177d0:	4628      	mov	r0, r5
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d0f1      	beq.n	80177ba <arm_rfft_init_f32+0x3e>
 80177d6:	e005      	b.n	80177e4 <arm_rfft_init_f32+0x68>
 80177d8:	6145      	str	r5, [r0, #20]
 80177da:	f04f 34ff 	mov.w	r4, #4294967295
 80177de:	4628      	mov	r0, r5
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d0ea      	beq.n	80177ba <arm_rfft_init_f32+0x3e>
 80177e4:	2300      	movs	r3, #0
 80177e6:	2201      	movs	r2, #1
 80177e8:	f000 f8fa 	bl	80179e0 <arm_cfft_radix4_init_f32>
 80177ec:	4620      	mov	r0, r4
 80177ee:	bd70      	pop	{r4, r5, r6, pc}
 80177f0:	2204      	movs	r2, #4
 80177f2:	6082      	str	r2, [r0, #8]
 80177f4:	6145      	str	r5, [r0, #20]
 80177f6:	2400      	movs	r4, #0
 80177f8:	4628      	mov	r0, r5
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d0dd      	beq.n	80177ba <arm_rfft_init_f32+0x3e>
 80177fe:	e7f1      	b.n	80177e4 <arm_rfft_init_f32+0x68>
 8017800:	2210      	movs	r2, #16
 8017802:	6082      	str	r2, [r0, #8]
 8017804:	2400      	movs	r4, #0
 8017806:	e7d5      	b.n	80177b4 <arm_rfft_init_f32+0x38>
 8017808:	08053e70 	.word	0x08053e70
 801780c:	0804be70 	.word	0x0804be70

08017810 <arm_split_rfft_f32>:
 8017810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017814:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
 8017818:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 801781c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8017820:	010c      	lsls	r4, r1, #4
 8017822:	3901      	subs	r1, #1
 8017824:	4462      	add	r2, ip
 8017826:	4463      	add	r3, ip
 8017828:	d046      	beq.n	80178b8 <arm_split_rfft_f32+0xa8>
 801782a:	3c0c      	subs	r4, #12
 801782c:	f1ae 050c 	sub.w	r5, lr, #12
 8017830:	443c      	add	r4, r7
 8017832:	4405      	add	r5, r0
 8017834:	f100 0810 	add.w	r8, r0, #16
 8017838:	f107 0610 	add.w	r6, r7, #16
 801783c:	ed92 7a00 	vldr	s14, [r2]
 8017840:	ed92 5a01 	vldr	s10, [r2, #4]
 8017844:	ed58 5a01 	vldr	s11, [r8, #-4]
 8017848:	ed18 6a02 	vldr	s12, [r8, #-8]
 801784c:	edd5 4a02 	vldr	s9, [r5, #8]
 8017850:	ed93 4a00 	vldr	s8, [r3]
 8017854:	edd5 6a01 	vldr	s13, [r5, #4]
 8017858:	ee65 7a87 	vmul.f32	s15, s11, s14
 801785c:	ee66 3a05 	vmul.f32	s7, s12, s10
 8017860:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8017864:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017868:	ee64 4a84 	vmul.f32	s9, s9, s8
 801786c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017870:	ee25 7a85 	vmul.f32	s14, s11, s10
 8017874:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8017878:	ee26 5a85 	vmul.f32	s10, s13, s10
 801787c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017880:	ee26 7a84 	vmul.f32	s14, s13, s8
 8017884:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8017888:	ee37 7a06 	vadd.f32	s14, s14, s12
 801788c:	eef1 6a67 	vneg.f32	s13, s15
 8017890:	3901      	subs	r1, #1
 8017892:	ed46 7a01 	vstr	s15, [r6, #-4]
 8017896:	ed06 7a02 	vstr	s14, [r6, #-8]
 801789a:	4462      	add	r2, ip
 801789c:	edc4 6a02 	vstr	s13, [r4, #8]
 80178a0:	ed84 7a01 	vstr	s14, [r4, #4]
 80178a4:	f108 0808 	add.w	r8, r8, #8
 80178a8:	4463      	add	r3, ip
 80178aa:	f1a5 0508 	sub.w	r5, r5, #8
 80178ae:	f106 0608 	add.w	r6, r6, #8
 80178b2:	f1a4 0408 	sub.w	r4, r4, #8
 80178b6:	d1c1      	bne.n	801783c <arm_split_rfft_f32+0x2c>
 80178b8:	ed90 7a01 	vldr	s14, [r0, #4]
 80178bc:	edd0 7a00 	vldr	s15, [r0]
 80178c0:	44be      	add	lr, r7
 80178c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80178c6:	2300      	movs	r3, #0
 80178c8:	edce 7a00 	vstr	s15, [lr]
 80178cc:	f8ce 3004 	str.w	r3, [lr, #4]
 80178d0:	edd0 7a00 	vldr	s15, [r0]
 80178d4:	ed90 7a01 	vldr	s14, [r0, #4]
 80178d8:	607b      	str	r3, [r7, #4]
 80178da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80178de:	edc7 7a00 	vstr	s15, [r7]
 80178e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178e6:	bf00      	nop

080178e8 <arm_rfft_f32>:
 80178e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178ea:	7983      	ldrb	r3, [r0, #6]
 80178ec:	6945      	ldr	r5, [r0, #20]
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	b083      	sub	sp, #12
 80178f2:	4604      	mov	r4, r0
 80178f4:	460e      	mov	r6, r1
 80178f6:	4617      	mov	r7, r2
 80178f8:	d013      	beq.n	8017922 <arm_rfft_f32+0x3a>
 80178fa:	89ab      	ldrh	r3, [r5, #12]
 80178fc:	686a      	ldr	r2, [r5, #4]
 80178fe:	8829      	ldrh	r1, [r5, #0]
 8017900:	4630      	mov	r0, r6
 8017902:	f000 f8cb 	bl	8017a9c <arm_radix4_butterfly_f32>
 8017906:	79e3      	ldrb	r3, [r4, #7]
 8017908:	2b01      	cmp	r3, #1
 801790a:	d062      	beq.n	80179d2 <arm_rfft_f32+0xea>
 801790c:	68a3      	ldr	r3, [r4, #8]
 801790e:	9301      	str	r3, [sp, #4]
 8017910:	9700      	str	r7, [sp, #0]
 8017912:	4630      	mov	r0, r6
 8017914:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8017918:	88a1      	ldrh	r1, [r4, #4]
 801791a:	f7ff ff79 	bl	8017810 <arm_split_rfft_f32>
 801791e:	b003      	add	sp, #12
 8017920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017922:	8880      	ldrh	r0, [r0, #4]
 8017924:	68a1      	ldr	r1, [r4, #8]
 8017926:	e9d4 2c03 	ldrd	r2, ip, [r4, #12]
 801792a:	00c3      	lsls	r3, r0, #3
 801792c:	b3e8      	cbz	r0, 80179aa <arm_rfft_f32+0xc2>
 801792e:	3b04      	subs	r3, #4
 8017930:	4433      	add	r3, r6
 8017932:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8017936:	f106 0108 	add.w	r1, r6, #8
 801793a:	f107 0608 	add.w	r6, r7, #8
 801793e:	ed92 7a01 	vldr	s14, [r2, #4]
 8017942:	ed92 5a00 	vldr	s10, [r2]
 8017946:	ed51 7a01 	vldr	s15, [r1, #-4]
 801794a:	ed11 4a02 	vldr	s8, [r1, #-8]
 801794e:	edd3 5a02 	vldr	s11, [r3, #8]
 8017952:	eddc 6a00 	vldr	s13, [ip]
 8017956:	edd3 4a01 	vldr	s9, [r3, #4]
 801795a:	ee25 6a27 	vmul.f32	s12, s10, s15
 801795e:	ee64 3a47 	vnmul.f32	s7, s8, s14
 8017962:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017966:	ee25 5a04 	vmul.f32	s10, s10, s8
 801796a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801796e:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8017972:	ee36 6a23 	vadd.f32	s12, s12, s7
 8017976:	ee77 7a85 	vadd.f32	s15, s15, s10
 801797a:	ee36 6a65 	vsub.f32	s12, s12, s11
 801797e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8017982:	ee27 7a24 	vmul.f32	s14, s14, s9
 8017986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801798a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801798e:	3801      	subs	r0, #1
 8017990:	ed46 7a02 	vstr	s15, [r6, #-8]
 8017994:	ed06 7a01 	vstr	s14, [r6, #-4]
 8017998:	4472      	add	r2, lr
 801799a:	f101 0108 	add.w	r1, r1, #8
 801799e:	44f4      	add	ip, lr
 80179a0:	f1a3 0308 	sub.w	r3, r3, #8
 80179a4:	f106 0608 	add.w	r6, r6, #8
 80179a8:	d1c9      	bne.n	801793e <arm_rfft_f32+0x56>
 80179aa:	89ab      	ldrh	r3, [r5, #12]
 80179ac:	ed95 0a04 	vldr	s0, [r5, #16]
 80179b0:	686a      	ldr	r2, [r5, #4]
 80179b2:	8829      	ldrh	r1, [r5, #0]
 80179b4:	4638      	mov	r0, r7
 80179b6:	f000 fa1b 	bl	8017df0 <arm_radix4_butterfly_inverse_f32>
 80179ba:	79e3      	ldrb	r3, [r4, #7]
 80179bc:	2b01      	cmp	r3, #1
 80179be:	d1ae      	bne.n	801791e <arm_rfft_f32+0x36>
 80179c0:	68ab      	ldr	r3, [r5, #8]
 80179c2:	89ea      	ldrh	r2, [r5, #14]
 80179c4:	8829      	ldrh	r1, [r5, #0]
 80179c6:	4638      	mov	r0, r7
 80179c8:	b003      	add	sp, #12
 80179ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80179ce:	f000 bbcb 	b.w	8018168 <arm_bitreversal_f32>
 80179d2:	68ab      	ldr	r3, [r5, #8]
 80179d4:	89ea      	ldrh	r2, [r5, #14]
 80179d6:	8829      	ldrh	r1, [r5, #0]
 80179d8:	4630      	mov	r0, r6
 80179da:	f000 fbc5 	bl	8018168 <arm_bitreversal_f32>
 80179de:	e795      	b.n	801790c <arm_rfft_f32+0x24>

080179e0 <arm_cfft_radix4_init_f32>:
 80179e0:	b410      	push	{r4}
 80179e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80179e6:	4c27      	ldr	r4, [pc, #156]	; (8017a84 <arm_cfft_radix4_init_f32+0xa4>)
 80179e8:	7082      	strb	r2, [r0, #2]
 80179ea:	70c3      	strb	r3, [r0, #3]
 80179ec:	8001      	strh	r1, [r0, #0]
 80179ee:	6044      	str	r4, [r0, #4]
 80179f0:	d027      	beq.n	8017a42 <arm_cfft_radix4_init_f32+0x62>
 80179f2:	d911      	bls.n	8017a18 <arm_cfft_radix4_init_f32+0x38>
 80179f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80179f8:	d02f      	beq.n	8017a5a <arm_cfft_radix4_init_f32+0x7a>
 80179fa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80179fe:	d11b      	bne.n	8017a38 <arm_cfft_radix4_init_f32+0x58>
 8017a00:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8017a04:	4b20      	ldr	r3, [pc, #128]	; (8017a88 <arm_cfft_radix4_init_f32+0xa8>)
 8017a06:	6102      	str	r2, [r0, #16]
 8017a08:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8017a0c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8017a10:	2000      	movs	r0, #0
 8017a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a16:	4770      	bx	lr
 8017a18:	2910      	cmp	r1, #16
 8017a1a:	d028      	beq.n	8017a6e <arm_cfft_radix4_init_f32+0x8e>
 8017a1c:	2940      	cmp	r1, #64	; 0x40
 8017a1e:	d10b      	bne.n	8017a38 <arm_cfft_radix4_init_f32+0x58>
 8017a20:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 8017a24:	4b19      	ldr	r3, [pc, #100]	; (8017a8c <arm_cfft_radix4_init_f32+0xac>)
 8017a26:	6102      	str	r2, [r0, #16]
 8017a28:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 8017a2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8017a30:	2000      	movs	r0, #0
 8017a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a36:	4770      	bx	lr
 8017a38:	f04f 30ff 	mov.w	r0, #4294967295
 8017a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a40:	4770      	bx	lr
 8017a42:	f04f 526e 	mov.w	r2, #998244352	; 0x3b800000
 8017a46:	4b12      	ldr	r3, [pc, #72]	; (8017a90 <arm_cfft_radix4_init_f32+0xb0>)
 8017a48:	6102      	str	r2, [r0, #16]
 8017a4a:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
 8017a4e:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8017a52:	2000      	movs	r0, #0
 8017a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a58:	4770      	bx	lr
 8017a5a:	f04f 526a 	mov.w	r2, #981467136	; 0x3a800000
 8017a5e:	4b0d      	ldr	r3, [pc, #52]	; (8017a94 <arm_cfft_radix4_init_f32+0xb4>)
 8017a60:	6102      	str	r2, [r0, #16]
 8017a62:	f04f 1204 	mov.w	r2, #262148	; 0x40004
 8017a66:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8017a6a:	2000      	movs	r0, #0
 8017a6c:	e7d1      	b.n	8017a12 <arm_cfft_radix4_init_f32+0x32>
 8017a6e:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
 8017a72:	4b09      	ldr	r3, [pc, #36]	; (8017a98 <arm_cfft_radix4_init_f32+0xb8>)
 8017a74:	6102      	str	r2, [r0, #16]
 8017a76:	f04f 2201 	mov.w	r2, #16777472	; 0x1000100
 8017a7a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8017a7e:	2000      	movs	r0, #0
 8017a80:	e7c7      	b.n	8017a12 <arm_cfft_radix4_init_f32+0x32>
 8017a82:	bf00      	nop
 8017a84:	080633f4 	.word	0x080633f4
 8017a88:	08040c70 	.word	0x08040c70
 8017a8c:	08040cee 	.word	0x08040cee
 8017a90:	08040c8e 	.word	0x08040c8e
 8017a94:	08040c76 	.word	0x08040c76
 8017a98:	08040e6e 	.word	0x08040e6e

08017a9c <arm_radix4_butterfly_f32>:
 8017a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa0:	ed2d 8b06 	vpush	{d8-d10}
 8017aa4:	088c      	lsrs	r4, r1, #2
 8017aa6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8017aaa:	461d      	mov	r5, r3
 8017aac:	b08d      	sub	sp, #52	; 0x34
 8017aae:	468a      	mov	sl, r1
 8017ab0:	eb00 0109 	add.w	r1, r0, r9
 8017ab4:	1d16      	adds	r6, r2, #4
 8017ab6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8017aba:	eb01 0209 	add.w	r2, r1, r9
 8017abe:	9402      	str	r4, [sp, #8]
 8017ac0:	9009      	str	r0, [sp, #36]	; 0x24
 8017ac2:	9301      	str	r3, [sp, #4]
 8017ac4:	46a3      	mov	fp, r4
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 8017acc:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 8017ad0:	960a      	str	r6, [sp, #40]	; 0x28
 8017ad2:	eb02 0009 	add.w	r0, r2, r9
 8017ad6:	4688      	mov	r8, r1
 8017ad8:	00ff      	lsls	r7, r7, #3
 8017ada:	4634      	mov	r4, r6
 8017adc:	4635      	mov	r5, r6
 8017ade:	ed93 7a00 	vldr	s14, [r3]
 8017ae2:	ed92 1a00 	vldr	s2, [r2]
 8017ae6:	edd0 1a00 	vldr	s3, [r0]
 8017aea:	ed92 2a01 	vldr	s4, [r2, #4]
 8017aee:	edd0 2a01 	vldr	s5, [r0, #4]
 8017af2:	edd3 3a01 	vldr	s7, [r3, #4]
 8017af6:	edd1 7a00 	vldr	s15, [r1]
 8017afa:	edd1 5a01 	vldr	s11, [r1, #4]
 8017afe:	ed54 4a01 	vldr	s9, [r4, #-4]
 8017b02:	ed94 3a00 	vldr	s6, [r4]
 8017b06:	ee37 5aa1 	vadd.f32	s10, s15, s3
 8017b0a:	ee35 6aa2 	vadd.f32	s12, s11, s5
 8017b0e:	ee37 4a01 	vadd.f32	s8, s14, s2
 8017b12:	ee73 6a82 	vadd.f32	s13, s7, s4
 8017b16:	ee34 0a05 	vadd.f32	s0, s8, s10
 8017b1a:	ee76 0a86 	vadd.f32	s1, s13, s12
 8017b1e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8017b22:	ee37 7a41 	vsub.f32	s14, s14, s2
 8017b26:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8017b2a:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8017b2e:	ed83 0a00 	vstr	s0, [r3]
 8017b32:	edc3 0a01 	vstr	s1, [r3, #4]
 8017b36:	ed55 1a01 	vldr	s3, [r5, #-4]
 8017b3a:	ed96 2a00 	vldr	s4, [r6]
 8017b3e:	ee77 2a25 	vadd.f32	s5, s14, s11
 8017b42:	ee34 4a45 	vsub.f32	s8, s8, s10
 8017b46:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8017b4a:	ed95 5a00 	vldr	s10, [r5]
 8017b4e:	ed16 6a01 	vldr	s12, [r6, #-4]
 8017b52:	ee37 7a65 	vsub.f32	s14, s14, s11
 8017b56:	ee73 5ae7 	vsub.f32	s11, s7, s15
 8017b5a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017b5e:	ee22 1aa1 	vmul.f32	s2, s5, s3
 8017b62:	ee67 3a06 	vmul.f32	s7, s14, s12
 8017b66:	ee62 2a85 	vmul.f32	s5, s5, s10
 8017b6a:	ee27 6a86 	vmul.f32	s12, s15, s12
 8017b6e:	ee25 5a85 	vmul.f32	s10, s11, s10
 8017b72:	ee67 7a82 	vmul.f32	s15, s15, s4
 8017b76:	ee65 5aa1 	vmul.f32	s11, s11, s3
 8017b7a:	ee27 7a02 	vmul.f32	s14, s14, s4
 8017b7e:	ee64 1a84 	vmul.f32	s3, s9, s8
 8017b82:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8017b86:	ee23 4a04 	vmul.f32	s8, s6, s8
 8017b8a:	ee63 6a26 	vmul.f32	s13, s6, s13
 8017b8e:	ee35 5a01 	vadd.f32	s10, s10, s2
 8017b92:	ee75 5ae2 	vsub.f32	s11, s11, s5
 8017b96:	ee76 6aa1 	vadd.f32	s13, s13, s3
 8017b9a:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8017b9e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017ba2:	ee36 7a47 	vsub.f32	s14, s12, s14
 8017ba6:	3308      	adds	r3, #8
 8017ba8:	4598      	cmp	r8, r3
 8017baa:	edc1 6a00 	vstr	s13, [r1]
 8017bae:	edc1 4a01 	vstr	s9, [r1, #4]
 8017bb2:	4474      	add	r4, lr
 8017bb4:	ed82 5a00 	vstr	s10, [r2]
 8017bb8:	edc2 5a01 	vstr	s11, [r2, #4]
 8017bbc:	4465      	add	r5, ip
 8017bbe:	edc0 7a00 	vstr	s15, [r0]
 8017bc2:	ed80 7a01 	vstr	s14, [r0, #4]
 8017bc6:	443e      	add	r6, r7
 8017bc8:	f101 0108 	add.w	r1, r1, #8
 8017bcc:	f102 0208 	add.w	r2, r2, #8
 8017bd0:	f100 0008 	add.w	r0, r0, #8
 8017bd4:	d183      	bne.n	8017ade <arm_radix4_butterfly_f32+0x42>
 8017bd6:	9b01      	ldr	r3, [sp, #4]
 8017bd8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017bdc:	920b      	str	r2, [sp, #44]	; 0x2c
 8017bde:	009b      	lsls	r3, r3, #2
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	2a04      	cmp	r2, #4
 8017be4:	9307      	str	r3, [sp, #28]
 8017be6:	f240 80b6 	bls.w	8017d56 <arm_radix4_butterfly_f32+0x2ba>
 8017bea:	9807      	ldr	r0, [sp, #28]
 8017bec:	9208      	str	r2, [sp, #32]
 8017bee:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8017bf2:	00db      	lsls	r3, r3, #3
 8017bf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017bf6:	9306      	str	r3, [sp, #24]
 8017bf8:	00c3      	lsls	r3, r0, #3
 8017bfa:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8017bfe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017c00:	9305      	str	r3, [sp, #20]
 8017c02:	0103      	lsls	r3, r0, #4
 8017c04:	9202      	str	r2, [sp, #8]
 8017c06:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 8017c0a:	9304      	str	r3, [sp, #16]
 8017c0c:	00d2      	lsls	r2, r2, #3
 8017c0e:	2300      	movs	r3, #0
 8017c10:	9203      	str	r2, [sp, #12]
 8017c12:	46be      	mov	lr, r7
 8017c14:	46bc      	mov	ip, r7
 8017c16:	9301      	str	r3, [sp, #4]
 8017c18:	9b03      	ldr	r3, [sp, #12]
 8017c1a:	ed17 0a01 	vldr	s0, [r7, #-4]
 8017c1e:	edd7 0a00 	vldr	s1, [r7]
 8017c22:	ed1c 1a01 	vldr	s2, [ip, #-4]
 8017c26:	eddc 1a00 	vldr	s3, [ip]
 8017c2a:	ed1e 2a01 	vldr	s4, [lr, #-4]
 8017c2e:	edde 2a00 	vldr	s5, [lr]
 8017c32:	9d01      	ldr	r5, [sp, #4]
 8017c34:	1999      	adds	r1, r3, r6
 8017c36:	eb03 0208 	add.w	r2, r3, r8
 8017c3a:	1d34      	adds	r4, r6, #4
 8017c3c:	4643      	mov	r3, r8
 8017c3e:	4630      	mov	r0, r6
 8017c40:	ed14 7a01 	vldr	s14, [r4, #-4]
 8017c44:	edd3 3a00 	vldr	s7, [r3]
 8017c48:	edd2 4a00 	vldr	s9, [r2]
 8017c4c:	edd0 5a01 	vldr	s11, [r0, #4]
 8017c50:	ed93 6a01 	vldr	s12, [r3, #4]
 8017c54:	edd2 6a01 	vldr	s13, [r2, #4]
 8017c58:	edd1 7a00 	vldr	s15, [r1]
 8017c5c:	ed91 5a01 	vldr	s10, [r1, #4]
 8017c60:	ee37 4a23 	vadd.f32	s8, s14, s7
 8017c64:	ee37 9aa4 	vadd.f32	s18, s15, s9
 8017c68:	ee75 8a26 	vadd.f32	s17, s10, s13
 8017c6c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8017c70:	ee35 5a66 	vsub.f32	s10, s10, s13
 8017c74:	ee75 4a86 	vadd.f32	s9, s11, s12
 8017c78:	ee37 7a63 	vsub.f32	s14, s14, s7
 8017c7c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8017c80:	ee77 3a05 	vadd.f32	s7, s14, s10
 8017c84:	ee75 6ae7 	vsub.f32	s13, s11, s15
 8017c88:	ee34 3a49 	vsub.f32	s6, s8, s18
 8017c8c:	ee34 6ae8 	vsub.f32	s12, s9, s17
 8017c90:	ee37 7a45 	vsub.f32	s14, s14, s10
 8017c94:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017c98:	ee61 aa03 	vmul.f32	s21, s2, s6
 8017c9c:	ee21 8a86 	vmul.f32	s16, s3, s12
 8017ca0:	ee20 aa23 	vmul.f32	s20, s0, s7
 8017ca4:	ee20 5aa6 	vmul.f32	s10, s1, s13
 8017ca8:	ee62 9a07 	vmul.f32	s19, s4, s14
 8017cac:	ee62 5aa7 	vmul.f32	s11, s5, s15
 8017cb0:	ee21 3a83 	vmul.f32	s6, s3, s6
 8017cb4:	ee21 6a06 	vmul.f32	s12, s2, s12
 8017cb8:	ee60 3aa3 	vmul.f32	s7, s1, s7
 8017cbc:	ee60 6a26 	vmul.f32	s13, s0, s13
 8017cc0:	ee22 7a87 	vmul.f32	s14, s5, s14
 8017cc4:	ee62 7a27 	vmul.f32	s15, s4, s15
 8017cc8:	ee34 4a09 	vadd.f32	s8, s8, s18
 8017ccc:	ee74 4aa8 	vadd.f32	s9, s9, s17
 8017cd0:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8017cd4:	ee36 6a43 	vsub.f32	s12, s12, s6
 8017cd8:	ee35 5a0a 	vadd.f32	s10, s10, s20
 8017cdc:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8017ce0:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8017ce4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017ce8:	445d      	add	r5, fp
 8017cea:	45aa      	cmp	sl, r5
 8017cec:	ed04 4a01 	vstr	s8, [r4, #-4]
 8017cf0:	edc0 4a01 	vstr	s9, [r0, #4]
 8017cf4:	444c      	add	r4, r9
 8017cf6:	ed81 8a00 	vstr	s16, [r1]
 8017cfa:	ed81 6a01 	vstr	s12, [r1, #4]
 8017cfe:	4448      	add	r0, r9
 8017d00:	ed83 5a00 	vstr	s10, [r3]
 8017d04:	edc3 6a01 	vstr	s13, [r3, #4]
 8017d08:	4449      	add	r1, r9
 8017d0a:	edc2 5a00 	vstr	s11, [r2]
 8017d0e:	edc2 7a01 	vstr	s15, [r2, #4]
 8017d12:	444b      	add	r3, r9
 8017d14:	444a      	add	r2, r9
 8017d16:	d893      	bhi.n	8017c40 <arm_radix4_butterfly_f32+0x1a4>
 8017d18:	9a05      	ldr	r2, [sp, #20]
 8017d1a:	9b01      	ldr	r3, [sp, #4]
 8017d1c:	4417      	add	r7, r2
 8017d1e:	9a04      	ldr	r2, [sp, #16]
 8017d20:	4494      	add	ip, r2
 8017d22:	9a06      	ldr	r2, [sp, #24]
 8017d24:	4496      	add	lr, r2
 8017d26:	9a02      	ldr	r2, [sp, #8]
 8017d28:	3301      	adds	r3, #1
 8017d2a:	429a      	cmp	r2, r3
 8017d2c:	9301      	str	r3, [sp, #4]
 8017d2e:	f106 0608 	add.w	r6, r6, #8
 8017d32:	f108 0808 	add.w	r8, r8, #8
 8017d36:	f47f af6f 	bne.w	8017c18 <arm_radix4_butterfly_f32+0x17c>
 8017d3a:	9b07      	ldr	r3, [sp, #28]
 8017d3c:	4693      	mov	fp, r2
 8017d3e:	9a08      	ldr	r2, [sp, #32]
 8017d40:	009b      	lsls	r3, r3, #2
 8017d42:	0892      	lsrs	r2, r2, #2
 8017d44:	b29b      	uxth	r3, r3
 8017d46:	2a04      	cmp	r2, #4
 8017d48:	9208      	str	r2, [sp, #32]
 8017d4a:	9307      	str	r3, [sp, #28]
 8017d4c:	d903      	bls.n	8017d56 <arm_radix4_butterfly_f32+0x2ba>
 8017d4e:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 8017d52:	4618      	mov	r0, r3
 8017d54:	e74b      	b.n	8017bee <arm_radix4_butterfly_f32+0x152>
 8017d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017d5a:	3320      	adds	r3, #32
 8017d5c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8017d60:	ed53 4a02 	vldr	s9, [r3, #-8]
 8017d64:	ed53 5a01 	vldr	s11, [r3, #-4]
 8017d68:	ed53 3a03 	vldr	s7, [r3, #-12]
 8017d6c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8017d70:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 8017d74:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8017d78:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 8017d7c:	ee37 5a04 	vadd.f32	s10, s14, s8
 8017d80:	ee37 7a44 	vsub.f32	s14, s14, s8
 8017d84:	ee36 4aa4 	vadd.f32	s8, s13, s9
 8017d88:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017d8c:	ee76 4a65 	vsub.f32	s9, s12, s11
 8017d90:	ee36 6a25 	vadd.f32	s12, s12, s11
 8017d94:	ee77 5aa3 	vadd.f32	s11, s15, s7
 8017d98:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8017d9c:	ee75 3a04 	vadd.f32	s7, s10, s8
 8017da0:	ee35 5a44 	vsub.f32	s10, s10, s8
 8017da4:	ee37 4a24 	vadd.f32	s8, s14, s9
 8017da8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8017dac:	ee75 4a86 	vadd.f32	s9, s11, s12
 8017db0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8017db4:	ee77 5ae6 	vsub.f32	s11, s15, s13
 8017db8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017dbc:	3a01      	subs	r2, #1
 8017dbe:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 8017dc2:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
 8017dc6:	ed03 4a04 	vstr	s8, [r3, #-16]
 8017dca:	ed03 7a02 	vstr	s14, [r3, #-8]
 8017dce:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 8017dd2:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 8017dd6:	ed43 5a03 	vstr	s11, [r3, #-12]
 8017dda:	ed43 7a01 	vstr	s15, [r3, #-4]
 8017dde:	f103 0320 	add.w	r3, r3, #32
 8017de2:	d1bb      	bne.n	8017d5c <arm_radix4_butterfly_f32+0x2c0>
 8017de4:	b00d      	add	sp, #52	; 0x34
 8017de6:	ecbd 8b06 	vpop	{d8-d10}
 8017dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dee:	bf00      	nop

08017df0 <arm_radix4_butterfly_inverse_f32>:
 8017df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017df4:	ed2d 8b08 	vpush	{d8-d11}
 8017df8:	088d      	lsrs	r5, r1, #2
 8017dfa:	b08d      	sub	sp, #52	; 0x34
 8017dfc:	012c      	lsls	r4, r5, #4
 8017dfe:	461e      	mov	r6, r3
 8017e00:	3204      	adds	r2, #4
 8017e02:	468a      	mov	sl, r1
 8017e04:	900a      	str	r0, [sp, #40]	; 0x28
 8017e06:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 8017e0a:	9301      	str	r3, [sp, #4]
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	4420      	add	r0, r4
 8017e10:	9209      	str	r2, [sp, #36]	; 0x24
 8017e12:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8017e16:	190a      	adds	r2, r1, r4
 8017e18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017e1a:	9502      	str	r5, [sp, #8]
 8017e1c:	ea4f 09c5 	mov.w	r9, r5, lsl #3
 8017e20:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8017e24:	46ab      	mov	fp, r5
 8017e26:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 8017e2a:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8017e2e:	eb03 0809 	add.w	r8, r3, r9
 8017e32:	00ff      	lsls	r7, r7, #3
 8017e34:	4626      	mov	r6, r4
 8017e36:	4625      	mov	r5, r4
 8017e38:	edd3 7a00 	vldr	s15, [r3]
 8017e3c:	edd2 1a00 	vldr	s3, [r2]
 8017e40:	ed90 2a01 	vldr	s4, [r0, #4]
 8017e44:	edd2 2a01 	vldr	s5, [r2, #4]
 8017e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8017e4c:	ed90 1a00 	vldr	s2, [r0]
 8017e50:	edd1 4a00 	vldr	s9, [r1]
 8017e54:	ed91 4a01 	vldr	s8, [r1, #4]
 8017e58:	ed14 3a01 	vldr	s6, [r4, #-4]
 8017e5c:	edd4 5a00 	vldr	s11, [r4]
 8017e60:	ee74 3aa1 	vadd.f32	s7, s9, s3
 8017e64:	ee34 6a22 	vadd.f32	s12, s8, s5
 8017e68:	ee77 6a02 	vadd.f32	s13, s14, s4
 8017e6c:	ee37 5a81 	vadd.f32	s10, s15, s2
 8017e70:	ee76 0a86 	vadd.f32	s1, s13, s12
 8017e74:	ee35 8a23 	vadd.f32	s16, s10, s7
 8017e78:	ee74 4ae1 	vsub.f32	s9, s9, s3
 8017e7c:	ee34 4a62 	vsub.f32	s8, s8, s5
 8017e80:	ee37 7a42 	vsub.f32	s14, s14, s4
 8017e84:	ee77 7ac1 	vsub.f32	s15, s15, s2
 8017e88:	ed83 8a00 	vstr	s16, [r3]
 8017e8c:	edc3 0a01 	vstr	s1, [r3, #4]
 8017e90:	ed15 2a01 	vldr	s4, [r5, #-4]
 8017e94:	edd5 2a00 	vldr	s5, [r5]
 8017e98:	edd6 1a00 	vldr	s3, [r6]
 8017e9c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8017ea0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8017ea4:	ed56 3a01 	vldr	s7, [r6, #-4]
 8017ea8:	ee37 6ac4 	vsub.f32	s12, s15, s8
 8017eac:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017eb0:	ee34 4a87 	vadd.f32	s8, s9, s14
 8017eb4:	ee37 7a64 	vsub.f32	s14, s14, s9
 8017eb8:	ee66 4a02 	vmul.f32	s9, s12, s4
 8017ebc:	ee26 6a22 	vmul.f32	s12, s12, s5
 8017ec0:	ee64 2a22 	vmul.f32	s5, s8, s5
 8017ec4:	ee24 4a02 	vmul.f32	s8, s8, s4
 8017ec8:	ee23 2a05 	vmul.f32	s4, s6, s10
 8017ecc:	ee23 3a26 	vmul.f32	s6, s6, s13
 8017ed0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8017ed4:	ee65 5a85 	vmul.f32	s11, s11, s10
 8017ed8:	ee27 5aa3 	vmul.f32	s10, s15, s7
 8017edc:	ee67 3a23 	vmul.f32	s7, s14, s7
 8017ee0:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8017ee4:	ee27 7a21 	vmul.f32	s14, s14, s3
 8017ee8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8017eec:	ee36 6a04 	vadd.f32	s12, s12, s8
 8017ef0:	ee72 4a66 	vsub.f32	s9, s4, s13
 8017ef4:	ee35 7a47 	vsub.f32	s14, s10, s14
 8017ef8:	ee75 6a83 	vadd.f32	s13, s11, s6
 8017efc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017f00:	3308      	adds	r3, #8
 8017f02:	4598      	cmp	r8, r3
 8017f04:	edc1 4a00 	vstr	s9, [r1]
 8017f08:	edc1 6a01 	vstr	s13, [r1, #4]
 8017f0c:	4474      	add	r4, lr
 8017f0e:	edc0 2a00 	vstr	s5, [r0]
 8017f12:	ed80 6a01 	vstr	s12, [r0, #4]
 8017f16:	4465      	add	r5, ip
 8017f18:	ed82 7a00 	vstr	s14, [r2]
 8017f1c:	edc2 7a01 	vstr	s15, [r2, #4]
 8017f20:	443e      	add	r6, r7
 8017f22:	f101 0108 	add.w	r1, r1, #8
 8017f26:	f100 0008 	add.w	r0, r0, #8
 8017f2a:	f102 0208 	add.w	r2, r2, #8
 8017f2e:	d183      	bne.n	8017e38 <arm_radix4_butterfly_inverse_f32+0x48>
 8017f30:	9b01      	ldr	r3, [sp, #4]
 8017f32:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017f36:	920b      	str	r2, [sp, #44]	; 0x2c
 8017f38:	009b      	lsls	r3, r3, #2
 8017f3a:	b29b      	uxth	r3, r3
 8017f3c:	2a04      	cmp	r2, #4
 8017f3e:	9307      	str	r3, [sp, #28]
 8017f40:	f240 80b6 	bls.w	80180b0 <arm_radix4_butterfly_inverse_f32+0x2c0>
 8017f44:	9807      	ldr	r0, [sp, #28]
 8017f46:	9208      	str	r2, [sp, #32]
 8017f48:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8017f4c:	00db      	lsls	r3, r3, #3
 8017f4e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017f50:	9306      	str	r3, [sp, #24]
 8017f52:	00c3      	lsls	r3, r0, #3
 8017f54:	ea4f 029b 	mov.w	r2, fp, lsr #2
 8017f58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017f5a:	9305      	str	r3, [sp, #20]
 8017f5c:	0103      	lsls	r3, r0, #4
 8017f5e:	9202      	str	r2, [sp, #8]
 8017f60:	eb06 1802 	add.w	r8, r6, r2, lsl #4
 8017f64:	9304      	str	r3, [sp, #16]
 8017f66:	00d2      	lsls	r2, r2, #3
 8017f68:	2300      	movs	r3, #0
 8017f6a:	9203      	str	r2, [sp, #12]
 8017f6c:	46be      	mov	lr, r7
 8017f6e:	46bc      	mov	ip, r7
 8017f70:	9301      	str	r3, [sp, #4]
 8017f72:	9b03      	ldr	r3, [sp, #12]
 8017f74:	ed17 1a01 	vldr	s2, [r7, #-4]
 8017f78:	edd7 1a00 	vldr	s3, [r7]
 8017f7c:	ed1c 2a01 	vldr	s4, [ip, #-4]
 8017f80:	eddc 2a00 	vldr	s5, [ip]
 8017f84:	ed1e 3a01 	vldr	s6, [lr, #-4]
 8017f88:	edde 3a00 	vldr	s7, [lr]
 8017f8c:	9d01      	ldr	r5, [sp, #4]
 8017f8e:	1999      	adds	r1, r3, r6
 8017f90:	eb03 0208 	add.w	r2, r3, r8
 8017f94:	1d34      	adds	r4, r6, #4
 8017f96:	4643      	mov	r3, r8
 8017f98:	4630      	mov	r0, r6
 8017f9a:	ed54 7a01 	vldr	s15, [r4, #-4]
 8017f9e:	edd3 0a00 	vldr	s1, [r3]
 8017fa2:	edd2 4a00 	vldr	s9, [r2]
 8017fa6:	ed90 7a01 	vldr	s14, [r0, #4]
 8017faa:	ed93 6a01 	vldr	s12, [r3, #4]
 8017fae:	edd2 6a01 	vldr	s13, [r2, #4]
 8017fb2:	edd1 5a00 	vldr	s11, [r1]
 8017fb6:	ed91 5a01 	vldr	s10, [r1, #4]
 8017fba:	ee37 4aa0 	vadd.f32	s8, s15, s1
 8017fbe:	ee35 9aa4 	vadd.f32	s18, s11, s9
 8017fc2:	ee75 9a26 	vadd.f32	s19, s10, s13
 8017fc6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8017fca:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017fce:	ee77 4a06 	vadd.f32	s9, s14, s12
 8017fd2:	ee35 5a66 	vsub.f32	s10, s10, s13
 8017fd6:	ee37 7a46 	vsub.f32	s14, s14, s12
 8017fda:	ee77 6ac5 	vsub.f32	s13, s15, s10
 8017fde:	ee34 6a49 	vsub.f32	s12, s8, s18
 8017fe2:	ee74 0ae9 	vsub.f32	s1, s9, s19
 8017fe6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017fea:	ee35 5a87 	vadd.f32	s10, s11, s14
 8017fee:	ee37 7a65 	vsub.f32	s14, s14, s11
 8017ff2:	ee62 8a06 	vmul.f32	s17, s4, s12
 8017ff6:	ee22 baa0 	vmul.f32	s22, s5, s1
 8017ffa:	ee21 8a26 	vmul.f32	s16, s2, s13
 8017ffe:	ee62 0a20 	vmul.f32	s1, s4, s1
 8018002:	ee61 aa85 	vmul.f32	s21, s3, s10
 8018006:	ee63 5a27 	vmul.f32	s11, s6, s15
 801800a:	ee23 aa87 	vmul.f32	s20, s7, s14
 801800e:	ee22 6a86 	vmul.f32	s12, s5, s12
 8018012:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8018016:	ee21 5a05 	vmul.f32	s10, s2, s10
 801801a:	ee63 7aa7 	vmul.f32	s15, s7, s15
 801801e:	ee23 7a07 	vmul.f32	s14, s6, s14
 8018022:	ee36 6a20 	vadd.f32	s12, s12, s1
 8018026:	ee34 4a09 	vadd.f32	s8, s8, s18
 801802a:	ee74 4aa9 	vadd.f32	s9, s9, s19
 801802e:	ee78 8acb 	vsub.f32	s17, s17, s22
 8018032:	ee78 0a6a 	vsub.f32	s1, s16, s21
 8018036:	ee76 6a85 	vadd.f32	s13, s13, s10
 801803a:	ee75 5aca 	vsub.f32	s11, s11, s20
 801803e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018042:	445d      	add	r5, fp
 8018044:	45aa      	cmp	sl, r5
 8018046:	ed04 4a01 	vstr	s8, [r4, #-4]
 801804a:	edc0 4a01 	vstr	s9, [r0, #4]
 801804e:	444c      	add	r4, r9
 8018050:	edc1 8a00 	vstr	s17, [r1]
 8018054:	ed81 6a01 	vstr	s12, [r1, #4]
 8018058:	4448      	add	r0, r9
 801805a:	edc3 0a00 	vstr	s1, [r3]
 801805e:	edc3 6a01 	vstr	s13, [r3, #4]
 8018062:	4449      	add	r1, r9
 8018064:	edc2 5a00 	vstr	s11, [r2]
 8018068:	edc2 7a01 	vstr	s15, [r2, #4]
 801806c:	444b      	add	r3, r9
 801806e:	444a      	add	r2, r9
 8018070:	d893      	bhi.n	8017f9a <arm_radix4_butterfly_inverse_f32+0x1aa>
 8018072:	9a05      	ldr	r2, [sp, #20]
 8018074:	9b01      	ldr	r3, [sp, #4]
 8018076:	4417      	add	r7, r2
 8018078:	9a04      	ldr	r2, [sp, #16]
 801807a:	4494      	add	ip, r2
 801807c:	9a06      	ldr	r2, [sp, #24]
 801807e:	4496      	add	lr, r2
 8018080:	9a02      	ldr	r2, [sp, #8]
 8018082:	3301      	adds	r3, #1
 8018084:	429a      	cmp	r2, r3
 8018086:	9301      	str	r3, [sp, #4]
 8018088:	f106 0608 	add.w	r6, r6, #8
 801808c:	f108 0808 	add.w	r8, r8, #8
 8018090:	f47f af6f 	bne.w	8017f72 <arm_radix4_butterfly_inverse_f32+0x182>
 8018094:	9b07      	ldr	r3, [sp, #28]
 8018096:	4693      	mov	fp, r2
 8018098:	9a08      	ldr	r2, [sp, #32]
 801809a:	009b      	lsls	r3, r3, #2
 801809c:	0892      	lsrs	r2, r2, #2
 801809e:	b29b      	uxth	r3, r3
 80180a0:	2a04      	cmp	r2, #4
 80180a2:	9208      	str	r2, [sp, #32]
 80180a4:	9307      	str	r3, [sp, #28]
 80180a6:	d903      	bls.n	80180b0 <arm_radix4_butterfly_inverse_f32+0x2c0>
 80180a8:	ea4f 09cb 	mov.w	r9, fp, lsl #3
 80180ac:	4618      	mov	r0, r3
 80180ae:	e74b      	b.n	8017f48 <arm_radix4_butterfly_inverse_f32+0x158>
 80180b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80180b4:	3320      	adds	r3, #32
 80180b6:	ed13 4a04 	vldr	s8, [r3, #-16]
 80180ba:	ed53 4a02 	vldr	s9, [r3, #-8]
 80180be:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80180c2:	ed53 3a03 	vldr	s7, [r3, #-12]
 80180c6:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 80180ca:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 80180ce:	ed13 5a01 	vldr	s10, [r3, #-4]
 80180d2:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 80180d6:	ee37 6a04 	vadd.f32	s12, s14, s8
 80180da:	ee37 7a44 	vsub.f32	s14, s14, s8
 80180de:	ee35 4aa4 	vadd.f32	s8, s11, s9
 80180e2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80180e6:	ee76 4ac5 	vsub.f32	s9, s13, s10
 80180ea:	ee36 5a85 	vadd.f32	s10, s13, s10
 80180ee:	ee77 6aa3 	vadd.f32	s13, s15, s7
 80180f2:	ee77 7ae3 	vsub.f32	s15, s15, s7
 80180f6:	ee76 3a04 	vadd.f32	s7, s12, s8
 80180fa:	ee36 6a44 	vsub.f32	s12, s12, s8
 80180fe:	ee37 4a64 	vsub.f32	s8, s14, s9
 8018102:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018106:	ee76 4a85 	vadd.f32	s9, s13, s10
 801810a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801810e:	ee37 5aa5 	vadd.f32	s10, s15, s11
 8018112:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018116:	ee63 3a80 	vmul.f32	s7, s7, s0
 801811a:	ee26 6a00 	vmul.f32	s12, s12, s0
 801811e:	ee24 4a00 	vmul.f32	s8, s8, s0
 8018122:	ee27 7a00 	vmul.f32	s14, s14, s0
 8018126:	ee64 4a80 	vmul.f32	s9, s9, s0
 801812a:	ee66 6a80 	vmul.f32	s13, s13, s0
 801812e:	ee65 5a00 	vmul.f32	s11, s10, s0
 8018132:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018136:	3a01      	subs	r2, #1
 8018138:	ed43 3a08 	vstr	s7, [r3, #-32]	; 0xffffffe0
 801813c:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8018140:	ed03 4a04 	vstr	s8, [r3, #-16]
 8018144:	ed03 7a02 	vstr	s14, [r3, #-8]
 8018148:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 801814c:	ed43 6a05 	vstr	s13, [r3, #-20]	; 0xffffffec
 8018150:	ed43 5a03 	vstr	s11, [r3, #-12]
 8018154:	ed43 7a01 	vstr	s15, [r3, #-4]
 8018158:	f103 0320 	add.w	r3, r3, #32
 801815c:	d1ab      	bne.n	80180b6 <arm_radix4_butterfly_inverse_f32+0x2c6>
 801815e:	b00d      	add	sp, #52	; 0x34
 8018160:	ecbd 8b08 	vpop	{d8-d11}
 8018164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018168 <arm_bitreversal_f32>:
 8018168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801816c:	b085      	sub	sp, #20
 801816e:	084c      	lsrs	r4, r1, #1
 8018170:	0052      	lsls	r2, r2, #1
 8018172:	2100      	movs	r1, #0
 8018174:	9201      	str	r2, [sp, #4]
 8018176:	1ea2      	subs	r2, r4, #2
 8018178:	9402      	str	r4, [sp, #8]
 801817a:	f104 0e01 	add.w	lr, r4, #1
 801817e:	9203      	str	r2, [sp, #12]
 8018180:	460c      	mov	r4, r1
 8018182:	460a      	mov	r2, r1
 8018184:	9d02      	ldr	r5, [sp, #8]
 8018186:	3101      	adds	r1, #1
 8018188:	442a      	add	r2, r5
 801818a:	00c9      	lsls	r1, r1, #3
 801818c:	00d2      	lsls	r2, r2, #3
 801818e:	1846      	adds	r6, r0, r1
 8018190:	1885      	adds	r5, r0, r2
 8018192:	3104      	adds	r1, #4
 8018194:	3204      	adds	r2, #4
 8018196:	6837      	ldr	r7, [r6, #0]
 8018198:	f8d5 c000 	ldr.w	ip, [r5]
 801819c:	f8c6 c000 	str.w	ip, [r6]
 80181a0:	4401      	add	r1, r0
 80181a2:	4402      	add	r2, r0
 80181a4:	602f      	str	r7, [r5, #0]
 80181a6:	3402      	adds	r4, #2
 80181a8:	680e      	ldr	r6, [r1, #0]
 80181aa:	f8d2 9000 	ldr.w	r9, [r2]
 80181ae:	f8c1 9000 	str.w	r9, [r1]
 80181b2:	b2a4      	uxth	r4, r4
 80181b4:	6016      	str	r6, [r2, #0]
 80181b6:	eb04 050e 	add.w	r5, r4, lr
 80181ba:	881a      	ldrh	r2, [r3, #0]
 80181bc:	00ed      	lsls	r5, r5, #3
 80181be:	eb00 0c05 	add.w	ip, r0, r5
 80181c2:	3504      	adds	r5, #4
 80181c4:	9500      	str	r5, [sp, #0]
 80181c6:	eb02 010e 	add.w	r1, r2, lr
 80181ca:	9d03      	ldr	r5, [sp, #12]
 80181cc:	00c9      	lsls	r1, r1, #3
 80181ce:	00e7      	lsls	r7, r4, #3
 80181d0:	00d6      	lsls	r6, r2, #3
 80181d2:	f101 0b04 	add.w	fp, r1, #4
 80181d6:	eb00 0901 	add.w	r9, r0, r1
 80181da:	42ac      	cmp	r4, r5
 80181dc:	9901      	ldr	r1, [sp, #4]
 80181de:	9d00      	ldr	r5, [sp, #0]
 80181e0:	eb00 0807 	add.w	r8, r0, r7
 80181e4:	eb00 0a06 	add.w	sl, r0, r6
 80181e8:	f107 0704 	add.w	r7, r7, #4
 80181ec:	f106 0604 	add.w	r6, r6, #4
 80181f0:	440b      	add	r3, r1
 80181f2:	4407      	add	r7, r0
 80181f4:	4406      	add	r6, r0
 80181f6:	4621      	mov	r1, r4
 80181f8:	4405      	add	r5, r0
 80181fa:	4483      	add	fp, r0
 80181fc:	d820      	bhi.n	8018240 <arm_bitreversal_f32+0xd8>
 80181fe:	42a2      	cmp	r2, r4
 8018200:	d9c0      	bls.n	8018184 <arm_bitreversal_f32+0x1c>
 8018202:	edd8 7a00 	vldr	s15, [r8]
 8018206:	ed9a 7a00 	vldr	s14, [sl]
 801820a:	ed88 7a00 	vstr	s14, [r8]
 801820e:	edca 7a00 	vstr	s15, [sl]
 8018212:	f8d7 8000 	ldr.w	r8, [r7]
 8018216:	f8d6 a000 	ldr.w	sl, [r6]
 801821a:	f8c7 a000 	str.w	sl, [r7]
 801821e:	f8c6 8000 	str.w	r8, [r6]
 8018222:	f8dc 6000 	ldr.w	r6, [ip]
 8018226:	f8d9 7000 	ldr.w	r7, [r9]
 801822a:	f8cc 7000 	str.w	r7, [ip]
 801822e:	f8c9 6000 	str.w	r6, [r9]
 8018232:	682e      	ldr	r6, [r5, #0]
 8018234:	f8db 7000 	ldr.w	r7, [fp]
 8018238:	602f      	str	r7, [r5, #0]
 801823a:	f8cb 6000 	str.w	r6, [fp]
 801823e:	e7a1      	b.n	8018184 <arm_bitreversal_f32+0x1c>
 8018240:	b005      	add	sp, #20
 8018242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018246:	bf00      	nop

08018248 <ai_buffer_get_size>:
 8018248:	b358      	cbz	r0, 80182a2 <ai_buffer_get_size+0x5a>
 801824a:	b430      	push	{r4, r5}
 801824c:	6803      	ldr	r3, [r0, #0]
 801824e:	4d15      	ldr	r5, [pc, #84]	; (80182a4 <ai_buffer_get_size+0x5c>)
 8018250:	6984      	ldr	r4, [r0, #24]
 8018252:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8018256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801825a:	42ab      	cmp	r3, r5
 801825c:	6862      	ldr	r2, [r4, #4]
 801825e:	d01a      	beq.n	8018296 <ai_buffer_get_size+0x4e>
 8018260:	7d03      	ldrb	r3, [r0, #20]
 8018262:	6941      	ldr	r1, [r0, #20]
 8018264:	f1a3 0301 	sub.w	r3, r3, #1
 8018268:	fab3 f383 	clz	r3, r3
 801826c:	095b      	lsrs	r3, r3, #5
 801826e:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8018272:	428b      	cmp	r3, r1
 8018274:	da0b      	bge.n	801828e <ai_buffer_get_size+0x46>
 8018276:	2b01      	cmp	r3, #1
 8018278:	d102      	bne.n	8018280 <ai_buffer_get_size+0x38>
 801827a:	2902      	cmp	r1, #2
 801827c:	d007      	beq.n	801828e <ai_buffer_get_size+0x46>
 801827e:	2302      	movs	r3, #2
 8018280:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018284:	3301      	adds	r3, #1
 8018286:	428b      	cmp	r3, r1
 8018288:	fb00 f202 	mul.w	r2, r0, r2
 801828c:	d1f3      	bne.n	8018276 <ai_buffer_get_size+0x2e>
 801828e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8018292:	bc30      	pop	{r4, r5}
 8018294:	4770      	bx	lr
 8018296:	2900      	cmp	r1, #0
 8018298:	d0e2      	beq.n	8018260 <ai_buffer_get_size+0x18>
 801829a:	321f      	adds	r2, #31
 801829c:	f022 021f 	bic.w	r2, r2, #31
 80182a0:	e7de      	b.n	8018260 <ai_buffer_get_size+0x18>
 80182a2:	4770      	bx	lr
 80182a4:	000400c0 	.word	0x000400c0

080182a8 <ai_buffer_array_sane>:
 80182a8:	b138      	cbz	r0, 80182ba <ai_buffer_array_sane+0x12>
 80182aa:	6843      	ldr	r3, [r0, #4]
 80182ac:	b123      	cbz	r3, 80182b8 <ai_buffer_array_sane+0x10>
 80182ae:	8840      	ldrh	r0, [r0, #2]
 80182b0:	3000      	adds	r0, #0
 80182b2:	bf18      	it	ne
 80182b4:	2001      	movne	r0, #1
 80182b6:	4770      	bx	lr
 80182b8:	4618      	mov	r0, r3
 80182ba:	4770      	bx	lr

080182bc <ai_buffer_array_item_set_address>:
 80182bc:	b120      	cbz	r0, 80182c8 <ai_buffer_array_item_set_address+0xc>
 80182be:	6843      	ldr	r3, [r0, #4]
 80182c0:	b11b      	cbz	r3, 80182ca <ai_buffer_array_item_set_address+0xe>
 80182c2:	8840      	ldrh	r0, [r0, #2]
 80182c4:	b918      	cbnz	r0, 80182ce <ai_buffer_array_item_set_address+0x12>
 80182c6:	4770      	bx	lr
 80182c8:	4770      	bx	lr
 80182ca:	4618      	mov	r0, r3
 80182cc:	4770      	bx	lr
 80182ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80182d2:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 80182d6:	d0f7      	beq.n	80182c8 <ai_buffer_array_item_set_address+0xc>
 80182d8:	6042      	str	r2, [r0, #4]
 80182da:	2001      	movs	r0, #1
 80182dc:	4770      	bx	lr
 80182de:	bf00      	nop

080182e0 <_ai_platform_acquire_crc>:
 80182e0:	2001      	movs	r0, #1
 80182e2:	4770      	bx	lr

080182e4 <_ai_platform_release_crc>:
 80182e4:	4770      	bx	lr
 80182e6:	bf00      	nop

080182e8 <ai_platform_get_weights_map>:
 80182e8:	b192      	cbz	r2, 8018310 <ai_platform_get_weights_map+0x28>
 80182ea:	b188      	cbz	r0, 8018310 <ai_platform_get_weights_map+0x28>
 80182ec:	b181      	cbz	r1, 8018310 <ai_platform_get_weights_map+0x28>
 80182ee:	b570      	push	{r4, r5, r6, lr}
 80182f0:	4b24      	ldr	r3, [pc, #144]	; (8018384 <ai_platform_get_weights_map+0x9c>)
 80182f2:	6814      	ldr	r4, [r2, #0]
 80182f4:	429c      	cmp	r4, r3
 80182f6:	d00d      	beq.n	8018314 <ai_platform_get_weights_map+0x2c>
 80182f8:	6854      	ldr	r4, [r2, #4]
 80182fa:	b194      	cbz	r4, 8018322 <ai_platform_get_weights_map+0x3a>
 80182fc:	6825      	ldr	r5, [r4, #0]
 80182fe:	429d      	cmp	r5, r3
 8018300:	d027      	beq.n	8018352 <ai_platform_get_weights_map+0x6a>
 8018302:	6004      	str	r4, [r0, #0]
 8018304:	f1a1 0001 	sub.w	r0, r1, #1
 8018308:	fab0 f080 	clz	r0, r0
 801830c:	0940      	lsrs	r0, r0, #5
 801830e:	bd70      	pop	{r4, r5, r6, pc}
 8018310:	2000      	movs	r0, #0
 8018312:	4770      	bx	lr
 8018314:	4605      	mov	r5, r0
 8018316:	1d10      	adds	r0, r2, #4
 8018318:	4616      	mov	r6, r2
 801831a:	460c      	mov	r4, r1
 801831c:	f7ff ffc4 	bl	80182a8 <ai_buffer_array_sane>
 8018320:	b908      	cbnz	r0, 8018326 <ai_platform_get_weights_map+0x3e>
 8018322:	2000      	movs	r0, #0
 8018324:	bd70      	pop	{r4, r5, r6, pc}
 8018326:	88f3      	ldrh	r3, [r6, #6]
 8018328:	429c      	cmp	r4, r3
 801832a:	d1fa      	bne.n	8018322 <ai_platform_get_weights_map+0x3a>
 801832c:	2100      	movs	r1, #0
 801832e:	1f2b      	subs	r3, r5, #4
 8018330:	4608      	mov	r0, r1
 8018332:	68b2      	ldr	r2, [r6, #8]
 8018334:	440a      	add	r2, r1
 8018336:	311c      	adds	r1, #28
 8018338:	6852      	ldr	r2, [r2, #4]
 801833a:	b12a      	cbz	r2, 8018348 <ai_platform_get_weights_map+0x60>
 801833c:	3001      	adds	r0, #1
 801833e:	4284      	cmp	r4, r0
 8018340:	f843 2f04 	str.w	r2, [r3, #4]!
 8018344:	d1f5      	bne.n	8018332 <ai_platform_get_weights_map+0x4a>
 8018346:	4620      	mov	r0, r4
 8018348:	1a20      	subs	r0, r4, r0
 801834a:	fab0 f080 	clz	r0, r0
 801834e:	0940      	lsrs	r0, r0, #5
 8018350:	bd70      	pop	{r4, r5, r6, pc}
 8018352:	6863      	ldr	r3, [r4, #4]
 8018354:	42ab      	cmp	r3, r5
 8018356:	f104 0404 	add.w	r4, r4, #4
 801835a:	d0e2      	beq.n	8018322 <ai_platform_get_weights_map+0x3a>
 801835c:	3804      	subs	r0, #4
 801835e:	4626      	mov	r6, r4
 8018360:	2200      	movs	r2, #0
 8018362:	e003      	b.n	801836c <ai_platform_get_weights_map+0x84>
 8018364:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8018368:	42ab      	cmp	r3, r5
 801836a:	d0da      	beq.n	8018322 <ai_platform_get_weights_map+0x3a>
 801836c:	3201      	adds	r2, #1
 801836e:	4291      	cmp	r1, r2
 8018370:	f840 3f04 	str.w	r3, [r0, #4]!
 8018374:	d1f6      	bne.n	8018364 <ai_platform_get_weights_map+0x7c>
 8018376:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 801837a:	4b02      	ldr	r3, [pc, #8]	; (8018384 <ai_platform_get_weights_map+0x9c>)
 801837c:	429a      	cmp	r2, r3
 801837e:	d1d0      	bne.n	8018322 <ai_platform_get_weights_map+0x3a>
 8018380:	2001      	movs	r0, #1
 8018382:	bd70      	pop	{r4, r5, r6, pc}
 8018384:	a1facade 	.word	0xa1facade

08018388 <ai_platform_get_activations_map>:
 8018388:	b192      	cbz	r2, 80183b0 <ai_platform_get_activations_map+0x28>
 801838a:	b188      	cbz	r0, 80183b0 <ai_platform_get_activations_map+0x28>
 801838c:	b181      	cbz	r1, 80183b0 <ai_platform_get_activations_map+0x28>
 801838e:	b570      	push	{r4, r5, r6, lr}
 8018390:	4b25      	ldr	r3, [pc, #148]	; (8018428 <ai_platform_get_activations_map+0xa0>)
 8018392:	6814      	ldr	r4, [r2, #0]
 8018394:	429c      	cmp	r4, r3
 8018396:	d00d      	beq.n	80183b4 <ai_platform_get_activations_map+0x2c>
 8018398:	6a14      	ldr	r4, [r2, #32]
 801839a:	b19c      	cbz	r4, 80183c4 <ai_platform_get_activations_map+0x3c>
 801839c:	6825      	ldr	r5, [r4, #0]
 801839e:	429d      	cmp	r5, r3
 80183a0:	d028      	beq.n	80183f4 <ai_platform_get_activations_map+0x6c>
 80183a2:	6004      	str	r4, [r0, #0]
 80183a4:	f1a1 0001 	sub.w	r0, r1, #1
 80183a8:	fab0 f080 	clz	r0, r0
 80183ac:	0940      	lsrs	r0, r0, #5
 80183ae:	bd70      	pop	{r4, r5, r6, pc}
 80183b0:	2000      	movs	r0, #0
 80183b2:	4770      	bx	lr
 80183b4:	4605      	mov	r5, r0
 80183b6:	f102 000c 	add.w	r0, r2, #12
 80183ba:	4616      	mov	r6, r2
 80183bc:	460c      	mov	r4, r1
 80183be:	f7ff ff73 	bl	80182a8 <ai_buffer_array_sane>
 80183c2:	b908      	cbnz	r0, 80183c8 <ai_platform_get_activations_map+0x40>
 80183c4:	2000      	movs	r0, #0
 80183c6:	bd70      	pop	{r4, r5, r6, pc}
 80183c8:	89f3      	ldrh	r3, [r6, #14]
 80183ca:	429c      	cmp	r4, r3
 80183cc:	d1fa      	bne.n	80183c4 <ai_platform_get_activations_map+0x3c>
 80183ce:	2100      	movs	r1, #0
 80183d0:	1f2b      	subs	r3, r5, #4
 80183d2:	4608      	mov	r0, r1
 80183d4:	6932      	ldr	r2, [r6, #16]
 80183d6:	440a      	add	r2, r1
 80183d8:	311c      	adds	r1, #28
 80183da:	6852      	ldr	r2, [r2, #4]
 80183dc:	b12a      	cbz	r2, 80183ea <ai_platform_get_activations_map+0x62>
 80183de:	3001      	adds	r0, #1
 80183e0:	4284      	cmp	r4, r0
 80183e2:	f843 2f04 	str.w	r2, [r3, #4]!
 80183e6:	d1f5      	bne.n	80183d4 <ai_platform_get_activations_map+0x4c>
 80183e8:	4620      	mov	r0, r4
 80183ea:	1a20      	subs	r0, r4, r0
 80183ec:	fab0 f080 	clz	r0, r0
 80183f0:	0940      	lsrs	r0, r0, #5
 80183f2:	bd70      	pop	{r4, r5, r6, pc}
 80183f4:	6863      	ldr	r3, [r4, #4]
 80183f6:	42ab      	cmp	r3, r5
 80183f8:	f104 0404 	add.w	r4, r4, #4
 80183fc:	d0e2      	beq.n	80183c4 <ai_platform_get_activations_map+0x3c>
 80183fe:	3804      	subs	r0, #4
 8018400:	4626      	mov	r6, r4
 8018402:	2200      	movs	r2, #0
 8018404:	e003      	b.n	801840e <ai_platform_get_activations_map+0x86>
 8018406:	f856 3f04 	ldr.w	r3, [r6, #4]!
 801840a:	42ab      	cmp	r3, r5
 801840c:	d0da      	beq.n	80183c4 <ai_platform_get_activations_map+0x3c>
 801840e:	3201      	adds	r2, #1
 8018410:	4291      	cmp	r1, r2
 8018412:	f840 3f04 	str.w	r3, [r0, #4]!
 8018416:	d1f6      	bne.n	8018406 <ai_platform_get_activations_map+0x7e>
 8018418:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 801841c:	4b02      	ldr	r3, [pc, #8]	; (8018428 <ai_platform_get_activations_map+0xa0>)
 801841e:	429a      	cmp	r2, r3
 8018420:	d1d0      	bne.n	80183c4 <ai_platform_get_activations_map+0x3c>
 8018422:	2001      	movs	r0, #1
 8018424:	bd70      	pop	{r4, r5, r6, pc}
 8018426:	bf00      	nop
 8018428:	a1facade 	.word	0xa1facade

0801842c <ai_platform_bind_network_params>:
 801842c:	4603      	mov	r3, r0
 801842e:	b190      	cbz	r0, 8018456 <ai_platform_bind_network_params+0x2a>
 8018430:	b1a1      	cbz	r1, 801845c <ai_platform_bind_network_params+0x30>
 8018432:	b18a      	cbz	r2, 8018458 <ai_platform_bind_network_params+0x2c>
 8018434:	b410      	push	{r4}
 8018436:	4604      	mov	r4, r0
 8018438:	4809      	ldr	r0, [pc, #36]	; (8018460 <ai_platform_bind_network_params+0x34>)
 801843a:	f844 0b04 	str.w	r0, [r4], #4
 801843e:	c903      	ldmia	r1, {r0, r1}
 8018440:	e884 0003 	stmia.w	r4, {r0, r1}
 8018444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018448:	330c      	adds	r3, #12
 801844a:	e883 0003 	stmia.w	r3, {r0, r1}
 801844e:	2001      	movs	r0, #1
 8018450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018454:	4770      	bx	lr
 8018456:	4770      	bx	lr
 8018458:	4610      	mov	r0, r2
 801845a:	4770      	bx	lr
 801845c:	4608      	mov	r0, r1
 801845e:	4770      	bx	lr
 8018460:	a1facade 	.word	0xa1facade

08018464 <ai_platform_network_get_error>:
 8018464:	b510      	push	{r4, lr}
 8018466:	b120      	cbz	r0, 8018472 <ai_platform_network_get_error+0xe>
 8018468:	4b32      	ldr	r3, [pc, #200]	; (8018534 <ai_platform_network_get_error+0xd0>)
 801846a:	6802      	ldr	r2, [r0, #0]
 801846c:	429a      	cmp	r2, r3
 801846e:	4604      	mov	r4, r0
 8018470:	d02e      	beq.n	80184d0 <ai_platform_network_get_error+0x6c>
 8018472:	4a31      	ldr	r2, [pc, #196]	; (8018538 <ai_platform_network_get_error+0xd4>)
 8018474:	6813      	ldr	r3, [r2, #0]
 8018476:	f023 0301 	bic.w	r3, r3, #1
 801847a:	6013      	str	r3, [r2, #0]
 801847c:	f7ff ff30 	bl	80182e0 <_ai_platform_acquire_crc>
 8018480:	4b2e      	ldr	r3, [pc, #184]	; (801853c <ai_platform_network_get_error+0xd8>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801848c:	d00d      	beq.n	80184aa <ai_platform_network_get_error+0x46>
 801848e:	4b2c      	ldr	r3, [pc, #176]	; (8018540 <ai_platform_network_get_error+0xdc>)
 8018490:	2201      	movs	r2, #1
 8018492:	601a      	str	r2, [r3, #0]
 8018494:	681a      	ldr	r2, [r3, #0]
 8018496:	2a00      	cmp	r2, #0
 8018498:	d1fc      	bne.n	8018494 <ai_platform_network_get_error+0x30>
 801849a:	4b2a      	ldr	r3, [pc, #168]	; (8018544 <ai_platform_network_get_error+0xe0>)
 801849c:	4a2a      	ldr	r2, [pc, #168]	; (8018548 <ai_platform_network_get_error+0xe4>)
 801849e:	601a      	str	r2, [r3, #0]
 80184a0:	681a      	ldr	r2, [r3, #0]
 80184a2:	4b2a      	ldr	r3, [pc, #168]	; (801854c <ai_platform_network_get_error+0xe8>)
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d00d      	beq.n	80184c4 <ai_platform_network_get_error+0x60>
 80184a8:	e7fe      	b.n	80184a8 <ai_platform_network_get_error+0x44>
 80184aa:	4b29      	ldr	r3, [pc, #164]	; (8018550 <ai_platform_network_get_error+0xec>)
 80184ac:	2201      	movs	r2, #1
 80184ae:	601a      	str	r2, [r3, #0]
 80184b0:	681a      	ldr	r2, [r3, #0]
 80184b2:	2a00      	cmp	r2, #0
 80184b4:	d1fc      	bne.n	80184b0 <ai_platform_network_get_error+0x4c>
 80184b6:	4b27      	ldr	r3, [pc, #156]	; (8018554 <ai_platform_network_get_error+0xf0>)
 80184b8:	4a23      	ldr	r2, [pc, #140]	; (8018548 <ai_platform_network_get_error+0xe4>)
 80184ba:	601a      	str	r2, [r3, #0]
 80184bc:	681a      	ldr	r2, [r3, #0]
 80184be:	4b23      	ldr	r3, [pc, #140]	; (801854c <ai_platform_network_get_error+0xe8>)
 80184c0:	429a      	cmp	r2, r3
 80184c2:	d104      	bne.n	80184ce <ai_platform_network_get_error+0x6a>
 80184c4:	f7ff ff0e 	bl	80182e4 <_ai_platform_release_crc>
 80184c8:	f241 0010 	movw	r0, #4112	; 0x1010
 80184cc:	bd10      	pop	{r4, pc}
 80184ce:	e7fe      	b.n	80184ce <ai_platform_network_get_error+0x6a>
 80184d0:	4a19      	ldr	r2, [pc, #100]	; (8018538 <ai_platform_network_get_error+0xd4>)
 80184d2:	6813      	ldr	r3, [r2, #0]
 80184d4:	f023 0301 	bic.w	r3, r3, #1
 80184d8:	6013      	str	r3, [r2, #0]
 80184da:	f7ff ff01 	bl	80182e0 <_ai_platform_acquire_crc>
 80184de:	4b17      	ldr	r3, [pc, #92]	; (801853c <ai_platform_network_get_error+0xd8>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80184e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184ea:	d00d      	beq.n	8018508 <ai_platform_network_get_error+0xa4>
 80184ec:	4b14      	ldr	r3, [pc, #80]	; (8018540 <ai_platform_network_get_error+0xdc>)
 80184ee:	2201      	movs	r2, #1
 80184f0:	601a      	str	r2, [r3, #0]
 80184f2:	681a      	ldr	r2, [r3, #0]
 80184f4:	2a00      	cmp	r2, #0
 80184f6:	d1fc      	bne.n	80184f2 <ai_platform_network_get_error+0x8e>
 80184f8:	4b12      	ldr	r3, [pc, #72]	; (8018544 <ai_platform_network_get_error+0xe0>)
 80184fa:	4a13      	ldr	r2, [pc, #76]	; (8018548 <ai_platform_network_get_error+0xe4>)
 80184fc:	601a      	str	r2, [r3, #0]
 80184fe:	681a      	ldr	r2, [r3, #0]
 8018500:	4b12      	ldr	r3, [pc, #72]	; (801854c <ai_platform_network_get_error+0xe8>)
 8018502:	429a      	cmp	r2, r3
 8018504:	d00e      	beq.n	8018524 <ai_platform_network_get_error+0xc0>
 8018506:	e7fe      	b.n	8018506 <ai_platform_network_get_error+0xa2>
 8018508:	4b11      	ldr	r3, [pc, #68]	; (8018550 <ai_platform_network_get_error+0xec>)
 801850a:	2201      	movs	r2, #1
 801850c:	601a      	str	r2, [r3, #0]
 801850e:	681a      	ldr	r2, [r3, #0]
 8018510:	2a00      	cmp	r2, #0
 8018512:	d1fc      	bne.n	801850e <ai_platform_network_get_error+0xaa>
 8018514:	4b0f      	ldr	r3, [pc, #60]	; (8018554 <ai_platform_network_get_error+0xf0>)
 8018516:	4a0c      	ldr	r2, [pc, #48]	; (8018548 <ai_platform_network_get_error+0xe4>)
 8018518:	601a      	str	r2, [r3, #0]
 801851a:	681a      	ldr	r2, [r3, #0]
 801851c:	4b0b      	ldr	r3, [pc, #44]	; (801854c <ai_platform_network_get_error+0xe8>)
 801851e:	429a      	cmp	r2, r3
 8018520:	d000      	beq.n	8018524 <ai_platform_network_get_error+0xc0>
 8018522:	e7fe      	b.n	8018522 <ai_platform_network_get_error+0xbe>
 8018524:	f7ff fede 	bl	80182e4 <_ai_platform_release_crc>
 8018528:	f104 0010 	add.w	r0, r4, #16
 801852c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018530:	f000 bef4 	b.w	801931c <core_get_error>
 8018534:	a1c00100 	.word	0xa1c00100
 8018538:	e0002000 	.word	0xe0002000
 801853c:	e0042000 	.word	0xe0042000
 8018540:	58024c08 	.word	0x58024c08
 8018544:	58024c00 	.word	0x58024c00
 8018548:	f407a5c2 	.word	0xf407a5c2
 801854c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018550:	40023008 	.word	0x40023008
 8018554:	40023000 	.word	0x40023000

08018558 <ai_platform_network_set_error>:
 8018558:	b110      	cbz	r0, 8018560 <ai_platform_network_set_error+0x8>
 801855a:	3010      	adds	r0, #16
 801855c:	f000 bee4 	b.w	8019328 <core_set_error>
 8018560:	4770      	bx	lr
 8018562:	bf00      	nop

08018564 <ai_platform_inputs_get>:
 8018564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018568:	b085      	sub	sp, #20
 801856a:	2800      	cmp	r0, #0
 801856c:	f000 80a1 	beq.w	80186b2 <ai_platform_inputs_get+0x14e>
 8018570:	4b6d      	ldr	r3, [pc, #436]	; (8018728 <ai_platform_inputs_get+0x1c4>)
 8018572:	6802      	ldr	r2, [r0, #0]
 8018574:	429a      	cmp	r2, r3
 8018576:	4607      	mov	r7, r0
 8018578:	f040 809b 	bne.w	80186b2 <ai_platform_inputs_get+0x14e>
 801857c:	4a6b      	ldr	r2, [pc, #428]	; (801872c <ai_platform_inputs_get+0x1c8>)
 801857e:	6813      	ldr	r3, [r2, #0]
 8018580:	f023 0301 	bic.w	r3, r3, #1
 8018584:	6013      	str	r3, [r2, #0]
 8018586:	468b      	mov	fp, r1
 8018588:	f7ff feaa 	bl	80182e0 <_ai_platform_acquire_crc>
 801858c:	4b68      	ldr	r3, [pc, #416]	; (8018730 <ai_platform_inputs_get+0x1cc>)
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018598:	d00d      	beq.n	80185b6 <ai_platform_inputs_get+0x52>
 801859a:	4b66      	ldr	r3, [pc, #408]	; (8018734 <ai_platform_inputs_get+0x1d0>)
 801859c:	2201      	movs	r2, #1
 801859e:	601a      	str	r2, [r3, #0]
 80185a0:	681a      	ldr	r2, [r3, #0]
 80185a2:	2a00      	cmp	r2, #0
 80185a4:	d1fc      	bne.n	80185a0 <ai_platform_inputs_get+0x3c>
 80185a6:	4b64      	ldr	r3, [pc, #400]	; (8018738 <ai_platform_inputs_get+0x1d4>)
 80185a8:	4a64      	ldr	r2, [pc, #400]	; (801873c <ai_platform_inputs_get+0x1d8>)
 80185aa:	601a      	str	r2, [r3, #0]
 80185ac:	681a      	ldr	r2, [r3, #0]
 80185ae:	4b64      	ldr	r3, [pc, #400]	; (8018740 <ai_platform_inputs_get+0x1dc>)
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d00d      	beq.n	80185d0 <ai_platform_inputs_get+0x6c>
 80185b4:	e7fe      	b.n	80185b4 <ai_platform_inputs_get+0x50>
 80185b6:	4b63      	ldr	r3, [pc, #396]	; (8018744 <ai_platform_inputs_get+0x1e0>)
 80185b8:	2201      	movs	r2, #1
 80185ba:	601a      	str	r2, [r3, #0]
 80185bc:	681a      	ldr	r2, [r3, #0]
 80185be:	2a00      	cmp	r2, #0
 80185c0:	d1fc      	bne.n	80185bc <ai_platform_inputs_get+0x58>
 80185c2:	4b61      	ldr	r3, [pc, #388]	; (8018748 <ai_platform_inputs_get+0x1e4>)
 80185c4:	4a5d      	ldr	r2, [pc, #372]	; (801873c <ai_platform_inputs_get+0x1d8>)
 80185c6:	601a      	str	r2, [r3, #0]
 80185c8:	681a      	ldr	r2, [r3, #0]
 80185ca:	4b5d      	ldr	r3, [pc, #372]	; (8018740 <ai_platform_inputs_get+0x1dc>)
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d16f      	bne.n	80186b0 <ai_platform_inputs_get+0x14c>
 80185d0:	f7ff fe88 	bl	80182e4 <_ai_platform_release_crc>
 80185d4:	f1bb 0f00 	cmp.w	fp, #0
 80185d8:	d002      	beq.n	80185e0 <ai_platform_inputs_get+0x7c>
 80185da:	2300      	movs	r3, #0
 80185dc:	f8ab 3000 	strh.w	r3, [fp]
 80185e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	f000 8081 	beq.w	80186ea <ai_platform_inputs_get+0x186>
 80185e8:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80185ea:	2e00      	cmp	r6, #0
 80185ec:	d07d      	beq.n	80186ea <ai_platform_inputs_get+0x186>
 80185ee:	8833      	ldrh	r3, [r6, #0]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d07a      	beq.n	80186ea <ai_platform_inputs_get+0x186>
 80185f4:	6873      	ldr	r3, [r6, #4]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d077      	beq.n	80186ea <ai_platform_inputs_get+0x186>
 80185fa:	681d      	ldr	r5, [r3, #0]
 80185fc:	2d00      	cmp	r5, #0
 80185fe:	d074      	beq.n	80186ea <ai_platform_inputs_get+0x186>
 8018600:	f04f 0800 	mov.w	r8, #0
 8018604:	f8cd b008 	str.w	fp, [sp, #8]
 8018608:	46c1      	mov	r9, r8
 801860a:	46bb      	mov	fp, r7
 801860c:	68b0      	ldr	r0, [r6, #8]
 801860e:	69aa      	ldr	r2, [r5, #24]
 8018610:	68ab      	ldr	r3, [r5, #8]
 8018612:	6844      	ldr	r4, [r0, #4]
 8018614:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8018618:	6810      	ldr	r0, [r2, #0]
 801861a:	68ef      	ldr	r7, [r5, #12]
 801861c:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8018620:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8018624:	9301      	str	r3, [sp, #4]
 8018626:	9203      	str	r2, [sp, #12]
 8018628:	f001 fce6 	bl	8019ff8 <ai_array_to_buffer_fmt>
 801862c:	9a03      	ldr	r2, [sp, #12]
 801862e:	4601      	mov	r1, r0
 8018630:	69a8      	ldr	r0, [r5, #24]
 8018632:	eb0a 0302 	add.w	r3, sl, r2
 8018636:	4444      	add	r4, r8
 8018638:	f8d0 e008 	ldr.w	lr, [r0, #8]
 801863c:	b16b      	cbz	r3, 801865a <ai_platform_inputs_get+0xf6>
 801863e:	2000      	movs	r0, #0
 8018640:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8018644:	6828      	ldr	r0, [r5, #0]
 8018646:	6058      	str	r0, [r3, #4]
 8018648:	2800      	cmp	r0, #0
 801864a:	d058      	beq.n	80186fe <ai_platform_inputs_get+0x19a>
 801864c:	8840      	ldrh	r0, [r0, #2]
 801864e:	2800      	cmp	r0, #0
 8018650:	d055      	beq.n	80186fe <ai_platform_inputs_get+0x19a>
 8018652:	2001      	movs	r0, #1
 8018654:	f84a 0002 	str.w	r0, [sl, r2]
 8018658:	69a8      	ldr	r0, [r5, #24]
 801865a:	6842      	ldr	r2, [r0, #4]
 801865c:	6122      	str	r2, [r4, #16]
 801865e:	f04f 0001 	mov.w	r0, #1
 8018662:	7520      	strb	r0, [r4, #20]
 8018664:	9a01      	ldr	r2, [sp, #4]
 8018666:	6960      	ldr	r0, [r4, #20]
 8018668:	60a3      	str	r3, [r4, #8]
 801866a:	f362 201f 	bfi	r0, r2, #8, #24
 801866e:	e9c4 1e00 	strd	r1, lr, [r4]
 8018672:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8018676:	2300      	movs	r3, #0
 8018678:	60e3      	str	r3, [r4, #12]
 801867a:	8830      	ldrh	r0, [r6, #0]
 801867c:	f109 0301 	add.w	r3, r9, #1
 8018680:	4283      	cmp	r3, r0
 8018682:	4699      	mov	r9, r3
 8018684:	b29a      	uxth	r2, r3
 8018686:	d207      	bcs.n	8018698 <ai_platform_inputs_get+0x134>
 8018688:	6870      	ldr	r0, [r6, #4]
 801868a:	b128      	cbz	r0, 8018698 <ai_platform_inputs_get+0x134>
 801868c:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8018690:	f108 081c 	add.w	r8, r8, #28
 8018694:	2d00      	cmp	r5, #0
 8018696:	d1b9      	bne.n	801860c <ai_platform_inputs_get+0xa8>
 8018698:	465f      	mov	r7, fp
 801869a:	f8dd b008 	ldr.w	fp, [sp, #8]
 801869e:	b322      	cbz	r2, 80186ea <ai_platform_inputs_get+0x186>
 80186a0:	68b3      	ldr	r3, [r6, #8]
 80186a2:	6858      	ldr	r0, [r3, #4]
 80186a4:	f1bb 0f00 	cmp.w	fp, #0
 80186a8:	d026      	beq.n	80186f8 <ai_platform_inputs_get+0x194>
 80186aa:	f8ab 2000 	strh.w	r2, [fp]
 80186ae:	e023      	b.n	80186f8 <ai_platform_inputs_get+0x194>
 80186b0:	e7fe      	b.n	80186b0 <ai_platform_inputs_get+0x14c>
 80186b2:	4a1e      	ldr	r2, [pc, #120]	; (801872c <ai_platform_inputs_get+0x1c8>)
 80186b4:	6813      	ldr	r3, [r2, #0]
 80186b6:	f023 0301 	bic.w	r3, r3, #1
 80186ba:	6013      	str	r3, [r2, #0]
 80186bc:	f7ff fe10 	bl	80182e0 <_ai_platform_acquire_crc>
 80186c0:	4b1b      	ldr	r3, [pc, #108]	; (8018730 <ai_platform_inputs_get+0x1cc>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80186c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80186cc:	d01a      	beq.n	8018704 <ai_platform_inputs_get+0x1a0>
 80186ce:	4b19      	ldr	r3, [pc, #100]	; (8018734 <ai_platform_inputs_get+0x1d0>)
 80186d0:	2201      	movs	r2, #1
 80186d2:	601a      	str	r2, [r3, #0]
 80186d4:	681a      	ldr	r2, [r3, #0]
 80186d6:	2a00      	cmp	r2, #0
 80186d8:	d1fc      	bne.n	80186d4 <ai_platform_inputs_get+0x170>
 80186da:	4b17      	ldr	r3, [pc, #92]	; (8018738 <ai_platform_inputs_get+0x1d4>)
 80186dc:	4a17      	ldr	r2, [pc, #92]	; (801873c <ai_platform_inputs_get+0x1d8>)
 80186de:	601a      	str	r2, [r3, #0]
 80186e0:	681a      	ldr	r2, [r3, #0]
 80186e2:	4b17      	ldr	r3, [pc, #92]	; (8018740 <ai_platform_inputs_get+0x1dc>)
 80186e4:	429a      	cmp	r2, r3
 80186e6:	d01b      	beq.n	8018720 <ai_platform_inputs_get+0x1bc>
 80186e8:	e7fe      	b.n	80186e8 <ai_platform_inputs_get+0x184>
 80186ea:	f107 0010 	add.w	r0, r7, #16
 80186ee:	2218      	movs	r2, #24
 80186f0:	2111      	movs	r1, #17
 80186f2:	f000 fe19 	bl	8019328 <core_set_error>
 80186f6:	2000      	movs	r0, #0
 80186f8:	b005      	add	sp, #20
 80186fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186fe:	69a8      	ldr	r0, [r5, #24]
 8018700:	2300      	movs	r3, #0
 8018702:	e7aa      	b.n	801865a <ai_platform_inputs_get+0xf6>
 8018704:	4b0f      	ldr	r3, [pc, #60]	; (8018744 <ai_platform_inputs_get+0x1e0>)
 8018706:	2201      	movs	r2, #1
 8018708:	601a      	str	r2, [r3, #0]
 801870a:	681a      	ldr	r2, [r3, #0]
 801870c:	2a00      	cmp	r2, #0
 801870e:	d1fc      	bne.n	801870a <ai_platform_inputs_get+0x1a6>
 8018710:	4b0d      	ldr	r3, [pc, #52]	; (8018748 <ai_platform_inputs_get+0x1e4>)
 8018712:	4a0a      	ldr	r2, [pc, #40]	; (801873c <ai_platform_inputs_get+0x1d8>)
 8018714:	601a      	str	r2, [r3, #0]
 8018716:	681a      	ldr	r2, [r3, #0]
 8018718:	4b09      	ldr	r3, [pc, #36]	; (8018740 <ai_platform_inputs_get+0x1dc>)
 801871a:	429a      	cmp	r2, r3
 801871c:	d000      	beq.n	8018720 <ai_platform_inputs_get+0x1bc>
 801871e:	e7fe      	b.n	801871e <ai_platform_inputs_get+0x1ba>
 8018720:	f7ff fde0 	bl	80182e4 <_ai_platform_release_crc>
 8018724:	2000      	movs	r0, #0
 8018726:	e7e7      	b.n	80186f8 <ai_platform_inputs_get+0x194>
 8018728:	a1c00100 	.word	0xa1c00100
 801872c:	e0002000 	.word	0xe0002000
 8018730:	e0042000 	.word	0xe0042000
 8018734:	58024c08 	.word	0x58024c08
 8018738:	58024c00 	.word	0x58024c00
 801873c:	f407a5c2 	.word	0xf407a5c2
 8018740:	b5e8b5cd 	.word	0xb5e8b5cd
 8018744:	40023008 	.word	0x40023008
 8018748:	40023000 	.word	0x40023000

0801874c <ai_platform_outputs_get>:
 801874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018750:	b085      	sub	sp, #20
 8018752:	2800      	cmp	r0, #0
 8018754:	f000 80a9 	beq.w	80188aa <ai_platform_outputs_get+0x15e>
 8018758:	4b70      	ldr	r3, [pc, #448]	; (801891c <ai_platform_outputs_get+0x1d0>)
 801875a:	6802      	ldr	r2, [r0, #0]
 801875c:	429a      	cmp	r2, r3
 801875e:	4607      	mov	r7, r0
 8018760:	f040 80a3 	bne.w	80188aa <ai_platform_outputs_get+0x15e>
 8018764:	4a6e      	ldr	r2, [pc, #440]	; (8018920 <ai_platform_outputs_get+0x1d4>)
 8018766:	6813      	ldr	r3, [r2, #0]
 8018768:	f023 0301 	bic.w	r3, r3, #1
 801876c:	6013      	str	r3, [r2, #0]
 801876e:	468b      	mov	fp, r1
 8018770:	f7ff fdb6 	bl	80182e0 <_ai_platform_acquire_crc>
 8018774:	4b6b      	ldr	r3, [pc, #428]	; (8018924 <ai_platform_outputs_get+0x1d8>)
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801877c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018780:	d00d      	beq.n	801879e <ai_platform_outputs_get+0x52>
 8018782:	4b69      	ldr	r3, [pc, #420]	; (8018928 <ai_platform_outputs_get+0x1dc>)
 8018784:	2201      	movs	r2, #1
 8018786:	601a      	str	r2, [r3, #0]
 8018788:	681a      	ldr	r2, [r3, #0]
 801878a:	2a00      	cmp	r2, #0
 801878c:	d1fc      	bne.n	8018788 <ai_platform_outputs_get+0x3c>
 801878e:	4b67      	ldr	r3, [pc, #412]	; (801892c <ai_platform_outputs_get+0x1e0>)
 8018790:	4a67      	ldr	r2, [pc, #412]	; (8018930 <ai_platform_outputs_get+0x1e4>)
 8018792:	601a      	str	r2, [r3, #0]
 8018794:	681a      	ldr	r2, [r3, #0]
 8018796:	4b67      	ldr	r3, [pc, #412]	; (8018934 <ai_platform_outputs_get+0x1e8>)
 8018798:	429a      	cmp	r2, r3
 801879a:	d00d      	beq.n	80187b8 <ai_platform_outputs_get+0x6c>
 801879c:	e7fe      	b.n	801879c <ai_platform_outputs_get+0x50>
 801879e:	4b66      	ldr	r3, [pc, #408]	; (8018938 <ai_platform_outputs_get+0x1ec>)
 80187a0:	2201      	movs	r2, #1
 80187a2:	601a      	str	r2, [r3, #0]
 80187a4:	681a      	ldr	r2, [r3, #0]
 80187a6:	2a00      	cmp	r2, #0
 80187a8:	d1fc      	bne.n	80187a4 <ai_platform_outputs_get+0x58>
 80187aa:	4b64      	ldr	r3, [pc, #400]	; (801893c <ai_platform_outputs_get+0x1f0>)
 80187ac:	4a60      	ldr	r2, [pc, #384]	; (8018930 <ai_platform_outputs_get+0x1e4>)
 80187ae:	601a      	str	r2, [r3, #0]
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	4b60      	ldr	r3, [pc, #384]	; (8018934 <ai_platform_outputs_get+0x1e8>)
 80187b4:	429a      	cmp	r2, r3
 80187b6:	d177      	bne.n	80188a8 <ai_platform_outputs_get+0x15c>
 80187b8:	f7ff fd94 	bl	80182e4 <_ai_platform_release_crc>
 80187bc:	f1bb 0f00 	cmp.w	fp, #0
 80187c0:	d002      	beq.n	80187c8 <ai_platform_outputs_get+0x7c>
 80187c2:	2300      	movs	r3, #0
 80187c4:	f8ab 3000 	strh.w	r3, [fp]
 80187c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80187ca:	2b01      	cmp	r3, #1
 80187cc:	f240 809a 	bls.w	8018904 <ai_platform_outputs_get+0x1b8>
 80187d0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80187d2:	f116 0f0c 	cmn.w	r6, #12
 80187d6:	f000 8095 	beq.w	8018904 <ai_platform_outputs_get+0x1b8>
 80187da:	89b3      	ldrh	r3, [r6, #12]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	f000 8091 	beq.w	8018904 <ai_platform_outputs_get+0x1b8>
 80187e2:	6933      	ldr	r3, [r6, #16]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	f000 808d 	beq.w	8018904 <ai_platform_outputs_get+0x1b8>
 80187ea:	681d      	ldr	r5, [r3, #0]
 80187ec:	2d00      	cmp	r5, #0
 80187ee:	f000 8089 	beq.w	8018904 <ai_platform_outputs_get+0x1b8>
 80187f2:	f04f 0800 	mov.w	r8, #0
 80187f6:	f8cd b008 	str.w	fp, [sp, #8]
 80187fa:	46c1      	mov	r9, r8
 80187fc:	46bb      	mov	fp, r7
 80187fe:	6970      	ldr	r0, [r6, #20]
 8018800:	69aa      	ldr	r2, [r5, #24]
 8018802:	68ab      	ldr	r3, [r5, #8]
 8018804:	6844      	ldr	r4, [r0, #4]
 8018806:	f8d0 a008 	ldr.w	sl, [r0, #8]
 801880a:	6810      	ldr	r0, [r2, #0]
 801880c:	68ef      	ldr	r7, [r5, #12]
 801880e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8018812:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8018816:	9301      	str	r3, [sp, #4]
 8018818:	9203      	str	r2, [sp, #12]
 801881a:	f001 fbed 	bl	8019ff8 <ai_array_to_buffer_fmt>
 801881e:	9a03      	ldr	r2, [sp, #12]
 8018820:	4601      	mov	r1, r0
 8018822:	69a8      	ldr	r0, [r5, #24]
 8018824:	eb0a 0302 	add.w	r3, sl, r2
 8018828:	4444      	add	r4, r8
 801882a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 801882e:	b16b      	cbz	r3, 801884c <ai_platform_outputs_get+0x100>
 8018830:	2000      	movs	r0, #0
 8018832:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8018836:	6828      	ldr	r0, [r5, #0]
 8018838:	6058      	str	r0, [r3, #4]
 801883a:	2800      	cmp	r0, #0
 801883c:	d051      	beq.n	80188e2 <ai_platform_outputs_get+0x196>
 801883e:	8840      	ldrh	r0, [r0, #2]
 8018840:	2800      	cmp	r0, #0
 8018842:	d04e      	beq.n	80188e2 <ai_platform_outputs_get+0x196>
 8018844:	2001      	movs	r0, #1
 8018846:	f84a 0002 	str.w	r0, [sl, r2]
 801884a:	69a8      	ldr	r0, [r5, #24]
 801884c:	6842      	ldr	r2, [r0, #4]
 801884e:	6122      	str	r2, [r4, #16]
 8018850:	f04f 0001 	mov.w	r0, #1
 8018854:	7520      	strb	r0, [r4, #20]
 8018856:	9a01      	ldr	r2, [sp, #4]
 8018858:	6960      	ldr	r0, [r4, #20]
 801885a:	60a3      	str	r3, [r4, #8]
 801885c:	f362 201f 	bfi	r0, r2, #8, #24
 8018860:	e9c4 1e00 	strd	r1, lr, [r4]
 8018864:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8018868:	2300      	movs	r3, #0
 801886a:	60e3      	str	r3, [r4, #12]
 801886c:	89b0      	ldrh	r0, [r6, #12]
 801886e:	f109 0301 	add.w	r3, r9, #1
 8018872:	4283      	cmp	r3, r0
 8018874:	4699      	mov	r9, r3
 8018876:	b29a      	uxth	r2, r3
 8018878:	d207      	bcs.n	801888a <ai_platform_outputs_get+0x13e>
 801887a:	6930      	ldr	r0, [r6, #16]
 801887c:	b128      	cbz	r0, 801888a <ai_platform_outputs_get+0x13e>
 801887e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8018882:	f108 081c 	add.w	r8, r8, #28
 8018886:	2d00      	cmp	r5, #0
 8018888:	d1b9      	bne.n	80187fe <ai_platform_outputs_get+0xb2>
 801888a:	465f      	mov	r7, fp
 801888c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8018890:	2a00      	cmp	r2, #0
 8018892:	d037      	beq.n	8018904 <ai_platform_outputs_get+0x1b8>
 8018894:	6973      	ldr	r3, [r6, #20]
 8018896:	6858      	ldr	r0, [r3, #4]
 8018898:	f1bb 0f00 	cmp.w	fp, #0
 801889c:	d001      	beq.n	80188a2 <ai_platform_outputs_get+0x156>
 801889e:	f8ab 2000 	strh.w	r2, [fp]
 80188a2:	b005      	add	sp, #20
 80188a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188a8:	e7fe      	b.n	80188a8 <ai_platform_outputs_get+0x15c>
 80188aa:	4a1d      	ldr	r2, [pc, #116]	; (8018920 <ai_platform_outputs_get+0x1d4>)
 80188ac:	6813      	ldr	r3, [r2, #0]
 80188ae:	f023 0301 	bic.w	r3, r3, #1
 80188b2:	6013      	str	r3, [r2, #0]
 80188b4:	f7ff fd14 	bl	80182e0 <_ai_platform_acquire_crc>
 80188b8:	4b1a      	ldr	r3, [pc, #104]	; (8018924 <ai_platform_outputs_get+0x1d8>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80188c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80188c4:	d010      	beq.n	80188e8 <ai_platform_outputs_get+0x19c>
 80188c6:	4b18      	ldr	r3, [pc, #96]	; (8018928 <ai_platform_outputs_get+0x1dc>)
 80188c8:	2201      	movs	r2, #1
 80188ca:	601a      	str	r2, [r3, #0]
 80188cc:	681a      	ldr	r2, [r3, #0]
 80188ce:	2a00      	cmp	r2, #0
 80188d0:	d1fc      	bne.n	80188cc <ai_platform_outputs_get+0x180>
 80188d2:	4b16      	ldr	r3, [pc, #88]	; (801892c <ai_platform_outputs_get+0x1e0>)
 80188d4:	4a16      	ldr	r2, [pc, #88]	; (8018930 <ai_platform_outputs_get+0x1e4>)
 80188d6:	601a      	str	r2, [r3, #0]
 80188d8:	681a      	ldr	r2, [r3, #0]
 80188da:	4b16      	ldr	r3, [pc, #88]	; (8018934 <ai_platform_outputs_get+0x1e8>)
 80188dc:	429a      	cmp	r2, r3
 80188de:	d019      	beq.n	8018914 <ai_platform_outputs_get+0x1c8>
 80188e0:	e7fe      	b.n	80188e0 <ai_platform_outputs_get+0x194>
 80188e2:	69a8      	ldr	r0, [r5, #24]
 80188e4:	2300      	movs	r3, #0
 80188e6:	e7b1      	b.n	801884c <ai_platform_outputs_get+0x100>
 80188e8:	4b13      	ldr	r3, [pc, #76]	; (8018938 <ai_platform_outputs_get+0x1ec>)
 80188ea:	2201      	movs	r2, #1
 80188ec:	601a      	str	r2, [r3, #0]
 80188ee:	681a      	ldr	r2, [r3, #0]
 80188f0:	2a00      	cmp	r2, #0
 80188f2:	d1fc      	bne.n	80188ee <ai_platform_outputs_get+0x1a2>
 80188f4:	4b11      	ldr	r3, [pc, #68]	; (801893c <ai_platform_outputs_get+0x1f0>)
 80188f6:	4a0e      	ldr	r2, [pc, #56]	; (8018930 <ai_platform_outputs_get+0x1e4>)
 80188f8:	601a      	str	r2, [r3, #0]
 80188fa:	681a      	ldr	r2, [r3, #0]
 80188fc:	4b0d      	ldr	r3, [pc, #52]	; (8018934 <ai_platform_outputs_get+0x1e8>)
 80188fe:	429a      	cmp	r2, r3
 8018900:	d008      	beq.n	8018914 <ai_platform_outputs_get+0x1c8>
 8018902:	e7fe      	b.n	8018902 <ai_platform_outputs_get+0x1b6>
 8018904:	f107 0010 	add.w	r0, r7, #16
 8018908:	2218      	movs	r2, #24
 801890a:	2111      	movs	r1, #17
 801890c:	f000 fd0c 	bl	8019328 <core_set_error>
 8018910:	2000      	movs	r0, #0
 8018912:	e7c6      	b.n	80188a2 <ai_platform_outputs_get+0x156>
 8018914:	f7ff fce6 	bl	80182e4 <_ai_platform_release_crc>
 8018918:	2000      	movs	r0, #0
 801891a:	e7c2      	b.n	80188a2 <ai_platform_outputs_get+0x156>
 801891c:	a1c00100 	.word	0xa1c00100
 8018920:	e0002000 	.word	0xe0002000
 8018924:	e0042000 	.word	0xe0042000
 8018928:	58024c08 	.word	0x58024c08
 801892c:	58024c00 	.word	0x58024c00
 8018930:	f407a5c2 	.word	0xf407a5c2
 8018934:	b5e8b5cd 	.word	0xb5e8b5cd
 8018938:	40023008 	.word	0x40023008
 801893c:	40023000 	.word	0x40023000

08018940 <ai_platform_network_create>:
 8018940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018944:	b083      	sub	sp, #12
 8018946:	4606      	mov	r6, r0
 8018948:	4615      	mov	r5, r2
 801894a:	461f      	mov	r7, r3
 801894c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8018950:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8018954:	f7ff fcc4 	bl	80182e0 <_ai_platform_acquire_crc>
 8018958:	b178      	cbz	r0, 801897a <ai_platform_network_create+0x3a>
 801895a:	4b5f      	ldr	r3, [pc, #380]	; (8018ad8 <ai_platform_network_create+0x198>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018966:	4602      	mov	r2, r0
 8018968:	d00d      	beq.n	8018986 <ai_platform_network_create+0x46>
 801896a:	4b5c      	ldr	r3, [pc, #368]	; (8018adc <ai_platform_network_create+0x19c>)
 801896c:	2118      	movs	r1, #24
 801896e:	6019      	str	r1, [r3, #0]
 8018970:	6819      	ldr	r1, [r3, #0]
 8018972:	2918      	cmp	r1, #24
 8018974:	d01a      	beq.n	80189ac <ai_platform_network_create+0x6c>
 8018976:	f7ff fcb5 	bl	80182e4 <_ai_platform_release_crc>
 801897a:	f244 1333 	movw	r3, #16691	; 0x4133
 801897e:	4618      	mov	r0, r3
 8018980:	b003      	add	sp, #12
 8018982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018986:	4b56      	ldr	r3, [pc, #344]	; (8018ae0 <ai_platform_network_create+0x1a0>)
 8018988:	2101      	movs	r1, #1
 801898a:	6019      	str	r1, [r3, #0]
 801898c:	2114      	movs	r1, #20
 801898e:	e001      	b.n	8018994 <ai_platform_network_create+0x54>
 8018990:	3901      	subs	r1, #1
 8018992:	d002      	beq.n	801899a <ai_platform_network_create+0x5a>
 8018994:	6818      	ldr	r0, [r3, #0]
 8018996:	2800      	cmp	r0, #0
 8018998:	d1fa      	bne.n	8018990 <ai_platform_network_create+0x50>
 801899a:	4b51      	ldr	r3, [pc, #324]	; (8018ae0 <ai_platform_network_create+0x1a0>)
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	b91b      	cbnz	r3, 80189a8 <ai_platform_network_create+0x68>
 80189a0:	4b50      	ldr	r3, [pc, #320]	; (8018ae4 <ai_platform_network_create+0x1a4>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	3301      	adds	r3, #1
 80189a6:	d006      	beq.n	80189b6 <ai_platform_network_create+0x76>
 80189a8:	4610      	mov	r0, r2
 80189aa:	e7e4      	b.n	8018976 <ai_platform_network_create+0x36>
 80189ac:	2101      	movs	r1, #1
 80189ae:	6019      	str	r1, [r3, #0]
 80189b0:	6819      	ldr	r1, [r3, #0]
 80189b2:	2900      	cmp	r1, #0
 80189b4:	d1fc      	bne.n	80189b0 <ai_platform_network_create+0x70>
 80189b6:	4610      	mov	r0, r2
 80189b8:	f7ff fc94 	bl	80182e4 <_ai_platform_release_crc>
 80189bc:	4a4a      	ldr	r2, [pc, #296]	; (8018ae8 <ai_platform_network_create+0x1a8>)
 80189be:	6813      	ldr	r3, [r2, #0]
 80189c0:	f023 0301 	bic.w	r3, r3, #1
 80189c4:	6013      	str	r3, [r2, #0]
 80189c6:	f7ff fc8b 	bl	80182e0 <_ai_platform_acquire_crc>
 80189ca:	4b43      	ldr	r3, [pc, #268]	; (8018ad8 <ai_platform_network_create+0x198>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80189d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80189d6:	d00d      	beq.n	80189f4 <ai_platform_network_create+0xb4>
 80189d8:	4b40      	ldr	r3, [pc, #256]	; (8018adc <ai_platform_network_create+0x19c>)
 80189da:	2201      	movs	r2, #1
 80189dc:	601a      	str	r2, [r3, #0]
 80189de:	681a      	ldr	r2, [r3, #0]
 80189e0:	2a00      	cmp	r2, #0
 80189e2:	d1fc      	bne.n	80189de <ai_platform_network_create+0x9e>
 80189e4:	4b41      	ldr	r3, [pc, #260]	; (8018aec <ai_platform_network_create+0x1ac>)
 80189e6:	4a42      	ldr	r2, [pc, #264]	; (8018af0 <ai_platform_network_create+0x1b0>)
 80189e8:	601a      	str	r2, [r3, #0]
 80189ea:	681a      	ldr	r2, [r3, #0]
 80189ec:	4b41      	ldr	r3, [pc, #260]	; (8018af4 <ai_platform_network_create+0x1b4>)
 80189ee:	429a      	cmp	r2, r3
 80189f0:	d00e      	beq.n	8018a10 <ai_platform_network_create+0xd0>
 80189f2:	e7fe      	b.n	80189f2 <ai_platform_network_create+0xb2>
 80189f4:	4b3a      	ldr	r3, [pc, #232]	; (8018ae0 <ai_platform_network_create+0x1a0>)
 80189f6:	2201      	movs	r2, #1
 80189f8:	601a      	str	r2, [r3, #0]
 80189fa:	681a      	ldr	r2, [r3, #0]
 80189fc:	2a00      	cmp	r2, #0
 80189fe:	d1fc      	bne.n	80189fa <ai_platform_network_create+0xba>
 8018a00:	4b38      	ldr	r3, [pc, #224]	; (8018ae4 <ai_platform_network_create+0x1a4>)
 8018a02:	4a3b      	ldr	r2, [pc, #236]	; (8018af0 <ai_platform_network_create+0x1b0>)
 8018a04:	601a      	str	r2, [r3, #0]
 8018a06:	681a      	ldr	r2, [r3, #0]
 8018a08:	4b3a      	ldr	r3, [pc, #232]	; (8018af4 <ai_platform_network_create+0x1b4>)
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	d000      	beq.n	8018a10 <ai_platform_network_create+0xd0>
 8018a0e:	e7fe      	b.n	8018a0e <ai_platform_network_create+0xce>
 8018a10:	f7ff fc68 	bl	80182e4 <_ai_platform_release_crc>
 8018a14:	b1ae      	cbz	r6, 8018a42 <ai_platform_network_create+0x102>
 8018a16:	4b38      	ldr	r3, [pc, #224]	; (8018af8 <ai_platform_network_create+0x1b8>)
 8018a18:	602b      	str	r3, [r5, #0]
 8018a1a:	6035      	str	r5, [r6, #0]
 8018a1c:	f000 fc7c 	bl	8019318 <core_init>
 8018a20:	b990      	cbnz	r0, 8018a48 <ai_platform_network_create+0x108>
 8018a22:	2430      	movs	r4, #48	; 0x30
 8018a24:	2300      	movs	r3, #0
 8018a26:	6033      	str	r3, [r6, #0]
 8018a28:	2610      	movs	r6, #16
 8018a2a:	464a      	mov	r2, r9
 8018a2c:	4641      	mov	r1, r8
 8018a2e:	4638      	mov	r0, r7
 8018a30:	f001 fac8 	bl	8019fc4 <ai_version_get>
 8018a34:	2300      	movs	r3, #0
 8018a36:	f364 0307 	bfi	r3, r4, #0, #8
 8018a3a:	6468      	str	r0, [r5, #68]	; 0x44
 8018a3c:	f366 231f 	bfi	r3, r6, #8, #24
 8018a40:	e79d      	b.n	801897e <ai_platform_network_create+0x3e>
 8018a42:	f241 0310 	movw	r3, #4112	; 0x1010
 8018a46:	e79a      	b.n	801897e <ai_platform_network_create+0x3e>
 8018a48:	4a27      	ldr	r2, [pc, #156]	; (8018ae8 <ai_platform_network_create+0x1a8>)
 8018a4a:	6813      	ldr	r3, [r2, #0]
 8018a4c:	f023 0301 	bic.w	r3, r3, #1
 8018a50:	6013      	str	r3, [r2, #0]
 8018a52:	f7ff fc45 	bl	80182e0 <_ai_platform_acquire_crc>
 8018a56:	4b20      	ldr	r3, [pc, #128]	; (8018ad8 <ai_platform_network_create+0x198>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018a62:	d00d      	beq.n	8018a80 <ai_platform_network_create+0x140>
 8018a64:	4b1d      	ldr	r3, [pc, #116]	; (8018adc <ai_platform_network_create+0x19c>)
 8018a66:	2201      	movs	r2, #1
 8018a68:	601a      	str	r2, [r3, #0]
 8018a6a:	681a      	ldr	r2, [r3, #0]
 8018a6c:	2a00      	cmp	r2, #0
 8018a6e:	d1fc      	bne.n	8018a6a <ai_platform_network_create+0x12a>
 8018a70:	4b1e      	ldr	r3, [pc, #120]	; (8018aec <ai_platform_network_create+0x1ac>)
 8018a72:	4a1f      	ldr	r2, [pc, #124]	; (8018af0 <ai_platform_network_create+0x1b0>)
 8018a74:	601a      	str	r2, [r3, #0]
 8018a76:	681a      	ldr	r2, [r3, #0]
 8018a78:	4b1e      	ldr	r3, [pc, #120]	; (8018af4 <ai_platform_network_create+0x1b4>)
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d00e      	beq.n	8018a9c <ai_platform_network_create+0x15c>
 8018a7e:	e7fe      	b.n	8018a7e <ai_platform_network_create+0x13e>
 8018a80:	4b17      	ldr	r3, [pc, #92]	; (8018ae0 <ai_platform_network_create+0x1a0>)
 8018a82:	2201      	movs	r2, #1
 8018a84:	601a      	str	r2, [r3, #0]
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	2a00      	cmp	r2, #0
 8018a8a:	d1fc      	bne.n	8018a86 <ai_platform_network_create+0x146>
 8018a8c:	4b15      	ldr	r3, [pc, #84]	; (8018ae4 <ai_platform_network_create+0x1a4>)
 8018a8e:	4a18      	ldr	r2, [pc, #96]	; (8018af0 <ai_platform_network_create+0x1b0>)
 8018a90:	601a      	str	r2, [r3, #0]
 8018a92:	681a      	ldr	r2, [r3, #0]
 8018a94:	4b17      	ldr	r3, [pc, #92]	; (8018af4 <ai_platform_network_create+0x1b4>)
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d000      	beq.n	8018a9c <ai_platform_network_create+0x15c>
 8018a9a:	e7fe      	b.n	8018a9a <ai_platform_network_create+0x15a>
 8018a9c:	f7ff fc22 	bl	80182e4 <_ai_platform_release_crc>
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	4641      	mov	r1, r8
 8018aa4:	4638      	mov	r0, r7
 8018aa6:	f001 fa8d 	bl	8019fc4 <ai_version_get>
 8018aaa:	2200      	movs	r2, #0
 8018aac:	4604      	mov	r4, r0
 8018aae:	2105      	movs	r1, #5
 8018ab0:	2001      	movs	r0, #1
 8018ab2:	f001 fa87 	bl	8019fc4 <ai_version_get>
 8018ab6:	4284      	cmp	r4, r0
 8018ab8:	d001      	beq.n	8018abe <ai_platform_network_create+0x17e>
 8018aba:	2401      	movs	r4, #1
 8018abc:	e7b2      	b.n	8018a24 <ai_platform_network_create+0xe4>
 8018abe:	a802      	add	r0, sp, #8
 8018ac0:	4b0e      	ldr	r3, [pc, #56]	; (8018afc <ai_platform_network_create+0x1bc>)
 8018ac2:	f840 3d04 	str.w	r3, [r0, #-4]!
 8018ac6:	f001 f9d9 	bl	8019e7c <ai_check_custom_types>
 8018aca:	b110      	cbz	r0, 8018ad2 <ai_platform_network_create+0x192>
 8018acc:	2600      	movs	r6, #0
 8018ace:	4634      	mov	r4, r6
 8018ad0:	e7ab      	b.n	8018a2a <ai_platform_network_create+0xea>
 8018ad2:	2402      	movs	r4, #2
 8018ad4:	e7a6      	b.n	8018a24 <ai_platform_network_create+0xe4>
 8018ad6:	bf00      	nop
 8018ad8:	e0042000 	.word	0xe0042000
 8018adc:	58024c08 	.word	0x58024c08
 8018ae0:	40023008 	.word	0x40023008
 8018ae4:	40023000 	.word	0x40023000
 8018ae8:	e0002000 	.word	0xe0002000
 8018aec:	58024c00 	.word	0x58024c00
 8018af0:	f407a5c2 	.word	0xf407a5c2
 8018af4:	b5e8b5cd 	.word	0xb5e8b5cd
 8018af8:	a1c00100 	.word	0xa1c00100
 8018afc:	84048403 	.word	0x84048403

08018b00 <ai_platform_network_init>:
 8018b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b04:	2800      	cmp	r0, #0
 8018b06:	d04b      	beq.n	8018ba0 <ai_platform_network_init+0xa0>
 8018b08:	4b79      	ldr	r3, [pc, #484]	; (8018cf0 <ai_platform_network_init+0x1f0>)
 8018b0a:	6802      	ldr	r2, [r0, #0]
 8018b0c:	429a      	cmp	r2, r3
 8018b0e:	4604      	mov	r4, r0
 8018b10:	d146      	bne.n	8018ba0 <ai_platform_network_init+0xa0>
 8018b12:	4a78      	ldr	r2, [pc, #480]	; (8018cf4 <ai_platform_network_init+0x1f4>)
 8018b14:	6813      	ldr	r3, [r2, #0]
 8018b16:	f023 0301 	bic.w	r3, r3, #1
 8018b1a:	6013      	str	r3, [r2, #0]
 8018b1c:	460e      	mov	r6, r1
 8018b1e:	f7ff fbdf 	bl	80182e0 <_ai_platform_acquire_crc>
 8018b22:	4b75      	ldr	r3, [pc, #468]	; (8018cf8 <ai_platform_network_init+0x1f8>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b2e:	d00d      	beq.n	8018b4c <ai_platform_network_init+0x4c>
 8018b30:	4b72      	ldr	r3, [pc, #456]	; (8018cfc <ai_platform_network_init+0x1fc>)
 8018b32:	2201      	movs	r2, #1
 8018b34:	601a      	str	r2, [r3, #0]
 8018b36:	681a      	ldr	r2, [r3, #0]
 8018b38:	2a00      	cmp	r2, #0
 8018b3a:	d1fc      	bne.n	8018b36 <ai_platform_network_init+0x36>
 8018b3c:	4b70      	ldr	r3, [pc, #448]	; (8018d00 <ai_platform_network_init+0x200>)
 8018b3e:	4a71      	ldr	r2, [pc, #452]	; (8018d04 <ai_platform_network_init+0x204>)
 8018b40:	601a      	str	r2, [r3, #0]
 8018b42:	681a      	ldr	r2, [r3, #0]
 8018b44:	4b70      	ldr	r3, [pc, #448]	; (8018d08 <ai_platform_network_init+0x208>)
 8018b46:	429a      	cmp	r2, r3
 8018b48:	d00d      	beq.n	8018b66 <ai_platform_network_init+0x66>
 8018b4a:	e7fe      	b.n	8018b4a <ai_platform_network_init+0x4a>
 8018b4c:	4b6f      	ldr	r3, [pc, #444]	; (8018d0c <ai_platform_network_init+0x20c>)
 8018b4e:	2201      	movs	r2, #1
 8018b50:	601a      	str	r2, [r3, #0]
 8018b52:	681a      	ldr	r2, [r3, #0]
 8018b54:	2a00      	cmp	r2, #0
 8018b56:	d1fc      	bne.n	8018b52 <ai_platform_network_init+0x52>
 8018b58:	4b6d      	ldr	r3, [pc, #436]	; (8018d10 <ai_platform_network_init+0x210>)
 8018b5a:	4a6a      	ldr	r2, [pc, #424]	; (8018d04 <ai_platform_network_init+0x204>)
 8018b5c:	601a      	str	r2, [r3, #0]
 8018b5e:	681a      	ldr	r2, [r3, #0]
 8018b60:	4b69      	ldr	r3, [pc, #420]	; (8018d08 <ai_platform_network_init+0x208>)
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d11b      	bne.n	8018b9e <ai_platform_network_init+0x9e>
 8018b66:	f7ff fbbd 	bl	80182e4 <_ai_platform_release_crc>
 8018b6a:	2e00      	cmp	r6, #0
 8018b6c:	d034      	beq.n	8018bd8 <ai_platform_network_init+0xd8>
 8018b6e:	4b69      	ldr	r3, [pc, #420]	; (8018d14 <ai_platform_network_init+0x214>)
 8018b70:	6832      	ldr	r2, [r6, #0]
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d149      	bne.n	8018c0a <ai_platform_network_init+0x10a>
 8018b76:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8018b7a:	6930      	ldr	r0, [r6, #16]
 8018b7c:	89b3      	ldrh	r3, [r6, #12]
 8018b7e:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8018b82:	62a0      	str	r0, [r4, #40]	; 0x28
 8018b84:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8018b88:	2203      	movs	r2, #3
 8018b8a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8018b8e:	84a3      	strh	r3, [r4, #36]	; 0x24
 8018b90:	60e2      	str	r2, [r4, #12]
 8018b92:	4620      	mov	r0, r4
 8018b94:	f001 f99c 	bl	8019ed0 <ai_layers_init_all>
 8018b98:	4620      	mov	r0, r4
 8018b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b9e:	e7fe      	b.n	8018b9e <ai_platform_network_init+0x9e>
 8018ba0:	4a54      	ldr	r2, [pc, #336]	; (8018cf4 <ai_platform_network_init+0x1f4>)
 8018ba2:	6813      	ldr	r3, [r2, #0]
 8018ba4:	f023 0301 	bic.w	r3, r3, #1
 8018ba8:	6013      	str	r3, [r2, #0]
 8018baa:	f7ff fb99 	bl	80182e0 <_ai_platform_acquire_crc>
 8018bae:	4b52      	ldr	r3, [pc, #328]	; (8018cf8 <ai_platform_network_init+0x1f8>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018bba:	d015      	beq.n	8018be8 <ai_platform_network_init+0xe8>
 8018bbc:	4b4f      	ldr	r3, [pc, #316]	; (8018cfc <ai_platform_network_init+0x1fc>)
 8018bbe:	2201      	movs	r2, #1
 8018bc0:	601a      	str	r2, [r3, #0]
 8018bc2:	681a      	ldr	r2, [r3, #0]
 8018bc4:	2a00      	cmp	r2, #0
 8018bc6:	d1fc      	bne.n	8018bc2 <ai_platform_network_init+0xc2>
 8018bc8:	4b4d      	ldr	r3, [pc, #308]	; (8018d00 <ai_platform_network_init+0x200>)
 8018bca:	4a4e      	ldr	r2, [pc, #312]	; (8018d04 <ai_platform_network_init+0x204>)
 8018bcc:	601a      	str	r2, [r3, #0]
 8018bce:	681a      	ldr	r2, [r3, #0]
 8018bd0:	4b4d      	ldr	r3, [pc, #308]	; (8018d08 <ai_platform_network_init+0x208>)
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d015      	beq.n	8018c02 <ai_platform_network_init+0x102>
 8018bd6:	e7fe      	b.n	8018bd6 <ai_platform_network_init+0xd6>
 8018bd8:	f104 0010 	add.w	r0, r4, #16
 8018bdc:	2211      	movs	r2, #17
 8018bde:	2110      	movs	r1, #16
 8018be0:	4634      	mov	r4, r6
 8018be2:	f000 fba1 	bl	8019328 <core_set_error>
 8018be6:	e7d7      	b.n	8018b98 <ai_platform_network_init+0x98>
 8018be8:	4b48      	ldr	r3, [pc, #288]	; (8018d0c <ai_platform_network_init+0x20c>)
 8018bea:	2201      	movs	r2, #1
 8018bec:	601a      	str	r2, [r3, #0]
 8018bee:	681a      	ldr	r2, [r3, #0]
 8018bf0:	2a00      	cmp	r2, #0
 8018bf2:	d1fc      	bne.n	8018bee <ai_platform_network_init+0xee>
 8018bf4:	4b46      	ldr	r3, [pc, #280]	; (8018d10 <ai_platform_network_init+0x210>)
 8018bf6:	4a43      	ldr	r2, [pc, #268]	; (8018d04 <ai_platform_network_init+0x204>)
 8018bf8:	601a      	str	r2, [r3, #0]
 8018bfa:	681a      	ldr	r2, [r3, #0]
 8018bfc:	4b42      	ldr	r3, [pc, #264]	; (8018d08 <ai_platform_network_init+0x208>)
 8018bfe:	429a      	cmp	r2, r3
 8018c00:	d16d      	bne.n	8018cde <ai_platform_network_init+0x1de>
 8018c02:	f7ff fb6f 	bl	80182e4 <_ai_platform_release_crc>
 8018c06:	2400      	movs	r4, #0
 8018c08:	e7c6      	b.n	8018b98 <ai_platform_network_init+0x98>
 8018c0a:	4630      	mov	r0, r6
 8018c0c:	2101      	movs	r1, #1
 8018c0e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8018c12:	f7ff fb19 	bl	8018248 <ai_buffer_get_size>
 8018c16:	4635      	mov	r5, r6
 8018c18:	f106 071c 	add.w	r7, r6, #28
 8018c1c:	2101      	movs	r1, #1
 8018c1e:	4606      	mov	r6, r0
 8018c20:	4638      	mov	r0, r7
 8018c22:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8018c26:	f7ff fb0f 	bl	8018248 <ai_buffer_get_size>
 8018c2a:	2e00      	cmp	r6, #0
 8018c2c:	bf0a      	itet	eq
 8018c2e:	46b6      	moveq	lr, r6
 8018c30:	f04f 0e01 	movne.w	lr, #1
 8018c34:	4635      	moveq	r5, r6
 8018c36:	2800      	cmp	r0, #0
 8018c38:	d14b      	bne.n	8018cd2 <ai_platform_network_init+0x1d2>
 8018c3a:	4607      	mov	r7, r0
 8018c3c:	4684      	mov	ip, r0
 8018c3e:	f1b8 0f00 	cmp.w	r8, #0
 8018c42:	d023      	beq.n	8018c8c <ai_platform_network_init+0x18c>
 8018c44:	8be3      	ldrh	r3, [r4, #30]
 8018c46:	4573      	cmp	r3, lr
 8018c48:	d207      	bcs.n	8018c5a <ai_platform_network_init+0x15a>
 8018c4a:	f104 0010 	add.w	r0, r4, #16
 8018c4e:	2212      	movs	r2, #18
 8018c50:	2116      	movs	r1, #22
 8018c52:	f000 fb69 	bl	8019328 <core_set_error>
 8018c56:	2400      	movs	r4, #0
 8018c58:	e79e      	b.n	8018b98 <ai_platform_network_init+0x98>
 8018c5a:	f1be 0f00 	cmp.w	lr, #0
 8018c5e:	d006      	beq.n	8018c6e <ai_platform_network_init+0x16e>
 8018c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c62:	6a26      	ldr	r6, [r4, #32]
 8018c64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018c66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018c6a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8018c6e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8018c70:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8018c74:	2600      	movs	r6, #0
 8018c76:	4563      	cmp	r3, ip
 8018c78:	83a6      	strh	r6, [r4, #28]
 8018c7a:	d211      	bcs.n	8018ca0 <ai_platform_network_init+0x1a0>
 8018c7c:	f104 0010 	add.w	r0, r4, #16
 8018c80:	2213      	movs	r2, #19
 8018c82:	2116      	movs	r1, #22
 8018c84:	f000 fb50 	bl	8019328 <core_set_error>
 8018c88:	4634      	mov	r4, r6
 8018c8a:	e785      	b.n	8018b98 <ai_platform_network_init+0x98>
 8018c8c:	2e00      	cmp	r6, #0
 8018c8e:	d0d9      	beq.n	8018c44 <ai_platform_network_init+0x144>
 8018c90:	f104 0010 	add.w	r0, r4, #16
 8018c94:	2212      	movs	r2, #18
 8018c96:	2110      	movs	r1, #16
 8018c98:	4644      	mov	r4, r8
 8018c9a:	f000 fb45 	bl	8019328 <core_set_error>
 8018c9e:	e77b      	b.n	8018b98 <ai_platform_network_init+0x98>
 8018ca0:	f1bc 0f00 	cmp.w	ip, #0
 8018ca4:	d013      	beq.n	8018cce <ai_platform_network_init+0x1ce>
 8018ca6:	f04f 081c 	mov.w	r8, #28
 8018caa:	fb08 f80c 	mul.w	r8, r8, ip
 8018cae:	eb07 0e06 	add.w	lr, r7, r6
 8018cb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018cb6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8018cb8:	4435      	add	r5, r6
 8018cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018cbc:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8018cc0:	361c      	adds	r6, #28
 8018cc2:	4546      	cmp	r6, r8
 8018cc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018cc8:	d1f1      	bne.n	8018cae <ai_platform_network_init+0x1ae>
 8018cca:	2300      	movs	r3, #0
 8018ccc:	e75c      	b.n	8018b88 <ai_platform_network_init+0x88>
 8018cce:	4663      	mov	r3, ip
 8018cd0:	e75a      	b.n	8018b88 <ai_platform_network_init+0x88>
 8018cd2:	f1b9 0f00 	cmp.w	r9, #0
 8018cd6:	d003      	beq.n	8018ce0 <ai_platform_network_init+0x1e0>
 8018cd8:	f04f 0c01 	mov.w	ip, #1
 8018cdc:	e7af      	b.n	8018c3e <ai_platform_network_init+0x13e>
 8018cde:	e7fe      	b.n	8018cde <ai_platform_network_init+0x1de>
 8018ce0:	f104 0010 	add.w	r0, r4, #16
 8018ce4:	2213      	movs	r2, #19
 8018ce6:	2110      	movs	r1, #16
 8018ce8:	464c      	mov	r4, r9
 8018cea:	f000 fb1d 	bl	8019328 <core_set_error>
 8018cee:	e753      	b.n	8018b98 <ai_platform_network_init+0x98>
 8018cf0:	a1c00100 	.word	0xa1c00100
 8018cf4:	e0002000 	.word	0xe0002000
 8018cf8:	e0042000 	.word	0xe0042000
 8018cfc:	58024c08 	.word	0x58024c08
 8018d00:	58024c00 	.word	0x58024c00
 8018d04:	f407a5c2 	.word	0xf407a5c2
 8018d08:	b5e8b5cd 	.word	0xb5e8b5cd
 8018d0c:	40023008 	.word	0x40023008
 8018d10:	40023000 	.word	0x40023000
 8018d14:	a1facade 	.word	0xa1facade

08018d18 <ai_platform_network_post_init>:
 8018d18:	b538      	push	{r3, r4, r5, lr}
 8018d1a:	b120      	cbz	r0, 8018d26 <ai_platform_network_post_init+0xe>
 8018d1c:	4b3f      	ldr	r3, [pc, #252]	; (8018e1c <ai_platform_network_post_init+0x104>)
 8018d1e:	6802      	ldr	r2, [r0, #0]
 8018d20:	429a      	cmp	r2, r3
 8018d22:	4604      	mov	r4, r0
 8018d24:	d02d      	beq.n	8018d82 <ai_platform_network_post_init+0x6a>
 8018d26:	4a3e      	ldr	r2, [pc, #248]	; (8018e20 <ai_platform_network_post_init+0x108>)
 8018d28:	6813      	ldr	r3, [r2, #0]
 8018d2a:	f023 0301 	bic.w	r3, r3, #1
 8018d2e:	6013      	str	r3, [r2, #0]
 8018d30:	f7ff fad6 	bl	80182e0 <_ai_platform_acquire_crc>
 8018d34:	4b3b      	ldr	r3, [pc, #236]	; (8018e24 <ai_platform_network_post_init+0x10c>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018d40:	d00d      	beq.n	8018d5e <ai_platform_network_post_init+0x46>
 8018d42:	4b39      	ldr	r3, [pc, #228]	; (8018e28 <ai_platform_network_post_init+0x110>)
 8018d44:	2201      	movs	r2, #1
 8018d46:	601a      	str	r2, [r3, #0]
 8018d48:	681a      	ldr	r2, [r3, #0]
 8018d4a:	2a00      	cmp	r2, #0
 8018d4c:	d1fc      	bne.n	8018d48 <ai_platform_network_post_init+0x30>
 8018d4e:	4b37      	ldr	r3, [pc, #220]	; (8018e2c <ai_platform_network_post_init+0x114>)
 8018d50:	4a37      	ldr	r2, [pc, #220]	; (8018e30 <ai_platform_network_post_init+0x118>)
 8018d52:	601a      	str	r2, [r3, #0]
 8018d54:	681a      	ldr	r2, [r3, #0]
 8018d56:	4b37      	ldr	r3, [pc, #220]	; (8018e34 <ai_platform_network_post_init+0x11c>)
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d00d      	beq.n	8018d78 <ai_platform_network_post_init+0x60>
 8018d5c:	e7fe      	b.n	8018d5c <ai_platform_network_post_init+0x44>
 8018d5e:	4b36      	ldr	r3, [pc, #216]	; (8018e38 <ai_platform_network_post_init+0x120>)
 8018d60:	2201      	movs	r2, #1
 8018d62:	601a      	str	r2, [r3, #0]
 8018d64:	681a      	ldr	r2, [r3, #0]
 8018d66:	2a00      	cmp	r2, #0
 8018d68:	d1fc      	bne.n	8018d64 <ai_platform_network_post_init+0x4c>
 8018d6a:	4b34      	ldr	r3, [pc, #208]	; (8018e3c <ai_platform_network_post_init+0x124>)
 8018d6c:	4a30      	ldr	r2, [pc, #192]	; (8018e30 <ai_platform_network_post_init+0x118>)
 8018d6e:	601a      	str	r2, [r3, #0]
 8018d70:	681a      	ldr	r2, [r3, #0]
 8018d72:	4b30      	ldr	r3, [pc, #192]	; (8018e34 <ai_platform_network_post_init+0x11c>)
 8018d74:	429a      	cmp	r2, r3
 8018d76:	d103      	bne.n	8018d80 <ai_platform_network_post_init+0x68>
 8018d78:	f7ff fab4 	bl	80182e4 <_ai_platform_release_crc>
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	bd38      	pop	{r3, r4, r5, pc}
 8018d80:	e7fe      	b.n	8018d80 <ai_platform_network_post_init+0x68>
 8018d82:	4a27      	ldr	r2, [pc, #156]	; (8018e20 <ai_platform_network_post_init+0x108>)
 8018d84:	6813      	ldr	r3, [r2, #0]
 8018d86:	f023 0301 	bic.w	r3, r3, #1
 8018d8a:	6013      	str	r3, [r2, #0]
 8018d8c:	f7ff faa8 	bl	80182e0 <_ai_platform_acquire_crc>
 8018d90:	4b24      	ldr	r3, [pc, #144]	; (8018e24 <ai_platform_network_post_init+0x10c>)
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018d9c:	d00d      	beq.n	8018dba <ai_platform_network_post_init+0xa2>
 8018d9e:	4b22      	ldr	r3, [pc, #136]	; (8018e28 <ai_platform_network_post_init+0x110>)
 8018da0:	2201      	movs	r2, #1
 8018da2:	601a      	str	r2, [r3, #0]
 8018da4:	681a      	ldr	r2, [r3, #0]
 8018da6:	2a00      	cmp	r2, #0
 8018da8:	d1fc      	bne.n	8018da4 <ai_platform_network_post_init+0x8c>
 8018daa:	4b20      	ldr	r3, [pc, #128]	; (8018e2c <ai_platform_network_post_init+0x114>)
 8018dac:	4a20      	ldr	r2, [pc, #128]	; (8018e30 <ai_platform_network_post_init+0x118>)
 8018dae:	601a      	str	r2, [r3, #0]
 8018db0:	681a      	ldr	r2, [r3, #0]
 8018db2:	4b20      	ldr	r3, [pc, #128]	; (8018e34 <ai_platform_network_post_init+0x11c>)
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d00e      	beq.n	8018dd6 <ai_platform_network_post_init+0xbe>
 8018db8:	e7fe      	b.n	8018db8 <ai_platform_network_post_init+0xa0>
 8018dba:	4b1f      	ldr	r3, [pc, #124]	; (8018e38 <ai_platform_network_post_init+0x120>)
 8018dbc:	2201      	movs	r2, #1
 8018dbe:	601a      	str	r2, [r3, #0]
 8018dc0:	681a      	ldr	r2, [r3, #0]
 8018dc2:	2a00      	cmp	r2, #0
 8018dc4:	d1fc      	bne.n	8018dc0 <ai_platform_network_post_init+0xa8>
 8018dc6:	4b1d      	ldr	r3, [pc, #116]	; (8018e3c <ai_platform_network_post_init+0x124>)
 8018dc8:	4a19      	ldr	r2, [pc, #100]	; (8018e30 <ai_platform_network_post_init+0x118>)
 8018dca:	601a      	str	r2, [r3, #0]
 8018dcc:	681a      	ldr	r2, [r3, #0]
 8018dce:	4b19      	ldr	r3, [pc, #100]	; (8018e34 <ai_platform_network_post_init+0x11c>)
 8018dd0:	429a      	cmp	r2, r3
 8018dd2:	d000      	beq.n	8018dd6 <ai_platform_network_post_init+0xbe>
 8018dd4:	e7fe      	b.n	8018dd4 <ai_platform_network_post_init+0xbc>
 8018dd6:	f7ff fa85 	bl	80182e4 <_ai_platform_release_crc>
 8018dda:	68e3      	ldr	r3, [r4, #12]
 8018ddc:	f013 0502 	ands.w	r5, r3, #2
 8018de0:	d011      	beq.n	8018e06 <ai_platform_network_post_init+0xee>
 8018de2:	4620      	mov	r0, r4
 8018de4:	f001 f888 	bl	8019ef8 <ai_layers_post_init_all>
 8018de8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018dea:	b1a3      	cbz	r3, 8018e16 <ai_platform_network_post_init+0xfe>
 8018dec:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8018dee:	b195      	cbz	r5, 8018e16 <ai_platform_network_post_init+0xfe>
 8018df0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8018df2:	4629      	mov	r1, r5
 8018df4:	2000      	movs	r0, #0
 8018df6:	4798      	blx	r3
 8018df8:	692b      	ldr	r3, [r5, #16]
 8018dfa:	42ab      	cmp	r3, r5
 8018dfc:	d00b      	beq.n	8018e16 <ai_platform_network_post_init+0xfe>
 8018dfe:	461d      	mov	r5, r3
 8018e00:	b14b      	cbz	r3, 8018e16 <ai_platform_network_post_init+0xfe>
 8018e02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e04:	e7f4      	b.n	8018df0 <ai_platform_network_post_init+0xd8>
 8018e06:	f104 0010 	add.w	r0, r4, #16
 8018e0a:	2210      	movs	r2, #16
 8018e0c:	2111      	movs	r1, #17
 8018e0e:	f000 fa8b 	bl	8019328 <core_set_error>
 8018e12:	4628      	mov	r0, r5
 8018e14:	bd38      	pop	{r3, r4, r5, pc}
 8018e16:	2001      	movs	r0, #1
 8018e18:	bd38      	pop	{r3, r4, r5, pc}
 8018e1a:	bf00      	nop
 8018e1c:	a1c00100 	.word	0xa1c00100
 8018e20:	e0002000 	.word	0xe0002000
 8018e24:	e0042000 	.word	0xe0042000
 8018e28:	58024c08 	.word	0x58024c08
 8018e2c:	58024c00 	.word	0x58024c00
 8018e30:	f407a5c2 	.word	0xf407a5c2
 8018e34:	b5e8b5cd 	.word	0xb5e8b5cd
 8018e38:	40023008 	.word	0x40023008
 8018e3c:	40023000 	.word	0x40023000

08018e40 <ai_platform_network_process>:
 8018e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e44:	b085      	sub	sp, #20
 8018e46:	460d      	mov	r5, r1
 8018e48:	9202      	str	r2, [sp, #8]
 8018e4a:	4604      	mov	r4, r0
 8018e4c:	b120      	cbz	r0, 8018e58 <ai_platform_network_process+0x18>
 8018e4e:	4b73      	ldr	r3, [pc, #460]	; (801901c <ai_platform_network_process+0x1dc>)
 8018e50:	6802      	ldr	r2, [r0, #0]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	bf18      	it	ne
 8018e56:	2400      	movne	r4, #0
 8018e58:	4a71      	ldr	r2, [pc, #452]	; (8019020 <ai_platform_network_process+0x1e0>)
 8018e5a:	6813      	ldr	r3, [r2, #0]
 8018e5c:	f023 0301 	bic.w	r3, r3, #1
 8018e60:	6013      	str	r3, [r2, #0]
 8018e62:	f7ff fa3d 	bl	80182e0 <_ai_platform_acquire_crc>
 8018e66:	4b6f      	ldr	r3, [pc, #444]	; (8019024 <ai_platform_network_process+0x1e4>)
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018e72:	d00d      	beq.n	8018e90 <ai_platform_network_process+0x50>
 8018e74:	4b6c      	ldr	r3, [pc, #432]	; (8019028 <ai_platform_network_process+0x1e8>)
 8018e76:	2201      	movs	r2, #1
 8018e78:	601a      	str	r2, [r3, #0]
 8018e7a:	681a      	ldr	r2, [r3, #0]
 8018e7c:	2a00      	cmp	r2, #0
 8018e7e:	d1fc      	bne.n	8018e7a <ai_platform_network_process+0x3a>
 8018e80:	4b6a      	ldr	r3, [pc, #424]	; (801902c <ai_platform_network_process+0x1ec>)
 8018e82:	4a6b      	ldr	r2, [pc, #428]	; (8019030 <ai_platform_network_process+0x1f0>)
 8018e84:	601a      	str	r2, [r3, #0]
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	4b6a      	ldr	r3, [pc, #424]	; (8019034 <ai_platform_network_process+0x1f4>)
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d00e      	beq.n	8018eac <ai_platform_network_process+0x6c>
 8018e8e:	e7fe      	b.n	8018e8e <ai_platform_network_process+0x4e>
 8018e90:	4b69      	ldr	r3, [pc, #420]	; (8019038 <ai_platform_network_process+0x1f8>)
 8018e92:	2201      	movs	r2, #1
 8018e94:	601a      	str	r2, [r3, #0]
 8018e96:	681a      	ldr	r2, [r3, #0]
 8018e98:	2a00      	cmp	r2, #0
 8018e9a:	d1fc      	bne.n	8018e96 <ai_platform_network_process+0x56>
 8018e9c:	4b67      	ldr	r3, [pc, #412]	; (801903c <ai_platform_network_process+0x1fc>)
 8018e9e:	4a64      	ldr	r2, [pc, #400]	; (8019030 <ai_platform_network_process+0x1f0>)
 8018ea0:	601a      	str	r2, [r3, #0]
 8018ea2:	681a      	ldr	r2, [r3, #0]
 8018ea4:	4b63      	ldr	r3, [pc, #396]	; (8019034 <ai_platform_network_process+0x1f4>)
 8018ea6:	429a      	cmp	r2, r3
 8018ea8:	d000      	beq.n	8018eac <ai_platform_network_process+0x6c>
 8018eaa:	e7fe      	b.n	8018eaa <ai_platform_network_process+0x6a>
 8018eac:	f7ff fa1a 	bl	80182e4 <_ai_platform_release_crc>
 8018eb0:	2c00      	cmp	r4, #0
 8018eb2:	f000 8089 	beq.w	8018fc8 <ai_platform_network_process+0x188>
 8018eb6:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8018eb8:	2f00      	cmp	r7, #0
 8018eba:	f040 822b 	bne.w	8019314 <ai_platform_network_process+0x4d4>
 8018ebe:	68e3      	ldr	r3, [r4, #12]
 8018ec0:	f003 0303 	and.w	r3, r3, #3
 8018ec4:	2600      	movs	r6, #0
 8018ec6:	2b03      	cmp	r3, #3
 8018ec8:	6166      	str	r6, [r4, #20]
 8018eca:	f040 821b 	bne.w	8019304 <ai_platform_network_process+0x4c4>
 8018ece:	2d00      	cmp	r5, #0
 8018ed0:	f000 809c 	beq.w	801900c <ai_platform_network_process+0x1cc>
 8018ed4:	2f00      	cmp	r7, #0
 8018ed6:	f000 8099 	beq.w	801900c <ai_platform_network_process+0x1cc>
 8018eda:	883b      	ldrh	r3, [r7, #0]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	f000 8095 	beq.w	801900c <ai_platform_network_process+0x1cc>
 8018ee2:	69aa      	ldr	r2, [r5, #24]
 8018ee4:	9401      	str	r4, [sp, #4]
 8018ee6:	f8d2 8000 	ldr.w	r8, [r2]
 8018eea:	429e      	cmp	r6, r3
 8018eec:	f080 80a8 	bcs.w	8019040 <ai_platform_network_process+0x200>
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	f000 80a4 	beq.w	8019040 <ai_platform_network_process+0x200>
 8018ef8:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8018efc:	2c00      	cmp	r4, #0
 8018efe:	f000 809f 	beq.w	8019040 <ai_platform_network_process+0x200>
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	f8d3 b000 	ldr.w	fp, [r3]
 8018f08:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8018f0c:	eb1b 0a09 	adds.w	sl, fp, r9
 8018f10:	d07b      	beq.n	801900a <ai_platform_network_process+0x1ca>
 8018f12:	69a3      	ldr	r3, [r4, #24]
 8018f14:	2101      	movs	r1, #1
 8018f16:	685b      	ldr	r3, [r3, #4]
 8018f18:	9303      	str	r3, [sp, #12]
 8018f1a:	4628      	mov	r0, r5
 8018f1c:	f7ff f994 	bl	8018248 <ai_buffer_get_size>
 8018f20:	9b03      	ldr	r3, [sp, #12]
 8018f22:	4283      	cmp	r3, r0
 8018f24:	d368      	bcc.n	8018ff8 <ai_platform_network_process+0x1b8>
 8018f26:	68e0      	ldr	r0, [r4, #12]
 8018f28:	69a9      	ldr	r1, [r5, #24]
 8018f2a:	68c2      	ldr	r2, [r0, #12]
 8018f2c:	68cb      	ldr	r3, [r1, #12]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d162      	bne.n	8018ff8 <ai_platform_network_process+0x1b8>
 8018f32:	6882      	ldr	r2, [r0, #8]
 8018f34:	688b      	ldr	r3, [r1, #8]
 8018f36:	429a      	cmp	r2, r3
 8018f38:	d15e      	bne.n	8018ff8 <ai_platform_network_process+0x1b8>
 8018f3a:	6842      	ldr	r2, [r0, #4]
 8018f3c:	684b      	ldr	r3, [r1, #4]
 8018f3e:	429a      	cmp	r2, r3
 8018f40:	d15a      	bne.n	8018ff8 <ai_platform_network_process+0x1b8>
 8018f42:	69a3      	ldr	r3, [r4, #24]
 8018f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018f48:	f001 f8d0 	bl	801a0ec <ai_array_get_data_byte_size>
 8018f4c:	9003      	str	r0, [sp, #12]
 8018f4e:	4620      	mov	r0, r4
 8018f50:	f001 f83e 	bl	8019fd0 <get_tensor_byte_size>
 8018f54:	9b03      	ldr	r3, [sp, #12]
 8018f56:	4283      	cmp	r3, r0
 8018f58:	d34e      	bcc.n	8018ff8 <ai_platform_network_process+0x1b8>
 8018f5a:	69a3      	ldr	r3, [r4, #24]
 8018f5c:	6818      	ldr	r0, [r3, #0]
 8018f5e:	f001 f84b 	bl	8019ff8 <ai_array_to_buffer_fmt>
 8018f62:	682b      	ldr	r3, [r5, #0]
 8018f64:	4043      	eors	r3, r0
 8018f66:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8018f6a:	d13c      	bne.n	8018fe6 <ai_platform_network_process+0x1a6>
 8018f6c:	686b      	ldr	r3, [r5, #4]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d04b      	beq.n	801900a <ai_platform_network_process+0x1ca>
 8018f72:	69ab      	ldr	r3, [r5, #24]
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	b362      	cbz	r2, 8018fd2 <ai_platform_network_process+0x192>
 8018f78:	4620      	mov	r0, r4
 8018f7a:	9203      	str	r2, [sp, #12]
 8018f7c:	f001 f828 	bl	8019fd0 <get_tensor_byte_size>
 8018f80:	f8ca 0008 	str.w	r0, [sl, #8]
 8018f84:	69ab      	ldr	r3, [r5, #24]
 8018f86:	9a03      	ldr	r2, [sp, #12]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	fb03 f000 	mul.w	r0, r3, r0
 8018f8e:	f8ca 000c 	str.w	r0, [sl, #12]
 8018f92:	6869      	ldr	r1, [r5, #4]
 8018f94:	f8ca 1004 	str.w	r1, [sl, #4]
 8018f98:	686b      	ldr	r3, [r5, #4]
 8018f9a:	4403      	add	r3, r0
 8018f9c:	f84b 3009 	str.w	r3, [fp, r9]
 8018fa0:	69a0      	ldr	r0, [r4, #24]
 8018fa2:	6803      	ldr	r3, [r0, #0]
 8018fa4:	4590      	cmp	r8, r2
 8018fa6:	bf38      	it	cc
 8018fa8:	4690      	movcc	r8, r2
 8018faa:	009b      	lsls	r3, r3, #2
 8018fac:	d408      	bmi.n	8018fc0 <ai_platform_network_process+0x180>
 8018fae:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8018fb2:	1a9b      	subs	r3, r3, r2
 8018fb4:	4419      	add	r1, r3
 8018fb6:	6081      	str	r1, [r0, #8]
 8018fb8:	69a3      	ldr	r3, [r4, #24]
 8018fba:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018fbe:	60da      	str	r2, [r3, #12]
 8018fc0:	883b      	ldrh	r3, [r7, #0]
 8018fc2:	3601      	adds	r6, #1
 8018fc4:	351c      	adds	r5, #28
 8018fc6:	e790      	b.n	8018eea <ai_platform_network_process+0xaa>
 8018fc8:	4623      	mov	r3, r4
 8018fca:	4618      	mov	r0, r3
 8018fcc:	b005      	add	sp, #20
 8018fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd2:	9c01      	ldr	r4, [sp, #4]
 8018fd4:	4692      	mov	sl, r2
 8018fd6:	f104 0010 	add.w	r0, r4, #16
 8018fda:	2221      	movs	r2, #33	; 0x21
 8018fdc:	2112      	movs	r1, #18
 8018fde:	f000 f9a3 	bl	8019328 <core_set_error>
 8018fe2:	4653      	mov	r3, sl
 8018fe4:	e7f1      	b.n	8018fca <ai_platform_network_process+0x18a>
 8018fe6:	9c01      	ldr	r4, [sp, #4]
 8018fe8:	2219      	movs	r2, #25
 8018fea:	f104 0010 	add.w	r0, r4, #16
 8018fee:	2112      	movs	r1, #18
 8018ff0:	f000 f99a 	bl	8019328 <core_set_error>
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	e7e8      	b.n	8018fca <ai_platform_network_process+0x18a>
 8018ff8:	9c01      	ldr	r4, [sp, #4]
 8018ffa:	2218      	movs	r2, #24
 8018ffc:	f104 0010 	add.w	r0, r4, #16
 8019000:	2112      	movs	r1, #18
 8019002:	f000 f991 	bl	8019328 <core_set_error>
 8019006:	2300      	movs	r3, #0
 8019008:	e7df      	b.n	8018fca <ai_platform_network_process+0x18a>
 801900a:	9c01      	ldr	r4, [sp, #4]
 801900c:	f104 0010 	add.w	r0, r4, #16
 8019010:	2217      	movs	r2, #23
 8019012:	2112      	movs	r1, #18
 8019014:	f000 f988 	bl	8019328 <core_set_error>
 8019018:	2300      	movs	r3, #0
 801901a:	e7d6      	b.n	8018fca <ai_platform_network_process+0x18a>
 801901c:	a1c00100 	.word	0xa1c00100
 8019020:	e0002000 	.word	0xe0002000
 8019024:	e0042000 	.word	0xe0042000
 8019028:	58024c08 	.word	0x58024c08
 801902c:	58024c00 	.word	0x58024c00
 8019030:	f407a5c2 	.word	0xf407a5c2
 8019034:	b5e8b5cd 	.word	0xb5e8b5cd
 8019038:	40023008 	.word	0x40023008
 801903c:	40023000 	.word	0x40023000
 8019040:	9c01      	ldr	r4, [sp, #4]
 8019042:	9a02      	ldr	r2, [sp, #8]
 8019044:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8019046:	2a00      	cmp	r2, #0
 8019048:	f000 80ab 	beq.w	80191a2 <ai_platform_network_process+0x362>
 801904c:	2b01      	cmp	r3, #1
 801904e:	f240 809e 	bls.w	801918e <ai_platform_network_process+0x34e>
 8019052:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8019056:	f119 0f0c 	cmn.w	r9, #12
 801905a:	f000 8098 	beq.w	801918e <ai_platform_network_process+0x34e>
 801905e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8019062:	2b00      	cmp	r3, #0
 8019064:	f000 8093 	beq.w	801918e <ai_platform_network_process+0x34e>
 8019068:	9d02      	ldr	r5, [sp, #8]
 801906a:	9401      	str	r4, [sp, #4]
 801906c:	2700      	movs	r7, #0
 801906e:	429f      	cmp	r7, r3
 8019070:	f080 8095 	bcs.w	801919e <ai_platform_network_process+0x35e>
 8019074:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019078:	2b00      	cmp	r3, #0
 801907a:	f000 8090 	beq.w	801919e <ai_platform_network_process+0x35e>
 801907e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8019082:	2c00      	cmp	r4, #0
 8019084:	f000 808b 	beq.w	801919e <ai_platform_network_process+0x35e>
 8019088:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801908c:	f8d3 b000 	ldr.w	fp, [r3]
 8019090:	013e      	lsls	r6, r7, #4
 8019092:	eb1b 0a06 	adds.w	sl, fp, r6
 8019096:	f000 812c 	beq.w	80192f2 <ai_platform_network_process+0x4b2>
 801909a:	69a3      	ldr	r3, [r4, #24]
 801909c:	2101      	movs	r1, #1
 801909e:	685b      	ldr	r3, [r3, #4]
 80190a0:	9302      	str	r3, [sp, #8]
 80190a2:	4628      	mov	r0, r5
 80190a4:	f7ff f8d0 	bl	8018248 <ai_buffer_get_size>
 80190a8:	9b02      	ldr	r3, [sp, #8]
 80190aa:	4283      	cmp	r3, r0
 80190ac:	d36e      	bcc.n	801918c <ai_platform_network_process+0x34c>
 80190ae:	68e0      	ldr	r0, [r4, #12]
 80190b0:	69a9      	ldr	r1, [r5, #24]
 80190b2:	68c2      	ldr	r2, [r0, #12]
 80190b4:	68cb      	ldr	r3, [r1, #12]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d168      	bne.n	801918c <ai_platform_network_process+0x34c>
 80190ba:	6882      	ldr	r2, [r0, #8]
 80190bc:	688b      	ldr	r3, [r1, #8]
 80190be:	429a      	cmp	r2, r3
 80190c0:	d164      	bne.n	801918c <ai_platform_network_process+0x34c>
 80190c2:	6842      	ldr	r2, [r0, #4]
 80190c4:	684b      	ldr	r3, [r1, #4]
 80190c6:	429a      	cmp	r2, r3
 80190c8:	d160      	bne.n	801918c <ai_platform_network_process+0x34c>
 80190ca:	69a3      	ldr	r3, [r4, #24]
 80190cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80190d0:	f001 f80c 	bl	801a0ec <ai_array_get_data_byte_size>
 80190d4:	9002      	str	r0, [sp, #8]
 80190d6:	4620      	mov	r0, r4
 80190d8:	f000 ff7a 	bl	8019fd0 <get_tensor_byte_size>
 80190dc:	9b02      	ldr	r3, [sp, #8]
 80190de:	4283      	cmp	r3, r0
 80190e0:	d354      	bcc.n	801918c <ai_platform_network_process+0x34c>
 80190e2:	69a3      	ldr	r3, [r4, #24]
 80190e4:	6818      	ldr	r0, [r3, #0]
 80190e6:	f000 ff87 	bl	8019ff8 <ai_array_to_buffer_fmt>
 80190ea:	682b      	ldr	r3, [r5, #0]
 80190ec:	4043      	eors	r3, r0
 80190ee:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80190f2:	d142      	bne.n	801917a <ai_platform_network_process+0x33a>
 80190f4:	686b      	ldr	r3, [r5, #4]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d035      	beq.n	8019166 <ai_platform_network_process+0x326>
 80190fa:	69ab      	ldr	r3, [r5, #24]
 80190fc:	681a      	ldr	r2, [r3, #0]
 80190fe:	b342      	cbz	r2, 8019152 <ai_platform_network_process+0x312>
 8019100:	4620      	mov	r0, r4
 8019102:	9202      	str	r2, [sp, #8]
 8019104:	f000 ff64 	bl	8019fd0 <get_tensor_byte_size>
 8019108:	f8ca 0008 	str.w	r0, [sl, #8]
 801910c:	69ab      	ldr	r3, [r5, #24]
 801910e:	9a02      	ldr	r2, [sp, #8]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	fb03 f000 	mul.w	r0, r3, r0
 8019116:	f8ca 000c 	str.w	r0, [sl, #12]
 801911a:	6869      	ldr	r1, [r5, #4]
 801911c:	f8ca 1004 	str.w	r1, [sl, #4]
 8019120:	686b      	ldr	r3, [r5, #4]
 8019122:	4403      	add	r3, r0
 8019124:	f84b 3006 	str.w	r3, [fp, r6]
 8019128:	69a0      	ldr	r0, [r4, #24]
 801912a:	6803      	ldr	r3, [r0, #0]
 801912c:	4590      	cmp	r8, r2
 801912e:	bf38      	it	cc
 8019130:	4690      	movcc	r8, r2
 8019132:	009e      	lsls	r6, r3, #2
 8019134:	d408      	bmi.n	8019148 <ai_platform_network_process+0x308>
 8019136:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801913a:	1a9b      	subs	r3, r3, r2
 801913c:	4419      	add	r1, r3
 801913e:	6081      	str	r1, [r0, #8]
 8019140:	69a3      	ldr	r3, [r4, #24]
 8019142:	f8da 2004 	ldr.w	r2, [sl, #4]
 8019146:	60da      	str	r2, [r3, #12]
 8019148:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801914c:	3701      	adds	r7, #1
 801914e:	351c      	adds	r5, #28
 8019150:	e78d      	b.n	801906e <ai_platform_network_process+0x22e>
 8019152:	9c01      	ldr	r4, [sp, #4]
 8019154:	4692      	mov	sl, r2
 8019156:	f104 0010 	add.w	r0, r4, #16
 801915a:	2221      	movs	r2, #33	; 0x21
 801915c:	2113      	movs	r1, #19
 801915e:	f000 f8e3 	bl	8019328 <core_set_error>
 8019162:	4653      	mov	r3, sl
 8019164:	e731      	b.n	8018fca <ai_platform_network_process+0x18a>
 8019166:	9c01      	ldr	r4, [sp, #4]
 8019168:	469a      	mov	sl, r3
 801916a:	f104 0010 	add.w	r0, r4, #16
 801916e:	2217      	movs	r2, #23
 8019170:	2113      	movs	r1, #19
 8019172:	f000 f8d9 	bl	8019328 <core_set_error>
 8019176:	4653      	mov	r3, sl
 8019178:	e727      	b.n	8018fca <ai_platform_network_process+0x18a>
 801917a:	9c01      	ldr	r4, [sp, #4]
 801917c:	2219      	movs	r2, #25
 801917e:	f104 0010 	add.w	r0, r4, #16
 8019182:	2113      	movs	r1, #19
 8019184:	f000 f8d0 	bl	8019328 <core_set_error>
 8019188:	2300      	movs	r3, #0
 801918a:	e71e      	b.n	8018fca <ai_platform_network_process+0x18a>
 801918c:	9c01      	ldr	r4, [sp, #4]
 801918e:	f104 0010 	add.w	r0, r4, #16
 8019192:	2218      	movs	r2, #24
 8019194:	2113      	movs	r1, #19
 8019196:	f000 f8c7 	bl	8019328 <core_set_error>
 801919a:	2300      	movs	r3, #0
 801919c:	e715      	b.n	8018fca <ai_platform_network_process+0x18a>
 801919e:	9c01      	ldr	r4, [sp, #4]
 80191a0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80191a2:	f8a4 8014 	strh.w	r8, [r4, #20]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	f000 80a0 	beq.w	80192ec <ai_platform_network_process+0x4ac>
 80191ac:	2b01      	cmp	r3, #1
 80191ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80191b0:	f240 809a 	bls.w	80192e8 <ai_platform_network_process+0x4a8>
 80191b4:	f105 070c 	add.w	r7, r5, #12
 80191b8:	8ae3      	ldrh	r3, [r4, #22]
 80191ba:	8aa2      	ldrh	r2, [r4, #20]
 80191bc:	429a      	cmp	r2, r3
 80191be:	f67f af04 	bls.w	8018fca <ai_platform_network_process+0x18a>
 80191c2:	46a3      	mov	fp, r4
 80191c4:	2d00      	cmp	r5, #0
 80191c6:	d036      	beq.n	8019236 <ai_platform_network_process+0x3f6>
 80191c8:	882b      	ldrh	r3, [r5, #0]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d033      	beq.n	8019236 <ai_platform_network_process+0x3f6>
 80191ce:	686b      	ldr	r3, [r5, #4]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d030      	beq.n	8019236 <ai_platform_network_process+0x3f6>
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	f04f 0800 	mov.w	r8, #0
 80191da:	b9db      	cbnz	r3, 8019214 <ai_platform_network_process+0x3d4>
 80191dc:	e02b      	b.n	8019236 <ai_platform_network_process+0x3f6>
 80191de:	68d4      	ldr	r4, [r2, #12]
 80191e0:	1b00      	subs	r0, r0, r4
 80191e2:	4401      	add	r1, r0
 80191e4:	6091      	str	r1, [r2, #8]
 80191e6:	699b      	ldr	r3, [r3, #24]
 80191e8:	6872      	ldr	r2, [r6, #4]
 80191ea:	60da      	str	r2, [r3, #12]
 80191ec:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80191f0:	f85a 2009 	ldr.w	r2, [sl, r9]
 80191f4:	440b      	add	r3, r1
 80191f6:	4293      	cmp	r3, r2
 80191f8:	bf24      	itt	cs
 80191fa:	68f3      	ldrcs	r3, [r6, #12]
 80191fc:	1ad3      	subcs	r3, r2, r3
 80191fe:	6073      	str	r3, [r6, #4]
 8019200:	882b      	ldrh	r3, [r5, #0]
 8019202:	f108 0801 	add.w	r8, r8, #1
 8019206:	4598      	cmp	r8, r3
 8019208:	d215      	bcs.n	8019236 <ai_platform_network_process+0x3f6>
 801920a:	686b      	ldr	r3, [r5, #4]
 801920c:	b19b      	cbz	r3, 8019236 <ai_platform_network_process+0x3f6>
 801920e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8019212:	b183      	cbz	r3, 8019236 <ai_platform_network_process+0x3f6>
 8019214:	68a9      	ldr	r1, [r5, #8]
 8019216:	699a      	ldr	r2, [r3, #24]
 8019218:	f8d1 a000 	ldr.w	sl, [r1]
 801921c:	6814      	ldr	r4, [r2, #0]
 801921e:	6890      	ldr	r0, [r2, #8]
 8019220:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8019224:	eb0a 0609 	add.w	r6, sl, r9
 8019228:	00a4      	lsls	r4, r4, #2
 801922a:	6871      	ldr	r1, [r6, #4]
 801922c:	d5d7      	bpl.n	80191de <ai_platform_network_process+0x39e>
 801922e:	68b2      	ldr	r2, [r6, #8]
 8019230:	f000 ffae 	bl	801a190 <memcpy>
 8019234:	e7da      	b.n	80191ec <ai_platform_network_process+0x3ac>
 8019236:	4658      	mov	r0, fp
 8019238:	f000 fe76 	bl	8019f28 <ai_layers_forward_all>
 801923c:	2f00      	cmp	r7, #0
 801923e:	d047      	beq.n	80192d0 <ai_platform_network_process+0x490>
 8019240:	883b      	ldrh	r3, [r7, #0]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d044      	beq.n	80192d0 <ai_platform_network_process+0x490>
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d041      	beq.n	80192d0 <ai_platform_network_process+0x490>
 801924c:	6818      	ldr	r0, [r3, #0]
 801924e:	2800      	cmp	r0, #0
 8019250:	d03e      	beq.n	80192d0 <ai_platform_network_process+0x490>
 8019252:	f04f 0800 	mov.w	r8, #0
 8019256:	e019      	b.n	801928c <ai_platform_network_process+0x44c>
 8019258:	f85a 2009 	ldr.w	r2, [sl, r9]
 801925c:	4293      	cmp	r3, r2
 801925e:	bf24      	itt	cs
 8019260:	68f3      	ldrcs	r3, [r6, #12]
 8019262:	1ad3      	subcs	r3, r2, r3
 8019264:	6073      	str	r3, [r6, #4]
 8019266:	6981      	ldr	r1, [r0, #24]
 8019268:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 801926c:	1b12      	subs	r2, r2, r4
 801926e:	4413      	add	r3, r2
 8019270:	608b      	str	r3, [r1, #8]
 8019272:	6983      	ldr	r3, [r0, #24]
 8019274:	6872      	ldr	r2, [r6, #4]
 8019276:	60da      	str	r2, [r3, #12]
 8019278:	883b      	ldrh	r3, [r7, #0]
 801927a:	f108 0801 	add.w	r8, r8, #1
 801927e:	4598      	cmp	r8, r3
 8019280:	d226      	bcs.n	80192d0 <ai_platform_network_process+0x490>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	b323      	cbz	r3, 80192d0 <ai_platform_network_process+0x490>
 8019286:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801928a:	b308      	cbz	r0, 80192d0 <ai_platform_network_process+0x490>
 801928c:	68bb      	ldr	r3, [r7, #8]
 801928e:	6981      	ldr	r1, [r0, #24]
 8019290:	f8d3 a000 	ldr.w	sl, [r3]
 8019294:	680c      	ldr	r4, [r1, #0]
 8019296:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801929a:	eb0a 0609 	add.w	r6, sl, r9
 801929e:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80192a2:	00a4      	lsls	r4, r4, #2
 80192a4:	eb0c 0302 	add.w	r3, ip, r2
 80192a8:	d5d6      	bpl.n	8019258 <ai_platform_network_process+0x418>
 80192aa:	6889      	ldr	r1, [r1, #8]
 80192ac:	4660      	mov	r0, ip
 80192ae:	f000 ff6f 	bl	801a190 <memcpy>
 80192b2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80192b6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80192ba:	440b      	add	r3, r1
 80192bc:	4293      	cmp	r3, r2
 80192be:	bf24      	itt	cs
 80192c0:	68f3      	ldrcs	r3, [r6, #12]
 80192c2:	1ad3      	subcs	r3, r2, r3
 80192c4:	6073      	str	r3, [r6, #4]
 80192c6:	883b      	ldrh	r3, [r7, #0]
 80192c8:	f108 0801 	add.w	r8, r8, #1
 80192cc:	4598      	cmp	r8, r3
 80192ce:	d3d8      	bcc.n	8019282 <ai_platform_network_process+0x442>
 80192d0:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 80192d4:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 80192d8:	3301      	adds	r3, #1
 80192da:	b29b      	uxth	r3, r3
 80192dc:	429a      	cmp	r2, r3
 80192de:	f8ab 3016 	strh.w	r3, [fp, #22]
 80192e2:	f63f af6f 	bhi.w	80191c4 <ai_platform_network_process+0x384>
 80192e6:	e670      	b.n	8018fca <ai_platform_network_process+0x18a>
 80192e8:	2700      	movs	r7, #0
 80192ea:	e765      	b.n	80191b8 <ai_platform_network_process+0x378>
 80192ec:	461d      	mov	r5, r3
 80192ee:	461f      	mov	r7, r3
 80192f0:	e762      	b.n	80191b8 <ai_platform_network_process+0x378>
 80192f2:	9c01      	ldr	r4, [sp, #4]
 80192f4:	2217      	movs	r2, #23
 80192f6:	f104 0010 	add.w	r0, r4, #16
 80192fa:	2113      	movs	r1, #19
 80192fc:	f000 f814 	bl	8019328 <core_set_error>
 8019300:	4653      	mov	r3, sl
 8019302:	e662      	b.n	8018fca <ai_platform_network_process+0x18a>
 8019304:	f104 0010 	add.w	r0, r4, #16
 8019308:	2230      	movs	r2, #48	; 0x30
 801930a:	2111      	movs	r1, #17
 801930c:	f000 f80c 	bl	8019328 <core_set_error>
 8019310:	4633      	mov	r3, r6
 8019312:	e65a      	b.n	8018fca <ai_platform_network_process+0x18a>
 8019314:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8019316:	e5d2      	b.n	8018ebe <ai_platform_network_process+0x7e>

08019318 <core_init>:
 8019318:	2001      	movs	r0, #1
 801931a:	4770      	bx	lr

0801931c <core_get_error>:
 801931c:	4603      	mov	r3, r0
 801931e:	2200      	movs	r2, #0
 8019320:	6800      	ldr	r0, [r0, #0]
 8019322:	601a      	str	r2, [r3, #0]
 8019324:	4770      	bx	lr
 8019326:	bf00      	nop

08019328 <core_set_error>:
 8019328:	7803      	ldrb	r3, [r0, #0]
 801932a:	b933      	cbnz	r3, 801933a <core_set_error+0x12>
 801932c:	7001      	strb	r1, [r0, #0]
 801932e:	6803      	ldr	r3, [r0, #0]
 8019330:	f362 231f 	bfi	r3, r2, #8, #24
 8019334:	6003      	str	r3, [r0, #0]
 8019336:	2001      	movs	r0, #1
 8019338:	4770      	bx	lr
 801933a:	2000      	movs	r0, #0
 801933c:	4770      	bx	lr
 801933e:	bf00      	nop

08019340 <forward_dense>:
 8019340:	6983      	ldr	r3, [r0, #24]
 8019342:	881a      	ldrh	r2, [r3, #0]
 8019344:	2a00      	cmp	r2, #0
 8019346:	f000 8193 	beq.w	8019670 <forward_dense+0x330>
 801934a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801934e:	ed2d 8b10 	vpush	{d8-d15}
 8019352:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8019356:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801935a:	b099      	sub	sp, #100	; 0x64
 801935c:	2b00      	cmp	r3, #0
 801935e:	f000 8194 	beq.w	801968a <forward_dense+0x34a>
 8019362:	f8d3 8000 	ldr.w	r8, [r3]
 8019366:	2a01      	cmp	r2, #1
 8019368:	f240 817f 	bls.w	801966a <forward_dense+0x32a>
 801936c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8019370:	b104      	cbz	r4, 8019374 <forward_dense+0x34>
 8019372:	6824      	ldr	r4, [r4, #0]
 8019374:	2a02      	cmp	r2, #2
 8019376:	f000 817d 	beq.w	8019674 <forward_dense+0x334>
 801937a:	f8dc 301c 	ldr.w	r3, [ip, #28]
 801937e:	2b00      	cmp	r3, #0
 8019380:	f040 817b 	bne.w	801967a <forward_dense+0x33a>
 8019384:	f11c 0118 	adds.w	r1, ip, #24
 8019388:	930e      	str	r3, [sp, #56]	; 0x38
 801938a:	f000 817c 	beq.w	8019686 <forward_dense+0x346>
 801938e:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 8019392:	2901      	cmp	r1, #1
 8019394:	f240 83ab 	bls.w	8019aee <forward_dense+0x7ae>
 8019398:	2b00      	cmp	r3, #0
 801939a:	f000 8178 	beq.w	801968e <forward_dense+0x34e>
 801939e:	685b      	ldr	r3, [r3, #4]
 80193a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80193a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193a4:	68e7      	ldr	r7, [r4, #12]
 80193a6:	6998      	ldr	r0, [r3, #24]
 80193a8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80193ac:	6803      	ldr	r3, [r0, #0]
 80193ae:	6849      	ldr	r1, [r1, #4]
 80193b0:	9115      	str	r1, [sp, #84]	; 0x54
 80193b2:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 80193b6:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80193ba:	f3c3 5141 	ubfx	r1, r3, #21, #2
 80193be:	fa4e f101 	asr.w	r1, lr, r1
 80193c2:	2a03      	cmp	r2, #3
 80193c4:	68ff      	ldr	r7, [r7, #12]
 80193c6:	9113      	str	r1, [sp, #76]	; 0x4c
 80193c8:	fb05 f506 	mul.w	r5, r5, r6
 80193cc:	f000 8373 	beq.w	8019ab6 <forward_dense+0x776>
 80193d0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 80193d4:	2a00      	cmp	r2, #0
 80193d6:	f000 8371 	beq.w	8019abc <forward_dense+0x77c>
 80193da:	6812      	ldr	r2, [r2, #0]
 80193dc:	2a00      	cmp	r2, #0
 80193de:	f000 836d 	beq.w	8019abc <forward_dense+0x77c>
 80193e2:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80193e6:	2b04      	cmp	r3, #4
 80193e8:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80193ec:	f000 836c 	beq.w	8019ac8 <forward_dense+0x788>
 80193f0:	2b08      	cmp	r3, #8
 80193f2:	f000 8369 	beq.w	8019ac8 <forward_dense+0x788>
 80193f6:	f04f 0a00 	mov.w	sl, #0
 80193fa:	69a3      	ldr	r3, [r4, #24]
 80193fc:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8019400:	6899      	ldr	r1, [r3, #8]
 8019402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019404:	9102      	str	r1, [sp, #8]
 8019406:	695b      	ldr	r3, [r3, #20]
 8019408:	6892      	ldr	r2, [r2, #8]
 801940a:	685b      	ldr	r3, [r3, #4]
 801940c:	9305      	str	r3, [sp, #20]
 801940e:	00ad      	lsls	r5, r5, #2
 8019410:	fb07 1005 	mla	r0, r7, r5, r1
 8019414:	00b4      	lsls	r4, r6, #2
 8019416:	4281      	cmp	r1, r0
 8019418:	9011      	str	r0, [sp, #68]	; 0x44
 801941a:	9410      	str	r4, [sp, #64]	; 0x40
 801941c:	eb01 0804 	add.w	r8, r1, r4
 8019420:	f080 811e 	bcs.w	8019660 <forward_dense+0x320>
 8019424:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8019426:	eddf faa0 	vldr	s31, [pc, #640]	; 80196a8 <forward_dense+0x368>
 801942a:	08e8      	lsrs	r0, r5, #3
 801942c:	0141      	lsls	r1, r0, #5
 801942e:	f025 0301 	bic.w	r3, r5, #1
 8019432:	4606      	mov	r6, r0
 8019434:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8019438:	9001      	str	r0, [sp, #4]
 801943a:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 801943e:	00f7      	lsls	r7, r6, #3
 8019440:	9316      	str	r3, [sp, #88]	; 0x58
 8019442:	0143      	lsls	r3, r0, #5
 8019444:	00b6      	lsls	r6, r6, #2
 8019446:	f1a5 0410 	sub.w	r4, r5, #16
 801944a:	9307      	str	r3, [sp, #28]
 801944c:	f107 0308 	add.w	r3, r7, #8
 8019450:	0924      	lsrs	r4, r4, #4
 8019452:	9304      	str	r3, [sp, #16]
 8019454:	1d33      	adds	r3, r6, #4
 8019456:	3401      	adds	r4, #1
 8019458:	930d      	str	r3, [sp, #52]	; 0x34
 801945a:	f005 0301 	and.w	r3, r5, #1
 801945e:	01a4      	lsls	r4, r4, #6
 8019460:	f005 0907 	and.w	r9, r5, #7
 8019464:	9309      	str	r3, [sp, #36]	; 0x24
 8019466:	00ab      	lsls	r3, r5, #2
 8019468:	9312      	str	r3, [sp, #72]	; 0x48
 801946a:	9703      	str	r7, [sp, #12]
 801946c:	960c      	str	r6, [sp, #48]	; 0x30
 801946e:	9417      	str	r4, [sp, #92]	; 0x5c
 8019470:	eb02 0b01 	add.w	fp, r2, r1
 8019474:	4653      	mov	r3, sl
 8019476:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 801947a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801947c:	9907      	ldr	r1, [sp, #28]
 801947e:	6992      	ldr	r2, [r2, #24]
 8019480:	6894      	ldr	r4, [r2, #8]
 8019482:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019484:	4459      	add	r1, fp
 8019486:	9106      	str	r1, [sp, #24]
 8019488:	2a00      	cmp	r2, #0
 801948a:	f000 810f 	beq.w	80196ac <forward_dense+0x36c>
 801948e:	6992      	ldr	r2, [r2, #24]
 8019490:	6896      	ldr	r6, [r2, #8]
 8019492:	2b00      	cmp	r3, #0
 8019494:	f000 810e 	beq.w	80196b4 <forward_dense+0x374>
 8019498:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801949a:	2a04      	cmp	r2, #4
 801949c:	f000 821e 	beq.w	80198dc <forward_dense+0x59c>
 80194a0:	9a02      	ldr	r2, [sp, #8]
 80194a2:	4590      	cmp	r8, r2
 80194a4:	f240 80d3 	bls.w	801964e <forward_dense+0x30e>
 80194a8:	4694      	mov	ip, r2
 80194aa:	9a07      	ldr	r2, [sp, #28]
 80194ac:	f8dd a014 	ldr.w	sl, [sp, #20]
 80194b0:	f102 0e20 	add.w	lr, r2, #32
 80194b4:	46b1      	mov	r9, r6
 80194b6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80194b8:	44de      	add	lr, fp
 80194ba:	f1b9 0f00 	cmp.w	r9, #0
 80194be:	f000 80e8 	beq.w	8019692 <forward_dense+0x352>
 80194c2:	9a01      	ldr	r2, [sp, #4]
 80194c4:	edd9 2a00 	vldr	s5, [r9]
 80194c8:	eddf 6a77 	vldr	s13, [pc, #476]	; 80196a8 <forward_dense+0x368>
 80194cc:	f109 0904 	add.w	r9, r9, #4
 80194d0:	2a00      	cmp	r2, #0
 80194d2:	f000 80e6 	beq.w	80196a2 <forward_dense+0x362>
 80194d6:	9904      	ldr	r1, [sp, #16]
 80194d8:	f104 0208 	add.w	r2, r4, #8
 80194dc:	190f      	adds	r7, r1, r4
 80194de:	4671      	mov	r1, lr
 80194e0:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 80194e4:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 80194e8:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 80194ec:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 80194f0:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 80194f4:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 80194f8:	ed51 3a04 	vldr	s7, [r1, #-16]
 80194fc:	ed51 4a03 	vldr	s9, [r1, #-12]
 8019500:	ed51 5a02 	vldr	s11, [r1, #-8]
 8019504:	ed11 6a01 	vldr	s12, [r1, #-4]
 8019508:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801950c:	ed95 7a00 	vldr	s14, [r5]
 8019510:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 8019514:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019518:	ee67 7a27 	vmul.f32	s15, s14, s15
 801951c:	ed90 7a00 	vldr	s14, [r0]
 8019520:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8019524:	eee7 7a03 	vfma.f32	s15, s14, s6
 8019528:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801952c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019530:	ed95 3a00 	vldr	s6, [r5]
 8019534:	ed90 7a00 	vldr	s14, [r0]
 8019538:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 801953c:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8019540:	eee3 7a04 	vfma.f32	s15, s6, s8
 8019544:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8019548:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801954c:	ed95 3a00 	vldr	s6, [r5]
 8019550:	ed90 4a00 	vldr	s8, [r0]
 8019554:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 8019558:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 801955c:	eee7 7a05 	vfma.f32	s15, s14, s10
 8019560:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8019564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019568:	ed95 5a00 	vldr	s10, [r5]
 801956c:	ed90 7a00 	vldr	s14, [r0]
 8019570:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019574:	3208      	adds	r2, #8
 8019576:	4297      	cmp	r7, r2
 8019578:	f101 0120 	add.w	r1, r1, #32
 801957c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019580:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019584:	eee7 7a06 	vfma.f32	s15, s14, s12
 8019588:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801958c:	d1a8      	bne.n	80194e0 <forward_dense+0x1a0>
 801958e:	9a03      	ldr	r2, [sp, #12]
 8019590:	18a1      	adds	r1, r4, r2
 8019592:	465a      	mov	r2, fp
 8019594:	2e00      	cmp	r6, #0
 8019596:	d04a      	beq.n	801962e <forward_dense+0x2ee>
 8019598:	7808      	ldrb	r0, [r1, #0]
 801959a:	ed92 7a00 	vldr	s14, [r2]
 801959e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80195a2:	edd0 7a00 	vldr	s15, [r0]
 80195a6:	2e01      	cmp	r6, #1
 80195a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80195ac:	d03f      	beq.n	801962e <forward_dense+0x2ee>
 80195ae:	7848      	ldrb	r0, [r1, #1]
 80195b0:	edd2 7a01 	vldr	s15, [r2, #4]
 80195b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80195b8:	ed90 7a00 	vldr	s14, [r0]
 80195bc:	2e02      	cmp	r6, #2
 80195be:	eee7 6a27 	vfma.f32	s13, s14, s15
 80195c2:	d034      	beq.n	801962e <forward_dense+0x2ee>
 80195c4:	7888      	ldrb	r0, [r1, #2]
 80195c6:	edd2 7a02 	vldr	s15, [r2, #8]
 80195ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80195ce:	ed90 7a00 	vldr	s14, [r0]
 80195d2:	2e03      	cmp	r6, #3
 80195d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80195d8:	d029      	beq.n	801962e <forward_dense+0x2ee>
 80195da:	78c8      	ldrb	r0, [r1, #3]
 80195dc:	edd2 7a03 	vldr	s15, [r2, #12]
 80195e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80195e4:	ed90 7a00 	vldr	s14, [r0]
 80195e8:	2e04      	cmp	r6, #4
 80195ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 80195ee:	d01e      	beq.n	801962e <forward_dense+0x2ee>
 80195f0:	7908      	ldrb	r0, [r1, #4]
 80195f2:	edd2 7a04 	vldr	s15, [r2, #16]
 80195f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80195fa:	ed90 7a00 	vldr	s14, [r0]
 80195fe:	2e05      	cmp	r6, #5
 8019600:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019604:	d013      	beq.n	801962e <forward_dense+0x2ee>
 8019606:	7948      	ldrb	r0, [r1, #5]
 8019608:	edd2 7a05 	vldr	s15, [r2, #20]
 801960c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019610:	ed90 7a00 	vldr	s14, [r0]
 8019614:	2e06      	cmp	r6, #6
 8019616:	eee7 6a27 	vfma.f32	s13, s14, s15
 801961a:	d008      	beq.n	801962e <forward_dense+0x2ee>
 801961c:	7989      	ldrb	r1, [r1, #6]
 801961e:	edd2 7a06 	vldr	s15, [r2, #24]
 8019622:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8019626:	ed92 7a00 	vldr	s14, [r2]
 801962a:	eee7 6a27 	vfma.f32	s13, s14, s15
 801962e:	4454      	add	r4, sl
 8019630:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8019634:	ecec 6a01 	vstmia	ip!, {s13}
 8019638:	45c4      	cmp	ip, r8
 801963a:	f4ff af3e 	bcc.w	80194ba <forward_dense+0x17a>
 801963e:	9902      	ldr	r1, [sp, #8]
 8019640:	43ca      	mvns	r2, r1
 8019642:	4442      	add	r2, r8
 8019644:	f022 0203 	bic.w	r2, r2, #3
 8019648:	3204      	adds	r2, #4
 801964a:	188a      	adds	r2, r1, r2
 801964c:	9202      	str	r2, [sp, #8]
 801964e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019650:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019652:	4490      	add	r8, r2
 8019654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019656:	4493      	add	fp, r2
 8019658:	9a02      	ldr	r2, [sp, #8]
 801965a:	428a      	cmp	r2, r1
 801965c:	f4ff af0d 	bcc.w	801947a <forward_dense+0x13a>
 8019660:	b019      	add	sp, #100	; 0x64
 8019662:	ecbd 8b10 	vpop	{d8-d15}
 8019666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801966a:	2300      	movs	r3, #0
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	deff      	udf	#255	; 0xff
 8019670:	6853      	ldr	r3, [r2, #4]
 8019672:	deff      	udf	#255	; 0xff
 8019674:	2300      	movs	r3, #0
 8019676:	685b      	ldr	r3, [r3, #4]
 8019678:	deff      	udf	#255	; 0xff
 801967a:	6819      	ldr	r1, [r3, #0]
 801967c:	910e      	str	r1, [sp, #56]	; 0x38
 801967e:	f11c 0118 	adds.w	r1, ip, #24
 8019682:	f47f ae84 	bne.w	801938e <forward_dense+0x4e>
 8019686:	910f      	str	r1, [sp, #60]	; 0x3c
 8019688:	e68b      	b.n	80193a2 <forward_dense+0x62>
 801968a:	4698      	mov	r8, r3
 801968c:	e66b      	b.n	8019366 <forward_dense+0x26>
 801968e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019690:	e687      	b.n	80193a2 <forward_dense+0x62>
 8019692:	9a01      	ldr	r2, [sp, #4]
 8019694:	eddf 6a04 	vldr	s13, [pc, #16]	; 80196a8 <forward_dense+0x368>
 8019698:	eef0 2a6f 	vmov.f32	s5, s31
 801969c:	2a00      	cmp	r2, #0
 801969e:	f47f af1a 	bne.w	80194d6 <forward_dense+0x196>
 80196a2:	9a06      	ldr	r2, [sp, #24]
 80196a4:	4621      	mov	r1, r4
 80196a6:	e775      	b.n	8019594 <forward_dense+0x254>
 80196a8:	00000000 	.word	0x00000000
 80196ac:	4616      	mov	r6, r2
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	f47f aef2 	bne.w	8019498 <forward_dense+0x158>
 80196b4:	9a02      	ldr	r2, [sp, #8]
 80196b6:	4590      	cmp	r8, r2
 80196b8:	d9c9      	bls.n	801964e <forward_dense+0x30e>
 80196ba:	4615      	mov	r5, r2
 80196bc:	9a07      	ldr	r2, [sp, #28]
 80196be:	9915      	ldr	r1, [sp, #84]	; 0x54
 80196c0:	9308      	str	r3, [sp, #32]
 80196c2:	f102 0740 	add.w	r7, r2, #64	; 0x40
 80196c6:	9a06      	ldr	r2, [sp, #24]
 80196c8:	9b05      	ldr	r3, [sp, #20]
 80196ca:	4610      	mov	r0, r2
 80196cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80196ce:	445f      	add	r7, fp
 80196d0:	eb00 0c02 	add.w	ip, r0, r2
 80196d4:	f001 0e0f 	and.w	lr, r1, #15
 80196d8:	468a      	mov	sl, r1
 80196da:	4691      	mov	r9, r2
 80196dc:	2e00      	cmp	r6, #0
 80196de:	f000 81de 	beq.w	8019a9e <forward_dense+0x75e>
 80196e2:	f1ba 0f0f 	cmp.w	sl, #15
 80196e6:	ed96 fa00 	vldr	s30, [r6]
 80196ea:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 80196a8 <forward_dense+0x368>
 80196ee:	f106 0604 	add.w	r6, r6, #4
 80196f2:	f240 81dc 	bls.w	8019aae <forward_dense+0x76e>
 80196f6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80196fa:	463a      	mov	r2, r7
 80196fc:	4650      	mov	r0, sl
 80196fe:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 8019702:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8019706:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 801970a:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 801970e:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 8019712:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 8019716:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 801971a:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 801971e:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 8019722:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 8019726:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 801972a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 801972e:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 8019732:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 8019736:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 801973a:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 801973e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8019742:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 8019746:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 801974a:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 801974e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8019752:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 8019756:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 801975a:	ed12 4a04 	vldr	s8, [r2, #-16]
 801975e:	ed51 4a04 	vldr	s9, [r1, #-16]
 8019762:	ed12 5a03 	vldr	s10, [r2, #-12]
 8019766:	ed51 5a03 	vldr	s11, [r1, #-12]
 801976a:	ed12 6a02 	vldr	s12, [r2, #-8]
 801976e:	ed11 7a02 	vldr	s14, [r1, #-8]
 8019772:	ee67 7aae 	vmul.f32	s15, s15, s29
 8019776:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 801977a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 801977e:	3810      	subs	r0, #16
 8019780:	280f      	cmp	r0, #15
 8019782:	ed11 ea01 	vldr	s28, [r1, #-4]
 8019786:	ed52 da01 	vldr	s27, [r2, #-4]
 801978a:	eeed 7a2e 	vfma.f32	s15, s26, s29
 801978e:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8019792:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8019796:	eeec 7a8c 	vfma.f32	s15, s25, s24
 801979a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801979e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80197a2:	eee9 7a89 	vfma.f32	s15, s19, s18
 80197a6:	eee8 7a88 	vfma.f32	s15, s17, s16
 80197aa:	eee0 7a20 	vfma.f32	s15, s0, s1
 80197ae:	eee1 7a21 	vfma.f32	s15, s2, s3
 80197b2:	eee2 7a22 	vfma.f32	s15, s4, s5
 80197b6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80197ba:	eee4 7a24 	vfma.f32	s15, s8, s9
 80197be:	eee5 7a25 	vfma.f32	s15, s10, s11
 80197c2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80197c6:	eeee 7a2d 	vfma.f32	s15, s28, s27
 80197ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80197ce:	d896      	bhi.n	80196fe <forward_dense+0x3be>
 80197d0:	eb04 0009 	add.w	r0, r4, r9
 80197d4:	4672      	mov	r2, lr
 80197d6:	4661      	mov	r1, ip
 80197d8:	2a00      	cmp	r2, #0
 80197da:	d075      	beq.n	80198c8 <forward_dense+0x588>
 80197dc:	ed90 7a00 	vldr	s14, [r0]
 80197e0:	edd1 7a00 	vldr	s15, [r1]
 80197e4:	2a01      	cmp	r2, #1
 80197e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80197ea:	d06d      	beq.n	80198c8 <forward_dense+0x588>
 80197ec:	ed90 7a01 	vldr	s14, [r0, #4]
 80197f0:	edd1 7a01 	vldr	s15, [r1, #4]
 80197f4:	2a02      	cmp	r2, #2
 80197f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80197fa:	d065      	beq.n	80198c8 <forward_dense+0x588>
 80197fc:	ed90 7a02 	vldr	s14, [r0, #8]
 8019800:	edd1 7a02 	vldr	s15, [r1, #8]
 8019804:	2a03      	cmp	r2, #3
 8019806:	eee7 6a27 	vfma.f32	s13, s14, s15
 801980a:	d05d      	beq.n	80198c8 <forward_dense+0x588>
 801980c:	ed90 7a03 	vldr	s14, [r0, #12]
 8019810:	edd1 7a03 	vldr	s15, [r1, #12]
 8019814:	2a04      	cmp	r2, #4
 8019816:	eee7 6a27 	vfma.f32	s13, s14, s15
 801981a:	d055      	beq.n	80198c8 <forward_dense+0x588>
 801981c:	ed90 7a04 	vldr	s14, [r0, #16]
 8019820:	edd1 7a04 	vldr	s15, [r1, #16]
 8019824:	2a05      	cmp	r2, #5
 8019826:	eee7 6a27 	vfma.f32	s13, s14, s15
 801982a:	d04d      	beq.n	80198c8 <forward_dense+0x588>
 801982c:	ed90 7a05 	vldr	s14, [r0, #20]
 8019830:	edd1 7a05 	vldr	s15, [r1, #20]
 8019834:	2a06      	cmp	r2, #6
 8019836:	eee7 6a27 	vfma.f32	s13, s14, s15
 801983a:	d045      	beq.n	80198c8 <forward_dense+0x588>
 801983c:	ed90 7a06 	vldr	s14, [r0, #24]
 8019840:	edd1 7a06 	vldr	s15, [r1, #24]
 8019844:	2a07      	cmp	r2, #7
 8019846:	eee7 6a27 	vfma.f32	s13, s14, s15
 801984a:	d03d      	beq.n	80198c8 <forward_dense+0x588>
 801984c:	ed90 7a07 	vldr	s14, [r0, #28]
 8019850:	edd1 7a07 	vldr	s15, [r1, #28]
 8019854:	2a08      	cmp	r2, #8
 8019856:	eee7 6a27 	vfma.f32	s13, s14, s15
 801985a:	d035      	beq.n	80198c8 <forward_dense+0x588>
 801985c:	ed90 7a08 	vldr	s14, [r0, #32]
 8019860:	edd1 7a08 	vldr	s15, [r1, #32]
 8019864:	2a09      	cmp	r2, #9
 8019866:	eee7 6a27 	vfma.f32	s13, s14, s15
 801986a:	d02d      	beq.n	80198c8 <forward_dense+0x588>
 801986c:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8019870:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8019874:	2a0a      	cmp	r2, #10
 8019876:	eee7 6a27 	vfma.f32	s13, s14, s15
 801987a:	d025      	beq.n	80198c8 <forward_dense+0x588>
 801987c:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8019880:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8019884:	2a0b      	cmp	r2, #11
 8019886:	eee7 6a27 	vfma.f32	s13, s14, s15
 801988a:	d01d      	beq.n	80198c8 <forward_dense+0x588>
 801988c:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8019890:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8019894:	2a0c      	cmp	r2, #12
 8019896:	eee7 6a27 	vfma.f32	s13, s14, s15
 801989a:	d015      	beq.n	80198c8 <forward_dense+0x588>
 801989c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 80198a0:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 80198a4:	2a0d      	cmp	r2, #13
 80198a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80198aa:	d00d      	beq.n	80198c8 <forward_dense+0x588>
 80198ac:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 80198b0:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 80198b4:	2a0e      	cmp	r2, #14
 80198b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80198ba:	d005      	beq.n	80198c8 <forward_dense+0x588>
 80198bc:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 80198c0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80198c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80198c8:	441c      	add	r4, r3
 80198ca:	ee7f 6a26 	vadd.f32	s13, s30, s13
 80198ce:	ece5 6a01 	vstmia	r5!, {s13}
 80198d2:	4545      	cmp	r5, r8
 80198d4:	f4ff af02 	bcc.w	80196dc <forward_dense+0x39c>
 80198d8:	9b08      	ldr	r3, [sp, #32]
 80198da:	e6b0      	b.n	801963e <forward_dense+0x2fe>
 80198dc:	9902      	ldr	r1, [sp, #8]
 80198de:	4588      	cmp	r8, r1
 80198e0:	f67f aeb5 	bls.w	801964e <forward_dense+0x30e>
 80198e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80198e6:	eb02 000b 	add.w	r0, r2, fp
 80198ea:	9a07      	ldr	r2, [sp, #28]
 80198ec:	9008      	str	r0, [sp, #32]
 80198ee:	3220      	adds	r2, #32
 80198f0:	3007      	adds	r0, #7
 80198f2:	445a      	add	r2, fp
 80198f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80198f6:	920a      	str	r2, [sp, #40]	; 0x28
 80198f8:	4689      	mov	r9, r1
 80198fa:	2e00      	cmp	r6, #0
 80198fc:	f000 80b9 	beq.w	8019a72 <forward_dense+0x732>
 8019900:	9a01      	ldr	r2, [sp, #4]
 8019902:	edd6 2a00 	vldr	s5, [r6]
 8019906:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 80196a8 <forward_dense+0x368>
 801990a:	3604      	adds	r6, #4
 801990c:	2a00      	cmp	r2, #0
 801990e:	f000 80b8 	beq.w	8019a82 <forward_dense+0x742>
 8019912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019914:	1917      	adds	r7, r2, r4
 8019916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019918:	1d21      	adds	r1, r4, #4
 801991a:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 801991e:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8019922:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8019926:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 801992a:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 801992e:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 8019932:	ed52 4a04 	vldr	s9, [r2, #-16]
 8019936:	ed12 5a03 	vldr	s10, [r2, #-12]
 801993a:	ed52 5a02 	vldr	s11, [r2, #-8]
 801993e:	ed12 6a01 	vldr	s12, [r2, #-4]
 8019942:	f005 0e0f 	and.w	lr, r5, #15
 8019946:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 801994a:	ed9e 7a00 	vldr	s14, [lr]
 801994e:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 8019952:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8019956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801995a:	ed9c 7a00 	vldr	s14, [ip]
 801995e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 8019962:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 8019966:	eee7 7a03 	vfma.f32	s15, s14, s6
 801996a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 801996e:	f000 0c0f 	and.w	ip, r0, #15
 8019972:	ed9e 7a00 	vldr	s14, [lr]
 8019976:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 801997a:	eee7 7a23 	vfma.f32	s15, s14, s7
 801997e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8019982:	3104      	adds	r1, #4
 8019984:	ed9c 7a00 	vldr	s14, [ip]
 8019988:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 801998c:	eee7 7a04 	vfma.f32	s15, s14, s8
 8019990:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8019994:	f005 050f 	and.w	r5, r5, #15
 8019998:	ed9c 7a00 	vldr	s14, [ip]
 801999c:	eee7 7a24 	vfma.f32	s15, s14, s9
 80199a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80199a4:	428f      	cmp	r7, r1
 80199a6:	ed95 7a00 	vldr	s14, [r5]
 80199aa:	ea4f 1510 	mov.w	r5, r0, lsr #4
 80199ae:	eee7 7a05 	vfma.f32	s15, s14, s10
 80199b2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80199b6:	f000 000f 	and.w	r0, r0, #15
 80199ba:	ed95 7a00 	vldr	s14, [r5]
 80199be:	eee7 7a25 	vfma.f32	s15, s14, s11
 80199c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80199c6:	f102 0220 	add.w	r2, r2, #32
 80199ca:	ed90 7a00 	vldr	s14, [r0]
 80199ce:	eee7 7a06 	vfma.f32	s15, s14, s12
 80199d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80199d6:	d1a0      	bne.n	801991a <forward_dense+0x5da>
 80199d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80199da:	46de      	mov	lr, fp
 80199dc:	eb04 0a02 	add.w	sl, r4, r2
 80199e0:	9a08      	ldr	r2, [sp, #32]
 80199e2:	4596      	cmp	lr, r2
 80199e4:	d22c      	bcs.n	8019a40 <forward_dense+0x700>
 80199e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199e8:	f10e 0108 	add.w	r1, lr, #8
 80199ec:	eba2 0c01 	sub.w	ip, r2, r1
 80199f0:	f02c 0207 	bic.w	r2, ip, #7
 80199f4:	f10e 0710 	add.w	r7, lr, #16
 80199f8:	4417      	add	r7, r2
 80199fa:	f10a 35ff 	add.w	r5, sl, #4294967295
 80199fe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8019a02:	ed51 7a01 	vldr	s15, [r1, #-4]
 8019a06:	ed11 6a02 	vldr	s12, [r1, #-8]
 8019a0a:	f002 000f 	and.w	r0, r2, #15
 8019a0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019a12:	ed90 7a00 	vldr	s14, [r0]
 8019a16:	0912      	lsrs	r2, r2, #4
 8019a18:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8019a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a20:	ed92 7a00 	vldr	s14, [r2]
 8019a24:	eee7 7a06 	vfma.f32	s15, s14, s12
 8019a28:	3108      	adds	r1, #8
 8019a2a:	428f      	cmp	r7, r1
 8019a2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8019a30:	d1e5      	bne.n	80199fe <forward_dense+0x6be>
 8019a32:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8019a36:	f10c 0c01 	add.w	ip, ip, #1
 8019a3a:	44e2      	add	sl, ip
 8019a3c:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 8019a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a42:	b312      	cbz	r2, 8019a8a <forward_dense+0x74a>
 8019a44:	f89a 2000 	ldrb.w	r2, [sl]
 8019a48:	edde 7a00 	vldr	s15, [lr]
 8019a4c:	0912      	lsrs	r2, r2, #4
 8019a4e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8019a52:	ed92 7a00 	vldr	s14, [r2]
 8019a56:	9a05      	ldr	r2, [sp, #20]
 8019a58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019a5c:	4414      	add	r4, r2
 8019a5e:	ee76 2aa2 	vadd.f32	s5, s13, s5
 8019a62:	ece9 2a01 	vstmia	r9!, {s5}
 8019a66:	45c8      	cmp	r8, r9
 8019a68:	f67f ade9 	bls.w	801963e <forward_dense+0x2fe>
 8019a6c:	2e00      	cmp	r6, #0
 8019a6e:	f47f af47 	bne.w	8019900 <forward_dense+0x5c0>
 8019a72:	9a01      	ldr	r2, [sp, #4]
 8019a74:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019af4 <forward_dense+0x7b4>
 8019a78:	eef0 2a6f 	vmov.f32	s5, s31
 8019a7c:	2a00      	cmp	r2, #0
 8019a7e:	f47f af48 	bne.w	8019912 <forward_dense+0x5d2>
 8019a82:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019a86:	46a2      	mov	sl, r4
 8019a88:	e7aa      	b.n	80199e0 <forward_dense+0x6a0>
 8019a8a:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8019a8e:	9a05      	ldr	r2, [sp, #20]
 8019a90:	ece9 6a01 	vstmia	r9!, {s13}
 8019a94:	45c1      	cmp	r9, r8
 8019a96:	4414      	add	r4, r2
 8019a98:	f4ff af2f 	bcc.w	80198fa <forward_dense+0x5ba>
 8019a9c:	e5cf      	b.n	801963e <forward_dense+0x2fe>
 8019a9e:	f1ba 0f0f 	cmp.w	sl, #15
 8019aa2:	eeb0 fa6f 	vmov.f32	s30, s31
 8019aa6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8019af4 <forward_dense+0x7b4>
 8019aaa:	f63f ae24 	bhi.w	80196f6 <forward_dense+0x3b6>
 8019aae:	4652      	mov	r2, sl
 8019ab0:	4620      	mov	r0, r4
 8019ab2:	9906      	ldr	r1, [sp, #24]
 8019ab4:	e690      	b.n	80197d8 <forward_dense+0x498>
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	685b      	ldr	r3, [r3, #4]
 8019aba:	deff      	udf	#255	; 0xff
 8019abc:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8019ac0:	2b04      	cmp	r3, #4
 8019ac2:	4691      	mov	r9, r2
 8019ac4:	f47f ac94 	bne.w	80193f0 <forward_dense+0xb0>
 8019ac8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8019acc:	f1b9 0f00 	cmp.w	r9, #0
 8019ad0:	f43f ac93 	beq.w	80193fa <forward_dense+0xba>
 8019ad4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8019ad8:	f000 fae4 	bl	801a0a4 <ai_array_get_byte_size>
 8019adc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019ae0:	4602      	mov	r2, r0
 8019ae2:	4651      	mov	r1, sl
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	f000 fb53 	bl	801a190 <memcpy>
 8019aea:	4682      	mov	sl, r0
 8019aec:	e485      	b.n	80193fa <forward_dense+0xba>
 8019aee:	2300      	movs	r3, #0
 8019af0:	930f      	str	r3, [sp, #60]	; 0x3c
 8019af2:	e456      	b.n	80193a2 <forward_dense+0x62>
 8019af4:	00000000 	.word	0x00000000

08019af8 <nl_func_sm_array_f32>:
 8019af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019afc:	ed2d 8b04 	vpush	{d8-d9}
 8019b00:	b089      	sub	sp, #36	; 0x24
 8019b02:	698f      	ldr	r7, [r1, #24]
 8019b04:	6984      	ldr	r4, [r0, #24]
 8019b06:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8019b0a:	68bd      	ldr	r5, [r7, #8]
 8019b0c:	9402      	str	r4, [sp, #8]
 8019b0e:	4626      	mov	r6, r4
 8019b10:	4696      	mov	lr, r2
 8019b12:	eba2 020c 	sub.w	r2, r2, ip
 8019b16:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8019b1a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019b1c:	68fa      	ldr	r2, [r7, #12]
 8019b1e:	68b6      	ldr	r6, [r6, #8]
 8019b20:	ebae 0e04 	sub.w	lr, lr, r4
 8019b24:	4295      	cmp	r5, r2
 8019b26:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8019b2a:	d354      	bcc.n	8019bd6 <nl_func_sm_array_f32+0xde>
 8019b2c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8019b30:	f1cc 0200 	rsb	r2, ip, #0
 8019b34:	00a4      	lsls	r4, r4, #2
 8019b36:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8019b3a:	9303      	str	r3, [sp, #12]
 8019b3c:	9204      	str	r2, [sp, #16]
 8019b3e:	009b      	lsls	r3, r3, #2
 8019b40:	4262      	negs	r2, r4
 8019b42:	9205      	str	r2, [sp, #20]
 8019b44:	9301      	str	r3, [sp, #4]
 8019b46:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8019b4a:	9b02      	ldr	r3, [sp, #8]
 8019b4c:	9a07      	ldr	r2, [sp, #28]
 8019b4e:	60bd      	str	r5, [r7, #8]
 8019b50:	609e      	str	r6, [r3, #8]
 8019b52:	9b06      	ldr	r3, [sp, #24]
 8019b54:	6992      	ldr	r2, [r2, #24]
 8019b56:	699b      	ldr	r3, [r3, #24]
 8019b58:	6894      	ldr	r4, [r2, #8]
 8019b5a:	9a03      	ldr	r2, [sp, #12]
 8019b5c:	689b      	ldr	r3, [r3, #8]
 8019b5e:	2a01      	cmp	r2, #1
 8019b60:	ed93 8a00 	vldr	s16, [r3]
 8019b64:	d940      	bls.n	8019be8 <nl_func_sm_array_f32+0xf0>
 8019b66:	9901      	ldr	r1, [sp, #4]
 8019b68:	1d1a      	adds	r2, r3, #4
 8019b6a:	eb03 0b01 	add.w	fp, r3, r1
 8019b6e:	ecf2 7a01 	vldmia	r2!, {s15}
 8019b72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b7a:	bfb8      	it	lt
 8019b7c:	eeb0 8a67 	vmovlt.f32	s16, s15
 8019b80:	4593      	cmp	fp, r2
 8019b82:	d1f4      	bne.n	8019b6e <nl_func_sm_array_f32+0x76>
 8019b84:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8019bf4 <nl_func_sm_array_f32+0xfc>
 8019b88:	469a      	mov	sl, r3
 8019b8a:	46a1      	mov	r9, r4
 8019b8c:	46a0      	mov	r8, r4
 8019b8e:	ecba 0a01 	vldmia	sl!, {s0}
 8019b92:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019b96:	f005 f821 	bl	801ebdc <expf>
 8019b9a:	45d3      	cmp	fp, sl
 8019b9c:	eca8 0a01 	vstmia	r8!, {s0}
 8019ba0:	ee78 8a80 	vadd.f32	s17, s17, s0
 8019ba4:	d1f3      	bne.n	8019b8e <nl_func_sm_array_f32+0x96>
 8019ba6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bae:	d00b      	beq.n	8019bc8 <nl_func_sm_array_f32+0xd0>
 8019bb0:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8019bb4:	9b01      	ldr	r3, [sp, #4]
 8019bb6:	441c      	add	r4, r3
 8019bb8:	edd9 7a00 	vldr	s15, [r9]
 8019bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019bc0:	ece9 7a01 	vstmia	r9!, {s15}
 8019bc4:	454c      	cmp	r4, r9
 8019bc6:	d1f7      	bne.n	8019bb8 <nl_func_sm_array_f32+0xc0>
 8019bc8:	9b04      	ldr	r3, [sp, #16]
 8019bca:	68fa      	ldr	r2, [r7, #12]
 8019bcc:	441d      	add	r5, r3
 8019bce:	9b05      	ldr	r3, [sp, #20]
 8019bd0:	42aa      	cmp	r2, r5
 8019bd2:	441e      	add	r6, r3
 8019bd4:	d9b9      	bls.n	8019b4a <nl_func_sm_array_f32+0x52>
 8019bd6:	60ba      	str	r2, [r7, #8]
 8019bd8:	9a02      	ldr	r2, [sp, #8]
 8019bda:	68d3      	ldr	r3, [r2, #12]
 8019bdc:	6093      	str	r3, [r2, #8]
 8019bde:	b009      	add	sp, #36	; 0x24
 8019be0:	ecbd 8b04 	vpop	{d8-d9}
 8019be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be8:	2a00      	cmp	r2, #0
 8019bea:	d0ed      	beq.n	8019bc8 <nl_func_sm_array_f32+0xd0>
 8019bec:	9a01      	ldr	r2, [sp, #4]
 8019bee:	eb03 0b02 	add.w	fp, r3, r2
 8019bf2:	e7c7      	b.n	8019b84 <nl_func_sm_array_f32+0x8c>
 8019bf4:	00000000 	.word	0x00000000

08019bf8 <nl_func_relu_generic_array_f32>:
 8019bf8:	b430      	push	{r4, r5}
 8019bfa:	6989      	ldr	r1, [r1, #24]
 8019bfc:	6980      	ldr	r0, [r0, #24]
 8019bfe:	edd3 6a02 	vldr	s13, [r3, #8]
 8019c02:	688c      	ldr	r4, [r1, #8]
 8019c04:	6880      	ldr	r0, [r0, #8]
 8019c06:	ed93 7a00 	vldr	s14, [r3]
 8019c0a:	ed93 6a01 	vldr	s12, [r3, #4]
 8019c0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019c12:	3a01      	subs	r2, #1
 8019c14:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8019c18:	0092      	lsls	r2, r2, #2
 8019c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c1e:	4410      	add	r0, r2
 8019c20:	4422      	add	r2, r4
 8019c22:	d421      	bmi.n	8019c68 <nl_func_relu_generic_array_f32+0x70>
 8019c24:	4294      	cmp	r4, r2
 8019c26:	d83d      	bhi.n	8019ca4 <nl_func_relu_generic_array_f32+0xac>
 8019c28:	1d13      	adds	r3, r2, #4
 8019c2a:	1d02      	adds	r2, r0, #4
 8019c2c:	e010      	b.n	8019c50 <nl_func_relu_generic_array_f32+0x58>
 8019c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c36:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8019c3a:	d501      	bpl.n	8019c40 <nl_func_relu_generic_array_f32+0x48>
 8019c3c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8019c40:	ed62 7a01 	vstmdb	r2!, {s15}
 8019c44:	6888      	ldr	r0, [r1, #8]
 8019c46:	f1a3 0408 	sub.w	r4, r3, #8
 8019c4a:	4284      	cmp	r4, r0
 8019c4c:	462b      	mov	r3, r5
 8019c4e:	d329      	bcc.n	8019ca4 <nl_func_relu_generic_array_f32+0xac>
 8019c50:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019c54:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c5c:	f1a3 0504 	sub.w	r5, r3, #4
 8019c60:	d4e5      	bmi.n	8019c2e <nl_func_relu_generic_array_f32+0x36>
 8019c62:	eef0 7a66 	vmov.f32	s15, s13
 8019c66:	e7eb      	b.n	8019c40 <nl_func_relu_generic_array_f32+0x48>
 8019c68:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8019c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c70:	d01a      	beq.n	8019ca8 <nl_func_relu_generic_array_f32+0xb0>
 8019c72:	4294      	cmp	r4, r2
 8019c74:	d816      	bhi.n	8019ca4 <nl_func_relu_generic_array_f32+0xac>
 8019c76:	1d13      	adds	r3, r2, #4
 8019c78:	1d02      	adds	r2, r0, #4
 8019c7a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019c7e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019c86:	f1a3 0408 	sub.w	r4, r3, #8
 8019c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c8e:	f1a3 0004 	sub.w	r0, r3, #4
 8019c92:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019c96:	4623      	mov	r3, r4
 8019c98:	d51e      	bpl.n	8019cd8 <nl_func_relu_generic_array_f32+0xe0>
 8019c9a:	ed62 6a01 	vstmdb	r2!, {s13}
 8019c9e:	688b      	ldr	r3, [r1, #8]
 8019ca0:	42a3      	cmp	r3, r4
 8019ca2:	d91e      	bls.n	8019ce2 <nl_func_relu_generic_array_f32+0xea>
 8019ca4:	bc30      	pop	{r4, r5}
 8019ca6:	4770      	bx	lr
 8019ca8:	4294      	cmp	r4, r2
 8019caa:	d8fb      	bhi.n	8019ca4 <nl_func_relu_generic_array_f32+0xac>
 8019cac:	1d13      	adds	r3, r2, #4
 8019cae:	2500      	movs	r5, #0
 8019cb0:	1d02      	adds	r2, r0, #4
 8019cb2:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019cba:	f1a3 0408 	sub.w	r4, r3, #8
 8019cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cc2:	f1a3 0004 	sub.w	r0, r3, #4
 8019cc6:	4623      	mov	r3, r4
 8019cc8:	db0d      	blt.n	8019ce6 <nl_func_relu_generic_array_f32+0xee>
 8019cca:	ed62 7a01 	vstmdb	r2!, {s15}
 8019cce:	688b      	ldr	r3, [r1, #8]
 8019cd0:	42a3      	cmp	r3, r4
 8019cd2:	d8e7      	bhi.n	8019ca4 <nl_func_relu_generic_array_f32+0xac>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	e7ec      	b.n	8019cb2 <nl_func_relu_generic_array_f32+0xba>
 8019cd8:	ed62 7a01 	vstmdb	r2!, {s15}
 8019cdc:	688c      	ldr	r4, [r1, #8]
 8019cde:	429c      	cmp	r4, r3
 8019ce0:	d8e0      	bhi.n	8019ca4 <nl_func_relu_generic_array_f32+0xac>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	e7c9      	b.n	8019c7a <nl_func_relu_generic_array_f32+0x82>
 8019ce6:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019cea:	688c      	ldr	r4, [r1, #8]
 8019cec:	429c      	cmp	r4, r3
 8019cee:	d8d9      	bhi.n	8019ca4 <nl_func_relu_generic_array_f32+0xac>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	e7de      	b.n	8019cb2 <nl_func_relu_generic_array_f32+0xba>

08019cf4 <forward_relu>:
 8019cf4:	6982      	ldr	r2, [r0, #24]
 8019cf6:	8813      	ldrh	r3, [r2, #0]
 8019cf8:	b333      	cbz	r3, 8019d48 <forward_relu+0x54>
 8019cfa:	6852      	ldr	r2, [r2, #4]
 8019cfc:	6851      	ldr	r1, [r2, #4]
 8019cfe:	b101      	cbz	r1, 8019d02 <forward_relu+0xe>
 8019d00:	6809      	ldr	r1, [r1, #0]
 8019d02:	2b01      	cmp	r3, #1
 8019d04:	d91d      	bls.n	8019d42 <forward_relu+0x4e>
 8019d06:	b4f0      	push	{r4, r5, r6, r7}
 8019d08:	6917      	ldr	r7, [r2, #16]
 8019d0a:	b107      	cbz	r7, 8019d0e <forward_relu+0x1a>
 8019d0c:	683f      	ldr	r7, [r7, #0]
 8019d0e:	688c      	ldr	r4, [r1, #8]
 8019d10:	69c3      	ldr	r3, [r0, #28]
 8019d12:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d044      	beq.n	8019da4 <forward_relu+0xb0>
 8019d1a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8019d1e:	2d01      	cmp	r5, #1
 8019d20:	d014      	beq.n	8019d4c <forward_relu+0x58>
 8019d22:	2c00      	cmp	r4, #0
 8019d24:	d074      	beq.n	8019e10 <forward_relu+0x11c>
 8019d26:	68ce      	ldr	r6, [r1, #12]
 8019d28:	2201      	movs	r2, #1
 8019d2a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8019d2e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019d32:	42a6      	cmp	r6, r4
 8019d34:	fb05 f202 	mul.w	r2, r5, r2
 8019d38:	d1f9      	bne.n	8019d2e <forward_relu+0x3a>
 8019d3a:	4638      	mov	r0, r7
 8019d3c:	bcf0      	pop	{r4, r5, r6, r7}
 8019d3e:	f7ff bf5b 	b.w	8019bf8 <nl_func_relu_generic_array_f32>
 8019d42:	2300      	movs	r3, #0
 8019d44:	685b      	ldr	r3, [r3, #4]
 8019d46:	deff      	udf	#255	; 0xff
 8019d48:	685b      	ldr	r3, [r3, #4]
 8019d4a:	deff      	udf	#255	; 0xff
 8019d4c:	69ba      	ldr	r2, [r7, #24]
 8019d4e:	6988      	ldr	r0, [r1, #24]
 8019d50:	6896      	ldr	r6, [r2, #8]
 8019d52:	ed93 7a00 	vldr	s14, [r3]
 8019d56:	6882      	ldr	r2, [r0, #8]
 8019d58:	b184      	cbz	r4, 8019d7c <forward_relu+0x88>
 8019d5a:	68cf      	ldr	r7, [r1, #12]
 8019d5c:	462b      	mov	r3, r5
 8019d5e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019d62:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8019d66:	42a7      	cmp	r7, r4
 8019d68:	fb01 f303 	mul.w	r3, r1, r3
 8019d6c:	d1f9      	bne.n	8019d62 <forward_relu+0x6e>
 8019d6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019d72:	3b01      	subs	r3, #1
 8019d74:	009b      	lsls	r3, r3, #2
 8019d76:	18d2      	adds	r2, r2, r3
 8019d78:	441e      	add	r6, r3
 8019d7a:	d23f      	bcs.n	8019dfc <forward_relu+0x108>
 8019d7c:	1d13      	adds	r3, r2, #4
 8019d7e:	2500      	movs	r5, #0
 8019d80:	1d32      	adds	r2, r6, #4
 8019d82:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d8e:	f1a3 0104 	sub.w	r1, r3, #4
 8019d92:	d835      	bhi.n	8019e00 <forward_relu+0x10c>
 8019d94:	ed62 7a01 	vstmdb	r2!, {s15}
 8019d98:	6884      	ldr	r4, [r0, #8]
 8019d9a:	3b08      	subs	r3, #8
 8019d9c:	429c      	cmp	r4, r3
 8019d9e:	d82d      	bhi.n	8019dfc <forward_relu+0x108>
 8019da0:	460b      	mov	r3, r1
 8019da2:	e7ee      	b.n	8019d82 <forward_relu+0x8e>
 8019da4:	69bb      	ldr	r3, [r7, #24]
 8019da6:	698d      	ldr	r5, [r1, #24]
 8019da8:	6898      	ldr	r0, [r3, #8]
 8019daa:	68ab      	ldr	r3, [r5, #8]
 8019dac:	b184      	cbz	r4, 8019dd0 <forward_relu+0xdc>
 8019dae:	68ce      	ldr	r6, [r1, #12]
 8019db0:	2201      	movs	r2, #1
 8019db2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8019db6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8019dba:	42a6      	cmp	r6, r4
 8019dbc:	fb01 f202 	mul.w	r2, r1, r2
 8019dc0:	d1f9      	bne.n	8019db6 <forward_relu+0xc2>
 8019dc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019dc6:	3a01      	subs	r2, #1
 8019dc8:	0092      	lsls	r2, r2, #2
 8019dca:	189b      	adds	r3, r3, r2
 8019dcc:	4410      	add	r0, r2
 8019dce:	d215      	bcs.n	8019dfc <forward_relu+0x108>
 8019dd0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8019e14 <forward_relu+0x120>
 8019dd4:	3304      	adds	r3, #4
 8019dd6:	1d01      	adds	r1, r0, #4
 8019dd8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8019ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019de4:	bfb8      	it	lt
 8019de6:	eef0 7a47 	vmovlt.f32	s15, s14
 8019dea:	ed61 7a01 	vstmdb	r1!, {s15}
 8019dee:	68a8      	ldr	r0, [r5, #8]
 8019df0:	f1a3 0208 	sub.w	r2, r3, #8
 8019df4:	4290      	cmp	r0, r2
 8019df6:	f1a3 0304 	sub.w	r3, r3, #4
 8019dfa:	d9ed      	bls.n	8019dd8 <forward_relu+0xe4>
 8019dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8019dfe:	4770      	bx	lr
 8019e00:	f842 5d04 	str.w	r5, [r2, #-4]!
 8019e04:	6884      	ldr	r4, [r0, #8]
 8019e06:	3b08      	subs	r3, #8
 8019e08:	429c      	cmp	r4, r3
 8019e0a:	d8f7      	bhi.n	8019dfc <forward_relu+0x108>
 8019e0c:	460b      	mov	r3, r1
 8019e0e:	e7b8      	b.n	8019d82 <forward_relu+0x8e>
 8019e10:	2201      	movs	r2, #1
 8019e12:	e792      	b.n	8019d3a <forward_relu+0x46>
 8019e14:	00000000 	.word	0x00000000

08019e18 <forward_sm>:
 8019e18:	6982      	ldr	r2, [r0, #24]
 8019e1a:	8813      	ldrh	r3, [r2, #0]
 8019e1c:	b32b      	cbz	r3, 8019e6a <forward_sm+0x52>
 8019e1e:	6852      	ldr	r2, [r2, #4]
 8019e20:	6851      	ldr	r1, [r2, #4]
 8019e22:	b101      	cbz	r1, 8019e26 <forward_sm+0xe>
 8019e24:	6809      	ldr	r1, [r1, #0]
 8019e26:	2b01      	cmp	r3, #1
 8019e28:	d91c      	bls.n	8019e64 <forward_sm+0x4c>
 8019e2a:	6913      	ldr	r3, [r2, #16]
 8019e2c:	b1c3      	cbz	r3, 8019e60 <forward_sm+0x48>
 8019e2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e30:	6818      	ldr	r0, [r3, #0]
 8019e32:	688c      	ldr	r4, [r1, #8]
 8019e34:	68c3      	ldr	r3, [r0, #12]
 8019e36:	68ce      	ldr	r6, [r1, #12]
 8019e38:	685f      	ldr	r7, [r3, #4]
 8019e3a:	6873      	ldr	r3, [r6, #4]
 8019e3c:	0a24      	lsrs	r4, r4, #8
 8019e3e:	b083      	sub	sp, #12
 8019e40:	d015      	beq.n	8019e6e <forward_sm+0x56>
 8019e42:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8019e46:	2201      	movs	r2, #1
 8019e48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019e4c:	42a6      	cmp	r6, r4
 8019e4e:	fb05 f202 	mul.w	r2, r5, r2
 8019e52:	d1f9      	bne.n	8019e48 <forward_sm+0x30>
 8019e54:	e9cd 3700 	strd	r3, r7, [sp]
 8019e58:	f7ff fe4e 	bl	8019af8 <nl_func_sm_array_f32>
 8019e5c:	b003      	add	sp, #12
 8019e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e60:	68db      	ldr	r3, [r3, #12]
 8019e62:	deff      	udf	#255	; 0xff
 8019e64:	2300      	movs	r3, #0
 8019e66:	685b      	ldr	r3, [r3, #4]
 8019e68:	deff      	udf	#255	; 0xff
 8019e6a:	685b      	ldr	r3, [r3, #4]
 8019e6c:	deff      	udf	#255	; 0xff
 8019e6e:	2201      	movs	r2, #1
 8019e70:	e9cd 3700 	strd	r3, r7, [sp]
 8019e74:	f7ff fe40 	bl	8019af8 <nl_func_sm_array_f32>
 8019e78:	b003      	add	sp, #12
 8019e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019e7c <ai_check_custom_types>:
 8019e7c:	4b13      	ldr	r3, [pc, #76]	; (8019ecc <ai_check_custom_types+0x50>)
 8019e7e:	b082      	sub	sp, #8
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	9301      	str	r3, [sp, #4]
 8019e84:	b118      	cbz	r0, 8019e8e <ai_check_custom_types+0x12>
 8019e86:	7803      	ldrb	r3, [r0, #0]
 8019e88:	2b03      	cmp	r3, #3
 8019e8a:	d002      	beq.n	8019e92 <ai_check_custom_types+0x16>
 8019e8c:	2000      	movs	r0, #0
 8019e8e:	b002      	add	sp, #8
 8019e90:	4770      	bx	lr
 8019e92:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8019e96:	4293      	cmp	r3, r2
 8019e98:	d004      	beq.n	8019ea4 <ai_check_custom_types+0x28>
 8019e9a:	2001      	movs	r0, #1
 8019e9c:	f080 0001 	eor.w	r0, r0, #1
 8019ea0:	b002      	add	sp, #8
 8019ea2:	4770      	bx	lr
 8019ea4:	7842      	ldrb	r2, [r0, #1]
 8019ea6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	f100 0001 	add.w	r0, r0, #1
 8019eb0:	d1f3      	bne.n	8019e9a <ai_check_custom_types+0x1e>
 8019eb2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8019eb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8019eba:	429a      	cmp	r2, r3
 8019ebc:	d1ed      	bne.n	8019e9a <ai_check_custom_types+0x1e>
 8019ebe:	7842      	ldrb	r2, [r0, #1]
 8019ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8019ec4:	429a      	cmp	r2, r3
 8019ec6:	d1e8      	bne.n	8019e9a <ai_check_custom_types+0x1e>
 8019ec8:	2000      	movs	r0, #0
 8019eca:	e7e7      	b.n	8019e9c <ai_check_custom_types+0x20>
 8019ecc:	0801f3d8 	.word	0x0801f3d8

08019ed0 <ai_layers_init_all>:
 8019ed0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8019ed2:	b17a      	cbz	r2, 8019ef4 <ai_layers_init_all+0x24>
 8019ed4:	6913      	ldr	r3, [r2, #16]
 8019ed6:	60d0      	str	r0, [r2, #12]
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	f04f 0201 	mov.w	r2, #1
 8019ede:	d009      	beq.n	8019ef4 <ai_layers_init_all+0x24>
 8019ee0:	b143      	cbz	r3, 8019ef4 <ai_layers_init_all+0x24>
 8019ee2:	6919      	ldr	r1, [r3, #16]
 8019ee4:	60d8      	str	r0, [r3, #12]
 8019ee6:	4299      	cmp	r1, r3
 8019ee8:	f102 0201 	add.w	r2, r2, #1
 8019eec:	d002      	beq.n	8019ef4 <ai_layers_init_all+0x24>
 8019eee:	460b      	mov	r3, r1
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d1f6      	bne.n	8019ee2 <ai_layers_init_all+0x12>
 8019ef4:	4610      	mov	r0, r2
 8019ef6:	4770      	bx	lr

08019ef8 <ai_layers_post_init_all>:
 8019ef8:	b538      	push	{r3, r4, r5, lr}
 8019efa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8019efc:	b18c      	cbz	r4, 8019f22 <ai_layers_post_init_all+0x2a>
 8019efe:	2500      	movs	r5, #0
 8019f00:	6863      	ldr	r3, [r4, #4]
 8019f02:	f013 0f01 	tst.w	r3, #1
 8019f06:	4620      	mov	r0, r4
 8019f08:	d003      	beq.n	8019f12 <ai_layers_post_init_all+0x1a>
 8019f0a:	6a23      	ldr	r3, [r4, #32]
 8019f0c:	b10b      	cbz	r3, 8019f12 <ai_layers_post_init_all+0x1a>
 8019f0e:	4798      	blx	r3
 8019f10:	3501      	adds	r5, #1
 8019f12:	6923      	ldr	r3, [r4, #16]
 8019f14:	42a3      	cmp	r3, r4
 8019f16:	d002      	beq.n	8019f1e <ai_layers_post_init_all+0x26>
 8019f18:	461c      	mov	r4, r3
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d1f0      	bne.n	8019f00 <ai_layers_post_init_all+0x8>
 8019f1e:	4628      	mov	r0, r5
 8019f20:	bd38      	pop	{r3, r4, r5, pc}
 8019f22:	4625      	mov	r5, r4
 8019f24:	e7fb      	b.n	8019f1e <ai_layers_post_init_all+0x26>
 8019f26:	bf00      	nop

08019f28 <ai_layers_forward_all>:
 8019f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f2c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8019f2e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8019f30:	4604      	mov	r4, r0
 8019f32:	2f00      	cmp	r7, #0
 8019f34:	d02c      	beq.n	8019f90 <ai_layers_forward_all+0x68>
 8019f36:	2d00      	cmp	r5, #0
 8019f38:	d03f      	beq.n	8019fba <ai_layers_forward_all+0x92>
 8019f3a:	6385      	str	r5, [r0, #56]	; 0x38
 8019f3c:	4629      	mov	r1, r5
 8019f3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8019f40:	2001      	movs	r0, #1
 8019f42:	47b8      	blx	r7
 8019f44:	2600      	movs	r6, #0
 8019f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019f48:	46b0      	mov	r8, r6
 8019f4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019f4c:	2002      	movs	r0, #2
 8019f4e:	47b8      	blx	r7
 8019f50:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8019f52:	696b      	ldr	r3, [r5, #20]
 8019f54:	4628      	mov	r0, r5
 8019f56:	4798      	blx	r3
 8019f58:	692b      	ldr	r3, [r5, #16]
 8019f5a:	429d      	cmp	r5, r3
 8019f5c:	f04f 0003 	mov.w	r0, #3
 8019f60:	4619      	mov	r1, r3
 8019f62:	d009      	beq.n	8019f78 <ai_layers_forward_all+0x50>
 8019f64:	63a3      	str	r3, [r4, #56]	; 0x38
 8019f66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019f68:	47b8      	blx	r7
 8019f6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019f6c:	3601      	adds	r6, #1
 8019f6e:	2900      	cmp	r1, #0
 8019f70:	d1eb      	bne.n	8019f4a <ai_layers_forward_all+0x22>
 8019f72:	4630      	mov	r0, r6
 8019f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f78:	2100      	movs	r1, #0
 8019f7a:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8019f7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8019f80:	47b8      	blx	r7
 8019f82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019f84:	3601      	adds	r6, #1
 8019f86:	2900      	cmp	r1, #0
 8019f88:	d1df      	bne.n	8019f4a <ai_layers_forward_all+0x22>
 8019f8a:	4630      	mov	r0, r6
 8019f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f90:	b19d      	cbz	r5, 8019fba <ai_layers_forward_all+0x92>
 8019f92:	6385      	str	r5, [r0, #56]	; 0x38
 8019f94:	463e      	mov	r6, r7
 8019f96:	696b      	ldr	r3, [r5, #20]
 8019f98:	4628      	mov	r0, r5
 8019f9a:	4798      	blx	r3
 8019f9c:	692b      	ldr	r3, [r5, #16]
 8019f9e:	42ab      	cmp	r3, r5
 8019fa0:	f106 0601 	add.w	r6, r6, #1
 8019fa4:	d004      	beq.n	8019fb0 <ai_layers_forward_all+0x88>
 8019fa6:	63a3      	str	r3, [r4, #56]	; 0x38
 8019fa8:	461d      	mov	r5, r3
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d1f3      	bne.n	8019f96 <ai_layers_forward_all+0x6e>
 8019fae:	e7e0      	b.n	8019f72 <ai_layers_forward_all+0x4a>
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	63a3      	str	r3, [r4, #56]	; 0x38
 8019fb4:	4630      	mov	r0, r6
 8019fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fba:	462e      	mov	r6, r5
 8019fbc:	4630      	mov	r0, r6
 8019fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fc2:	bf00      	nop

08019fc4 <ai_version_get>:
 8019fc4:	0212      	lsls	r2, r2, #8
 8019fc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8019fca:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8019fce:	4770      	bx	lr

08019fd0 <get_tensor_byte_size>:
 8019fd0:	6983      	ldr	r3, [r0, #24]
 8019fd2:	68c1      	ldr	r1, [r0, #12]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	6940      	ldr	r0, [r0, #20]
 8019fd8:	4a06      	ldr	r2, [pc, #24]	; (8019ff4 <get_tensor_byte_size+0x24>)
 8019fda:	68c9      	ldr	r1, [r1, #12]
 8019fdc:	68c0      	ldr	r0, [r0, #12]
 8019fde:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8019fe2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019fe6:	fb00 f001 	mul.w	r0, r0, r1
 8019fea:	4293      	cmp	r3, r2
 8019fec:	bf04      	itt	eq
 8019fee:	3007      	addeq	r0, #7
 8019ff0:	08c0      	lsreq	r0, r0, #3
 8019ff2:	4770      	bx	lr
 8019ff4:	000400c0 	.word	0x000400c0

08019ff8 <ai_array_to_buffer_fmt>:
 8019ff8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8019ffc:	2b02      	cmp	r3, #2
 8019ffe:	d036      	beq.n	801a06e <ai_array_to_buffer_fmt+0x76>
 801a000:	4a21      	ldr	r2, [pc, #132]	; (801a088 <ai_array_to_buffer_fmt+0x90>)
 801a002:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801a006:	4293      	cmp	r3, r2
 801a008:	d00f      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a00a:	dd12      	ble.n	801a032 <ai_array_to_buffer_fmt+0x3a>
 801a00c:	4a1f      	ldr	r2, [pc, #124]	; (801a08c <ai_array_to_buffer_fmt+0x94>)
 801a00e:	4293      	cmp	r3, r2
 801a010:	d00b      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a012:	dd1e      	ble.n	801a052 <ai_array_to_buffer_fmt+0x5a>
 801a014:	4a1e      	ldr	r2, [pc, #120]	; (801a090 <ai_array_to_buffer_fmt+0x98>)
 801a016:	4293      	cmp	r3, r2
 801a018:	d007      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a01a:	dd30      	ble.n	801a07e <ai_array_to_buffer_fmt+0x86>
 801a01c:	4a1d      	ldr	r2, [pc, #116]	; (801a094 <ai_array_to_buffer_fmt+0x9c>)
 801a01e:	4293      	cmp	r3, r2
 801a020:	d003      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a022:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 801a026:	4293      	cmp	r3, r2
 801a028:	d11f      	bne.n	801a06a <ai_array_to_buffer_fmt+0x72>
 801a02a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801a02e:	4318      	orrs	r0, r3
 801a030:	4770      	bx	lr
 801a032:	4a19      	ldr	r2, [pc, #100]	; (801a098 <ai_array_to_buffer_fmt+0xa0>)
 801a034:	4293      	cmp	r3, r2
 801a036:	d0f8      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a038:	dd0b      	ble.n	801a052 <ai_array_to_buffer_fmt+0x5a>
 801a03a:	4a18      	ldr	r2, [pc, #96]	; (801a09c <ai_array_to_buffer_fmt+0xa4>)
 801a03c:	4293      	cmp	r3, r2
 801a03e:	d0f4      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a040:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 801a044:	4293      	cmp	r3, r2
 801a046:	d0f0      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a048:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 801a04c:	4293      	cmp	r3, r2
 801a04e:	d10c      	bne.n	801a06a <ai_array_to_buffer_fmt+0x72>
 801a050:	e7eb      	b.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a052:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 801a056:	4293      	cmp	r3, r2
 801a058:	d0e7      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a05a:	f502 7260 	add.w	r2, r2, #896	; 0x380
 801a05e:	4293      	cmp	r3, r2
 801a060:	d0e3      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a062:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 801a066:	4293      	cmp	r3, r2
 801a068:	d0df      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a06a:	2340      	movs	r3, #64	; 0x40
 801a06c:	e7dd      	b.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a06e:	4b0c      	ldr	r3, [pc, #48]	; (801a0a0 <ai_array_to_buffer_fmt+0xa8>)
 801a070:	4003      	ands	r3, r0
 801a072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a076:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801a07a:	4318      	orrs	r0, r3
 801a07c:	4770      	bx	lr
 801a07e:	3a0f      	subs	r2, #15
 801a080:	4293      	cmp	r3, r2
 801a082:	d0d2      	beq.n	801a02a <ai_array_to_buffer_fmt+0x32>
 801a084:	e7f1      	b.n	801a06a <ai_array_to_buffer_fmt+0x72>
 801a086:	bf00      	nop
 801a088:	00060440 	.word	0x00060440
 801a08c:	00840447 	.word	0x00840447
 801a090:	0084084f 	.word	0x0084084f
 801a094:	00841040 	.word	0x00841040
 801a098:	00040447 	.word	0x00040447
 801a09c:	0004084f 	.word	0x0004084f
 801a0a0:	00803fff 	.word	0x00803fff

0801a0a4 <ai_array_get_byte_size>:
 801a0a4:	b1c1      	cbz	r1, 801a0d8 <ai_array_get_byte_size+0x34>
 801a0a6:	11c3      	asrs	r3, r0, #7
 801a0a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a0ac:	fb01 f102 	mul.w	r1, r1, r2
 801a0b0:	3107      	adds	r1, #7
 801a0b2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801a0b6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801a0ba:	f021 0107 	bic.w	r1, r1, #7
 801a0be:	2804      	cmp	r0, #4
 801a0c0:	fa21 f102 	lsr.w	r1, r1, r2
 801a0c4:	d00a      	beq.n	801a0dc <ai_array_get_byte_size+0x38>
 801a0c6:	2808      	cmp	r0, #8
 801a0c8:	d103      	bne.n	801a0d2 <ai_array_get_byte_size+0x2e>
 801a0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a0ce:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801a0d2:	3107      	adds	r1, #7
 801a0d4:	08c8      	lsrs	r0, r1, #3
 801a0d6:	4770      	bx	lr
 801a0d8:	4608      	mov	r0, r1
 801a0da:	4770      	bx	lr
 801a0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a0e0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801a0e4:	3107      	adds	r1, #7
 801a0e6:	08c8      	lsrs	r0, r1, #3
 801a0e8:	4770      	bx	lr
 801a0ea:	bf00      	nop

0801a0ec <ai_array_get_data_byte_size>:
 801a0ec:	b161      	cbz	r1, 801a108 <ai_array_get_data_byte_size+0x1c>
 801a0ee:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801a0f2:	fb01 f103 	mul.w	r1, r1, r3
 801a0f6:	3107      	adds	r1, #7
 801a0f8:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801a0fc:	f021 0107 	bic.w	r1, r1, #7
 801a100:	40c1      	lsrs	r1, r0
 801a102:	3107      	adds	r1, #7
 801a104:	08c8      	lsrs	r0, r1, #3
 801a106:	4770      	bx	lr
 801a108:	4608      	mov	r0, r1
 801a10a:	4770      	bx	lr

0801a10c <calloc>:
 801a10c:	4b02      	ldr	r3, [pc, #8]	; (801a118 <calloc+0xc>)
 801a10e:	460a      	mov	r2, r1
 801a110:	4601      	mov	r1, r0
 801a112:	6818      	ldr	r0, [r3, #0]
 801a114:	f000 b852 	b.w	801a1bc <_calloc_r>
 801a118:	20000928 	.word	0x20000928

0801a11c <__errno>:
 801a11c:	4b01      	ldr	r3, [pc, #4]	; (801a124 <__errno+0x8>)
 801a11e:	6818      	ldr	r0, [r3, #0]
 801a120:	4770      	bx	lr
 801a122:	bf00      	nop
 801a124:	20000928 	.word	0x20000928

0801a128 <__libc_init_array>:
 801a128:	b570      	push	{r4, r5, r6, lr}
 801a12a:	4d0d      	ldr	r5, [pc, #52]	; (801a160 <__libc_init_array+0x38>)
 801a12c:	4c0d      	ldr	r4, [pc, #52]	; (801a164 <__libc_init_array+0x3c>)
 801a12e:	1b64      	subs	r4, r4, r5
 801a130:	10a4      	asrs	r4, r4, #2
 801a132:	2600      	movs	r6, #0
 801a134:	42a6      	cmp	r6, r4
 801a136:	d109      	bne.n	801a14c <__libc_init_array+0x24>
 801a138:	4d0b      	ldr	r5, [pc, #44]	; (801a168 <__libc_init_array+0x40>)
 801a13a:	4c0c      	ldr	r4, [pc, #48]	; (801a16c <__libc_init_array+0x44>)
 801a13c:	f005 f8ea 	bl	801f314 <_init>
 801a140:	1b64      	subs	r4, r4, r5
 801a142:	10a4      	asrs	r4, r4, #2
 801a144:	2600      	movs	r6, #0
 801a146:	42a6      	cmp	r6, r4
 801a148:	d105      	bne.n	801a156 <__libc_init_array+0x2e>
 801a14a:	bd70      	pop	{r4, r5, r6, pc}
 801a14c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a150:	4798      	blx	r3
 801a152:	3601      	adds	r6, #1
 801a154:	e7ee      	b.n	801a134 <__libc_init_array+0xc>
 801a156:	f855 3b04 	ldr.w	r3, [r5], #4
 801a15a:	4798      	blx	r3
 801a15c:	3601      	adds	r6, #1
 801a15e:	e7f2      	b.n	801a146 <__libc_init_array+0x1e>
 801a160:	0807463c 	.word	0x0807463c
 801a164:	0807463c 	.word	0x0807463c
 801a168:	0807463c 	.word	0x0807463c
 801a16c:	08074640 	.word	0x08074640

0801a170 <malloc>:
 801a170:	4b02      	ldr	r3, [pc, #8]	; (801a17c <malloc+0xc>)
 801a172:	4601      	mov	r1, r0
 801a174:	6818      	ldr	r0, [r3, #0]
 801a176:	f000 b8a3 	b.w	801a2c0 <_malloc_r>
 801a17a:	bf00      	nop
 801a17c:	20000928 	.word	0x20000928

0801a180 <free>:
 801a180:	4b02      	ldr	r3, [pc, #8]	; (801a18c <free+0xc>)
 801a182:	4601      	mov	r1, r0
 801a184:	6818      	ldr	r0, [r3, #0]
 801a186:	f000 b82f 	b.w	801a1e8 <_free_r>
 801a18a:	bf00      	nop
 801a18c:	20000928 	.word	0x20000928

0801a190 <memcpy>:
 801a190:	440a      	add	r2, r1
 801a192:	4291      	cmp	r1, r2
 801a194:	f100 33ff 	add.w	r3, r0, #4294967295
 801a198:	d100      	bne.n	801a19c <memcpy+0xc>
 801a19a:	4770      	bx	lr
 801a19c:	b510      	push	{r4, lr}
 801a19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a1a6:	4291      	cmp	r1, r2
 801a1a8:	d1f9      	bne.n	801a19e <memcpy+0xe>
 801a1aa:	bd10      	pop	{r4, pc}

0801a1ac <memset>:
 801a1ac:	4402      	add	r2, r0
 801a1ae:	4603      	mov	r3, r0
 801a1b0:	4293      	cmp	r3, r2
 801a1b2:	d100      	bne.n	801a1b6 <memset+0xa>
 801a1b4:	4770      	bx	lr
 801a1b6:	f803 1b01 	strb.w	r1, [r3], #1
 801a1ba:	e7f9      	b.n	801a1b0 <memset+0x4>

0801a1bc <_calloc_r>:
 801a1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1be:	fba1 2402 	umull	r2, r4, r1, r2
 801a1c2:	b94c      	cbnz	r4, 801a1d8 <_calloc_r+0x1c>
 801a1c4:	4611      	mov	r1, r2
 801a1c6:	9201      	str	r2, [sp, #4]
 801a1c8:	f000 f87a 	bl	801a2c0 <_malloc_r>
 801a1cc:	9a01      	ldr	r2, [sp, #4]
 801a1ce:	4605      	mov	r5, r0
 801a1d0:	b930      	cbnz	r0, 801a1e0 <_calloc_r+0x24>
 801a1d2:	4628      	mov	r0, r5
 801a1d4:	b003      	add	sp, #12
 801a1d6:	bd30      	pop	{r4, r5, pc}
 801a1d8:	220c      	movs	r2, #12
 801a1da:	6002      	str	r2, [r0, #0]
 801a1dc:	2500      	movs	r5, #0
 801a1de:	e7f8      	b.n	801a1d2 <_calloc_r+0x16>
 801a1e0:	4621      	mov	r1, r4
 801a1e2:	f7ff ffe3 	bl	801a1ac <memset>
 801a1e6:	e7f4      	b.n	801a1d2 <_calloc_r+0x16>

0801a1e8 <_free_r>:
 801a1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1ea:	2900      	cmp	r1, #0
 801a1ec:	d044      	beq.n	801a278 <_free_r+0x90>
 801a1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1f2:	9001      	str	r0, [sp, #4]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	f1a1 0404 	sub.w	r4, r1, #4
 801a1fa:	bfb8      	it	lt
 801a1fc:	18e4      	addlt	r4, r4, r3
 801a1fe:	f003 f863 	bl	801d2c8 <__malloc_lock>
 801a202:	4a1e      	ldr	r2, [pc, #120]	; (801a27c <_free_r+0x94>)
 801a204:	9801      	ldr	r0, [sp, #4]
 801a206:	6813      	ldr	r3, [r2, #0]
 801a208:	b933      	cbnz	r3, 801a218 <_free_r+0x30>
 801a20a:	6063      	str	r3, [r4, #4]
 801a20c:	6014      	str	r4, [r2, #0]
 801a20e:	b003      	add	sp, #12
 801a210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a214:	f003 b85e 	b.w	801d2d4 <__malloc_unlock>
 801a218:	42a3      	cmp	r3, r4
 801a21a:	d908      	bls.n	801a22e <_free_r+0x46>
 801a21c:	6825      	ldr	r5, [r4, #0]
 801a21e:	1961      	adds	r1, r4, r5
 801a220:	428b      	cmp	r3, r1
 801a222:	bf01      	itttt	eq
 801a224:	6819      	ldreq	r1, [r3, #0]
 801a226:	685b      	ldreq	r3, [r3, #4]
 801a228:	1949      	addeq	r1, r1, r5
 801a22a:	6021      	streq	r1, [r4, #0]
 801a22c:	e7ed      	b.n	801a20a <_free_r+0x22>
 801a22e:	461a      	mov	r2, r3
 801a230:	685b      	ldr	r3, [r3, #4]
 801a232:	b10b      	cbz	r3, 801a238 <_free_r+0x50>
 801a234:	42a3      	cmp	r3, r4
 801a236:	d9fa      	bls.n	801a22e <_free_r+0x46>
 801a238:	6811      	ldr	r1, [r2, #0]
 801a23a:	1855      	adds	r5, r2, r1
 801a23c:	42a5      	cmp	r5, r4
 801a23e:	d10b      	bne.n	801a258 <_free_r+0x70>
 801a240:	6824      	ldr	r4, [r4, #0]
 801a242:	4421      	add	r1, r4
 801a244:	1854      	adds	r4, r2, r1
 801a246:	42a3      	cmp	r3, r4
 801a248:	6011      	str	r1, [r2, #0]
 801a24a:	d1e0      	bne.n	801a20e <_free_r+0x26>
 801a24c:	681c      	ldr	r4, [r3, #0]
 801a24e:	685b      	ldr	r3, [r3, #4]
 801a250:	6053      	str	r3, [r2, #4]
 801a252:	4421      	add	r1, r4
 801a254:	6011      	str	r1, [r2, #0]
 801a256:	e7da      	b.n	801a20e <_free_r+0x26>
 801a258:	d902      	bls.n	801a260 <_free_r+0x78>
 801a25a:	230c      	movs	r3, #12
 801a25c:	6003      	str	r3, [r0, #0]
 801a25e:	e7d6      	b.n	801a20e <_free_r+0x26>
 801a260:	6825      	ldr	r5, [r4, #0]
 801a262:	1961      	adds	r1, r4, r5
 801a264:	428b      	cmp	r3, r1
 801a266:	bf04      	itt	eq
 801a268:	6819      	ldreq	r1, [r3, #0]
 801a26a:	685b      	ldreq	r3, [r3, #4]
 801a26c:	6063      	str	r3, [r4, #4]
 801a26e:	bf04      	itt	eq
 801a270:	1949      	addeq	r1, r1, r5
 801a272:	6021      	streq	r1, [r4, #0]
 801a274:	6054      	str	r4, [r2, #4]
 801a276:	e7ca      	b.n	801a20e <_free_r+0x26>
 801a278:	b003      	add	sp, #12
 801a27a:	bd30      	pop	{r4, r5, pc}
 801a27c:	20004238 	.word	0x20004238

0801a280 <sbrk_aligned>:
 801a280:	b570      	push	{r4, r5, r6, lr}
 801a282:	4e0e      	ldr	r6, [pc, #56]	; (801a2bc <sbrk_aligned+0x3c>)
 801a284:	460c      	mov	r4, r1
 801a286:	6831      	ldr	r1, [r6, #0]
 801a288:	4605      	mov	r5, r0
 801a28a:	b911      	cbnz	r1, 801a292 <sbrk_aligned+0x12>
 801a28c:	f000 ff06 	bl	801b09c <_sbrk_r>
 801a290:	6030      	str	r0, [r6, #0]
 801a292:	4621      	mov	r1, r4
 801a294:	4628      	mov	r0, r5
 801a296:	f000 ff01 	bl	801b09c <_sbrk_r>
 801a29a:	1c43      	adds	r3, r0, #1
 801a29c:	d00a      	beq.n	801a2b4 <sbrk_aligned+0x34>
 801a29e:	1cc4      	adds	r4, r0, #3
 801a2a0:	f024 0403 	bic.w	r4, r4, #3
 801a2a4:	42a0      	cmp	r0, r4
 801a2a6:	d007      	beq.n	801a2b8 <sbrk_aligned+0x38>
 801a2a8:	1a21      	subs	r1, r4, r0
 801a2aa:	4628      	mov	r0, r5
 801a2ac:	f000 fef6 	bl	801b09c <_sbrk_r>
 801a2b0:	3001      	adds	r0, #1
 801a2b2:	d101      	bne.n	801a2b8 <sbrk_aligned+0x38>
 801a2b4:	f04f 34ff 	mov.w	r4, #4294967295
 801a2b8:	4620      	mov	r0, r4
 801a2ba:	bd70      	pop	{r4, r5, r6, pc}
 801a2bc:	2000423c 	.word	0x2000423c

0801a2c0 <_malloc_r>:
 801a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c4:	1ccd      	adds	r5, r1, #3
 801a2c6:	f025 0503 	bic.w	r5, r5, #3
 801a2ca:	3508      	adds	r5, #8
 801a2cc:	2d0c      	cmp	r5, #12
 801a2ce:	bf38      	it	cc
 801a2d0:	250c      	movcc	r5, #12
 801a2d2:	2d00      	cmp	r5, #0
 801a2d4:	4607      	mov	r7, r0
 801a2d6:	db01      	blt.n	801a2dc <_malloc_r+0x1c>
 801a2d8:	42a9      	cmp	r1, r5
 801a2da:	d905      	bls.n	801a2e8 <_malloc_r+0x28>
 801a2dc:	230c      	movs	r3, #12
 801a2de:	603b      	str	r3, [r7, #0]
 801a2e0:	2600      	movs	r6, #0
 801a2e2:	4630      	mov	r0, r6
 801a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2e8:	4e2e      	ldr	r6, [pc, #184]	; (801a3a4 <_malloc_r+0xe4>)
 801a2ea:	f002 ffed 	bl	801d2c8 <__malloc_lock>
 801a2ee:	6833      	ldr	r3, [r6, #0]
 801a2f0:	461c      	mov	r4, r3
 801a2f2:	bb34      	cbnz	r4, 801a342 <_malloc_r+0x82>
 801a2f4:	4629      	mov	r1, r5
 801a2f6:	4638      	mov	r0, r7
 801a2f8:	f7ff ffc2 	bl	801a280 <sbrk_aligned>
 801a2fc:	1c43      	adds	r3, r0, #1
 801a2fe:	4604      	mov	r4, r0
 801a300:	d14d      	bne.n	801a39e <_malloc_r+0xde>
 801a302:	6834      	ldr	r4, [r6, #0]
 801a304:	4626      	mov	r6, r4
 801a306:	2e00      	cmp	r6, #0
 801a308:	d140      	bne.n	801a38c <_malloc_r+0xcc>
 801a30a:	6823      	ldr	r3, [r4, #0]
 801a30c:	4631      	mov	r1, r6
 801a30e:	4638      	mov	r0, r7
 801a310:	eb04 0803 	add.w	r8, r4, r3
 801a314:	f000 fec2 	bl	801b09c <_sbrk_r>
 801a318:	4580      	cmp	r8, r0
 801a31a:	d13a      	bne.n	801a392 <_malloc_r+0xd2>
 801a31c:	6821      	ldr	r1, [r4, #0]
 801a31e:	3503      	adds	r5, #3
 801a320:	1a6d      	subs	r5, r5, r1
 801a322:	f025 0503 	bic.w	r5, r5, #3
 801a326:	3508      	adds	r5, #8
 801a328:	2d0c      	cmp	r5, #12
 801a32a:	bf38      	it	cc
 801a32c:	250c      	movcc	r5, #12
 801a32e:	4629      	mov	r1, r5
 801a330:	4638      	mov	r0, r7
 801a332:	f7ff ffa5 	bl	801a280 <sbrk_aligned>
 801a336:	3001      	adds	r0, #1
 801a338:	d02b      	beq.n	801a392 <_malloc_r+0xd2>
 801a33a:	6823      	ldr	r3, [r4, #0]
 801a33c:	442b      	add	r3, r5
 801a33e:	6023      	str	r3, [r4, #0]
 801a340:	e00e      	b.n	801a360 <_malloc_r+0xa0>
 801a342:	6822      	ldr	r2, [r4, #0]
 801a344:	1b52      	subs	r2, r2, r5
 801a346:	d41e      	bmi.n	801a386 <_malloc_r+0xc6>
 801a348:	2a0b      	cmp	r2, #11
 801a34a:	d916      	bls.n	801a37a <_malloc_r+0xba>
 801a34c:	1961      	adds	r1, r4, r5
 801a34e:	42a3      	cmp	r3, r4
 801a350:	6025      	str	r5, [r4, #0]
 801a352:	bf18      	it	ne
 801a354:	6059      	strne	r1, [r3, #4]
 801a356:	6863      	ldr	r3, [r4, #4]
 801a358:	bf08      	it	eq
 801a35a:	6031      	streq	r1, [r6, #0]
 801a35c:	5162      	str	r2, [r4, r5]
 801a35e:	604b      	str	r3, [r1, #4]
 801a360:	4638      	mov	r0, r7
 801a362:	f104 060b 	add.w	r6, r4, #11
 801a366:	f002 ffb5 	bl	801d2d4 <__malloc_unlock>
 801a36a:	f026 0607 	bic.w	r6, r6, #7
 801a36e:	1d23      	adds	r3, r4, #4
 801a370:	1af2      	subs	r2, r6, r3
 801a372:	d0b6      	beq.n	801a2e2 <_malloc_r+0x22>
 801a374:	1b9b      	subs	r3, r3, r6
 801a376:	50a3      	str	r3, [r4, r2]
 801a378:	e7b3      	b.n	801a2e2 <_malloc_r+0x22>
 801a37a:	6862      	ldr	r2, [r4, #4]
 801a37c:	42a3      	cmp	r3, r4
 801a37e:	bf0c      	ite	eq
 801a380:	6032      	streq	r2, [r6, #0]
 801a382:	605a      	strne	r2, [r3, #4]
 801a384:	e7ec      	b.n	801a360 <_malloc_r+0xa0>
 801a386:	4623      	mov	r3, r4
 801a388:	6864      	ldr	r4, [r4, #4]
 801a38a:	e7b2      	b.n	801a2f2 <_malloc_r+0x32>
 801a38c:	4634      	mov	r4, r6
 801a38e:	6876      	ldr	r6, [r6, #4]
 801a390:	e7b9      	b.n	801a306 <_malloc_r+0x46>
 801a392:	230c      	movs	r3, #12
 801a394:	603b      	str	r3, [r7, #0]
 801a396:	4638      	mov	r0, r7
 801a398:	f002 ff9c 	bl	801d2d4 <__malloc_unlock>
 801a39c:	e7a1      	b.n	801a2e2 <_malloc_r+0x22>
 801a39e:	6025      	str	r5, [r4, #0]
 801a3a0:	e7de      	b.n	801a360 <_malloc_r+0xa0>
 801a3a2:	bf00      	nop
 801a3a4:	20004238 	.word	0x20004238

0801a3a8 <__cvt>:
 801a3a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a3ac:	ec55 4b10 	vmov	r4, r5, d0
 801a3b0:	2d00      	cmp	r5, #0
 801a3b2:	460e      	mov	r6, r1
 801a3b4:	4619      	mov	r1, r3
 801a3b6:	462b      	mov	r3, r5
 801a3b8:	bfbb      	ittet	lt
 801a3ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a3be:	461d      	movlt	r5, r3
 801a3c0:	2300      	movge	r3, #0
 801a3c2:	232d      	movlt	r3, #45	; 0x2d
 801a3c4:	700b      	strb	r3, [r1, #0]
 801a3c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a3cc:	4691      	mov	r9, r2
 801a3ce:	f023 0820 	bic.w	r8, r3, #32
 801a3d2:	bfbc      	itt	lt
 801a3d4:	4622      	movlt	r2, r4
 801a3d6:	4614      	movlt	r4, r2
 801a3d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a3dc:	d005      	beq.n	801a3ea <__cvt+0x42>
 801a3de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a3e2:	d100      	bne.n	801a3e6 <__cvt+0x3e>
 801a3e4:	3601      	adds	r6, #1
 801a3e6:	2102      	movs	r1, #2
 801a3e8:	e000      	b.n	801a3ec <__cvt+0x44>
 801a3ea:	2103      	movs	r1, #3
 801a3ec:	ab03      	add	r3, sp, #12
 801a3ee:	9301      	str	r3, [sp, #4]
 801a3f0:	ab02      	add	r3, sp, #8
 801a3f2:	9300      	str	r3, [sp, #0]
 801a3f4:	ec45 4b10 	vmov	d0, r4, r5
 801a3f8:	4653      	mov	r3, sl
 801a3fa:	4632      	mov	r2, r6
 801a3fc:	f001 fdf0 	bl	801bfe0 <_dtoa_r>
 801a400:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a404:	4607      	mov	r7, r0
 801a406:	d102      	bne.n	801a40e <__cvt+0x66>
 801a408:	f019 0f01 	tst.w	r9, #1
 801a40c:	d022      	beq.n	801a454 <__cvt+0xac>
 801a40e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a412:	eb07 0906 	add.w	r9, r7, r6
 801a416:	d110      	bne.n	801a43a <__cvt+0x92>
 801a418:	783b      	ldrb	r3, [r7, #0]
 801a41a:	2b30      	cmp	r3, #48	; 0x30
 801a41c:	d10a      	bne.n	801a434 <__cvt+0x8c>
 801a41e:	2200      	movs	r2, #0
 801a420:	2300      	movs	r3, #0
 801a422:	4620      	mov	r0, r4
 801a424:	4629      	mov	r1, r5
 801a426:	f7e6 fb67 	bl	8000af8 <__aeabi_dcmpeq>
 801a42a:	b918      	cbnz	r0, 801a434 <__cvt+0x8c>
 801a42c:	f1c6 0601 	rsb	r6, r6, #1
 801a430:	f8ca 6000 	str.w	r6, [sl]
 801a434:	f8da 3000 	ldr.w	r3, [sl]
 801a438:	4499      	add	r9, r3
 801a43a:	2200      	movs	r2, #0
 801a43c:	2300      	movs	r3, #0
 801a43e:	4620      	mov	r0, r4
 801a440:	4629      	mov	r1, r5
 801a442:	f7e6 fb59 	bl	8000af8 <__aeabi_dcmpeq>
 801a446:	b108      	cbz	r0, 801a44c <__cvt+0xa4>
 801a448:	f8cd 900c 	str.w	r9, [sp, #12]
 801a44c:	2230      	movs	r2, #48	; 0x30
 801a44e:	9b03      	ldr	r3, [sp, #12]
 801a450:	454b      	cmp	r3, r9
 801a452:	d307      	bcc.n	801a464 <__cvt+0xbc>
 801a454:	9b03      	ldr	r3, [sp, #12]
 801a456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a458:	1bdb      	subs	r3, r3, r7
 801a45a:	4638      	mov	r0, r7
 801a45c:	6013      	str	r3, [r2, #0]
 801a45e:	b004      	add	sp, #16
 801a460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a464:	1c59      	adds	r1, r3, #1
 801a466:	9103      	str	r1, [sp, #12]
 801a468:	701a      	strb	r2, [r3, #0]
 801a46a:	e7f0      	b.n	801a44e <__cvt+0xa6>

0801a46c <__exponent>:
 801a46c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a46e:	4603      	mov	r3, r0
 801a470:	2900      	cmp	r1, #0
 801a472:	bfb8      	it	lt
 801a474:	4249      	neglt	r1, r1
 801a476:	f803 2b02 	strb.w	r2, [r3], #2
 801a47a:	bfb4      	ite	lt
 801a47c:	222d      	movlt	r2, #45	; 0x2d
 801a47e:	222b      	movge	r2, #43	; 0x2b
 801a480:	2909      	cmp	r1, #9
 801a482:	7042      	strb	r2, [r0, #1]
 801a484:	dd2a      	ble.n	801a4dc <__exponent+0x70>
 801a486:	f10d 0407 	add.w	r4, sp, #7
 801a48a:	46a4      	mov	ip, r4
 801a48c:	270a      	movs	r7, #10
 801a48e:	46a6      	mov	lr, r4
 801a490:	460a      	mov	r2, r1
 801a492:	fb91 f6f7 	sdiv	r6, r1, r7
 801a496:	fb07 1516 	mls	r5, r7, r6, r1
 801a49a:	3530      	adds	r5, #48	; 0x30
 801a49c:	2a63      	cmp	r2, #99	; 0x63
 801a49e:	f104 34ff 	add.w	r4, r4, #4294967295
 801a4a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a4a6:	4631      	mov	r1, r6
 801a4a8:	dcf1      	bgt.n	801a48e <__exponent+0x22>
 801a4aa:	3130      	adds	r1, #48	; 0x30
 801a4ac:	f1ae 0502 	sub.w	r5, lr, #2
 801a4b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a4b4:	1c44      	adds	r4, r0, #1
 801a4b6:	4629      	mov	r1, r5
 801a4b8:	4561      	cmp	r1, ip
 801a4ba:	d30a      	bcc.n	801a4d2 <__exponent+0x66>
 801a4bc:	f10d 0209 	add.w	r2, sp, #9
 801a4c0:	eba2 020e 	sub.w	r2, r2, lr
 801a4c4:	4565      	cmp	r5, ip
 801a4c6:	bf88      	it	hi
 801a4c8:	2200      	movhi	r2, #0
 801a4ca:	4413      	add	r3, r2
 801a4cc:	1a18      	subs	r0, r3, r0
 801a4ce:	b003      	add	sp, #12
 801a4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a4da:	e7ed      	b.n	801a4b8 <__exponent+0x4c>
 801a4dc:	2330      	movs	r3, #48	; 0x30
 801a4de:	3130      	adds	r1, #48	; 0x30
 801a4e0:	7083      	strb	r3, [r0, #2]
 801a4e2:	70c1      	strb	r1, [r0, #3]
 801a4e4:	1d03      	adds	r3, r0, #4
 801a4e6:	e7f1      	b.n	801a4cc <__exponent+0x60>

0801a4e8 <_printf_float>:
 801a4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ec:	ed2d 8b02 	vpush	{d8}
 801a4f0:	b08d      	sub	sp, #52	; 0x34
 801a4f2:	460c      	mov	r4, r1
 801a4f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a4f8:	4616      	mov	r6, r2
 801a4fa:	461f      	mov	r7, r3
 801a4fc:	4605      	mov	r5, r0
 801a4fe:	f002 fecd 	bl	801d29c <_localeconv_r>
 801a502:	f8d0 a000 	ldr.w	sl, [r0]
 801a506:	4650      	mov	r0, sl
 801a508:	f7e5 fe7a 	bl	8000200 <strlen>
 801a50c:	2300      	movs	r3, #0
 801a50e:	930a      	str	r3, [sp, #40]	; 0x28
 801a510:	6823      	ldr	r3, [r4, #0]
 801a512:	9305      	str	r3, [sp, #20]
 801a514:	f8d8 3000 	ldr.w	r3, [r8]
 801a518:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a51c:	3307      	adds	r3, #7
 801a51e:	f023 0307 	bic.w	r3, r3, #7
 801a522:	f103 0208 	add.w	r2, r3, #8
 801a526:	f8c8 2000 	str.w	r2, [r8]
 801a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a52e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a532:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a53a:	9307      	str	r3, [sp, #28]
 801a53c:	f8cd 8018 	str.w	r8, [sp, #24]
 801a540:	ee08 0a10 	vmov	s16, r0
 801a544:	4b9f      	ldr	r3, [pc, #636]	; (801a7c4 <_printf_float+0x2dc>)
 801a546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a54a:	f04f 32ff 	mov.w	r2, #4294967295
 801a54e:	f7e6 fb05 	bl	8000b5c <__aeabi_dcmpun>
 801a552:	bb88      	cbnz	r0, 801a5b8 <_printf_float+0xd0>
 801a554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a558:	4b9a      	ldr	r3, [pc, #616]	; (801a7c4 <_printf_float+0x2dc>)
 801a55a:	f04f 32ff 	mov.w	r2, #4294967295
 801a55e:	f7e6 fadf 	bl	8000b20 <__aeabi_dcmple>
 801a562:	bb48      	cbnz	r0, 801a5b8 <_printf_float+0xd0>
 801a564:	2200      	movs	r2, #0
 801a566:	2300      	movs	r3, #0
 801a568:	4640      	mov	r0, r8
 801a56a:	4649      	mov	r1, r9
 801a56c:	f7e6 face 	bl	8000b0c <__aeabi_dcmplt>
 801a570:	b110      	cbz	r0, 801a578 <_printf_float+0x90>
 801a572:	232d      	movs	r3, #45	; 0x2d
 801a574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a578:	4b93      	ldr	r3, [pc, #588]	; (801a7c8 <_printf_float+0x2e0>)
 801a57a:	4894      	ldr	r0, [pc, #592]	; (801a7cc <_printf_float+0x2e4>)
 801a57c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a580:	bf94      	ite	ls
 801a582:	4698      	movls	r8, r3
 801a584:	4680      	movhi	r8, r0
 801a586:	2303      	movs	r3, #3
 801a588:	6123      	str	r3, [r4, #16]
 801a58a:	9b05      	ldr	r3, [sp, #20]
 801a58c:	f023 0204 	bic.w	r2, r3, #4
 801a590:	6022      	str	r2, [r4, #0]
 801a592:	f04f 0900 	mov.w	r9, #0
 801a596:	9700      	str	r7, [sp, #0]
 801a598:	4633      	mov	r3, r6
 801a59a:	aa0b      	add	r2, sp, #44	; 0x2c
 801a59c:	4621      	mov	r1, r4
 801a59e:	4628      	mov	r0, r5
 801a5a0:	f000 f9d8 	bl	801a954 <_printf_common>
 801a5a4:	3001      	adds	r0, #1
 801a5a6:	f040 8090 	bne.w	801a6ca <_printf_float+0x1e2>
 801a5aa:	f04f 30ff 	mov.w	r0, #4294967295
 801a5ae:	b00d      	add	sp, #52	; 0x34
 801a5b0:	ecbd 8b02 	vpop	{d8}
 801a5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b8:	4642      	mov	r2, r8
 801a5ba:	464b      	mov	r3, r9
 801a5bc:	4640      	mov	r0, r8
 801a5be:	4649      	mov	r1, r9
 801a5c0:	f7e6 facc 	bl	8000b5c <__aeabi_dcmpun>
 801a5c4:	b140      	cbz	r0, 801a5d8 <_printf_float+0xf0>
 801a5c6:	464b      	mov	r3, r9
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	bfbc      	itt	lt
 801a5cc:	232d      	movlt	r3, #45	; 0x2d
 801a5ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a5d2:	487f      	ldr	r0, [pc, #508]	; (801a7d0 <_printf_float+0x2e8>)
 801a5d4:	4b7f      	ldr	r3, [pc, #508]	; (801a7d4 <_printf_float+0x2ec>)
 801a5d6:	e7d1      	b.n	801a57c <_printf_float+0x94>
 801a5d8:	6863      	ldr	r3, [r4, #4]
 801a5da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a5de:	9206      	str	r2, [sp, #24]
 801a5e0:	1c5a      	adds	r2, r3, #1
 801a5e2:	d13f      	bne.n	801a664 <_printf_float+0x17c>
 801a5e4:	2306      	movs	r3, #6
 801a5e6:	6063      	str	r3, [r4, #4]
 801a5e8:	9b05      	ldr	r3, [sp, #20]
 801a5ea:	6861      	ldr	r1, [r4, #4]
 801a5ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	9303      	str	r3, [sp, #12]
 801a5f4:	ab0a      	add	r3, sp, #40	; 0x28
 801a5f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a5fa:	ab09      	add	r3, sp, #36	; 0x24
 801a5fc:	ec49 8b10 	vmov	d0, r8, r9
 801a600:	9300      	str	r3, [sp, #0]
 801a602:	6022      	str	r2, [r4, #0]
 801a604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a608:	4628      	mov	r0, r5
 801a60a:	f7ff fecd 	bl	801a3a8 <__cvt>
 801a60e:	9b06      	ldr	r3, [sp, #24]
 801a610:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a612:	2b47      	cmp	r3, #71	; 0x47
 801a614:	4680      	mov	r8, r0
 801a616:	d108      	bne.n	801a62a <_printf_float+0x142>
 801a618:	1cc8      	adds	r0, r1, #3
 801a61a:	db02      	blt.n	801a622 <_printf_float+0x13a>
 801a61c:	6863      	ldr	r3, [r4, #4]
 801a61e:	4299      	cmp	r1, r3
 801a620:	dd41      	ble.n	801a6a6 <_printf_float+0x1be>
 801a622:	f1ab 0b02 	sub.w	fp, fp, #2
 801a626:	fa5f fb8b 	uxtb.w	fp, fp
 801a62a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a62e:	d820      	bhi.n	801a672 <_printf_float+0x18a>
 801a630:	3901      	subs	r1, #1
 801a632:	465a      	mov	r2, fp
 801a634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a638:	9109      	str	r1, [sp, #36]	; 0x24
 801a63a:	f7ff ff17 	bl	801a46c <__exponent>
 801a63e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a640:	1813      	adds	r3, r2, r0
 801a642:	2a01      	cmp	r2, #1
 801a644:	4681      	mov	r9, r0
 801a646:	6123      	str	r3, [r4, #16]
 801a648:	dc02      	bgt.n	801a650 <_printf_float+0x168>
 801a64a:	6822      	ldr	r2, [r4, #0]
 801a64c:	07d2      	lsls	r2, r2, #31
 801a64e:	d501      	bpl.n	801a654 <_printf_float+0x16c>
 801a650:	3301      	adds	r3, #1
 801a652:	6123      	str	r3, [r4, #16]
 801a654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d09c      	beq.n	801a596 <_printf_float+0xae>
 801a65c:	232d      	movs	r3, #45	; 0x2d
 801a65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a662:	e798      	b.n	801a596 <_printf_float+0xae>
 801a664:	9a06      	ldr	r2, [sp, #24]
 801a666:	2a47      	cmp	r2, #71	; 0x47
 801a668:	d1be      	bne.n	801a5e8 <_printf_float+0x100>
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d1bc      	bne.n	801a5e8 <_printf_float+0x100>
 801a66e:	2301      	movs	r3, #1
 801a670:	e7b9      	b.n	801a5e6 <_printf_float+0xfe>
 801a672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a676:	d118      	bne.n	801a6aa <_printf_float+0x1c2>
 801a678:	2900      	cmp	r1, #0
 801a67a:	6863      	ldr	r3, [r4, #4]
 801a67c:	dd0b      	ble.n	801a696 <_printf_float+0x1ae>
 801a67e:	6121      	str	r1, [r4, #16]
 801a680:	b913      	cbnz	r3, 801a688 <_printf_float+0x1a0>
 801a682:	6822      	ldr	r2, [r4, #0]
 801a684:	07d0      	lsls	r0, r2, #31
 801a686:	d502      	bpl.n	801a68e <_printf_float+0x1a6>
 801a688:	3301      	adds	r3, #1
 801a68a:	440b      	add	r3, r1
 801a68c:	6123      	str	r3, [r4, #16]
 801a68e:	65a1      	str	r1, [r4, #88]	; 0x58
 801a690:	f04f 0900 	mov.w	r9, #0
 801a694:	e7de      	b.n	801a654 <_printf_float+0x16c>
 801a696:	b913      	cbnz	r3, 801a69e <_printf_float+0x1b6>
 801a698:	6822      	ldr	r2, [r4, #0]
 801a69a:	07d2      	lsls	r2, r2, #31
 801a69c:	d501      	bpl.n	801a6a2 <_printf_float+0x1ba>
 801a69e:	3302      	adds	r3, #2
 801a6a0:	e7f4      	b.n	801a68c <_printf_float+0x1a4>
 801a6a2:	2301      	movs	r3, #1
 801a6a4:	e7f2      	b.n	801a68c <_printf_float+0x1a4>
 801a6a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6ac:	4299      	cmp	r1, r3
 801a6ae:	db05      	blt.n	801a6bc <_printf_float+0x1d4>
 801a6b0:	6823      	ldr	r3, [r4, #0]
 801a6b2:	6121      	str	r1, [r4, #16]
 801a6b4:	07d8      	lsls	r0, r3, #31
 801a6b6:	d5ea      	bpl.n	801a68e <_printf_float+0x1a6>
 801a6b8:	1c4b      	adds	r3, r1, #1
 801a6ba:	e7e7      	b.n	801a68c <_printf_float+0x1a4>
 801a6bc:	2900      	cmp	r1, #0
 801a6be:	bfd4      	ite	le
 801a6c0:	f1c1 0202 	rsble	r2, r1, #2
 801a6c4:	2201      	movgt	r2, #1
 801a6c6:	4413      	add	r3, r2
 801a6c8:	e7e0      	b.n	801a68c <_printf_float+0x1a4>
 801a6ca:	6823      	ldr	r3, [r4, #0]
 801a6cc:	055a      	lsls	r2, r3, #21
 801a6ce:	d407      	bmi.n	801a6e0 <_printf_float+0x1f8>
 801a6d0:	6923      	ldr	r3, [r4, #16]
 801a6d2:	4642      	mov	r2, r8
 801a6d4:	4631      	mov	r1, r6
 801a6d6:	4628      	mov	r0, r5
 801a6d8:	47b8      	blx	r7
 801a6da:	3001      	adds	r0, #1
 801a6dc:	d12c      	bne.n	801a738 <_printf_float+0x250>
 801a6de:	e764      	b.n	801a5aa <_printf_float+0xc2>
 801a6e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a6e4:	f240 80e0 	bls.w	801a8a8 <_printf_float+0x3c0>
 801a6e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	f7e6 fa02 	bl	8000af8 <__aeabi_dcmpeq>
 801a6f4:	2800      	cmp	r0, #0
 801a6f6:	d034      	beq.n	801a762 <_printf_float+0x27a>
 801a6f8:	4a37      	ldr	r2, [pc, #220]	; (801a7d8 <_printf_float+0x2f0>)
 801a6fa:	2301      	movs	r3, #1
 801a6fc:	4631      	mov	r1, r6
 801a6fe:	4628      	mov	r0, r5
 801a700:	47b8      	blx	r7
 801a702:	3001      	adds	r0, #1
 801a704:	f43f af51 	beq.w	801a5aa <_printf_float+0xc2>
 801a708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a70c:	429a      	cmp	r2, r3
 801a70e:	db02      	blt.n	801a716 <_printf_float+0x22e>
 801a710:	6823      	ldr	r3, [r4, #0]
 801a712:	07d8      	lsls	r0, r3, #31
 801a714:	d510      	bpl.n	801a738 <_printf_float+0x250>
 801a716:	ee18 3a10 	vmov	r3, s16
 801a71a:	4652      	mov	r2, sl
 801a71c:	4631      	mov	r1, r6
 801a71e:	4628      	mov	r0, r5
 801a720:	47b8      	blx	r7
 801a722:	3001      	adds	r0, #1
 801a724:	f43f af41 	beq.w	801a5aa <_printf_float+0xc2>
 801a728:	f04f 0800 	mov.w	r8, #0
 801a72c:	f104 091a 	add.w	r9, r4, #26
 801a730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a732:	3b01      	subs	r3, #1
 801a734:	4543      	cmp	r3, r8
 801a736:	dc09      	bgt.n	801a74c <_printf_float+0x264>
 801a738:	6823      	ldr	r3, [r4, #0]
 801a73a:	079b      	lsls	r3, r3, #30
 801a73c:	f100 8105 	bmi.w	801a94a <_printf_float+0x462>
 801a740:	68e0      	ldr	r0, [r4, #12]
 801a742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a744:	4298      	cmp	r0, r3
 801a746:	bfb8      	it	lt
 801a748:	4618      	movlt	r0, r3
 801a74a:	e730      	b.n	801a5ae <_printf_float+0xc6>
 801a74c:	2301      	movs	r3, #1
 801a74e:	464a      	mov	r2, r9
 801a750:	4631      	mov	r1, r6
 801a752:	4628      	mov	r0, r5
 801a754:	47b8      	blx	r7
 801a756:	3001      	adds	r0, #1
 801a758:	f43f af27 	beq.w	801a5aa <_printf_float+0xc2>
 801a75c:	f108 0801 	add.w	r8, r8, #1
 801a760:	e7e6      	b.n	801a730 <_printf_float+0x248>
 801a762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a764:	2b00      	cmp	r3, #0
 801a766:	dc39      	bgt.n	801a7dc <_printf_float+0x2f4>
 801a768:	4a1b      	ldr	r2, [pc, #108]	; (801a7d8 <_printf_float+0x2f0>)
 801a76a:	2301      	movs	r3, #1
 801a76c:	4631      	mov	r1, r6
 801a76e:	4628      	mov	r0, r5
 801a770:	47b8      	blx	r7
 801a772:	3001      	adds	r0, #1
 801a774:	f43f af19 	beq.w	801a5aa <_printf_float+0xc2>
 801a778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a77c:	4313      	orrs	r3, r2
 801a77e:	d102      	bne.n	801a786 <_printf_float+0x29e>
 801a780:	6823      	ldr	r3, [r4, #0]
 801a782:	07d9      	lsls	r1, r3, #31
 801a784:	d5d8      	bpl.n	801a738 <_printf_float+0x250>
 801a786:	ee18 3a10 	vmov	r3, s16
 801a78a:	4652      	mov	r2, sl
 801a78c:	4631      	mov	r1, r6
 801a78e:	4628      	mov	r0, r5
 801a790:	47b8      	blx	r7
 801a792:	3001      	adds	r0, #1
 801a794:	f43f af09 	beq.w	801a5aa <_printf_float+0xc2>
 801a798:	f04f 0900 	mov.w	r9, #0
 801a79c:	f104 0a1a 	add.w	sl, r4, #26
 801a7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7a2:	425b      	negs	r3, r3
 801a7a4:	454b      	cmp	r3, r9
 801a7a6:	dc01      	bgt.n	801a7ac <_printf_float+0x2c4>
 801a7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7aa:	e792      	b.n	801a6d2 <_printf_float+0x1ea>
 801a7ac:	2301      	movs	r3, #1
 801a7ae:	4652      	mov	r2, sl
 801a7b0:	4631      	mov	r1, r6
 801a7b2:	4628      	mov	r0, r5
 801a7b4:	47b8      	blx	r7
 801a7b6:	3001      	adds	r0, #1
 801a7b8:	f43f aef7 	beq.w	801a5aa <_printf_float+0xc2>
 801a7bc:	f109 0901 	add.w	r9, r9, #1
 801a7c0:	e7ee      	b.n	801a7a0 <_printf_float+0x2b8>
 801a7c2:	bf00      	nop
 801a7c4:	7fefffff 	.word	0x7fefffff
 801a7c8:	08074178 	.word	0x08074178
 801a7cc:	0807417c 	.word	0x0807417c
 801a7d0:	08074184 	.word	0x08074184
 801a7d4:	08074180 	.word	0x08074180
 801a7d8:	08074188 	.word	0x08074188
 801a7dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	bfa8      	it	ge
 801a7e4:	461a      	movge	r2, r3
 801a7e6:	2a00      	cmp	r2, #0
 801a7e8:	4691      	mov	r9, r2
 801a7ea:	dc37      	bgt.n	801a85c <_printf_float+0x374>
 801a7ec:	f04f 0b00 	mov.w	fp, #0
 801a7f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a7f4:	f104 021a 	add.w	r2, r4, #26
 801a7f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a7fa:	9305      	str	r3, [sp, #20]
 801a7fc:	eba3 0309 	sub.w	r3, r3, r9
 801a800:	455b      	cmp	r3, fp
 801a802:	dc33      	bgt.n	801a86c <_printf_float+0x384>
 801a804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a808:	429a      	cmp	r2, r3
 801a80a:	db3b      	blt.n	801a884 <_printf_float+0x39c>
 801a80c:	6823      	ldr	r3, [r4, #0]
 801a80e:	07da      	lsls	r2, r3, #31
 801a810:	d438      	bmi.n	801a884 <_printf_float+0x39c>
 801a812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a814:	9a05      	ldr	r2, [sp, #20]
 801a816:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a818:	1a9a      	subs	r2, r3, r2
 801a81a:	eba3 0901 	sub.w	r9, r3, r1
 801a81e:	4591      	cmp	r9, r2
 801a820:	bfa8      	it	ge
 801a822:	4691      	movge	r9, r2
 801a824:	f1b9 0f00 	cmp.w	r9, #0
 801a828:	dc35      	bgt.n	801a896 <_printf_float+0x3ae>
 801a82a:	f04f 0800 	mov.w	r8, #0
 801a82e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a832:	f104 0a1a 	add.w	sl, r4, #26
 801a836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a83a:	1a9b      	subs	r3, r3, r2
 801a83c:	eba3 0309 	sub.w	r3, r3, r9
 801a840:	4543      	cmp	r3, r8
 801a842:	f77f af79 	ble.w	801a738 <_printf_float+0x250>
 801a846:	2301      	movs	r3, #1
 801a848:	4652      	mov	r2, sl
 801a84a:	4631      	mov	r1, r6
 801a84c:	4628      	mov	r0, r5
 801a84e:	47b8      	blx	r7
 801a850:	3001      	adds	r0, #1
 801a852:	f43f aeaa 	beq.w	801a5aa <_printf_float+0xc2>
 801a856:	f108 0801 	add.w	r8, r8, #1
 801a85a:	e7ec      	b.n	801a836 <_printf_float+0x34e>
 801a85c:	4613      	mov	r3, r2
 801a85e:	4631      	mov	r1, r6
 801a860:	4642      	mov	r2, r8
 801a862:	4628      	mov	r0, r5
 801a864:	47b8      	blx	r7
 801a866:	3001      	adds	r0, #1
 801a868:	d1c0      	bne.n	801a7ec <_printf_float+0x304>
 801a86a:	e69e      	b.n	801a5aa <_printf_float+0xc2>
 801a86c:	2301      	movs	r3, #1
 801a86e:	4631      	mov	r1, r6
 801a870:	4628      	mov	r0, r5
 801a872:	9205      	str	r2, [sp, #20]
 801a874:	47b8      	blx	r7
 801a876:	3001      	adds	r0, #1
 801a878:	f43f ae97 	beq.w	801a5aa <_printf_float+0xc2>
 801a87c:	9a05      	ldr	r2, [sp, #20]
 801a87e:	f10b 0b01 	add.w	fp, fp, #1
 801a882:	e7b9      	b.n	801a7f8 <_printf_float+0x310>
 801a884:	ee18 3a10 	vmov	r3, s16
 801a888:	4652      	mov	r2, sl
 801a88a:	4631      	mov	r1, r6
 801a88c:	4628      	mov	r0, r5
 801a88e:	47b8      	blx	r7
 801a890:	3001      	adds	r0, #1
 801a892:	d1be      	bne.n	801a812 <_printf_float+0x32a>
 801a894:	e689      	b.n	801a5aa <_printf_float+0xc2>
 801a896:	9a05      	ldr	r2, [sp, #20]
 801a898:	464b      	mov	r3, r9
 801a89a:	4442      	add	r2, r8
 801a89c:	4631      	mov	r1, r6
 801a89e:	4628      	mov	r0, r5
 801a8a0:	47b8      	blx	r7
 801a8a2:	3001      	adds	r0, #1
 801a8a4:	d1c1      	bne.n	801a82a <_printf_float+0x342>
 801a8a6:	e680      	b.n	801a5aa <_printf_float+0xc2>
 801a8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8aa:	2a01      	cmp	r2, #1
 801a8ac:	dc01      	bgt.n	801a8b2 <_printf_float+0x3ca>
 801a8ae:	07db      	lsls	r3, r3, #31
 801a8b0:	d538      	bpl.n	801a924 <_printf_float+0x43c>
 801a8b2:	2301      	movs	r3, #1
 801a8b4:	4642      	mov	r2, r8
 801a8b6:	4631      	mov	r1, r6
 801a8b8:	4628      	mov	r0, r5
 801a8ba:	47b8      	blx	r7
 801a8bc:	3001      	adds	r0, #1
 801a8be:	f43f ae74 	beq.w	801a5aa <_printf_float+0xc2>
 801a8c2:	ee18 3a10 	vmov	r3, s16
 801a8c6:	4652      	mov	r2, sl
 801a8c8:	4631      	mov	r1, r6
 801a8ca:	4628      	mov	r0, r5
 801a8cc:	47b8      	blx	r7
 801a8ce:	3001      	adds	r0, #1
 801a8d0:	f43f ae6b 	beq.w	801a5aa <_printf_float+0xc2>
 801a8d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a8d8:	2200      	movs	r2, #0
 801a8da:	2300      	movs	r3, #0
 801a8dc:	f7e6 f90c 	bl	8000af8 <__aeabi_dcmpeq>
 801a8e0:	b9d8      	cbnz	r0, 801a91a <_printf_float+0x432>
 801a8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8e4:	f108 0201 	add.w	r2, r8, #1
 801a8e8:	3b01      	subs	r3, #1
 801a8ea:	4631      	mov	r1, r6
 801a8ec:	4628      	mov	r0, r5
 801a8ee:	47b8      	blx	r7
 801a8f0:	3001      	adds	r0, #1
 801a8f2:	d10e      	bne.n	801a912 <_printf_float+0x42a>
 801a8f4:	e659      	b.n	801a5aa <_printf_float+0xc2>
 801a8f6:	2301      	movs	r3, #1
 801a8f8:	4652      	mov	r2, sl
 801a8fa:	4631      	mov	r1, r6
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	47b8      	blx	r7
 801a900:	3001      	adds	r0, #1
 801a902:	f43f ae52 	beq.w	801a5aa <_printf_float+0xc2>
 801a906:	f108 0801 	add.w	r8, r8, #1
 801a90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a90c:	3b01      	subs	r3, #1
 801a90e:	4543      	cmp	r3, r8
 801a910:	dcf1      	bgt.n	801a8f6 <_printf_float+0x40e>
 801a912:	464b      	mov	r3, r9
 801a914:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a918:	e6dc      	b.n	801a6d4 <_printf_float+0x1ec>
 801a91a:	f04f 0800 	mov.w	r8, #0
 801a91e:	f104 0a1a 	add.w	sl, r4, #26
 801a922:	e7f2      	b.n	801a90a <_printf_float+0x422>
 801a924:	2301      	movs	r3, #1
 801a926:	4642      	mov	r2, r8
 801a928:	e7df      	b.n	801a8ea <_printf_float+0x402>
 801a92a:	2301      	movs	r3, #1
 801a92c:	464a      	mov	r2, r9
 801a92e:	4631      	mov	r1, r6
 801a930:	4628      	mov	r0, r5
 801a932:	47b8      	blx	r7
 801a934:	3001      	adds	r0, #1
 801a936:	f43f ae38 	beq.w	801a5aa <_printf_float+0xc2>
 801a93a:	f108 0801 	add.w	r8, r8, #1
 801a93e:	68e3      	ldr	r3, [r4, #12]
 801a940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a942:	1a5b      	subs	r3, r3, r1
 801a944:	4543      	cmp	r3, r8
 801a946:	dcf0      	bgt.n	801a92a <_printf_float+0x442>
 801a948:	e6fa      	b.n	801a740 <_printf_float+0x258>
 801a94a:	f04f 0800 	mov.w	r8, #0
 801a94e:	f104 0919 	add.w	r9, r4, #25
 801a952:	e7f4      	b.n	801a93e <_printf_float+0x456>

0801a954 <_printf_common>:
 801a954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a958:	4616      	mov	r6, r2
 801a95a:	4699      	mov	r9, r3
 801a95c:	688a      	ldr	r2, [r1, #8]
 801a95e:	690b      	ldr	r3, [r1, #16]
 801a960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a964:	4293      	cmp	r3, r2
 801a966:	bfb8      	it	lt
 801a968:	4613      	movlt	r3, r2
 801a96a:	6033      	str	r3, [r6, #0]
 801a96c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a970:	4607      	mov	r7, r0
 801a972:	460c      	mov	r4, r1
 801a974:	b10a      	cbz	r2, 801a97a <_printf_common+0x26>
 801a976:	3301      	adds	r3, #1
 801a978:	6033      	str	r3, [r6, #0]
 801a97a:	6823      	ldr	r3, [r4, #0]
 801a97c:	0699      	lsls	r1, r3, #26
 801a97e:	bf42      	ittt	mi
 801a980:	6833      	ldrmi	r3, [r6, #0]
 801a982:	3302      	addmi	r3, #2
 801a984:	6033      	strmi	r3, [r6, #0]
 801a986:	6825      	ldr	r5, [r4, #0]
 801a988:	f015 0506 	ands.w	r5, r5, #6
 801a98c:	d106      	bne.n	801a99c <_printf_common+0x48>
 801a98e:	f104 0a19 	add.w	sl, r4, #25
 801a992:	68e3      	ldr	r3, [r4, #12]
 801a994:	6832      	ldr	r2, [r6, #0]
 801a996:	1a9b      	subs	r3, r3, r2
 801a998:	42ab      	cmp	r3, r5
 801a99a:	dc26      	bgt.n	801a9ea <_printf_common+0x96>
 801a99c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a9a0:	1e13      	subs	r3, r2, #0
 801a9a2:	6822      	ldr	r2, [r4, #0]
 801a9a4:	bf18      	it	ne
 801a9a6:	2301      	movne	r3, #1
 801a9a8:	0692      	lsls	r2, r2, #26
 801a9aa:	d42b      	bmi.n	801aa04 <_printf_common+0xb0>
 801a9ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a9b0:	4649      	mov	r1, r9
 801a9b2:	4638      	mov	r0, r7
 801a9b4:	47c0      	blx	r8
 801a9b6:	3001      	adds	r0, #1
 801a9b8:	d01e      	beq.n	801a9f8 <_printf_common+0xa4>
 801a9ba:	6823      	ldr	r3, [r4, #0]
 801a9bc:	68e5      	ldr	r5, [r4, #12]
 801a9be:	6832      	ldr	r2, [r6, #0]
 801a9c0:	f003 0306 	and.w	r3, r3, #6
 801a9c4:	2b04      	cmp	r3, #4
 801a9c6:	bf08      	it	eq
 801a9c8:	1aad      	subeq	r5, r5, r2
 801a9ca:	68a3      	ldr	r3, [r4, #8]
 801a9cc:	6922      	ldr	r2, [r4, #16]
 801a9ce:	bf0c      	ite	eq
 801a9d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a9d4:	2500      	movne	r5, #0
 801a9d6:	4293      	cmp	r3, r2
 801a9d8:	bfc4      	itt	gt
 801a9da:	1a9b      	subgt	r3, r3, r2
 801a9dc:	18ed      	addgt	r5, r5, r3
 801a9de:	2600      	movs	r6, #0
 801a9e0:	341a      	adds	r4, #26
 801a9e2:	42b5      	cmp	r5, r6
 801a9e4:	d11a      	bne.n	801aa1c <_printf_common+0xc8>
 801a9e6:	2000      	movs	r0, #0
 801a9e8:	e008      	b.n	801a9fc <_printf_common+0xa8>
 801a9ea:	2301      	movs	r3, #1
 801a9ec:	4652      	mov	r2, sl
 801a9ee:	4649      	mov	r1, r9
 801a9f0:	4638      	mov	r0, r7
 801a9f2:	47c0      	blx	r8
 801a9f4:	3001      	adds	r0, #1
 801a9f6:	d103      	bne.n	801aa00 <_printf_common+0xac>
 801a9f8:	f04f 30ff 	mov.w	r0, #4294967295
 801a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa00:	3501      	adds	r5, #1
 801aa02:	e7c6      	b.n	801a992 <_printf_common+0x3e>
 801aa04:	18e1      	adds	r1, r4, r3
 801aa06:	1c5a      	adds	r2, r3, #1
 801aa08:	2030      	movs	r0, #48	; 0x30
 801aa0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aa0e:	4422      	add	r2, r4
 801aa10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa18:	3302      	adds	r3, #2
 801aa1a:	e7c7      	b.n	801a9ac <_printf_common+0x58>
 801aa1c:	2301      	movs	r3, #1
 801aa1e:	4622      	mov	r2, r4
 801aa20:	4649      	mov	r1, r9
 801aa22:	4638      	mov	r0, r7
 801aa24:	47c0      	blx	r8
 801aa26:	3001      	adds	r0, #1
 801aa28:	d0e6      	beq.n	801a9f8 <_printf_common+0xa4>
 801aa2a:	3601      	adds	r6, #1
 801aa2c:	e7d9      	b.n	801a9e2 <_printf_common+0x8e>
	...

0801aa30 <_printf_i>:
 801aa30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa34:	7e0f      	ldrb	r7, [r1, #24]
 801aa36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aa38:	2f78      	cmp	r7, #120	; 0x78
 801aa3a:	4691      	mov	r9, r2
 801aa3c:	4680      	mov	r8, r0
 801aa3e:	460c      	mov	r4, r1
 801aa40:	469a      	mov	sl, r3
 801aa42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aa46:	d807      	bhi.n	801aa58 <_printf_i+0x28>
 801aa48:	2f62      	cmp	r7, #98	; 0x62
 801aa4a:	d80a      	bhi.n	801aa62 <_printf_i+0x32>
 801aa4c:	2f00      	cmp	r7, #0
 801aa4e:	f000 80d8 	beq.w	801ac02 <_printf_i+0x1d2>
 801aa52:	2f58      	cmp	r7, #88	; 0x58
 801aa54:	f000 80a3 	beq.w	801ab9e <_printf_i+0x16e>
 801aa58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aa60:	e03a      	b.n	801aad8 <_printf_i+0xa8>
 801aa62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aa66:	2b15      	cmp	r3, #21
 801aa68:	d8f6      	bhi.n	801aa58 <_printf_i+0x28>
 801aa6a:	a101      	add	r1, pc, #4	; (adr r1, 801aa70 <_printf_i+0x40>)
 801aa6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa70:	0801aac9 	.word	0x0801aac9
 801aa74:	0801aadd 	.word	0x0801aadd
 801aa78:	0801aa59 	.word	0x0801aa59
 801aa7c:	0801aa59 	.word	0x0801aa59
 801aa80:	0801aa59 	.word	0x0801aa59
 801aa84:	0801aa59 	.word	0x0801aa59
 801aa88:	0801aadd 	.word	0x0801aadd
 801aa8c:	0801aa59 	.word	0x0801aa59
 801aa90:	0801aa59 	.word	0x0801aa59
 801aa94:	0801aa59 	.word	0x0801aa59
 801aa98:	0801aa59 	.word	0x0801aa59
 801aa9c:	0801abe9 	.word	0x0801abe9
 801aaa0:	0801ab0d 	.word	0x0801ab0d
 801aaa4:	0801abcb 	.word	0x0801abcb
 801aaa8:	0801aa59 	.word	0x0801aa59
 801aaac:	0801aa59 	.word	0x0801aa59
 801aab0:	0801ac0b 	.word	0x0801ac0b
 801aab4:	0801aa59 	.word	0x0801aa59
 801aab8:	0801ab0d 	.word	0x0801ab0d
 801aabc:	0801aa59 	.word	0x0801aa59
 801aac0:	0801aa59 	.word	0x0801aa59
 801aac4:	0801abd3 	.word	0x0801abd3
 801aac8:	682b      	ldr	r3, [r5, #0]
 801aaca:	1d1a      	adds	r2, r3, #4
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	602a      	str	r2, [r5, #0]
 801aad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aad8:	2301      	movs	r3, #1
 801aada:	e0a3      	b.n	801ac24 <_printf_i+0x1f4>
 801aadc:	6820      	ldr	r0, [r4, #0]
 801aade:	6829      	ldr	r1, [r5, #0]
 801aae0:	0606      	lsls	r6, r0, #24
 801aae2:	f101 0304 	add.w	r3, r1, #4
 801aae6:	d50a      	bpl.n	801aafe <_printf_i+0xce>
 801aae8:	680e      	ldr	r6, [r1, #0]
 801aaea:	602b      	str	r3, [r5, #0]
 801aaec:	2e00      	cmp	r6, #0
 801aaee:	da03      	bge.n	801aaf8 <_printf_i+0xc8>
 801aaf0:	232d      	movs	r3, #45	; 0x2d
 801aaf2:	4276      	negs	r6, r6
 801aaf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aaf8:	485e      	ldr	r0, [pc, #376]	; (801ac74 <_printf_i+0x244>)
 801aafa:	230a      	movs	r3, #10
 801aafc:	e019      	b.n	801ab32 <_printf_i+0x102>
 801aafe:	680e      	ldr	r6, [r1, #0]
 801ab00:	602b      	str	r3, [r5, #0]
 801ab02:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ab06:	bf18      	it	ne
 801ab08:	b236      	sxthne	r6, r6
 801ab0a:	e7ef      	b.n	801aaec <_printf_i+0xbc>
 801ab0c:	682b      	ldr	r3, [r5, #0]
 801ab0e:	6820      	ldr	r0, [r4, #0]
 801ab10:	1d19      	adds	r1, r3, #4
 801ab12:	6029      	str	r1, [r5, #0]
 801ab14:	0601      	lsls	r1, r0, #24
 801ab16:	d501      	bpl.n	801ab1c <_printf_i+0xec>
 801ab18:	681e      	ldr	r6, [r3, #0]
 801ab1a:	e002      	b.n	801ab22 <_printf_i+0xf2>
 801ab1c:	0646      	lsls	r6, r0, #25
 801ab1e:	d5fb      	bpl.n	801ab18 <_printf_i+0xe8>
 801ab20:	881e      	ldrh	r6, [r3, #0]
 801ab22:	4854      	ldr	r0, [pc, #336]	; (801ac74 <_printf_i+0x244>)
 801ab24:	2f6f      	cmp	r7, #111	; 0x6f
 801ab26:	bf0c      	ite	eq
 801ab28:	2308      	moveq	r3, #8
 801ab2a:	230a      	movne	r3, #10
 801ab2c:	2100      	movs	r1, #0
 801ab2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ab32:	6865      	ldr	r5, [r4, #4]
 801ab34:	60a5      	str	r5, [r4, #8]
 801ab36:	2d00      	cmp	r5, #0
 801ab38:	bfa2      	ittt	ge
 801ab3a:	6821      	ldrge	r1, [r4, #0]
 801ab3c:	f021 0104 	bicge.w	r1, r1, #4
 801ab40:	6021      	strge	r1, [r4, #0]
 801ab42:	b90e      	cbnz	r6, 801ab48 <_printf_i+0x118>
 801ab44:	2d00      	cmp	r5, #0
 801ab46:	d04d      	beq.n	801abe4 <_printf_i+0x1b4>
 801ab48:	4615      	mov	r5, r2
 801ab4a:	fbb6 f1f3 	udiv	r1, r6, r3
 801ab4e:	fb03 6711 	mls	r7, r3, r1, r6
 801ab52:	5dc7      	ldrb	r7, [r0, r7]
 801ab54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ab58:	4637      	mov	r7, r6
 801ab5a:	42bb      	cmp	r3, r7
 801ab5c:	460e      	mov	r6, r1
 801ab5e:	d9f4      	bls.n	801ab4a <_printf_i+0x11a>
 801ab60:	2b08      	cmp	r3, #8
 801ab62:	d10b      	bne.n	801ab7c <_printf_i+0x14c>
 801ab64:	6823      	ldr	r3, [r4, #0]
 801ab66:	07de      	lsls	r6, r3, #31
 801ab68:	d508      	bpl.n	801ab7c <_printf_i+0x14c>
 801ab6a:	6923      	ldr	r3, [r4, #16]
 801ab6c:	6861      	ldr	r1, [r4, #4]
 801ab6e:	4299      	cmp	r1, r3
 801ab70:	bfde      	ittt	le
 801ab72:	2330      	movle	r3, #48	; 0x30
 801ab74:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ab78:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ab7c:	1b52      	subs	r2, r2, r5
 801ab7e:	6122      	str	r2, [r4, #16]
 801ab80:	f8cd a000 	str.w	sl, [sp]
 801ab84:	464b      	mov	r3, r9
 801ab86:	aa03      	add	r2, sp, #12
 801ab88:	4621      	mov	r1, r4
 801ab8a:	4640      	mov	r0, r8
 801ab8c:	f7ff fee2 	bl	801a954 <_printf_common>
 801ab90:	3001      	adds	r0, #1
 801ab92:	d14c      	bne.n	801ac2e <_printf_i+0x1fe>
 801ab94:	f04f 30ff 	mov.w	r0, #4294967295
 801ab98:	b004      	add	sp, #16
 801ab9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab9e:	4835      	ldr	r0, [pc, #212]	; (801ac74 <_printf_i+0x244>)
 801aba0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801aba4:	6829      	ldr	r1, [r5, #0]
 801aba6:	6823      	ldr	r3, [r4, #0]
 801aba8:	f851 6b04 	ldr.w	r6, [r1], #4
 801abac:	6029      	str	r1, [r5, #0]
 801abae:	061d      	lsls	r5, r3, #24
 801abb0:	d514      	bpl.n	801abdc <_printf_i+0x1ac>
 801abb2:	07df      	lsls	r7, r3, #31
 801abb4:	bf44      	itt	mi
 801abb6:	f043 0320 	orrmi.w	r3, r3, #32
 801abba:	6023      	strmi	r3, [r4, #0]
 801abbc:	b91e      	cbnz	r6, 801abc6 <_printf_i+0x196>
 801abbe:	6823      	ldr	r3, [r4, #0]
 801abc0:	f023 0320 	bic.w	r3, r3, #32
 801abc4:	6023      	str	r3, [r4, #0]
 801abc6:	2310      	movs	r3, #16
 801abc8:	e7b0      	b.n	801ab2c <_printf_i+0xfc>
 801abca:	6823      	ldr	r3, [r4, #0]
 801abcc:	f043 0320 	orr.w	r3, r3, #32
 801abd0:	6023      	str	r3, [r4, #0]
 801abd2:	2378      	movs	r3, #120	; 0x78
 801abd4:	4828      	ldr	r0, [pc, #160]	; (801ac78 <_printf_i+0x248>)
 801abd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801abda:	e7e3      	b.n	801aba4 <_printf_i+0x174>
 801abdc:	0659      	lsls	r1, r3, #25
 801abde:	bf48      	it	mi
 801abe0:	b2b6      	uxthmi	r6, r6
 801abe2:	e7e6      	b.n	801abb2 <_printf_i+0x182>
 801abe4:	4615      	mov	r5, r2
 801abe6:	e7bb      	b.n	801ab60 <_printf_i+0x130>
 801abe8:	682b      	ldr	r3, [r5, #0]
 801abea:	6826      	ldr	r6, [r4, #0]
 801abec:	6961      	ldr	r1, [r4, #20]
 801abee:	1d18      	adds	r0, r3, #4
 801abf0:	6028      	str	r0, [r5, #0]
 801abf2:	0635      	lsls	r5, r6, #24
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	d501      	bpl.n	801abfc <_printf_i+0x1cc>
 801abf8:	6019      	str	r1, [r3, #0]
 801abfa:	e002      	b.n	801ac02 <_printf_i+0x1d2>
 801abfc:	0670      	lsls	r0, r6, #25
 801abfe:	d5fb      	bpl.n	801abf8 <_printf_i+0x1c8>
 801ac00:	8019      	strh	r1, [r3, #0]
 801ac02:	2300      	movs	r3, #0
 801ac04:	6123      	str	r3, [r4, #16]
 801ac06:	4615      	mov	r5, r2
 801ac08:	e7ba      	b.n	801ab80 <_printf_i+0x150>
 801ac0a:	682b      	ldr	r3, [r5, #0]
 801ac0c:	1d1a      	adds	r2, r3, #4
 801ac0e:	602a      	str	r2, [r5, #0]
 801ac10:	681d      	ldr	r5, [r3, #0]
 801ac12:	6862      	ldr	r2, [r4, #4]
 801ac14:	2100      	movs	r1, #0
 801ac16:	4628      	mov	r0, r5
 801ac18:	f7e5 fafa 	bl	8000210 <memchr>
 801ac1c:	b108      	cbz	r0, 801ac22 <_printf_i+0x1f2>
 801ac1e:	1b40      	subs	r0, r0, r5
 801ac20:	6060      	str	r0, [r4, #4]
 801ac22:	6863      	ldr	r3, [r4, #4]
 801ac24:	6123      	str	r3, [r4, #16]
 801ac26:	2300      	movs	r3, #0
 801ac28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac2c:	e7a8      	b.n	801ab80 <_printf_i+0x150>
 801ac2e:	6923      	ldr	r3, [r4, #16]
 801ac30:	462a      	mov	r2, r5
 801ac32:	4649      	mov	r1, r9
 801ac34:	4640      	mov	r0, r8
 801ac36:	47d0      	blx	sl
 801ac38:	3001      	adds	r0, #1
 801ac3a:	d0ab      	beq.n	801ab94 <_printf_i+0x164>
 801ac3c:	6823      	ldr	r3, [r4, #0]
 801ac3e:	079b      	lsls	r3, r3, #30
 801ac40:	d413      	bmi.n	801ac6a <_printf_i+0x23a>
 801ac42:	68e0      	ldr	r0, [r4, #12]
 801ac44:	9b03      	ldr	r3, [sp, #12]
 801ac46:	4298      	cmp	r0, r3
 801ac48:	bfb8      	it	lt
 801ac4a:	4618      	movlt	r0, r3
 801ac4c:	e7a4      	b.n	801ab98 <_printf_i+0x168>
 801ac4e:	2301      	movs	r3, #1
 801ac50:	4632      	mov	r2, r6
 801ac52:	4649      	mov	r1, r9
 801ac54:	4640      	mov	r0, r8
 801ac56:	47d0      	blx	sl
 801ac58:	3001      	adds	r0, #1
 801ac5a:	d09b      	beq.n	801ab94 <_printf_i+0x164>
 801ac5c:	3501      	adds	r5, #1
 801ac5e:	68e3      	ldr	r3, [r4, #12]
 801ac60:	9903      	ldr	r1, [sp, #12]
 801ac62:	1a5b      	subs	r3, r3, r1
 801ac64:	42ab      	cmp	r3, r5
 801ac66:	dcf2      	bgt.n	801ac4e <_printf_i+0x21e>
 801ac68:	e7eb      	b.n	801ac42 <_printf_i+0x212>
 801ac6a:	2500      	movs	r5, #0
 801ac6c:	f104 0619 	add.w	r6, r4, #25
 801ac70:	e7f5      	b.n	801ac5e <_printf_i+0x22e>
 801ac72:	bf00      	nop
 801ac74:	0807418a 	.word	0x0807418a
 801ac78:	0807419b 	.word	0x0807419b

0801ac7c <_scanf_float>:
 801ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac80:	b087      	sub	sp, #28
 801ac82:	4617      	mov	r7, r2
 801ac84:	9303      	str	r3, [sp, #12]
 801ac86:	688b      	ldr	r3, [r1, #8]
 801ac88:	1e5a      	subs	r2, r3, #1
 801ac8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ac8e:	bf83      	ittte	hi
 801ac90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801ac94:	195b      	addhi	r3, r3, r5
 801ac96:	9302      	strhi	r3, [sp, #8]
 801ac98:	2300      	movls	r3, #0
 801ac9a:	bf86      	itte	hi
 801ac9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801aca0:	608b      	strhi	r3, [r1, #8]
 801aca2:	9302      	strls	r3, [sp, #8]
 801aca4:	680b      	ldr	r3, [r1, #0]
 801aca6:	468b      	mov	fp, r1
 801aca8:	2500      	movs	r5, #0
 801acaa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801acae:	f84b 3b1c 	str.w	r3, [fp], #28
 801acb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801acb6:	4680      	mov	r8, r0
 801acb8:	460c      	mov	r4, r1
 801acba:	465e      	mov	r6, fp
 801acbc:	46aa      	mov	sl, r5
 801acbe:	46a9      	mov	r9, r5
 801acc0:	9501      	str	r5, [sp, #4]
 801acc2:	68a2      	ldr	r2, [r4, #8]
 801acc4:	b152      	cbz	r2, 801acdc <_scanf_float+0x60>
 801acc6:	683b      	ldr	r3, [r7, #0]
 801acc8:	781b      	ldrb	r3, [r3, #0]
 801acca:	2b4e      	cmp	r3, #78	; 0x4e
 801accc:	d864      	bhi.n	801ad98 <_scanf_float+0x11c>
 801acce:	2b40      	cmp	r3, #64	; 0x40
 801acd0:	d83c      	bhi.n	801ad4c <_scanf_float+0xd0>
 801acd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801acd6:	b2c8      	uxtb	r0, r1
 801acd8:	280e      	cmp	r0, #14
 801acda:	d93a      	bls.n	801ad52 <_scanf_float+0xd6>
 801acdc:	f1b9 0f00 	cmp.w	r9, #0
 801ace0:	d003      	beq.n	801acea <_scanf_float+0x6e>
 801ace2:	6823      	ldr	r3, [r4, #0]
 801ace4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ace8:	6023      	str	r3, [r4, #0]
 801acea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801acee:	f1ba 0f01 	cmp.w	sl, #1
 801acf2:	f200 8113 	bhi.w	801af1c <_scanf_float+0x2a0>
 801acf6:	455e      	cmp	r6, fp
 801acf8:	f200 8105 	bhi.w	801af06 <_scanf_float+0x28a>
 801acfc:	2501      	movs	r5, #1
 801acfe:	4628      	mov	r0, r5
 801ad00:	b007      	add	sp, #28
 801ad02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ad0a:	2a0d      	cmp	r2, #13
 801ad0c:	d8e6      	bhi.n	801acdc <_scanf_float+0x60>
 801ad0e:	a101      	add	r1, pc, #4	; (adr r1, 801ad14 <_scanf_float+0x98>)
 801ad10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ad14:	0801ae53 	.word	0x0801ae53
 801ad18:	0801acdd 	.word	0x0801acdd
 801ad1c:	0801acdd 	.word	0x0801acdd
 801ad20:	0801acdd 	.word	0x0801acdd
 801ad24:	0801aeb3 	.word	0x0801aeb3
 801ad28:	0801ae8b 	.word	0x0801ae8b
 801ad2c:	0801acdd 	.word	0x0801acdd
 801ad30:	0801acdd 	.word	0x0801acdd
 801ad34:	0801ae61 	.word	0x0801ae61
 801ad38:	0801acdd 	.word	0x0801acdd
 801ad3c:	0801acdd 	.word	0x0801acdd
 801ad40:	0801acdd 	.word	0x0801acdd
 801ad44:	0801acdd 	.word	0x0801acdd
 801ad48:	0801ae19 	.word	0x0801ae19
 801ad4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ad50:	e7db      	b.n	801ad0a <_scanf_float+0x8e>
 801ad52:	290e      	cmp	r1, #14
 801ad54:	d8c2      	bhi.n	801acdc <_scanf_float+0x60>
 801ad56:	a001      	add	r0, pc, #4	; (adr r0, 801ad5c <_scanf_float+0xe0>)
 801ad58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ad5c:	0801ae0b 	.word	0x0801ae0b
 801ad60:	0801acdd 	.word	0x0801acdd
 801ad64:	0801ae0b 	.word	0x0801ae0b
 801ad68:	0801ae9f 	.word	0x0801ae9f
 801ad6c:	0801acdd 	.word	0x0801acdd
 801ad70:	0801adb9 	.word	0x0801adb9
 801ad74:	0801adf5 	.word	0x0801adf5
 801ad78:	0801adf5 	.word	0x0801adf5
 801ad7c:	0801adf5 	.word	0x0801adf5
 801ad80:	0801adf5 	.word	0x0801adf5
 801ad84:	0801adf5 	.word	0x0801adf5
 801ad88:	0801adf5 	.word	0x0801adf5
 801ad8c:	0801adf5 	.word	0x0801adf5
 801ad90:	0801adf5 	.word	0x0801adf5
 801ad94:	0801adf5 	.word	0x0801adf5
 801ad98:	2b6e      	cmp	r3, #110	; 0x6e
 801ad9a:	d809      	bhi.n	801adb0 <_scanf_float+0x134>
 801ad9c:	2b60      	cmp	r3, #96	; 0x60
 801ad9e:	d8b2      	bhi.n	801ad06 <_scanf_float+0x8a>
 801ada0:	2b54      	cmp	r3, #84	; 0x54
 801ada2:	d077      	beq.n	801ae94 <_scanf_float+0x218>
 801ada4:	2b59      	cmp	r3, #89	; 0x59
 801ada6:	d199      	bne.n	801acdc <_scanf_float+0x60>
 801ada8:	2d07      	cmp	r5, #7
 801adaa:	d197      	bne.n	801acdc <_scanf_float+0x60>
 801adac:	2508      	movs	r5, #8
 801adae:	e029      	b.n	801ae04 <_scanf_float+0x188>
 801adb0:	2b74      	cmp	r3, #116	; 0x74
 801adb2:	d06f      	beq.n	801ae94 <_scanf_float+0x218>
 801adb4:	2b79      	cmp	r3, #121	; 0x79
 801adb6:	e7f6      	b.n	801ada6 <_scanf_float+0x12a>
 801adb8:	6821      	ldr	r1, [r4, #0]
 801adba:	05c8      	lsls	r0, r1, #23
 801adbc:	d51a      	bpl.n	801adf4 <_scanf_float+0x178>
 801adbe:	9b02      	ldr	r3, [sp, #8]
 801adc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801adc4:	6021      	str	r1, [r4, #0]
 801adc6:	f109 0901 	add.w	r9, r9, #1
 801adca:	b11b      	cbz	r3, 801add4 <_scanf_float+0x158>
 801adcc:	3b01      	subs	r3, #1
 801adce:	3201      	adds	r2, #1
 801add0:	9302      	str	r3, [sp, #8]
 801add2:	60a2      	str	r2, [r4, #8]
 801add4:	68a3      	ldr	r3, [r4, #8]
 801add6:	3b01      	subs	r3, #1
 801add8:	60a3      	str	r3, [r4, #8]
 801adda:	6923      	ldr	r3, [r4, #16]
 801addc:	3301      	adds	r3, #1
 801adde:	6123      	str	r3, [r4, #16]
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	3b01      	subs	r3, #1
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	607b      	str	r3, [r7, #4]
 801ade8:	f340 8084 	ble.w	801aef4 <_scanf_float+0x278>
 801adec:	683b      	ldr	r3, [r7, #0]
 801adee:	3301      	adds	r3, #1
 801adf0:	603b      	str	r3, [r7, #0]
 801adf2:	e766      	b.n	801acc2 <_scanf_float+0x46>
 801adf4:	eb1a 0f05 	cmn.w	sl, r5
 801adf8:	f47f af70 	bne.w	801acdc <_scanf_float+0x60>
 801adfc:	6822      	ldr	r2, [r4, #0]
 801adfe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801ae02:	6022      	str	r2, [r4, #0]
 801ae04:	f806 3b01 	strb.w	r3, [r6], #1
 801ae08:	e7e4      	b.n	801add4 <_scanf_float+0x158>
 801ae0a:	6822      	ldr	r2, [r4, #0]
 801ae0c:	0610      	lsls	r0, r2, #24
 801ae0e:	f57f af65 	bpl.w	801acdc <_scanf_float+0x60>
 801ae12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ae16:	e7f4      	b.n	801ae02 <_scanf_float+0x186>
 801ae18:	f1ba 0f00 	cmp.w	sl, #0
 801ae1c:	d10e      	bne.n	801ae3c <_scanf_float+0x1c0>
 801ae1e:	f1b9 0f00 	cmp.w	r9, #0
 801ae22:	d10e      	bne.n	801ae42 <_scanf_float+0x1c6>
 801ae24:	6822      	ldr	r2, [r4, #0]
 801ae26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ae2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ae2e:	d108      	bne.n	801ae42 <_scanf_float+0x1c6>
 801ae30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ae34:	6022      	str	r2, [r4, #0]
 801ae36:	f04f 0a01 	mov.w	sl, #1
 801ae3a:	e7e3      	b.n	801ae04 <_scanf_float+0x188>
 801ae3c:	f1ba 0f02 	cmp.w	sl, #2
 801ae40:	d055      	beq.n	801aeee <_scanf_float+0x272>
 801ae42:	2d01      	cmp	r5, #1
 801ae44:	d002      	beq.n	801ae4c <_scanf_float+0x1d0>
 801ae46:	2d04      	cmp	r5, #4
 801ae48:	f47f af48 	bne.w	801acdc <_scanf_float+0x60>
 801ae4c:	3501      	adds	r5, #1
 801ae4e:	b2ed      	uxtb	r5, r5
 801ae50:	e7d8      	b.n	801ae04 <_scanf_float+0x188>
 801ae52:	f1ba 0f01 	cmp.w	sl, #1
 801ae56:	f47f af41 	bne.w	801acdc <_scanf_float+0x60>
 801ae5a:	f04f 0a02 	mov.w	sl, #2
 801ae5e:	e7d1      	b.n	801ae04 <_scanf_float+0x188>
 801ae60:	b97d      	cbnz	r5, 801ae82 <_scanf_float+0x206>
 801ae62:	f1b9 0f00 	cmp.w	r9, #0
 801ae66:	f47f af3c 	bne.w	801ace2 <_scanf_float+0x66>
 801ae6a:	6822      	ldr	r2, [r4, #0]
 801ae6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ae70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ae74:	f47f af39 	bne.w	801acea <_scanf_float+0x6e>
 801ae78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ae7c:	6022      	str	r2, [r4, #0]
 801ae7e:	2501      	movs	r5, #1
 801ae80:	e7c0      	b.n	801ae04 <_scanf_float+0x188>
 801ae82:	2d03      	cmp	r5, #3
 801ae84:	d0e2      	beq.n	801ae4c <_scanf_float+0x1d0>
 801ae86:	2d05      	cmp	r5, #5
 801ae88:	e7de      	b.n	801ae48 <_scanf_float+0x1cc>
 801ae8a:	2d02      	cmp	r5, #2
 801ae8c:	f47f af26 	bne.w	801acdc <_scanf_float+0x60>
 801ae90:	2503      	movs	r5, #3
 801ae92:	e7b7      	b.n	801ae04 <_scanf_float+0x188>
 801ae94:	2d06      	cmp	r5, #6
 801ae96:	f47f af21 	bne.w	801acdc <_scanf_float+0x60>
 801ae9a:	2507      	movs	r5, #7
 801ae9c:	e7b2      	b.n	801ae04 <_scanf_float+0x188>
 801ae9e:	6822      	ldr	r2, [r4, #0]
 801aea0:	0591      	lsls	r1, r2, #22
 801aea2:	f57f af1b 	bpl.w	801acdc <_scanf_float+0x60>
 801aea6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801aeaa:	6022      	str	r2, [r4, #0]
 801aeac:	f8cd 9004 	str.w	r9, [sp, #4]
 801aeb0:	e7a8      	b.n	801ae04 <_scanf_float+0x188>
 801aeb2:	6822      	ldr	r2, [r4, #0]
 801aeb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801aeb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801aebc:	d006      	beq.n	801aecc <_scanf_float+0x250>
 801aebe:	0550      	lsls	r0, r2, #21
 801aec0:	f57f af0c 	bpl.w	801acdc <_scanf_float+0x60>
 801aec4:	f1b9 0f00 	cmp.w	r9, #0
 801aec8:	f43f af0f 	beq.w	801acea <_scanf_float+0x6e>
 801aecc:	0591      	lsls	r1, r2, #22
 801aece:	bf58      	it	pl
 801aed0:	9901      	ldrpl	r1, [sp, #4]
 801aed2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aed6:	bf58      	it	pl
 801aed8:	eba9 0101 	subpl.w	r1, r9, r1
 801aedc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801aee0:	bf58      	it	pl
 801aee2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801aee6:	6022      	str	r2, [r4, #0]
 801aee8:	f04f 0900 	mov.w	r9, #0
 801aeec:	e78a      	b.n	801ae04 <_scanf_float+0x188>
 801aeee:	f04f 0a03 	mov.w	sl, #3
 801aef2:	e787      	b.n	801ae04 <_scanf_float+0x188>
 801aef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801aef8:	4639      	mov	r1, r7
 801aefa:	4640      	mov	r0, r8
 801aefc:	4798      	blx	r3
 801aefe:	2800      	cmp	r0, #0
 801af00:	f43f aedf 	beq.w	801acc2 <_scanf_float+0x46>
 801af04:	e6ea      	b.n	801acdc <_scanf_float+0x60>
 801af06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801af0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801af0e:	463a      	mov	r2, r7
 801af10:	4640      	mov	r0, r8
 801af12:	4798      	blx	r3
 801af14:	6923      	ldr	r3, [r4, #16]
 801af16:	3b01      	subs	r3, #1
 801af18:	6123      	str	r3, [r4, #16]
 801af1a:	e6ec      	b.n	801acf6 <_scanf_float+0x7a>
 801af1c:	1e6b      	subs	r3, r5, #1
 801af1e:	2b06      	cmp	r3, #6
 801af20:	d825      	bhi.n	801af6e <_scanf_float+0x2f2>
 801af22:	2d02      	cmp	r5, #2
 801af24:	d836      	bhi.n	801af94 <_scanf_float+0x318>
 801af26:	455e      	cmp	r6, fp
 801af28:	f67f aee8 	bls.w	801acfc <_scanf_float+0x80>
 801af2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801af30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801af34:	463a      	mov	r2, r7
 801af36:	4640      	mov	r0, r8
 801af38:	4798      	blx	r3
 801af3a:	6923      	ldr	r3, [r4, #16]
 801af3c:	3b01      	subs	r3, #1
 801af3e:	6123      	str	r3, [r4, #16]
 801af40:	e7f1      	b.n	801af26 <_scanf_float+0x2aa>
 801af42:	9802      	ldr	r0, [sp, #8]
 801af44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801af48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801af4c:	9002      	str	r0, [sp, #8]
 801af4e:	463a      	mov	r2, r7
 801af50:	4640      	mov	r0, r8
 801af52:	4798      	blx	r3
 801af54:	6923      	ldr	r3, [r4, #16]
 801af56:	3b01      	subs	r3, #1
 801af58:	6123      	str	r3, [r4, #16]
 801af5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801af5e:	fa5f fa8a 	uxtb.w	sl, sl
 801af62:	f1ba 0f02 	cmp.w	sl, #2
 801af66:	d1ec      	bne.n	801af42 <_scanf_float+0x2c6>
 801af68:	3d03      	subs	r5, #3
 801af6a:	b2ed      	uxtb	r5, r5
 801af6c:	1b76      	subs	r6, r6, r5
 801af6e:	6823      	ldr	r3, [r4, #0]
 801af70:	05da      	lsls	r2, r3, #23
 801af72:	d52f      	bpl.n	801afd4 <_scanf_float+0x358>
 801af74:	055b      	lsls	r3, r3, #21
 801af76:	d510      	bpl.n	801af9a <_scanf_float+0x31e>
 801af78:	455e      	cmp	r6, fp
 801af7a:	f67f aebf 	bls.w	801acfc <_scanf_float+0x80>
 801af7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801af82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801af86:	463a      	mov	r2, r7
 801af88:	4640      	mov	r0, r8
 801af8a:	4798      	blx	r3
 801af8c:	6923      	ldr	r3, [r4, #16]
 801af8e:	3b01      	subs	r3, #1
 801af90:	6123      	str	r3, [r4, #16]
 801af92:	e7f1      	b.n	801af78 <_scanf_float+0x2fc>
 801af94:	46aa      	mov	sl, r5
 801af96:	9602      	str	r6, [sp, #8]
 801af98:	e7df      	b.n	801af5a <_scanf_float+0x2de>
 801af9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801af9e:	6923      	ldr	r3, [r4, #16]
 801afa0:	2965      	cmp	r1, #101	; 0x65
 801afa2:	f103 33ff 	add.w	r3, r3, #4294967295
 801afa6:	f106 35ff 	add.w	r5, r6, #4294967295
 801afaa:	6123      	str	r3, [r4, #16]
 801afac:	d00c      	beq.n	801afc8 <_scanf_float+0x34c>
 801afae:	2945      	cmp	r1, #69	; 0x45
 801afb0:	d00a      	beq.n	801afc8 <_scanf_float+0x34c>
 801afb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801afb6:	463a      	mov	r2, r7
 801afb8:	4640      	mov	r0, r8
 801afba:	4798      	blx	r3
 801afbc:	6923      	ldr	r3, [r4, #16]
 801afbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801afc2:	3b01      	subs	r3, #1
 801afc4:	1eb5      	subs	r5, r6, #2
 801afc6:	6123      	str	r3, [r4, #16]
 801afc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801afcc:	463a      	mov	r2, r7
 801afce:	4640      	mov	r0, r8
 801afd0:	4798      	blx	r3
 801afd2:	462e      	mov	r6, r5
 801afd4:	6825      	ldr	r5, [r4, #0]
 801afd6:	f015 0510 	ands.w	r5, r5, #16
 801afda:	d159      	bne.n	801b090 <_scanf_float+0x414>
 801afdc:	7035      	strb	r5, [r6, #0]
 801afde:	6823      	ldr	r3, [r4, #0]
 801afe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801afe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801afe8:	d11b      	bne.n	801b022 <_scanf_float+0x3a6>
 801afea:	9b01      	ldr	r3, [sp, #4]
 801afec:	454b      	cmp	r3, r9
 801afee:	eba3 0209 	sub.w	r2, r3, r9
 801aff2:	d123      	bne.n	801b03c <_scanf_float+0x3c0>
 801aff4:	2200      	movs	r2, #0
 801aff6:	4659      	mov	r1, fp
 801aff8:	4640      	mov	r0, r8
 801affa:	f000 fedb 	bl	801bdb4 <_strtod_r>
 801affe:	6822      	ldr	r2, [r4, #0]
 801b000:	9b03      	ldr	r3, [sp, #12]
 801b002:	f012 0f02 	tst.w	r2, #2
 801b006:	ec57 6b10 	vmov	r6, r7, d0
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	d021      	beq.n	801b052 <_scanf_float+0x3d6>
 801b00e:	9903      	ldr	r1, [sp, #12]
 801b010:	1d1a      	adds	r2, r3, #4
 801b012:	600a      	str	r2, [r1, #0]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	e9c3 6700 	strd	r6, r7, [r3]
 801b01a:	68e3      	ldr	r3, [r4, #12]
 801b01c:	3301      	adds	r3, #1
 801b01e:	60e3      	str	r3, [r4, #12]
 801b020:	e66d      	b.n	801acfe <_scanf_float+0x82>
 801b022:	9b04      	ldr	r3, [sp, #16]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d0e5      	beq.n	801aff4 <_scanf_float+0x378>
 801b028:	9905      	ldr	r1, [sp, #20]
 801b02a:	230a      	movs	r3, #10
 801b02c:	462a      	mov	r2, r5
 801b02e:	3101      	adds	r1, #1
 801b030:	4640      	mov	r0, r8
 801b032:	f000 ff47 	bl	801bec4 <_strtol_r>
 801b036:	9b04      	ldr	r3, [sp, #16]
 801b038:	9e05      	ldr	r6, [sp, #20]
 801b03a:	1ac2      	subs	r2, r0, r3
 801b03c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b040:	429e      	cmp	r6, r3
 801b042:	bf28      	it	cs
 801b044:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b048:	4912      	ldr	r1, [pc, #72]	; (801b094 <_scanf_float+0x418>)
 801b04a:	4630      	mov	r0, r6
 801b04c:	f000 f870 	bl	801b130 <siprintf>
 801b050:	e7d0      	b.n	801aff4 <_scanf_float+0x378>
 801b052:	9903      	ldr	r1, [sp, #12]
 801b054:	f012 0f04 	tst.w	r2, #4
 801b058:	f103 0204 	add.w	r2, r3, #4
 801b05c:	600a      	str	r2, [r1, #0]
 801b05e:	d1d9      	bne.n	801b014 <_scanf_float+0x398>
 801b060:	f8d3 8000 	ldr.w	r8, [r3]
 801b064:	ee10 2a10 	vmov	r2, s0
 801b068:	ee10 0a10 	vmov	r0, s0
 801b06c:	463b      	mov	r3, r7
 801b06e:	4639      	mov	r1, r7
 801b070:	f7e5 fd74 	bl	8000b5c <__aeabi_dcmpun>
 801b074:	b128      	cbz	r0, 801b082 <_scanf_float+0x406>
 801b076:	4808      	ldr	r0, [pc, #32]	; (801b098 <_scanf_float+0x41c>)
 801b078:	f000 f820 	bl	801b0bc <nanf>
 801b07c:	ed88 0a00 	vstr	s0, [r8]
 801b080:	e7cb      	b.n	801b01a <_scanf_float+0x39e>
 801b082:	4630      	mov	r0, r6
 801b084:	4639      	mov	r1, r7
 801b086:	f7e5 fdc7 	bl	8000c18 <__aeabi_d2f>
 801b08a:	f8c8 0000 	str.w	r0, [r8]
 801b08e:	e7c4      	b.n	801b01a <_scanf_float+0x39e>
 801b090:	2500      	movs	r5, #0
 801b092:	e634      	b.n	801acfe <_scanf_float+0x82>
 801b094:	080741ac 	.word	0x080741ac
 801b098:	080745b8 	.word	0x080745b8

0801b09c <_sbrk_r>:
 801b09c:	b538      	push	{r3, r4, r5, lr}
 801b09e:	4d06      	ldr	r5, [pc, #24]	; (801b0b8 <_sbrk_r+0x1c>)
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	4604      	mov	r4, r0
 801b0a4:	4608      	mov	r0, r1
 801b0a6:	602b      	str	r3, [r5, #0]
 801b0a8:	f7e8 f932 	bl	8003310 <_sbrk>
 801b0ac:	1c43      	adds	r3, r0, #1
 801b0ae:	d102      	bne.n	801b0b6 <_sbrk_r+0x1a>
 801b0b0:	682b      	ldr	r3, [r5, #0]
 801b0b2:	b103      	cbz	r3, 801b0b6 <_sbrk_r+0x1a>
 801b0b4:	6023      	str	r3, [r4, #0]
 801b0b6:	bd38      	pop	{r3, r4, r5, pc}
 801b0b8:	20004240 	.word	0x20004240

0801b0bc <nanf>:
 801b0bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b0c4 <nanf+0x8>
 801b0c0:	4770      	bx	lr
 801b0c2:	bf00      	nop
 801b0c4:	7fc00000 	.word	0x7fc00000

0801b0c8 <sniprintf>:
 801b0c8:	b40c      	push	{r2, r3}
 801b0ca:	b530      	push	{r4, r5, lr}
 801b0cc:	4b17      	ldr	r3, [pc, #92]	; (801b12c <sniprintf+0x64>)
 801b0ce:	1e0c      	subs	r4, r1, #0
 801b0d0:	681d      	ldr	r5, [r3, #0]
 801b0d2:	b09d      	sub	sp, #116	; 0x74
 801b0d4:	da08      	bge.n	801b0e8 <sniprintf+0x20>
 801b0d6:	238b      	movs	r3, #139	; 0x8b
 801b0d8:	602b      	str	r3, [r5, #0]
 801b0da:	f04f 30ff 	mov.w	r0, #4294967295
 801b0de:	b01d      	add	sp, #116	; 0x74
 801b0e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b0e4:	b002      	add	sp, #8
 801b0e6:	4770      	bx	lr
 801b0e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b0ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b0f0:	bf14      	ite	ne
 801b0f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b0f6:	4623      	moveq	r3, r4
 801b0f8:	9304      	str	r3, [sp, #16]
 801b0fa:	9307      	str	r3, [sp, #28]
 801b0fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b100:	9002      	str	r0, [sp, #8]
 801b102:	9006      	str	r0, [sp, #24]
 801b104:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b108:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b10a:	ab21      	add	r3, sp, #132	; 0x84
 801b10c:	a902      	add	r1, sp, #8
 801b10e:	4628      	mov	r0, r5
 801b110:	9301      	str	r3, [sp, #4]
 801b112:	f002 fe31 	bl	801dd78 <_svfiprintf_r>
 801b116:	1c43      	adds	r3, r0, #1
 801b118:	bfbc      	itt	lt
 801b11a:	238b      	movlt	r3, #139	; 0x8b
 801b11c:	602b      	strlt	r3, [r5, #0]
 801b11e:	2c00      	cmp	r4, #0
 801b120:	d0dd      	beq.n	801b0de <sniprintf+0x16>
 801b122:	9b02      	ldr	r3, [sp, #8]
 801b124:	2200      	movs	r2, #0
 801b126:	701a      	strb	r2, [r3, #0]
 801b128:	e7d9      	b.n	801b0de <sniprintf+0x16>
 801b12a:	bf00      	nop
 801b12c:	20000928 	.word	0x20000928

0801b130 <siprintf>:
 801b130:	b40e      	push	{r1, r2, r3}
 801b132:	b500      	push	{lr}
 801b134:	b09c      	sub	sp, #112	; 0x70
 801b136:	ab1d      	add	r3, sp, #116	; 0x74
 801b138:	9002      	str	r0, [sp, #8]
 801b13a:	9006      	str	r0, [sp, #24]
 801b13c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b140:	4809      	ldr	r0, [pc, #36]	; (801b168 <siprintf+0x38>)
 801b142:	9107      	str	r1, [sp, #28]
 801b144:	9104      	str	r1, [sp, #16]
 801b146:	4909      	ldr	r1, [pc, #36]	; (801b16c <siprintf+0x3c>)
 801b148:	f853 2b04 	ldr.w	r2, [r3], #4
 801b14c:	9105      	str	r1, [sp, #20]
 801b14e:	6800      	ldr	r0, [r0, #0]
 801b150:	9301      	str	r3, [sp, #4]
 801b152:	a902      	add	r1, sp, #8
 801b154:	f002 fe10 	bl	801dd78 <_svfiprintf_r>
 801b158:	9b02      	ldr	r3, [sp, #8]
 801b15a:	2200      	movs	r2, #0
 801b15c:	701a      	strb	r2, [r3, #0]
 801b15e:	b01c      	add	sp, #112	; 0x70
 801b160:	f85d eb04 	ldr.w	lr, [sp], #4
 801b164:	b003      	add	sp, #12
 801b166:	4770      	bx	lr
 801b168:	20000928 	.word	0x20000928
 801b16c:	ffff0208 	.word	0xffff0208

0801b170 <sulp>:
 801b170:	b570      	push	{r4, r5, r6, lr}
 801b172:	4604      	mov	r4, r0
 801b174:	460d      	mov	r5, r1
 801b176:	ec45 4b10 	vmov	d0, r4, r5
 801b17a:	4616      	mov	r6, r2
 801b17c:	f002 fc22 	bl	801d9c4 <__ulp>
 801b180:	ec51 0b10 	vmov	r0, r1, d0
 801b184:	b17e      	cbz	r6, 801b1a6 <sulp+0x36>
 801b186:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801b18a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b18e:	2b00      	cmp	r3, #0
 801b190:	dd09      	ble.n	801b1a6 <sulp+0x36>
 801b192:	051b      	lsls	r3, r3, #20
 801b194:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801b198:	2400      	movs	r4, #0
 801b19a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801b19e:	4622      	mov	r2, r4
 801b1a0:	462b      	mov	r3, r5
 801b1a2:	f7e5 fa41 	bl	8000628 <__aeabi_dmul>
 801b1a6:	bd70      	pop	{r4, r5, r6, pc}

0801b1a8 <_strtod_l>:
 801b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ac:	ed2d 8b02 	vpush	{d8}
 801b1b0:	b09d      	sub	sp, #116	; 0x74
 801b1b2:	461f      	mov	r7, r3
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	9318      	str	r3, [sp, #96]	; 0x60
 801b1b8:	4ba2      	ldr	r3, [pc, #648]	; (801b444 <_strtod_l+0x29c>)
 801b1ba:	9213      	str	r2, [sp, #76]	; 0x4c
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	9305      	str	r3, [sp, #20]
 801b1c0:	4604      	mov	r4, r0
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	4688      	mov	r8, r1
 801b1c6:	f7e5 f81b 	bl	8000200 <strlen>
 801b1ca:	f04f 0a00 	mov.w	sl, #0
 801b1ce:	4605      	mov	r5, r0
 801b1d0:	f04f 0b00 	mov.w	fp, #0
 801b1d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b1d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b1da:	781a      	ldrb	r2, [r3, #0]
 801b1dc:	2a2b      	cmp	r2, #43	; 0x2b
 801b1de:	d04e      	beq.n	801b27e <_strtod_l+0xd6>
 801b1e0:	d83b      	bhi.n	801b25a <_strtod_l+0xb2>
 801b1e2:	2a0d      	cmp	r2, #13
 801b1e4:	d834      	bhi.n	801b250 <_strtod_l+0xa8>
 801b1e6:	2a08      	cmp	r2, #8
 801b1e8:	d834      	bhi.n	801b254 <_strtod_l+0xac>
 801b1ea:	2a00      	cmp	r2, #0
 801b1ec:	d03e      	beq.n	801b26c <_strtod_l+0xc4>
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	930a      	str	r3, [sp, #40]	; 0x28
 801b1f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801b1f4:	7833      	ldrb	r3, [r6, #0]
 801b1f6:	2b30      	cmp	r3, #48	; 0x30
 801b1f8:	f040 80b0 	bne.w	801b35c <_strtod_l+0x1b4>
 801b1fc:	7873      	ldrb	r3, [r6, #1]
 801b1fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b202:	2b58      	cmp	r3, #88	; 0x58
 801b204:	d168      	bne.n	801b2d8 <_strtod_l+0x130>
 801b206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b208:	9301      	str	r3, [sp, #4]
 801b20a:	ab18      	add	r3, sp, #96	; 0x60
 801b20c:	9702      	str	r7, [sp, #8]
 801b20e:	9300      	str	r3, [sp, #0]
 801b210:	4a8d      	ldr	r2, [pc, #564]	; (801b448 <_strtod_l+0x2a0>)
 801b212:	ab19      	add	r3, sp, #100	; 0x64
 801b214:	a917      	add	r1, sp, #92	; 0x5c
 801b216:	4620      	mov	r0, r4
 801b218:	f001 fd38 	bl	801cc8c <__gethex>
 801b21c:	f010 0707 	ands.w	r7, r0, #7
 801b220:	4605      	mov	r5, r0
 801b222:	d005      	beq.n	801b230 <_strtod_l+0x88>
 801b224:	2f06      	cmp	r7, #6
 801b226:	d12c      	bne.n	801b282 <_strtod_l+0xda>
 801b228:	3601      	adds	r6, #1
 801b22a:	2300      	movs	r3, #0
 801b22c:	9617      	str	r6, [sp, #92]	; 0x5c
 801b22e:	930a      	str	r3, [sp, #40]	; 0x28
 801b230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b232:	2b00      	cmp	r3, #0
 801b234:	f040 8590 	bne.w	801bd58 <_strtod_l+0xbb0>
 801b238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b23a:	b1eb      	cbz	r3, 801b278 <_strtod_l+0xd0>
 801b23c:	4652      	mov	r2, sl
 801b23e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b242:	ec43 2b10 	vmov	d0, r2, r3
 801b246:	b01d      	add	sp, #116	; 0x74
 801b248:	ecbd 8b02 	vpop	{d8}
 801b24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b250:	2a20      	cmp	r2, #32
 801b252:	d1cc      	bne.n	801b1ee <_strtod_l+0x46>
 801b254:	3301      	adds	r3, #1
 801b256:	9317      	str	r3, [sp, #92]	; 0x5c
 801b258:	e7be      	b.n	801b1d8 <_strtod_l+0x30>
 801b25a:	2a2d      	cmp	r2, #45	; 0x2d
 801b25c:	d1c7      	bne.n	801b1ee <_strtod_l+0x46>
 801b25e:	2201      	movs	r2, #1
 801b260:	920a      	str	r2, [sp, #40]	; 0x28
 801b262:	1c5a      	adds	r2, r3, #1
 801b264:	9217      	str	r2, [sp, #92]	; 0x5c
 801b266:	785b      	ldrb	r3, [r3, #1]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d1c2      	bne.n	801b1f2 <_strtod_l+0x4a>
 801b26c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b26e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b272:	2b00      	cmp	r3, #0
 801b274:	f040 856e 	bne.w	801bd54 <_strtod_l+0xbac>
 801b278:	4652      	mov	r2, sl
 801b27a:	465b      	mov	r3, fp
 801b27c:	e7e1      	b.n	801b242 <_strtod_l+0x9a>
 801b27e:	2200      	movs	r2, #0
 801b280:	e7ee      	b.n	801b260 <_strtod_l+0xb8>
 801b282:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b284:	b13a      	cbz	r2, 801b296 <_strtod_l+0xee>
 801b286:	2135      	movs	r1, #53	; 0x35
 801b288:	a81a      	add	r0, sp, #104	; 0x68
 801b28a:	f002 fca6 	bl	801dbda <__copybits>
 801b28e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b290:	4620      	mov	r0, r4
 801b292:	f002 f865 	bl	801d360 <_Bfree>
 801b296:	3f01      	subs	r7, #1
 801b298:	2f04      	cmp	r7, #4
 801b29a:	d806      	bhi.n	801b2aa <_strtod_l+0x102>
 801b29c:	e8df f007 	tbb	[pc, r7]
 801b2a0:	1714030a 	.word	0x1714030a
 801b2a4:	0a          	.byte	0x0a
 801b2a5:	00          	.byte	0x00
 801b2a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801b2aa:	0728      	lsls	r0, r5, #28
 801b2ac:	d5c0      	bpl.n	801b230 <_strtod_l+0x88>
 801b2ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801b2b2:	e7bd      	b.n	801b230 <_strtod_l+0x88>
 801b2b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801b2b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b2ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801b2be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b2c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801b2c6:	e7f0      	b.n	801b2aa <_strtod_l+0x102>
 801b2c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801b44c <_strtod_l+0x2a4>
 801b2cc:	e7ed      	b.n	801b2aa <_strtod_l+0x102>
 801b2ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801b2d2:	f04f 3aff 	mov.w	sl, #4294967295
 801b2d6:	e7e8      	b.n	801b2aa <_strtod_l+0x102>
 801b2d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2da:	1c5a      	adds	r2, r3, #1
 801b2dc:	9217      	str	r2, [sp, #92]	; 0x5c
 801b2de:	785b      	ldrb	r3, [r3, #1]
 801b2e0:	2b30      	cmp	r3, #48	; 0x30
 801b2e2:	d0f9      	beq.n	801b2d8 <_strtod_l+0x130>
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d0a3      	beq.n	801b230 <_strtod_l+0x88>
 801b2e8:	2301      	movs	r3, #1
 801b2ea:	f04f 0900 	mov.w	r9, #0
 801b2ee:	9304      	str	r3, [sp, #16]
 801b2f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b2f2:	9308      	str	r3, [sp, #32]
 801b2f4:	f8cd 901c 	str.w	r9, [sp, #28]
 801b2f8:	464f      	mov	r7, r9
 801b2fa:	220a      	movs	r2, #10
 801b2fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801b2fe:	7806      	ldrb	r6, [r0, #0]
 801b300:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801b304:	b2d9      	uxtb	r1, r3
 801b306:	2909      	cmp	r1, #9
 801b308:	d92a      	bls.n	801b360 <_strtod_l+0x1b8>
 801b30a:	9905      	ldr	r1, [sp, #20]
 801b30c:	462a      	mov	r2, r5
 801b30e:	f002 fe3b 	bl	801df88 <strncmp>
 801b312:	b398      	cbz	r0, 801b37c <_strtod_l+0x1d4>
 801b314:	2000      	movs	r0, #0
 801b316:	4632      	mov	r2, r6
 801b318:	463d      	mov	r5, r7
 801b31a:	9005      	str	r0, [sp, #20]
 801b31c:	4603      	mov	r3, r0
 801b31e:	2a65      	cmp	r2, #101	; 0x65
 801b320:	d001      	beq.n	801b326 <_strtod_l+0x17e>
 801b322:	2a45      	cmp	r2, #69	; 0x45
 801b324:	d118      	bne.n	801b358 <_strtod_l+0x1b0>
 801b326:	b91d      	cbnz	r5, 801b330 <_strtod_l+0x188>
 801b328:	9a04      	ldr	r2, [sp, #16]
 801b32a:	4302      	orrs	r2, r0
 801b32c:	d09e      	beq.n	801b26c <_strtod_l+0xc4>
 801b32e:	2500      	movs	r5, #0
 801b330:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801b334:	f108 0201 	add.w	r2, r8, #1
 801b338:	9217      	str	r2, [sp, #92]	; 0x5c
 801b33a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b33e:	2a2b      	cmp	r2, #43	; 0x2b
 801b340:	d075      	beq.n	801b42e <_strtod_l+0x286>
 801b342:	2a2d      	cmp	r2, #45	; 0x2d
 801b344:	d07b      	beq.n	801b43e <_strtod_l+0x296>
 801b346:	f04f 0c00 	mov.w	ip, #0
 801b34a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801b34e:	2909      	cmp	r1, #9
 801b350:	f240 8082 	bls.w	801b458 <_strtod_l+0x2b0>
 801b354:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801b358:	2600      	movs	r6, #0
 801b35a:	e09d      	b.n	801b498 <_strtod_l+0x2f0>
 801b35c:	2300      	movs	r3, #0
 801b35e:	e7c4      	b.n	801b2ea <_strtod_l+0x142>
 801b360:	2f08      	cmp	r7, #8
 801b362:	bfd8      	it	le
 801b364:	9907      	ldrle	r1, [sp, #28]
 801b366:	f100 0001 	add.w	r0, r0, #1
 801b36a:	bfda      	itte	le
 801b36c:	fb02 3301 	mlale	r3, r2, r1, r3
 801b370:	9307      	strle	r3, [sp, #28]
 801b372:	fb02 3909 	mlagt	r9, r2, r9, r3
 801b376:	3701      	adds	r7, #1
 801b378:	9017      	str	r0, [sp, #92]	; 0x5c
 801b37a:	e7bf      	b.n	801b2fc <_strtod_l+0x154>
 801b37c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b37e:	195a      	adds	r2, r3, r5
 801b380:	9217      	str	r2, [sp, #92]	; 0x5c
 801b382:	5d5a      	ldrb	r2, [r3, r5]
 801b384:	2f00      	cmp	r7, #0
 801b386:	d037      	beq.n	801b3f8 <_strtod_l+0x250>
 801b388:	9005      	str	r0, [sp, #20]
 801b38a:	463d      	mov	r5, r7
 801b38c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801b390:	2b09      	cmp	r3, #9
 801b392:	d912      	bls.n	801b3ba <_strtod_l+0x212>
 801b394:	2301      	movs	r3, #1
 801b396:	e7c2      	b.n	801b31e <_strtod_l+0x176>
 801b398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b39a:	1c5a      	adds	r2, r3, #1
 801b39c:	9217      	str	r2, [sp, #92]	; 0x5c
 801b39e:	785a      	ldrb	r2, [r3, #1]
 801b3a0:	3001      	adds	r0, #1
 801b3a2:	2a30      	cmp	r2, #48	; 0x30
 801b3a4:	d0f8      	beq.n	801b398 <_strtod_l+0x1f0>
 801b3a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801b3aa:	2b08      	cmp	r3, #8
 801b3ac:	f200 84d9 	bhi.w	801bd62 <_strtod_l+0xbba>
 801b3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3b2:	9005      	str	r0, [sp, #20]
 801b3b4:	2000      	movs	r0, #0
 801b3b6:	9308      	str	r3, [sp, #32]
 801b3b8:	4605      	mov	r5, r0
 801b3ba:	3a30      	subs	r2, #48	; 0x30
 801b3bc:	f100 0301 	add.w	r3, r0, #1
 801b3c0:	d014      	beq.n	801b3ec <_strtod_l+0x244>
 801b3c2:	9905      	ldr	r1, [sp, #20]
 801b3c4:	4419      	add	r1, r3
 801b3c6:	9105      	str	r1, [sp, #20]
 801b3c8:	462b      	mov	r3, r5
 801b3ca:	eb00 0e05 	add.w	lr, r0, r5
 801b3ce:	210a      	movs	r1, #10
 801b3d0:	4573      	cmp	r3, lr
 801b3d2:	d113      	bne.n	801b3fc <_strtod_l+0x254>
 801b3d4:	182b      	adds	r3, r5, r0
 801b3d6:	2b08      	cmp	r3, #8
 801b3d8:	f105 0501 	add.w	r5, r5, #1
 801b3dc:	4405      	add	r5, r0
 801b3de:	dc1c      	bgt.n	801b41a <_strtod_l+0x272>
 801b3e0:	9907      	ldr	r1, [sp, #28]
 801b3e2:	230a      	movs	r3, #10
 801b3e4:	fb03 2301 	mla	r3, r3, r1, r2
 801b3e8:	9307      	str	r3, [sp, #28]
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b3ee:	1c51      	adds	r1, r2, #1
 801b3f0:	9117      	str	r1, [sp, #92]	; 0x5c
 801b3f2:	7852      	ldrb	r2, [r2, #1]
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	e7c9      	b.n	801b38c <_strtod_l+0x1e4>
 801b3f8:	4638      	mov	r0, r7
 801b3fa:	e7d2      	b.n	801b3a2 <_strtod_l+0x1fa>
 801b3fc:	2b08      	cmp	r3, #8
 801b3fe:	dc04      	bgt.n	801b40a <_strtod_l+0x262>
 801b400:	9e07      	ldr	r6, [sp, #28]
 801b402:	434e      	muls	r6, r1
 801b404:	9607      	str	r6, [sp, #28]
 801b406:	3301      	adds	r3, #1
 801b408:	e7e2      	b.n	801b3d0 <_strtod_l+0x228>
 801b40a:	f103 0c01 	add.w	ip, r3, #1
 801b40e:	f1bc 0f10 	cmp.w	ip, #16
 801b412:	bfd8      	it	le
 801b414:	fb01 f909 	mulle.w	r9, r1, r9
 801b418:	e7f5      	b.n	801b406 <_strtod_l+0x25e>
 801b41a:	2d10      	cmp	r5, #16
 801b41c:	bfdc      	itt	le
 801b41e:	230a      	movle	r3, #10
 801b420:	fb03 2909 	mlale	r9, r3, r9, r2
 801b424:	e7e1      	b.n	801b3ea <_strtod_l+0x242>
 801b426:	2300      	movs	r3, #0
 801b428:	9305      	str	r3, [sp, #20]
 801b42a:	2301      	movs	r3, #1
 801b42c:	e77c      	b.n	801b328 <_strtod_l+0x180>
 801b42e:	f04f 0c00 	mov.w	ip, #0
 801b432:	f108 0202 	add.w	r2, r8, #2
 801b436:	9217      	str	r2, [sp, #92]	; 0x5c
 801b438:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b43c:	e785      	b.n	801b34a <_strtod_l+0x1a2>
 801b43e:	f04f 0c01 	mov.w	ip, #1
 801b442:	e7f6      	b.n	801b432 <_strtod_l+0x28a>
 801b444:	08074400 	.word	0x08074400
 801b448:	080741b4 	.word	0x080741b4
 801b44c:	7ff00000 	.word	0x7ff00000
 801b450:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b452:	1c51      	adds	r1, r2, #1
 801b454:	9117      	str	r1, [sp, #92]	; 0x5c
 801b456:	7852      	ldrb	r2, [r2, #1]
 801b458:	2a30      	cmp	r2, #48	; 0x30
 801b45a:	d0f9      	beq.n	801b450 <_strtod_l+0x2a8>
 801b45c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801b460:	2908      	cmp	r1, #8
 801b462:	f63f af79 	bhi.w	801b358 <_strtod_l+0x1b0>
 801b466:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801b46a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b46c:	9206      	str	r2, [sp, #24]
 801b46e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b470:	1c51      	adds	r1, r2, #1
 801b472:	9117      	str	r1, [sp, #92]	; 0x5c
 801b474:	7852      	ldrb	r2, [r2, #1]
 801b476:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801b47a:	2e09      	cmp	r6, #9
 801b47c:	d937      	bls.n	801b4ee <_strtod_l+0x346>
 801b47e:	9e06      	ldr	r6, [sp, #24]
 801b480:	1b89      	subs	r1, r1, r6
 801b482:	2908      	cmp	r1, #8
 801b484:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b488:	dc02      	bgt.n	801b490 <_strtod_l+0x2e8>
 801b48a:	4576      	cmp	r6, lr
 801b48c:	bfa8      	it	ge
 801b48e:	4676      	movge	r6, lr
 801b490:	f1bc 0f00 	cmp.w	ip, #0
 801b494:	d000      	beq.n	801b498 <_strtod_l+0x2f0>
 801b496:	4276      	negs	r6, r6
 801b498:	2d00      	cmp	r5, #0
 801b49a:	d14d      	bne.n	801b538 <_strtod_l+0x390>
 801b49c:	9904      	ldr	r1, [sp, #16]
 801b49e:	4301      	orrs	r1, r0
 801b4a0:	f47f aec6 	bne.w	801b230 <_strtod_l+0x88>
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	f47f aee1 	bne.w	801b26c <_strtod_l+0xc4>
 801b4aa:	2a69      	cmp	r2, #105	; 0x69
 801b4ac:	d027      	beq.n	801b4fe <_strtod_l+0x356>
 801b4ae:	dc24      	bgt.n	801b4fa <_strtod_l+0x352>
 801b4b0:	2a49      	cmp	r2, #73	; 0x49
 801b4b2:	d024      	beq.n	801b4fe <_strtod_l+0x356>
 801b4b4:	2a4e      	cmp	r2, #78	; 0x4e
 801b4b6:	f47f aed9 	bne.w	801b26c <_strtod_l+0xc4>
 801b4ba:	499f      	ldr	r1, [pc, #636]	; (801b738 <_strtod_l+0x590>)
 801b4bc:	a817      	add	r0, sp, #92	; 0x5c
 801b4be:	f001 fe3d 	bl	801d13c <__match>
 801b4c2:	2800      	cmp	r0, #0
 801b4c4:	f43f aed2 	beq.w	801b26c <_strtod_l+0xc4>
 801b4c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4ca:	781b      	ldrb	r3, [r3, #0]
 801b4cc:	2b28      	cmp	r3, #40	; 0x28
 801b4ce:	d12d      	bne.n	801b52c <_strtod_l+0x384>
 801b4d0:	499a      	ldr	r1, [pc, #616]	; (801b73c <_strtod_l+0x594>)
 801b4d2:	aa1a      	add	r2, sp, #104	; 0x68
 801b4d4:	a817      	add	r0, sp, #92	; 0x5c
 801b4d6:	f001 fe45 	bl	801d164 <__hexnan>
 801b4da:	2805      	cmp	r0, #5
 801b4dc:	d126      	bne.n	801b52c <_strtod_l+0x384>
 801b4de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b4e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801b4e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b4e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b4ec:	e6a0      	b.n	801b230 <_strtod_l+0x88>
 801b4ee:	210a      	movs	r1, #10
 801b4f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 801b4f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b4f8:	e7b9      	b.n	801b46e <_strtod_l+0x2c6>
 801b4fa:	2a6e      	cmp	r2, #110	; 0x6e
 801b4fc:	e7db      	b.n	801b4b6 <_strtod_l+0x30e>
 801b4fe:	4990      	ldr	r1, [pc, #576]	; (801b740 <_strtod_l+0x598>)
 801b500:	a817      	add	r0, sp, #92	; 0x5c
 801b502:	f001 fe1b 	bl	801d13c <__match>
 801b506:	2800      	cmp	r0, #0
 801b508:	f43f aeb0 	beq.w	801b26c <_strtod_l+0xc4>
 801b50c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b50e:	498d      	ldr	r1, [pc, #564]	; (801b744 <_strtod_l+0x59c>)
 801b510:	3b01      	subs	r3, #1
 801b512:	a817      	add	r0, sp, #92	; 0x5c
 801b514:	9317      	str	r3, [sp, #92]	; 0x5c
 801b516:	f001 fe11 	bl	801d13c <__match>
 801b51a:	b910      	cbnz	r0, 801b522 <_strtod_l+0x37a>
 801b51c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b51e:	3301      	adds	r3, #1
 801b520:	9317      	str	r3, [sp, #92]	; 0x5c
 801b522:	f8df b230 	ldr.w	fp, [pc, #560]	; 801b754 <_strtod_l+0x5ac>
 801b526:	f04f 0a00 	mov.w	sl, #0
 801b52a:	e681      	b.n	801b230 <_strtod_l+0x88>
 801b52c:	4886      	ldr	r0, [pc, #536]	; (801b748 <_strtod_l+0x5a0>)
 801b52e:	f002 fd23 	bl	801df78 <nan>
 801b532:	ec5b ab10 	vmov	sl, fp, d0
 801b536:	e67b      	b.n	801b230 <_strtod_l+0x88>
 801b538:	9b05      	ldr	r3, [sp, #20]
 801b53a:	9807      	ldr	r0, [sp, #28]
 801b53c:	1af3      	subs	r3, r6, r3
 801b53e:	2f00      	cmp	r7, #0
 801b540:	bf08      	it	eq
 801b542:	462f      	moveq	r7, r5
 801b544:	2d10      	cmp	r5, #16
 801b546:	9306      	str	r3, [sp, #24]
 801b548:	46a8      	mov	r8, r5
 801b54a:	bfa8      	it	ge
 801b54c:	f04f 0810 	movge.w	r8, #16
 801b550:	f7e4 fff0 	bl	8000534 <__aeabi_ui2d>
 801b554:	2d09      	cmp	r5, #9
 801b556:	4682      	mov	sl, r0
 801b558:	468b      	mov	fp, r1
 801b55a:	dd13      	ble.n	801b584 <_strtod_l+0x3dc>
 801b55c:	4b7b      	ldr	r3, [pc, #492]	; (801b74c <_strtod_l+0x5a4>)
 801b55e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b562:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b566:	f7e5 f85f 	bl	8000628 <__aeabi_dmul>
 801b56a:	4682      	mov	sl, r0
 801b56c:	4648      	mov	r0, r9
 801b56e:	468b      	mov	fp, r1
 801b570:	f7e4 ffe0 	bl	8000534 <__aeabi_ui2d>
 801b574:	4602      	mov	r2, r0
 801b576:	460b      	mov	r3, r1
 801b578:	4650      	mov	r0, sl
 801b57a:	4659      	mov	r1, fp
 801b57c:	f7e4 fe9e 	bl	80002bc <__adddf3>
 801b580:	4682      	mov	sl, r0
 801b582:	468b      	mov	fp, r1
 801b584:	2d0f      	cmp	r5, #15
 801b586:	dc38      	bgt.n	801b5fa <_strtod_l+0x452>
 801b588:	9b06      	ldr	r3, [sp, #24]
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	f43f ae50 	beq.w	801b230 <_strtod_l+0x88>
 801b590:	dd24      	ble.n	801b5dc <_strtod_l+0x434>
 801b592:	2b16      	cmp	r3, #22
 801b594:	dc0b      	bgt.n	801b5ae <_strtod_l+0x406>
 801b596:	496d      	ldr	r1, [pc, #436]	; (801b74c <_strtod_l+0x5a4>)
 801b598:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5a0:	4652      	mov	r2, sl
 801b5a2:	465b      	mov	r3, fp
 801b5a4:	f7e5 f840 	bl	8000628 <__aeabi_dmul>
 801b5a8:	4682      	mov	sl, r0
 801b5aa:	468b      	mov	fp, r1
 801b5ac:	e640      	b.n	801b230 <_strtod_l+0x88>
 801b5ae:	9a06      	ldr	r2, [sp, #24]
 801b5b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b5b4:	4293      	cmp	r3, r2
 801b5b6:	db20      	blt.n	801b5fa <_strtod_l+0x452>
 801b5b8:	4c64      	ldr	r4, [pc, #400]	; (801b74c <_strtod_l+0x5a4>)
 801b5ba:	f1c5 050f 	rsb	r5, r5, #15
 801b5be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b5c2:	4652      	mov	r2, sl
 801b5c4:	465b      	mov	r3, fp
 801b5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b5ca:	f7e5 f82d 	bl	8000628 <__aeabi_dmul>
 801b5ce:	9b06      	ldr	r3, [sp, #24]
 801b5d0:	1b5d      	subs	r5, r3, r5
 801b5d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b5d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b5da:	e7e3      	b.n	801b5a4 <_strtod_l+0x3fc>
 801b5dc:	9b06      	ldr	r3, [sp, #24]
 801b5de:	3316      	adds	r3, #22
 801b5e0:	db0b      	blt.n	801b5fa <_strtod_l+0x452>
 801b5e2:	9b05      	ldr	r3, [sp, #20]
 801b5e4:	1b9e      	subs	r6, r3, r6
 801b5e6:	4b59      	ldr	r3, [pc, #356]	; (801b74c <_strtod_l+0x5a4>)
 801b5e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801b5ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b5f0:	4650      	mov	r0, sl
 801b5f2:	4659      	mov	r1, fp
 801b5f4:	f7e5 f942 	bl	800087c <__aeabi_ddiv>
 801b5f8:	e7d6      	b.n	801b5a8 <_strtod_l+0x400>
 801b5fa:	9b06      	ldr	r3, [sp, #24]
 801b5fc:	eba5 0808 	sub.w	r8, r5, r8
 801b600:	4498      	add	r8, r3
 801b602:	f1b8 0f00 	cmp.w	r8, #0
 801b606:	dd74      	ble.n	801b6f2 <_strtod_l+0x54a>
 801b608:	f018 030f 	ands.w	r3, r8, #15
 801b60c:	d00a      	beq.n	801b624 <_strtod_l+0x47c>
 801b60e:	494f      	ldr	r1, [pc, #316]	; (801b74c <_strtod_l+0x5a4>)
 801b610:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b614:	4652      	mov	r2, sl
 801b616:	465b      	mov	r3, fp
 801b618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b61c:	f7e5 f804 	bl	8000628 <__aeabi_dmul>
 801b620:	4682      	mov	sl, r0
 801b622:	468b      	mov	fp, r1
 801b624:	f038 080f 	bics.w	r8, r8, #15
 801b628:	d04f      	beq.n	801b6ca <_strtod_l+0x522>
 801b62a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b62e:	dd22      	ble.n	801b676 <_strtod_l+0x4ce>
 801b630:	2500      	movs	r5, #0
 801b632:	462e      	mov	r6, r5
 801b634:	9507      	str	r5, [sp, #28]
 801b636:	9505      	str	r5, [sp, #20]
 801b638:	2322      	movs	r3, #34	; 0x22
 801b63a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801b754 <_strtod_l+0x5ac>
 801b63e:	6023      	str	r3, [r4, #0]
 801b640:	f04f 0a00 	mov.w	sl, #0
 801b644:	9b07      	ldr	r3, [sp, #28]
 801b646:	2b00      	cmp	r3, #0
 801b648:	f43f adf2 	beq.w	801b230 <_strtod_l+0x88>
 801b64c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b64e:	4620      	mov	r0, r4
 801b650:	f001 fe86 	bl	801d360 <_Bfree>
 801b654:	9905      	ldr	r1, [sp, #20]
 801b656:	4620      	mov	r0, r4
 801b658:	f001 fe82 	bl	801d360 <_Bfree>
 801b65c:	4631      	mov	r1, r6
 801b65e:	4620      	mov	r0, r4
 801b660:	f001 fe7e 	bl	801d360 <_Bfree>
 801b664:	9907      	ldr	r1, [sp, #28]
 801b666:	4620      	mov	r0, r4
 801b668:	f001 fe7a 	bl	801d360 <_Bfree>
 801b66c:	4629      	mov	r1, r5
 801b66e:	4620      	mov	r0, r4
 801b670:	f001 fe76 	bl	801d360 <_Bfree>
 801b674:	e5dc      	b.n	801b230 <_strtod_l+0x88>
 801b676:	4b36      	ldr	r3, [pc, #216]	; (801b750 <_strtod_l+0x5a8>)
 801b678:	9304      	str	r3, [sp, #16]
 801b67a:	2300      	movs	r3, #0
 801b67c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b680:	4650      	mov	r0, sl
 801b682:	4659      	mov	r1, fp
 801b684:	4699      	mov	r9, r3
 801b686:	f1b8 0f01 	cmp.w	r8, #1
 801b68a:	dc21      	bgt.n	801b6d0 <_strtod_l+0x528>
 801b68c:	b10b      	cbz	r3, 801b692 <_strtod_l+0x4ea>
 801b68e:	4682      	mov	sl, r0
 801b690:	468b      	mov	fp, r1
 801b692:	4b2f      	ldr	r3, [pc, #188]	; (801b750 <_strtod_l+0x5a8>)
 801b694:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b698:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b69c:	4652      	mov	r2, sl
 801b69e:	465b      	mov	r3, fp
 801b6a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b6a4:	f7e4 ffc0 	bl	8000628 <__aeabi_dmul>
 801b6a8:	4b2a      	ldr	r3, [pc, #168]	; (801b754 <_strtod_l+0x5ac>)
 801b6aa:	460a      	mov	r2, r1
 801b6ac:	400b      	ands	r3, r1
 801b6ae:	492a      	ldr	r1, [pc, #168]	; (801b758 <_strtod_l+0x5b0>)
 801b6b0:	428b      	cmp	r3, r1
 801b6b2:	4682      	mov	sl, r0
 801b6b4:	d8bc      	bhi.n	801b630 <_strtod_l+0x488>
 801b6b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b6ba:	428b      	cmp	r3, r1
 801b6bc:	bf86      	itte	hi
 801b6be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801b75c <_strtod_l+0x5b4>
 801b6c2:	f04f 3aff 	movhi.w	sl, #4294967295
 801b6c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b6ca:	2300      	movs	r3, #0
 801b6cc:	9304      	str	r3, [sp, #16]
 801b6ce:	e084      	b.n	801b7da <_strtod_l+0x632>
 801b6d0:	f018 0f01 	tst.w	r8, #1
 801b6d4:	d005      	beq.n	801b6e2 <_strtod_l+0x53a>
 801b6d6:	9b04      	ldr	r3, [sp, #16]
 801b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6dc:	f7e4 ffa4 	bl	8000628 <__aeabi_dmul>
 801b6e0:	2301      	movs	r3, #1
 801b6e2:	9a04      	ldr	r2, [sp, #16]
 801b6e4:	3208      	adds	r2, #8
 801b6e6:	f109 0901 	add.w	r9, r9, #1
 801b6ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b6ee:	9204      	str	r2, [sp, #16]
 801b6f0:	e7c9      	b.n	801b686 <_strtod_l+0x4de>
 801b6f2:	d0ea      	beq.n	801b6ca <_strtod_l+0x522>
 801b6f4:	f1c8 0800 	rsb	r8, r8, #0
 801b6f8:	f018 020f 	ands.w	r2, r8, #15
 801b6fc:	d00a      	beq.n	801b714 <_strtod_l+0x56c>
 801b6fe:	4b13      	ldr	r3, [pc, #76]	; (801b74c <_strtod_l+0x5a4>)
 801b700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b704:	4650      	mov	r0, sl
 801b706:	4659      	mov	r1, fp
 801b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b70c:	f7e5 f8b6 	bl	800087c <__aeabi_ddiv>
 801b710:	4682      	mov	sl, r0
 801b712:	468b      	mov	fp, r1
 801b714:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b718:	d0d7      	beq.n	801b6ca <_strtod_l+0x522>
 801b71a:	f1b8 0f1f 	cmp.w	r8, #31
 801b71e:	dd1f      	ble.n	801b760 <_strtod_l+0x5b8>
 801b720:	2500      	movs	r5, #0
 801b722:	462e      	mov	r6, r5
 801b724:	9507      	str	r5, [sp, #28]
 801b726:	9505      	str	r5, [sp, #20]
 801b728:	2322      	movs	r3, #34	; 0x22
 801b72a:	f04f 0a00 	mov.w	sl, #0
 801b72e:	f04f 0b00 	mov.w	fp, #0
 801b732:	6023      	str	r3, [r4, #0]
 801b734:	e786      	b.n	801b644 <_strtod_l+0x49c>
 801b736:	bf00      	nop
 801b738:	08074185 	.word	0x08074185
 801b73c:	080741c8 	.word	0x080741c8
 801b740:	0807417d 	.word	0x0807417d
 801b744:	0807430c 	.word	0x0807430c
 801b748:	080745b8 	.word	0x080745b8
 801b74c:	08074498 	.word	0x08074498
 801b750:	08074470 	.word	0x08074470
 801b754:	7ff00000 	.word	0x7ff00000
 801b758:	7ca00000 	.word	0x7ca00000
 801b75c:	7fefffff 	.word	0x7fefffff
 801b760:	f018 0310 	ands.w	r3, r8, #16
 801b764:	bf18      	it	ne
 801b766:	236a      	movne	r3, #106	; 0x6a
 801b768:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801bb18 <_strtod_l+0x970>
 801b76c:	9304      	str	r3, [sp, #16]
 801b76e:	4650      	mov	r0, sl
 801b770:	4659      	mov	r1, fp
 801b772:	2300      	movs	r3, #0
 801b774:	f018 0f01 	tst.w	r8, #1
 801b778:	d004      	beq.n	801b784 <_strtod_l+0x5dc>
 801b77a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b77e:	f7e4 ff53 	bl	8000628 <__aeabi_dmul>
 801b782:	2301      	movs	r3, #1
 801b784:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b788:	f109 0908 	add.w	r9, r9, #8
 801b78c:	d1f2      	bne.n	801b774 <_strtod_l+0x5cc>
 801b78e:	b10b      	cbz	r3, 801b794 <_strtod_l+0x5ec>
 801b790:	4682      	mov	sl, r0
 801b792:	468b      	mov	fp, r1
 801b794:	9b04      	ldr	r3, [sp, #16]
 801b796:	b1c3      	cbz	r3, 801b7ca <_strtod_l+0x622>
 801b798:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b79c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	4659      	mov	r1, fp
 801b7a4:	dd11      	ble.n	801b7ca <_strtod_l+0x622>
 801b7a6:	2b1f      	cmp	r3, #31
 801b7a8:	f340 8124 	ble.w	801b9f4 <_strtod_l+0x84c>
 801b7ac:	2b34      	cmp	r3, #52	; 0x34
 801b7ae:	bfde      	ittt	le
 801b7b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b7b4:	f04f 33ff 	movle.w	r3, #4294967295
 801b7b8:	fa03 f202 	lslle.w	r2, r3, r2
 801b7bc:	f04f 0a00 	mov.w	sl, #0
 801b7c0:	bfcc      	ite	gt
 801b7c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b7c6:	ea02 0b01 	andle.w	fp, r2, r1
 801b7ca:	2200      	movs	r2, #0
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	4650      	mov	r0, sl
 801b7d0:	4659      	mov	r1, fp
 801b7d2:	f7e5 f991 	bl	8000af8 <__aeabi_dcmpeq>
 801b7d6:	2800      	cmp	r0, #0
 801b7d8:	d1a2      	bne.n	801b720 <_strtod_l+0x578>
 801b7da:	9b07      	ldr	r3, [sp, #28]
 801b7dc:	9300      	str	r3, [sp, #0]
 801b7de:	9908      	ldr	r1, [sp, #32]
 801b7e0:	462b      	mov	r3, r5
 801b7e2:	463a      	mov	r2, r7
 801b7e4:	4620      	mov	r0, r4
 801b7e6:	f001 fe23 	bl	801d430 <__s2b>
 801b7ea:	9007      	str	r0, [sp, #28]
 801b7ec:	2800      	cmp	r0, #0
 801b7ee:	f43f af1f 	beq.w	801b630 <_strtod_l+0x488>
 801b7f2:	9b05      	ldr	r3, [sp, #20]
 801b7f4:	1b9e      	subs	r6, r3, r6
 801b7f6:	9b06      	ldr	r3, [sp, #24]
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	bfb4      	ite	lt
 801b7fc:	4633      	movlt	r3, r6
 801b7fe:	2300      	movge	r3, #0
 801b800:	930c      	str	r3, [sp, #48]	; 0x30
 801b802:	9b06      	ldr	r3, [sp, #24]
 801b804:	2500      	movs	r5, #0
 801b806:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b80a:	9312      	str	r3, [sp, #72]	; 0x48
 801b80c:	462e      	mov	r6, r5
 801b80e:	9b07      	ldr	r3, [sp, #28]
 801b810:	4620      	mov	r0, r4
 801b812:	6859      	ldr	r1, [r3, #4]
 801b814:	f001 fd64 	bl	801d2e0 <_Balloc>
 801b818:	9005      	str	r0, [sp, #20]
 801b81a:	2800      	cmp	r0, #0
 801b81c:	f43f af0c 	beq.w	801b638 <_strtod_l+0x490>
 801b820:	9b07      	ldr	r3, [sp, #28]
 801b822:	691a      	ldr	r2, [r3, #16]
 801b824:	3202      	adds	r2, #2
 801b826:	f103 010c 	add.w	r1, r3, #12
 801b82a:	0092      	lsls	r2, r2, #2
 801b82c:	300c      	adds	r0, #12
 801b82e:	f7fe fcaf 	bl	801a190 <memcpy>
 801b832:	ec4b ab10 	vmov	d0, sl, fp
 801b836:	aa1a      	add	r2, sp, #104	; 0x68
 801b838:	a919      	add	r1, sp, #100	; 0x64
 801b83a:	4620      	mov	r0, r4
 801b83c:	f002 f93e 	bl	801dabc <__d2b>
 801b840:	ec4b ab18 	vmov	d8, sl, fp
 801b844:	9018      	str	r0, [sp, #96]	; 0x60
 801b846:	2800      	cmp	r0, #0
 801b848:	f43f aef6 	beq.w	801b638 <_strtod_l+0x490>
 801b84c:	2101      	movs	r1, #1
 801b84e:	4620      	mov	r0, r4
 801b850:	f001 fe88 	bl	801d564 <__i2b>
 801b854:	4606      	mov	r6, r0
 801b856:	2800      	cmp	r0, #0
 801b858:	f43f aeee 	beq.w	801b638 <_strtod_l+0x490>
 801b85c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b85e:	9904      	ldr	r1, [sp, #16]
 801b860:	2b00      	cmp	r3, #0
 801b862:	bfab      	itete	ge
 801b864:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801b866:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801b868:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b86a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801b86e:	bfac      	ite	ge
 801b870:	eb03 0902 	addge.w	r9, r3, r2
 801b874:	1ad7      	sublt	r7, r2, r3
 801b876:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b878:	eba3 0801 	sub.w	r8, r3, r1
 801b87c:	4490      	add	r8, r2
 801b87e:	4ba1      	ldr	r3, [pc, #644]	; (801bb04 <_strtod_l+0x95c>)
 801b880:	f108 38ff 	add.w	r8, r8, #4294967295
 801b884:	4598      	cmp	r8, r3
 801b886:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b88a:	f280 80c7 	bge.w	801ba1c <_strtod_l+0x874>
 801b88e:	eba3 0308 	sub.w	r3, r3, r8
 801b892:	2b1f      	cmp	r3, #31
 801b894:	eba2 0203 	sub.w	r2, r2, r3
 801b898:	f04f 0101 	mov.w	r1, #1
 801b89c:	f300 80b1 	bgt.w	801ba02 <_strtod_l+0x85a>
 801b8a0:	fa01 f303 	lsl.w	r3, r1, r3
 801b8a4:	930d      	str	r3, [sp, #52]	; 0x34
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	9308      	str	r3, [sp, #32]
 801b8aa:	eb09 0802 	add.w	r8, r9, r2
 801b8ae:	9b04      	ldr	r3, [sp, #16]
 801b8b0:	45c1      	cmp	r9, r8
 801b8b2:	4417      	add	r7, r2
 801b8b4:	441f      	add	r7, r3
 801b8b6:	464b      	mov	r3, r9
 801b8b8:	bfa8      	it	ge
 801b8ba:	4643      	movge	r3, r8
 801b8bc:	42bb      	cmp	r3, r7
 801b8be:	bfa8      	it	ge
 801b8c0:	463b      	movge	r3, r7
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	bfc2      	ittt	gt
 801b8c6:	eba8 0803 	subgt.w	r8, r8, r3
 801b8ca:	1aff      	subgt	r7, r7, r3
 801b8cc:	eba9 0903 	subgt.w	r9, r9, r3
 801b8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	dd17      	ble.n	801b906 <_strtod_l+0x75e>
 801b8d6:	4631      	mov	r1, r6
 801b8d8:	461a      	mov	r2, r3
 801b8da:	4620      	mov	r0, r4
 801b8dc:	f001 ff02 	bl	801d6e4 <__pow5mult>
 801b8e0:	4606      	mov	r6, r0
 801b8e2:	2800      	cmp	r0, #0
 801b8e4:	f43f aea8 	beq.w	801b638 <_strtod_l+0x490>
 801b8e8:	4601      	mov	r1, r0
 801b8ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b8ec:	4620      	mov	r0, r4
 801b8ee:	f001 fe4f 	bl	801d590 <__multiply>
 801b8f2:	900b      	str	r0, [sp, #44]	; 0x2c
 801b8f4:	2800      	cmp	r0, #0
 801b8f6:	f43f ae9f 	beq.w	801b638 <_strtod_l+0x490>
 801b8fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b8fc:	4620      	mov	r0, r4
 801b8fe:	f001 fd2f 	bl	801d360 <_Bfree>
 801b902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b904:	9318      	str	r3, [sp, #96]	; 0x60
 801b906:	f1b8 0f00 	cmp.w	r8, #0
 801b90a:	f300 808c 	bgt.w	801ba26 <_strtod_l+0x87e>
 801b90e:	9b06      	ldr	r3, [sp, #24]
 801b910:	2b00      	cmp	r3, #0
 801b912:	dd08      	ble.n	801b926 <_strtod_l+0x77e>
 801b914:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b916:	9905      	ldr	r1, [sp, #20]
 801b918:	4620      	mov	r0, r4
 801b91a:	f001 fee3 	bl	801d6e4 <__pow5mult>
 801b91e:	9005      	str	r0, [sp, #20]
 801b920:	2800      	cmp	r0, #0
 801b922:	f43f ae89 	beq.w	801b638 <_strtod_l+0x490>
 801b926:	2f00      	cmp	r7, #0
 801b928:	dd08      	ble.n	801b93c <_strtod_l+0x794>
 801b92a:	9905      	ldr	r1, [sp, #20]
 801b92c:	463a      	mov	r2, r7
 801b92e:	4620      	mov	r0, r4
 801b930:	f001 ff32 	bl	801d798 <__lshift>
 801b934:	9005      	str	r0, [sp, #20]
 801b936:	2800      	cmp	r0, #0
 801b938:	f43f ae7e 	beq.w	801b638 <_strtod_l+0x490>
 801b93c:	f1b9 0f00 	cmp.w	r9, #0
 801b940:	dd08      	ble.n	801b954 <_strtod_l+0x7ac>
 801b942:	4631      	mov	r1, r6
 801b944:	464a      	mov	r2, r9
 801b946:	4620      	mov	r0, r4
 801b948:	f001 ff26 	bl	801d798 <__lshift>
 801b94c:	4606      	mov	r6, r0
 801b94e:	2800      	cmp	r0, #0
 801b950:	f43f ae72 	beq.w	801b638 <_strtod_l+0x490>
 801b954:	9a05      	ldr	r2, [sp, #20]
 801b956:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b958:	4620      	mov	r0, r4
 801b95a:	f001 ffa9 	bl	801d8b0 <__mdiff>
 801b95e:	4605      	mov	r5, r0
 801b960:	2800      	cmp	r0, #0
 801b962:	f43f ae69 	beq.w	801b638 <_strtod_l+0x490>
 801b966:	68c3      	ldr	r3, [r0, #12]
 801b968:	930b      	str	r3, [sp, #44]	; 0x2c
 801b96a:	2300      	movs	r3, #0
 801b96c:	60c3      	str	r3, [r0, #12]
 801b96e:	4631      	mov	r1, r6
 801b970:	f001 ff82 	bl	801d878 <__mcmp>
 801b974:	2800      	cmp	r0, #0
 801b976:	da60      	bge.n	801ba3a <_strtod_l+0x892>
 801b978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b97a:	ea53 030a 	orrs.w	r3, r3, sl
 801b97e:	f040 8082 	bne.w	801ba86 <_strtod_l+0x8de>
 801b982:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b986:	2b00      	cmp	r3, #0
 801b988:	d17d      	bne.n	801ba86 <_strtod_l+0x8de>
 801b98a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b98e:	0d1b      	lsrs	r3, r3, #20
 801b990:	051b      	lsls	r3, r3, #20
 801b992:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b996:	d976      	bls.n	801ba86 <_strtod_l+0x8de>
 801b998:	696b      	ldr	r3, [r5, #20]
 801b99a:	b913      	cbnz	r3, 801b9a2 <_strtod_l+0x7fa>
 801b99c:	692b      	ldr	r3, [r5, #16]
 801b99e:	2b01      	cmp	r3, #1
 801b9a0:	dd71      	ble.n	801ba86 <_strtod_l+0x8de>
 801b9a2:	4629      	mov	r1, r5
 801b9a4:	2201      	movs	r2, #1
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f001 fef6 	bl	801d798 <__lshift>
 801b9ac:	4631      	mov	r1, r6
 801b9ae:	4605      	mov	r5, r0
 801b9b0:	f001 ff62 	bl	801d878 <__mcmp>
 801b9b4:	2800      	cmp	r0, #0
 801b9b6:	dd66      	ble.n	801ba86 <_strtod_l+0x8de>
 801b9b8:	9904      	ldr	r1, [sp, #16]
 801b9ba:	4a53      	ldr	r2, [pc, #332]	; (801bb08 <_strtod_l+0x960>)
 801b9bc:	465b      	mov	r3, fp
 801b9be:	2900      	cmp	r1, #0
 801b9c0:	f000 8081 	beq.w	801bac6 <_strtod_l+0x91e>
 801b9c4:	ea02 010b 	and.w	r1, r2, fp
 801b9c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b9cc:	dc7b      	bgt.n	801bac6 <_strtod_l+0x91e>
 801b9ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b9d2:	f77f aea9 	ble.w	801b728 <_strtod_l+0x580>
 801b9d6:	4b4d      	ldr	r3, [pc, #308]	; (801bb0c <_strtod_l+0x964>)
 801b9d8:	4650      	mov	r0, sl
 801b9da:	4659      	mov	r1, fp
 801b9dc:	2200      	movs	r2, #0
 801b9de:	f7e4 fe23 	bl	8000628 <__aeabi_dmul>
 801b9e2:	460b      	mov	r3, r1
 801b9e4:	4303      	orrs	r3, r0
 801b9e6:	bf08      	it	eq
 801b9e8:	2322      	moveq	r3, #34	; 0x22
 801b9ea:	4682      	mov	sl, r0
 801b9ec:	468b      	mov	fp, r1
 801b9ee:	bf08      	it	eq
 801b9f0:	6023      	streq	r3, [r4, #0]
 801b9f2:	e62b      	b.n	801b64c <_strtod_l+0x4a4>
 801b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 801b9f8:	fa02 f303 	lsl.w	r3, r2, r3
 801b9fc:	ea03 0a0a 	and.w	sl, r3, sl
 801ba00:	e6e3      	b.n	801b7ca <_strtod_l+0x622>
 801ba02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ba06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ba0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ba0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ba12:	fa01 f308 	lsl.w	r3, r1, r8
 801ba16:	9308      	str	r3, [sp, #32]
 801ba18:	910d      	str	r1, [sp, #52]	; 0x34
 801ba1a:	e746      	b.n	801b8aa <_strtod_l+0x702>
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	9308      	str	r3, [sp, #32]
 801ba20:	2301      	movs	r3, #1
 801ba22:	930d      	str	r3, [sp, #52]	; 0x34
 801ba24:	e741      	b.n	801b8aa <_strtod_l+0x702>
 801ba26:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ba28:	4642      	mov	r2, r8
 801ba2a:	4620      	mov	r0, r4
 801ba2c:	f001 feb4 	bl	801d798 <__lshift>
 801ba30:	9018      	str	r0, [sp, #96]	; 0x60
 801ba32:	2800      	cmp	r0, #0
 801ba34:	f47f af6b 	bne.w	801b90e <_strtod_l+0x766>
 801ba38:	e5fe      	b.n	801b638 <_strtod_l+0x490>
 801ba3a:	465f      	mov	r7, fp
 801ba3c:	d16e      	bne.n	801bb1c <_strtod_l+0x974>
 801ba3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ba40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ba44:	b342      	cbz	r2, 801ba98 <_strtod_l+0x8f0>
 801ba46:	4a32      	ldr	r2, [pc, #200]	; (801bb10 <_strtod_l+0x968>)
 801ba48:	4293      	cmp	r3, r2
 801ba4a:	d128      	bne.n	801ba9e <_strtod_l+0x8f6>
 801ba4c:	9b04      	ldr	r3, [sp, #16]
 801ba4e:	4651      	mov	r1, sl
 801ba50:	b1eb      	cbz	r3, 801ba8e <_strtod_l+0x8e6>
 801ba52:	4b2d      	ldr	r3, [pc, #180]	; (801bb08 <_strtod_l+0x960>)
 801ba54:	403b      	ands	r3, r7
 801ba56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ba5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ba5e:	d819      	bhi.n	801ba94 <_strtod_l+0x8ec>
 801ba60:	0d1b      	lsrs	r3, r3, #20
 801ba62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ba66:	fa02 f303 	lsl.w	r3, r2, r3
 801ba6a:	4299      	cmp	r1, r3
 801ba6c:	d117      	bne.n	801ba9e <_strtod_l+0x8f6>
 801ba6e:	4b29      	ldr	r3, [pc, #164]	; (801bb14 <_strtod_l+0x96c>)
 801ba70:	429f      	cmp	r7, r3
 801ba72:	d102      	bne.n	801ba7a <_strtod_l+0x8d2>
 801ba74:	3101      	adds	r1, #1
 801ba76:	f43f addf 	beq.w	801b638 <_strtod_l+0x490>
 801ba7a:	4b23      	ldr	r3, [pc, #140]	; (801bb08 <_strtod_l+0x960>)
 801ba7c:	403b      	ands	r3, r7
 801ba7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ba82:	f04f 0a00 	mov.w	sl, #0
 801ba86:	9b04      	ldr	r3, [sp, #16]
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d1a4      	bne.n	801b9d6 <_strtod_l+0x82e>
 801ba8c:	e5de      	b.n	801b64c <_strtod_l+0x4a4>
 801ba8e:	f04f 33ff 	mov.w	r3, #4294967295
 801ba92:	e7ea      	b.n	801ba6a <_strtod_l+0x8c2>
 801ba94:	4613      	mov	r3, r2
 801ba96:	e7e8      	b.n	801ba6a <_strtod_l+0x8c2>
 801ba98:	ea53 030a 	orrs.w	r3, r3, sl
 801ba9c:	d08c      	beq.n	801b9b8 <_strtod_l+0x810>
 801ba9e:	9b08      	ldr	r3, [sp, #32]
 801baa0:	b1db      	cbz	r3, 801bada <_strtod_l+0x932>
 801baa2:	423b      	tst	r3, r7
 801baa4:	d0ef      	beq.n	801ba86 <_strtod_l+0x8de>
 801baa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801baa8:	9a04      	ldr	r2, [sp, #16]
 801baaa:	4650      	mov	r0, sl
 801baac:	4659      	mov	r1, fp
 801baae:	b1c3      	cbz	r3, 801bae2 <_strtod_l+0x93a>
 801bab0:	f7ff fb5e 	bl	801b170 <sulp>
 801bab4:	4602      	mov	r2, r0
 801bab6:	460b      	mov	r3, r1
 801bab8:	ec51 0b18 	vmov	r0, r1, d8
 801babc:	f7e4 fbfe 	bl	80002bc <__adddf3>
 801bac0:	4682      	mov	sl, r0
 801bac2:	468b      	mov	fp, r1
 801bac4:	e7df      	b.n	801ba86 <_strtod_l+0x8de>
 801bac6:	4013      	ands	r3, r2
 801bac8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801bacc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801bad0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801bad4:	f04f 3aff 	mov.w	sl, #4294967295
 801bad8:	e7d5      	b.n	801ba86 <_strtod_l+0x8de>
 801bada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801badc:	ea13 0f0a 	tst.w	r3, sl
 801bae0:	e7e0      	b.n	801baa4 <_strtod_l+0x8fc>
 801bae2:	f7ff fb45 	bl	801b170 <sulp>
 801bae6:	4602      	mov	r2, r0
 801bae8:	460b      	mov	r3, r1
 801baea:	ec51 0b18 	vmov	r0, r1, d8
 801baee:	f7e4 fbe3 	bl	80002b8 <__aeabi_dsub>
 801baf2:	2200      	movs	r2, #0
 801baf4:	2300      	movs	r3, #0
 801baf6:	4682      	mov	sl, r0
 801baf8:	468b      	mov	fp, r1
 801bafa:	f7e4 fffd 	bl	8000af8 <__aeabi_dcmpeq>
 801bafe:	2800      	cmp	r0, #0
 801bb00:	d0c1      	beq.n	801ba86 <_strtod_l+0x8de>
 801bb02:	e611      	b.n	801b728 <_strtod_l+0x580>
 801bb04:	fffffc02 	.word	0xfffffc02
 801bb08:	7ff00000 	.word	0x7ff00000
 801bb0c:	39500000 	.word	0x39500000
 801bb10:	000fffff 	.word	0x000fffff
 801bb14:	7fefffff 	.word	0x7fefffff
 801bb18:	080741e0 	.word	0x080741e0
 801bb1c:	4631      	mov	r1, r6
 801bb1e:	4628      	mov	r0, r5
 801bb20:	f002 f828 	bl	801db74 <__ratio>
 801bb24:	ec59 8b10 	vmov	r8, r9, d0
 801bb28:	ee10 0a10 	vmov	r0, s0
 801bb2c:	2200      	movs	r2, #0
 801bb2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bb32:	4649      	mov	r1, r9
 801bb34:	f7e4 fff4 	bl	8000b20 <__aeabi_dcmple>
 801bb38:	2800      	cmp	r0, #0
 801bb3a:	d07a      	beq.n	801bc32 <_strtod_l+0xa8a>
 801bb3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d04a      	beq.n	801bbd8 <_strtod_l+0xa30>
 801bb42:	4b95      	ldr	r3, [pc, #596]	; (801bd98 <_strtod_l+0xbf0>)
 801bb44:	2200      	movs	r2, #0
 801bb46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bb4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801bd98 <_strtod_l+0xbf0>
 801bb4e:	f04f 0800 	mov.w	r8, #0
 801bb52:	4b92      	ldr	r3, [pc, #584]	; (801bd9c <_strtod_l+0xbf4>)
 801bb54:	403b      	ands	r3, r7
 801bb56:	930d      	str	r3, [sp, #52]	; 0x34
 801bb58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb5a:	4b91      	ldr	r3, [pc, #580]	; (801bda0 <_strtod_l+0xbf8>)
 801bb5c:	429a      	cmp	r2, r3
 801bb5e:	f040 80b0 	bne.w	801bcc2 <_strtod_l+0xb1a>
 801bb62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bb66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801bb6a:	ec4b ab10 	vmov	d0, sl, fp
 801bb6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bb72:	f001 ff27 	bl	801d9c4 <__ulp>
 801bb76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bb7a:	ec53 2b10 	vmov	r2, r3, d0
 801bb7e:	f7e4 fd53 	bl	8000628 <__aeabi_dmul>
 801bb82:	4652      	mov	r2, sl
 801bb84:	465b      	mov	r3, fp
 801bb86:	f7e4 fb99 	bl	80002bc <__adddf3>
 801bb8a:	460b      	mov	r3, r1
 801bb8c:	4983      	ldr	r1, [pc, #524]	; (801bd9c <_strtod_l+0xbf4>)
 801bb8e:	4a85      	ldr	r2, [pc, #532]	; (801bda4 <_strtod_l+0xbfc>)
 801bb90:	4019      	ands	r1, r3
 801bb92:	4291      	cmp	r1, r2
 801bb94:	4682      	mov	sl, r0
 801bb96:	d960      	bls.n	801bc5a <_strtod_l+0xab2>
 801bb98:	ee18 3a90 	vmov	r3, s17
 801bb9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801bba0:	4293      	cmp	r3, r2
 801bba2:	d104      	bne.n	801bbae <_strtod_l+0xa06>
 801bba4:	ee18 3a10 	vmov	r3, s16
 801bba8:	3301      	adds	r3, #1
 801bbaa:	f43f ad45 	beq.w	801b638 <_strtod_l+0x490>
 801bbae:	f8df b200 	ldr.w	fp, [pc, #512]	; 801bdb0 <_strtod_l+0xc08>
 801bbb2:	f04f 3aff 	mov.w	sl, #4294967295
 801bbb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bbb8:	4620      	mov	r0, r4
 801bbba:	f001 fbd1 	bl	801d360 <_Bfree>
 801bbbe:	9905      	ldr	r1, [sp, #20]
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f001 fbcd 	bl	801d360 <_Bfree>
 801bbc6:	4631      	mov	r1, r6
 801bbc8:	4620      	mov	r0, r4
 801bbca:	f001 fbc9 	bl	801d360 <_Bfree>
 801bbce:	4629      	mov	r1, r5
 801bbd0:	4620      	mov	r0, r4
 801bbd2:	f001 fbc5 	bl	801d360 <_Bfree>
 801bbd6:	e61a      	b.n	801b80e <_strtod_l+0x666>
 801bbd8:	f1ba 0f00 	cmp.w	sl, #0
 801bbdc:	d11b      	bne.n	801bc16 <_strtod_l+0xa6e>
 801bbde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bbe2:	b9f3      	cbnz	r3, 801bc22 <_strtod_l+0xa7a>
 801bbe4:	4b6c      	ldr	r3, [pc, #432]	; (801bd98 <_strtod_l+0xbf0>)
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	4640      	mov	r0, r8
 801bbea:	4649      	mov	r1, r9
 801bbec:	f7e4 ff8e 	bl	8000b0c <__aeabi_dcmplt>
 801bbf0:	b9d0      	cbnz	r0, 801bc28 <_strtod_l+0xa80>
 801bbf2:	4640      	mov	r0, r8
 801bbf4:	4649      	mov	r1, r9
 801bbf6:	4b6c      	ldr	r3, [pc, #432]	; (801bda8 <_strtod_l+0xc00>)
 801bbf8:	2200      	movs	r2, #0
 801bbfa:	f7e4 fd15 	bl	8000628 <__aeabi_dmul>
 801bbfe:	4680      	mov	r8, r0
 801bc00:	4689      	mov	r9, r1
 801bc02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801bc06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801bc0a:	9315      	str	r3, [sp, #84]	; 0x54
 801bc0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801bc10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bc14:	e79d      	b.n	801bb52 <_strtod_l+0x9aa>
 801bc16:	f1ba 0f01 	cmp.w	sl, #1
 801bc1a:	d102      	bne.n	801bc22 <_strtod_l+0xa7a>
 801bc1c:	2f00      	cmp	r7, #0
 801bc1e:	f43f ad83 	beq.w	801b728 <_strtod_l+0x580>
 801bc22:	4b62      	ldr	r3, [pc, #392]	; (801bdac <_strtod_l+0xc04>)
 801bc24:	2200      	movs	r2, #0
 801bc26:	e78e      	b.n	801bb46 <_strtod_l+0x99e>
 801bc28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801bda8 <_strtod_l+0xc00>
 801bc2c:	f04f 0800 	mov.w	r8, #0
 801bc30:	e7e7      	b.n	801bc02 <_strtod_l+0xa5a>
 801bc32:	4b5d      	ldr	r3, [pc, #372]	; (801bda8 <_strtod_l+0xc00>)
 801bc34:	4640      	mov	r0, r8
 801bc36:	4649      	mov	r1, r9
 801bc38:	2200      	movs	r2, #0
 801bc3a:	f7e4 fcf5 	bl	8000628 <__aeabi_dmul>
 801bc3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bc40:	4680      	mov	r8, r0
 801bc42:	4689      	mov	r9, r1
 801bc44:	b933      	cbnz	r3, 801bc54 <_strtod_l+0xaac>
 801bc46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bc4a:	900e      	str	r0, [sp, #56]	; 0x38
 801bc4c:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bc52:	e7dd      	b.n	801bc10 <_strtod_l+0xa68>
 801bc54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801bc58:	e7f9      	b.n	801bc4e <_strtod_l+0xaa6>
 801bc5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801bc5e:	9b04      	ldr	r3, [sp, #16]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d1a8      	bne.n	801bbb6 <_strtod_l+0xa0e>
 801bc64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bc68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bc6a:	0d1b      	lsrs	r3, r3, #20
 801bc6c:	051b      	lsls	r3, r3, #20
 801bc6e:	429a      	cmp	r2, r3
 801bc70:	d1a1      	bne.n	801bbb6 <_strtod_l+0xa0e>
 801bc72:	4640      	mov	r0, r8
 801bc74:	4649      	mov	r1, r9
 801bc76:	f7e5 f837 	bl	8000ce8 <__aeabi_d2lz>
 801bc7a:	f7e4 fca7 	bl	80005cc <__aeabi_l2d>
 801bc7e:	4602      	mov	r2, r0
 801bc80:	460b      	mov	r3, r1
 801bc82:	4640      	mov	r0, r8
 801bc84:	4649      	mov	r1, r9
 801bc86:	f7e4 fb17 	bl	80002b8 <__aeabi_dsub>
 801bc8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bc8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bc90:	ea43 030a 	orr.w	r3, r3, sl
 801bc94:	4313      	orrs	r3, r2
 801bc96:	4680      	mov	r8, r0
 801bc98:	4689      	mov	r9, r1
 801bc9a:	d055      	beq.n	801bd48 <_strtod_l+0xba0>
 801bc9c:	a336      	add	r3, pc, #216	; (adr r3, 801bd78 <_strtod_l+0xbd0>)
 801bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca2:	f7e4 ff33 	bl	8000b0c <__aeabi_dcmplt>
 801bca6:	2800      	cmp	r0, #0
 801bca8:	f47f acd0 	bne.w	801b64c <_strtod_l+0x4a4>
 801bcac:	a334      	add	r3, pc, #208	; (adr r3, 801bd80 <_strtod_l+0xbd8>)
 801bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb2:	4640      	mov	r0, r8
 801bcb4:	4649      	mov	r1, r9
 801bcb6:	f7e4 ff47 	bl	8000b48 <__aeabi_dcmpgt>
 801bcba:	2800      	cmp	r0, #0
 801bcbc:	f43f af7b 	beq.w	801bbb6 <_strtod_l+0xa0e>
 801bcc0:	e4c4      	b.n	801b64c <_strtod_l+0x4a4>
 801bcc2:	9b04      	ldr	r3, [sp, #16]
 801bcc4:	b333      	cbz	r3, 801bd14 <_strtod_l+0xb6c>
 801bcc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801bccc:	d822      	bhi.n	801bd14 <_strtod_l+0xb6c>
 801bcce:	a32e      	add	r3, pc, #184	; (adr r3, 801bd88 <_strtod_l+0xbe0>)
 801bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcd4:	4640      	mov	r0, r8
 801bcd6:	4649      	mov	r1, r9
 801bcd8:	f7e4 ff22 	bl	8000b20 <__aeabi_dcmple>
 801bcdc:	b1a0      	cbz	r0, 801bd08 <_strtod_l+0xb60>
 801bcde:	4649      	mov	r1, r9
 801bce0:	4640      	mov	r0, r8
 801bce2:	f7e4 ff79 	bl	8000bd8 <__aeabi_d2uiz>
 801bce6:	2801      	cmp	r0, #1
 801bce8:	bf38      	it	cc
 801bcea:	2001      	movcc	r0, #1
 801bcec:	f7e4 fc22 	bl	8000534 <__aeabi_ui2d>
 801bcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bcf2:	4680      	mov	r8, r0
 801bcf4:	4689      	mov	r9, r1
 801bcf6:	bb23      	cbnz	r3, 801bd42 <_strtod_l+0xb9a>
 801bcf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bcfc:	9010      	str	r0, [sp, #64]	; 0x40
 801bcfe:	9311      	str	r3, [sp, #68]	; 0x44
 801bd00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801bd04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801bd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801bd10:	1a9b      	subs	r3, r3, r2
 801bd12:	9309      	str	r3, [sp, #36]	; 0x24
 801bd14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd18:	eeb0 0a48 	vmov.f32	s0, s16
 801bd1c:	eef0 0a68 	vmov.f32	s1, s17
 801bd20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801bd24:	f001 fe4e 	bl	801d9c4 <__ulp>
 801bd28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801bd2c:	ec53 2b10 	vmov	r2, r3, d0
 801bd30:	f7e4 fc7a 	bl	8000628 <__aeabi_dmul>
 801bd34:	ec53 2b18 	vmov	r2, r3, d8
 801bd38:	f7e4 fac0 	bl	80002bc <__adddf3>
 801bd3c:	4682      	mov	sl, r0
 801bd3e:	468b      	mov	fp, r1
 801bd40:	e78d      	b.n	801bc5e <_strtod_l+0xab6>
 801bd42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801bd46:	e7db      	b.n	801bd00 <_strtod_l+0xb58>
 801bd48:	a311      	add	r3, pc, #68	; (adr r3, 801bd90 <_strtod_l+0xbe8>)
 801bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd4e:	f7e4 fedd 	bl	8000b0c <__aeabi_dcmplt>
 801bd52:	e7b2      	b.n	801bcba <_strtod_l+0xb12>
 801bd54:	2300      	movs	r3, #0
 801bd56:	930a      	str	r3, [sp, #40]	; 0x28
 801bd58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bd5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd5c:	6013      	str	r3, [r2, #0]
 801bd5e:	f7ff ba6b 	b.w	801b238 <_strtod_l+0x90>
 801bd62:	2a65      	cmp	r2, #101	; 0x65
 801bd64:	f43f ab5f 	beq.w	801b426 <_strtod_l+0x27e>
 801bd68:	2a45      	cmp	r2, #69	; 0x45
 801bd6a:	f43f ab5c 	beq.w	801b426 <_strtod_l+0x27e>
 801bd6e:	2301      	movs	r3, #1
 801bd70:	f7ff bb94 	b.w	801b49c <_strtod_l+0x2f4>
 801bd74:	f3af 8000 	nop.w
 801bd78:	94a03595 	.word	0x94a03595
 801bd7c:	3fdfffff 	.word	0x3fdfffff
 801bd80:	35afe535 	.word	0x35afe535
 801bd84:	3fe00000 	.word	0x3fe00000
 801bd88:	ffc00000 	.word	0xffc00000
 801bd8c:	41dfffff 	.word	0x41dfffff
 801bd90:	94a03595 	.word	0x94a03595
 801bd94:	3fcfffff 	.word	0x3fcfffff
 801bd98:	3ff00000 	.word	0x3ff00000
 801bd9c:	7ff00000 	.word	0x7ff00000
 801bda0:	7fe00000 	.word	0x7fe00000
 801bda4:	7c9fffff 	.word	0x7c9fffff
 801bda8:	3fe00000 	.word	0x3fe00000
 801bdac:	bff00000 	.word	0xbff00000
 801bdb0:	7fefffff 	.word	0x7fefffff

0801bdb4 <_strtod_r>:
 801bdb4:	4b01      	ldr	r3, [pc, #4]	; (801bdbc <_strtod_r+0x8>)
 801bdb6:	f7ff b9f7 	b.w	801b1a8 <_strtod_l>
 801bdba:	bf00      	nop
 801bdbc:	20000990 	.word	0x20000990

0801bdc0 <_strtol_l.constprop.0>:
 801bdc0:	2b01      	cmp	r3, #1
 801bdc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bdc6:	d001      	beq.n	801bdcc <_strtol_l.constprop.0+0xc>
 801bdc8:	2b24      	cmp	r3, #36	; 0x24
 801bdca:	d906      	bls.n	801bdda <_strtol_l.constprop.0+0x1a>
 801bdcc:	f7fe f9a6 	bl	801a11c <__errno>
 801bdd0:	2316      	movs	r3, #22
 801bdd2:	6003      	str	r3, [r0, #0]
 801bdd4:	2000      	movs	r0, #0
 801bdd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801bec0 <_strtol_l.constprop.0+0x100>
 801bdde:	460d      	mov	r5, r1
 801bde0:	462e      	mov	r6, r5
 801bde2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bde6:	f814 700c 	ldrb.w	r7, [r4, ip]
 801bdea:	f017 0708 	ands.w	r7, r7, #8
 801bdee:	d1f7      	bne.n	801bde0 <_strtol_l.constprop.0+0x20>
 801bdf0:	2c2d      	cmp	r4, #45	; 0x2d
 801bdf2:	d132      	bne.n	801be5a <_strtol_l.constprop.0+0x9a>
 801bdf4:	782c      	ldrb	r4, [r5, #0]
 801bdf6:	2701      	movs	r7, #1
 801bdf8:	1cb5      	adds	r5, r6, #2
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d05b      	beq.n	801beb6 <_strtol_l.constprop.0+0xf6>
 801bdfe:	2b10      	cmp	r3, #16
 801be00:	d109      	bne.n	801be16 <_strtol_l.constprop.0+0x56>
 801be02:	2c30      	cmp	r4, #48	; 0x30
 801be04:	d107      	bne.n	801be16 <_strtol_l.constprop.0+0x56>
 801be06:	782c      	ldrb	r4, [r5, #0]
 801be08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801be0c:	2c58      	cmp	r4, #88	; 0x58
 801be0e:	d14d      	bne.n	801beac <_strtol_l.constprop.0+0xec>
 801be10:	786c      	ldrb	r4, [r5, #1]
 801be12:	2310      	movs	r3, #16
 801be14:	3502      	adds	r5, #2
 801be16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801be1a:	f108 38ff 	add.w	r8, r8, #4294967295
 801be1e:	f04f 0c00 	mov.w	ip, #0
 801be22:	fbb8 f9f3 	udiv	r9, r8, r3
 801be26:	4666      	mov	r6, ip
 801be28:	fb03 8a19 	mls	sl, r3, r9, r8
 801be2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801be30:	f1be 0f09 	cmp.w	lr, #9
 801be34:	d816      	bhi.n	801be64 <_strtol_l.constprop.0+0xa4>
 801be36:	4674      	mov	r4, lr
 801be38:	42a3      	cmp	r3, r4
 801be3a:	dd24      	ble.n	801be86 <_strtol_l.constprop.0+0xc6>
 801be3c:	f1bc 0f00 	cmp.w	ip, #0
 801be40:	db1e      	blt.n	801be80 <_strtol_l.constprop.0+0xc0>
 801be42:	45b1      	cmp	r9, r6
 801be44:	d31c      	bcc.n	801be80 <_strtol_l.constprop.0+0xc0>
 801be46:	d101      	bne.n	801be4c <_strtol_l.constprop.0+0x8c>
 801be48:	45a2      	cmp	sl, r4
 801be4a:	db19      	blt.n	801be80 <_strtol_l.constprop.0+0xc0>
 801be4c:	fb06 4603 	mla	r6, r6, r3, r4
 801be50:	f04f 0c01 	mov.w	ip, #1
 801be54:	f815 4b01 	ldrb.w	r4, [r5], #1
 801be58:	e7e8      	b.n	801be2c <_strtol_l.constprop.0+0x6c>
 801be5a:	2c2b      	cmp	r4, #43	; 0x2b
 801be5c:	bf04      	itt	eq
 801be5e:	782c      	ldrbeq	r4, [r5, #0]
 801be60:	1cb5      	addeq	r5, r6, #2
 801be62:	e7ca      	b.n	801bdfa <_strtol_l.constprop.0+0x3a>
 801be64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801be68:	f1be 0f19 	cmp.w	lr, #25
 801be6c:	d801      	bhi.n	801be72 <_strtol_l.constprop.0+0xb2>
 801be6e:	3c37      	subs	r4, #55	; 0x37
 801be70:	e7e2      	b.n	801be38 <_strtol_l.constprop.0+0x78>
 801be72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801be76:	f1be 0f19 	cmp.w	lr, #25
 801be7a:	d804      	bhi.n	801be86 <_strtol_l.constprop.0+0xc6>
 801be7c:	3c57      	subs	r4, #87	; 0x57
 801be7e:	e7db      	b.n	801be38 <_strtol_l.constprop.0+0x78>
 801be80:	f04f 3cff 	mov.w	ip, #4294967295
 801be84:	e7e6      	b.n	801be54 <_strtol_l.constprop.0+0x94>
 801be86:	f1bc 0f00 	cmp.w	ip, #0
 801be8a:	da05      	bge.n	801be98 <_strtol_l.constprop.0+0xd8>
 801be8c:	2322      	movs	r3, #34	; 0x22
 801be8e:	6003      	str	r3, [r0, #0]
 801be90:	4646      	mov	r6, r8
 801be92:	b942      	cbnz	r2, 801bea6 <_strtol_l.constprop.0+0xe6>
 801be94:	4630      	mov	r0, r6
 801be96:	e79e      	b.n	801bdd6 <_strtol_l.constprop.0+0x16>
 801be98:	b107      	cbz	r7, 801be9c <_strtol_l.constprop.0+0xdc>
 801be9a:	4276      	negs	r6, r6
 801be9c:	2a00      	cmp	r2, #0
 801be9e:	d0f9      	beq.n	801be94 <_strtol_l.constprop.0+0xd4>
 801bea0:	f1bc 0f00 	cmp.w	ip, #0
 801bea4:	d000      	beq.n	801bea8 <_strtol_l.constprop.0+0xe8>
 801bea6:	1e69      	subs	r1, r5, #1
 801bea8:	6011      	str	r1, [r2, #0]
 801beaa:	e7f3      	b.n	801be94 <_strtol_l.constprop.0+0xd4>
 801beac:	2430      	movs	r4, #48	; 0x30
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d1b1      	bne.n	801be16 <_strtol_l.constprop.0+0x56>
 801beb2:	2308      	movs	r3, #8
 801beb4:	e7af      	b.n	801be16 <_strtol_l.constprop.0+0x56>
 801beb6:	2c30      	cmp	r4, #48	; 0x30
 801beb8:	d0a5      	beq.n	801be06 <_strtol_l.constprop.0+0x46>
 801beba:	230a      	movs	r3, #10
 801bebc:	e7ab      	b.n	801be16 <_strtol_l.constprop.0+0x56>
 801bebe:	bf00      	nop
 801bec0:	08074209 	.word	0x08074209

0801bec4 <_strtol_r>:
 801bec4:	f7ff bf7c 	b.w	801bdc0 <_strtol_l.constprop.0>

0801bec8 <quorem>:
 801bec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801becc:	6903      	ldr	r3, [r0, #16]
 801bece:	690c      	ldr	r4, [r1, #16]
 801bed0:	42a3      	cmp	r3, r4
 801bed2:	4607      	mov	r7, r0
 801bed4:	f2c0 8081 	blt.w	801bfda <quorem+0x112>
 801bed8:	3c01      	subs	r4, #1
 801beda:	f101 0814 	add.w	r8, r1, #20
 801bede:	f100 0514 	add.w	r5, r0, #20
 801bee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bee6:	9301      	str	r3, [sp, #4]
 801bee8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801beec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bef0:	3301      	adds	r3, #1
 801bef2:	429a      	cmp	r2, r3
 801bef4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bef8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801befc:	fbb2 f6f3 	udiv	r6, r2, r3
 801bf00:	d331      	bcc.n	801bf66 <quorem+0x9e>
 801bf02:	f04f 0e00 	mov.w	lr, #0
 801bf06:	4640      	mov	r0, r8
 801bf08:	46ac      	mov	ip, r5
 801bf0a:	46f2      	mov	sl, lr
 801bf0c:	f850 2b04 	ldr.w	r2, [r0], #4
 801bf10:	b293      	uxth	r3, r2
 801bf12:	fb06 e303 	mla	r3, r6, r3, lr
 801bf16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801bf1a:	b29b      	uxth	r3, r3
 801bf1c:	ebaa 0303 	sub.w	r3, sl, r3
 801bf20:	f8dc a000 	ldr.w	sl, [ip]
 801bf24:	0c12      	lsrs	r2, r2, #16
 801bf26:	fa13 f38a 	uxtah	r3, r3, sl
 801bf2a:	fb06 e202 	mla	r2, r6, r2, lr
 801bf2e:	9300      	str	r3, [sp, #0]
 801bf30:	9b00      	ldr	r3, [sp, #0]
 801bf32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bf36:	b292      	uxth	r2, r2
 801bf38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bf3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bf40:	f8bd 3000 	ldrh.w	r3, [sp]
 801bf44:	4581      	cmp	r9, r0
 801bf46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bf4a:	f84c 3b04 	str.w	r3, [ip], #4
 801bf4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bf52:	d2db      	bcs.n	801bf0c <quorem+0x44>
 801bf54:	f855 300b 	ldr.w	r3, [r5, fp]
 801bf58:	b92b      	cbnz	r3, 801bf66 <quorem+0x9e>
 801bf5a:	9b01      	ldr	r3, [sp, #4]
 801bf5c:	3b04      	subs	r3, #4
 801bf5e:	429d      	cmp	r5, r3
 801bf60:	461a      	mov	r2, r3
 801bf62:	d32e      	bcc.n	801bfc2 <quorem+0xfa>
 801bf64:	613c      	str	r4, [r7, #16]
 801bf66:	4638      	mov	r0, r7
 801bf68:	f001 fc86 	bl	801d878 <__mcmp>
 801bf6c:	2800      	cmp	r0, #0
 801bf6e:	db24      	blt.n	801bfba <quorem+0xf2>
 801bf70:	3601      	adds	r6, #1
 801bf72:	4628      	mov	r0, r5
 801bf74:	f04f 0c00 	mov.w	ip, #0
 801bf78:	f858 2b04 	ldr.w	r2, [r8], #4
 801bf7c:	f8d0 e000 	ldr.w	lr, [r0]
 801bf80:	b293      	uxth	r3, r2
 801bf82:	ebac 0303 	sub.w	r3, ip, r3
 801bf86:	0c12      	lsrs	r2, r2, #16
 801bf88:	fa13 f38e 	uxtah	r3, r3, lr
 801bf8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801bf90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bf94:	b29b      	uxth	r3, r3
 801bf96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bf9a:	45c1      	cmp	r9, r8
 801bf9c:	f840 3b04 	str.w	r3, [r0], #4
 801bfa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bfa4:	d2e8      	bcs.n	801bf78 <quorem+0xb0>
 801bfa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bfaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bfae:	b922      	cbnz	r2, 801bfba <quorem+0xf2>
 801bfb0:	3b04      	subs	r3, #4
 801bfb2:	429d      	cmp	r5, r3
 801bfb4:	461a      	mov	r2, r3
 801bfb6:	d30a      	bcc.n	801bfce <quorem+0x106>
 801bfb8:	613c      	str	r4, [r7, #16]
 801bfba:	4630      	mov	r0, r6
 801bfbc:	b003      	add	sp, #12
 801bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfc2:	6812      	ldr	r2, [r2, #0]
 801bfc4:	3b04      	subs	r3, #4
 801bfc6:	2a00      	cmp	r2, #0
 801bfc8:	d1cc      	bne.n	801bf64 <quorem+0x9c>
 801bfca:	3c01      	subs	r4, #1
 801bfcc:	e7c7      	b.n	801bf5e <quorem+0x96>
 801bfce:	6812      	ldr	r2, [r2, #0]
 801bfd0:	3b04      	subs	r3, #4
 801bfd2:	2a00      	cmp	r2, #0
 801bfd4:	d1f0      	bne.n	801bfb8 <quorem+0xf0>
 801bfd6:	3c01      	subs	r4, #1
 801bfd8:	e7eb      	b.n	801bfb2 <quorem+0xea>
 801bfda:	2000      	movs	r0, #0
 801bfdc:	e7ee      	b.n	801bfbc <quorem+0xf4>
	...

0801bfe0 <_dtoa_r>:
 801bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfe4:	ed2d 8b04 	vpush	{d8-d9}
 801bfe8:	ec57 6b10 	vmov	r6, r7, d0
 801bfec:	b093      	sub	sp, #76	; 0x4c
 801bfee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bff0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bff4:	9106      	str	r1, [sp, #24]
 801bff6:	ee10 aa10 	vmov	sl, s0
 801bffa:	4604      	mov	r4, r0
 801bffc:	9209      	str	r2, [sp, #36]	; 0x24
 801bffe:	930c      	str	r3, [sp, #48]	; 0x30
 801c000:	46bb      	mov	fp, r7
 801c002:	b975      	cbnz	r5, 801c022 <_dtoa_r+0x42>
 801c004:	2010      	movs	r0, #16
 801c006:	f7fe f8b3 	bl	801a170 <malloc>
 801c00a:	4602      	mov	r2, r0
 801c00c:	6260      	str	r0, [r4, #36]	; 0x24
 801c00e:	b920      	cbnz	r0, 801c01a <_dtoa_r+0x3a>
 801c010:	4ba7      	ldr	r3, [pc, #668]	; (801c2b0 <_dtoa_r+0x2d0>)
 801c012:	21ea      	movs	r1, #234	; 0xea
 801c014:	48a7      	ldr	r0, [pc, #668]	; (801c2b4 <_dtoa_r+0x2d4>)
 801c016:	f001 ffd9 	bl	801dfcc <__assert_func>
 801c01a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c01e:	6005      	str	r5, [r0, #0]
 801c020:	60c5      	str	r5, [r0, #12]
 801c022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c024:	6819      	ldr	r1, [r3, #0]
 801c026:	b151      	cbz	r1, 801c03e <_dtoa_r+0x5e>
 801c028:	685a      	ldr	r2, [r3, #4]
 801c02a:	604a      	str	r2, [r1, #4]
 801c02c:	2301      	movs	r3, #1
 801c02e:	4093      	lsls	r3, r2
 801c030:	608b      	str	r3, [r1, #8]
 801c032:	4620      	mov	r0, r4
 801c034:	f001 f994 	bl	801d360 <_Bfree>
 801c038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c03a:	2200      	movs	r2, #0
 801c03c:	601a      	str	r2, [r3, #0]
 801c03e:	1e3b      	subs	r3, r7, #0
 801c040:	bfaa      	itet	ge
 801c042:	2300      	movge	r3, #0
 801c044:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801c048:	f8c8 3000 	strge.w	r3, [r8]
 801c04c:	4b9a      	ldr	r3, [pc, #616]	; (801c2b8 <_dtoa_r+0x2d8>)
 801c04e:	bfbc      	itt	lt
 801c050:	2201      	movlt	r2, #1
 801c052:	f8c8 2000 	strlt.w	r2, [r8]
 801c056:	ea33 030b 	bics.w	r3, r3, fp
 801c05a:	d11b      	bne.n	801c094 <_dtoa_r+0xb4>
 801c05c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c05e:	f242 730f 	movw	r3, #9999	; 0x270f
 801c062:	6013      	str	r3, [r2, #0]
 801c064:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c068:	4333      	orrs	r3, r6
 801c06a:	f000 8592 	beq.w	801cb92 <_dtoa_r+0xbb2>
 801c06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c070:	b963      	cbnz	r3, 801c08c <_dtoa_r+0xac>
 801c072:	4b92      	ldr	r3, [pc, #584]	; (801c2bc <_dtoa_r+0x2dc>)
 801c074:	e022      	b.n	801c0bc <_dtoa_r+0xdc>
 801c076:	4b92      	ldr	r3, [pc, #584]	; (801c2c0 <_dtoa_r+0x2e0>)
 801c078:	9301      	str	r3, [sp, #4]
 801c07a:	3308      	adds	r3, #8
 801c07c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c07e:	6013      	str	r3, [r2, #0]
 801c080:	9801      	ldr	r0, [sp, #4]
 801c082:	b013      	add	sp, #76	; 0x4c
 801c084:	ecbd 8b04 	vpop	{d8-d9}
 801c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c08c:	4b8b      	ldr	r3, [pc, #556]	; (801c2bc <_dtoa_r+0x2dc>)
 801c08e:	9301      	str	r3, [sp, #4]
 801c090:	3303      	adds	r3, #3
 801c092:	e7f3      	b.n	801c07c <_dtoa_r+0x9c>
 801c094:	2200      	movs	r2, #0
 801c096:	2300      	movs	r3, #0
 801c098:	4650      	mov	r0, sl
 801c09a:	4659      	mov	r1, fp
 801c09c:	f7e4 fd2c 	bl	8000af8 <__aeabi_dcmpeq>
 801c0a0:	ec4b ab19 	vmov	d9, sl, fp
 801c0a4:	4680      	mov	r8, r0
 801c0a6:	b158      	cbz	r0, 801c0c0 <_dtoa_r+0xe0>
 801c0a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c0aa:	2301      	movs	r3, #1
 801c0ac:	6013      	str	r3, [r2, #0]
 801c0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	f000 856b 	beq.w	801cb8c <_dtoa_r+0xbac>
 801c0b6:	4883      	ldr	r0, [pc, #524]	; (801c2c4 <_dtoa_r+0x2e4>)
 801c0b8:	6018      	str	r0, [r3, #0]
 801c0ba:	1e43      	subs	r3, r0, #1
 801c0bc:	9301      	str	r3, [sp, #4]
 801c0be:	e7df      	b.n	801c080 <_dtoa_r+0xa0>
 801c0c0:	ec4b ab10 	vmov	d0, sl, fp
 801c0c4:	aa10      	add	r2, sp, #64	; 0x40
 801c0c6:	a911      	add	r1, sp, #68	; 0x44
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	f001 fcf7 	bl	801dabc <__d2b>
 801c0ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801c0d2:	ee08 0a10 	vmov	s16, r0
 801c0d6:	2d00      	cmp	r5, #0
 801c0d8:	f000 8084 	beq.w	801c1e4 <_dtoa_r+0x204>
 801c0dc:	ee19 3a90 	vmov	r3, s19
 801c0e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c0e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801c0e8:	4656      	mov	r6, sl
 801c0ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801c0ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c0f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c0f6:	4b74      	ldr	r3, [pc, #464]	; (801c2c8 <_dtoa_r+0x2e8>)
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	4630      	mov	r0, r6
 801c0fc:	4639      	mov	r1, r7
 801c0fe:	f7e4 f8db 	bl	80002b8 <__aeabi_dsub>
 801c102:	a365      	add	r3, pc, #404	; (adr r3, 801c298 <_dtoa_r+0x2b8>)
 801c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c108:	f7e4 fa8e 	bl	8000628 <__aeabi_dmul>
 801c10c:	a364      	add	r3, pc, #400	; (adr r3, 801c2a0 <_dtoa_r+0x2c0>)
 801c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c112:	f7e4 f8d3 	bl	80002bc <__adddf3>
 801c116:	4606      	mov	r6, r0
 801c118:	4628      	mov	r0, r5
 801c11a:	460f      	mov	r7, r1
 801c11c:	f7e4 fa1a 	bl	8000554 <__aeabi_i2d>
 801c120:	a361      	add	r3, pc, #388	; (adr r3, 801c2a8 <_dtoa_r+0x2c8>)
 801c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c126:	f7e4 fa7f 	bl	8000628 <__aeabi_dmul>
 801c12a:	4602      	mov	r2, r0
 801c12c:	460b      	mov	r3, r1
 801c12e:	4630      	mov	r0, r6
 801c130:	4639      	mov	r1, r7
 801c132:	f7e4 f8c3 	bl	80002bc <__adddf3>
 801c136:	4606      	mov	r6, r0
 801c138:	460f      	mov	r7, r1
 801c13a:	f7e4 fd25 	bl	8000b88 <__aeabi_d2iz>
 801c13e:	2200      	movs	r2, #0
 801c140:	9000      	str	r0, [sp, #0]
 801c142:	2300      	movs	r3, #0
 801c144:	4630      	mov	r0, r6
 801c146:	4639      	mov	r1, r7
 801c148:	f7e4 fce0 	bl	8000b0c <__aeabi_dcmplt>
 801c14c:	b150      	cbz	r0, 801c164 <_dtoa_r+0x184>
 801c14e:	9800      	ldr	r0, [sp, #0]
 801c150:	f7e4 fa00 	bl	8000554 <__aeabi_i2d>
 801c154:	4632      	mov	r2, r6
 801c156:	463b      	mov	r3, r7
 801c158:	f7e4 fcce 	bl	8000af8 <__aeabi_dcmpeq>
 801c15c:	b910      	cbnz	r0, 801c164 <_dtoa_r+0x184>
 801c15e:	9b00      	ldr	r3, [sp, #0]
 801c160:	3b01      	subs	r3, #1
 801c162:	9300      	str	r3, [sp, #0]
 801c164:	9b00      	ldr	r3, [sp, #0]
 801c166:	2b16      	cmp	r3, #22
 801c168:	d85a      	bhi.n	801c220 <_dtoa_r+0x240>
 801c16a:	9a00      	ldr	r2, [sp, #0]
 801c16c:	4b57      	ldr	r3, [pc, #348]	; (801c2cc <_dtoa_r+0x2ec>)
 801c16e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c176:	ec51 0b19 	vmov	r0, r1, d9
 801c17a:	f7e4 fcc7 	bl	8000b0c <__aeabi_dcmplt>
 801c17e:	2800      	cmp	r0, #0
 801c180:	d050      	beq.n	801c224 <_dtoa_r+0x244>
 801c182:	9b00      	ldr	r3, [sp, #0]
 801c184:	3b01      	subs	r3, #1
 801c186:	9300      	str	r3, [sp, #0]
 801c188:	2300      	movs	r3, #0
 801c18a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c18e:	1b5d      	subs	r5, r3, r5
 801c190:	1e6b      	subs	r3, r5, #1
 801c192:	9305      	str	r3, [sp, #20]
 801c194:	bf45      	ittet	mi
 801c196:	f1c5 0301 	rsbmi	r3, r5, #1
 801c19a:	9304      	strmi	r3, [sp, #16]
 801c19c:	2300      	movpl	r3, #0
 801c19e:	2300      	movmi	r3, #0
 801c1a0:	bf4c      	ite	mi
 801c1a2:	9305      	strmi	r3, [sp, #20]
 801c1a4:	9304      	strpl	r3, [sp, #16]
 801c1a6:	9b00      	ldr	r3, [sp, #0]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	db3d      	blt.n	801c228 <_dtoa_r+0x248>
 801c1ac:	9b05      	ldr	r3, [sp, #20]
 801c1ae:	9a00      	ldr	r2, [sp, #0]
 801c1b0:	920a      	str	r2, [sp, #40]	; 0x28
 801c1b2:	4413      	add	r3, r2
 801c1b4:	9305      	str	r3, [sp, #20]
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	9307      	str	r3, [sp, #28]
 801c1ba:	9b06      	ldr	r3, [sp, #24]
 801c1bc:	2b09      	cmp	r3, #9
 801c1be:	f200 8089 	bhi.w	801c2d4 <_dtoa_r+0x2f4>
 801c1c2:	2b05      	cmp	r3, #5
 801c1c4:	bfc4      	itt	gt
 801c1c6:	3b04      	subgt	r3, #4
 801c1c8:	9306      	strgt	r3, [sp, #24]
 801c1ca:	9b06      	ldr	r3, [sp, #24]
 801c1cc:	f1a3 0302 	sub.w	r3, r3, #2
 801c1d0:	bfcc      	ite	gt
 801c1d2:	2500      	movgt	r5, #0
 801c1d4:	2501      	movle	r5, #1
 801c1d6:	2b03      	cmp	r3, #3
 801c1d8:	f200 8087 	bhi.w	801c2ea <_dtoa_r+0x30a>
 801c1dc:	e8df f003 	tbb	[pc, r3]
 801c1e0:	59383a2d 	.word	0x59383a2d
 801c1e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801c1e8:	441d      	add	r5, r3
 801c1ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c1ee:	2b20      	cmp	r3, #32
 801c1f0:	bfc1      	itttt	gt
 801c1f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c1f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801c1fa:	fa0b f303 	lslgt.w	r3, fp, r3
 801c1fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 801c202:	bfda      	itte	le
 801c204:	f1c3 0320 	rsble	r3, r3, #32
 801c208:	fa06 f003 	lslle.w	r0, r6, r3
 801c20c:	4318      	orrgt	r0, r3
 801c20e:	f7e4 f991 	bl	8000534 <__aeabi_ui2d>
 801c212:	2301      	movs	r3, #1
 801c214:	4606      	mov	r6, r0
 801c216:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801c21a:	3d01      	subs	r5, #1
 801c21c:	930e      	str	r3, [sp, #56]	; 0x38
 801c21e:	e76a      	b.n	801c0f6 <_dtoa_r+0x116>
 801c220:	2301      	movs	r3, #1
 801c222:	e7b2      	b.n	801c18a <_dtoa_r+0x1aa>
 801c224:	900b      	str	r0, [sp, #44]	; 0x2c
 801c226:	e7b1      	b.n	801c18c <_dtoa_r+0x1ac>
 801c228:	9b04      	ldr	r3, [sp, #16]
 801c22a:	9a00      	ldr	r2, [sp, #0]
 801c22c:	1a9b      	subs	r3, r3, r2
 801c22e:	9304      	str	r3, [sp, #16]
 801c230:	4253      	negs	r3, r2
 801c232:	9307      	str	r3, [sp, #28]
 801c234:	2300      	movs	r3, #0
 801c236:	930a      	str	r3, [sp, #40]	; 0x28
 801c238:	e7bf      	b.n	801c1ba <_dtoa_r+0x1da>
 801c23a:	2300      	movs	r3, #0
 801c23c:	9308      	str	r3, [sp, #32]
 801c23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c240:	2b00      	cmp	r3, #0
 801c242:	dc55      	bgt.n	801c2f0 <_dtoa_r+0x310>
 801c244:	2301      	movs	r3, #1
 801c246:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c24a:	461a      	mov	r2, r3
 801c24c:	9209      	str	r2, [sp, #36]	; 0x24
 801c24e:	e00c      	b.n	801c26a <_dtoa_r+0x28a>
 801c250:	2301      	movs	r3, #1
 801c252:	e7f3      	b.n	801c23c <_dtoa_r+0x25c>
 801c254:	2300      	movs	r3, #0
 801c256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c258:	9308      	str	r3, [sp, #32]
 801c25a:	9b00      	ldr	r3, [sp, #0]
 801c25c:	4413      	add	r3, r2
 801c25e:	9302      	str	r3, [sp, #8]
 801c260:	3301      	adds	r3, #1
 801c262:	2b01      	cmp	r3, #1
 801c264:	9303      	str	r3, [sp, #12]
 801c266:	bfb8      	it	lt
 801c268:	2301      	movlt	r3, #1
 801c26a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c26c:	2200      	movs	r2, #0
 801c26e:	6042      	str	r2, [r0, #4]
 801c270:	2204      	movs	r2, #4
 801c272:	f102 0614 	add.w	r6, r2, #20
 801c276:	429e      	cmp	r6, r3
 801c278:	6841      	ldr	r1, [r0, #4]
 801c27a:	d93d      	bls.n	801c2f8 <_dtoa_r+0x318>
 801c27c:	4620      	mov	r0, r4
 801c27e:	f001 f82f 	bl	801d2e0 <_Balloc>
 801c282:	9001      	str	r0, [sp, #4]
 801c284:	2800      	cmp	r0, #0
 801c286:	d13b      	bne.n	801c300 <_dtoa_r+0x320>
 801c288:	4b11      	ldr	r3, [pc, #68]	; (801c2d0 <_dtoa_r+0x2f0>)
 801c28a:	4602      	mov	r2, r0
 801c28c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c290:	e6c0      	b.n	801c014 <_dtoa_r+0x34>
 801c292:	2301      	movs	r3, #1
 801c294:	e7df      	b.n	801c256 <_dtoa_r+0x276>
 801c296:	bf00      	nop
 801c298:	636f4361 	.word	0x636f4361
 801c29c:	3fd287a7 	.word	0x3fd287a7
 801c2a0:	8b60c8b3 	.word	0x8b60c8b3
 801c2a4:	3fc68a28 	.word	0x3fc68a28
 801c2a8:	509f79fb 	.word	0x509f79fb
 801c2ac:	3fd34413 	.word	0x3fd34413
 801c2b0:	08074316 	.word	0x08074316
 801c2b4:	0807432d 	.word	0x0807432d
 801c2b8:	7ff00000 	.word	0x7ff00000
 801c2bc:	08074312 	.word	0x08074312
 801c2c0:	08074309 	.word	0x08074309
 801c2c4:	08074189 	.word	0x08074189
 801c2c8:	3ff80000 	.word	0x3ff80000
 801c2cc:	08074498 	.word	0x08074498
 801c2d0:	08074388 	.word	0x08074388
 801c2d4:	2501      	movs	r5, #1
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	9306      	str	r3, [sp, #24]
 801c2da:	9508      	str	r5, [sp, #32]
 801c2dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c2e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c2e4:	2200      	movs	r2, #0
 801c2e6:	2312      	movs	r3, #18
 801c2e8:	e7b0      	b.n	801c24c <_dtoa_r+0x26c>
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	9308      	str	r3, [sp, #32]
 801c2ee:	e7f5      	b.n	801c2dc <_dtoa_r+0x2fc>
 801c2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801c2f6:	e7b8      	b.n	801c26a <_dtoa_r+0x28a>
 801c2f8:	3101      	adds	r1, #1
 801c2fa:	6041      	str	r1, [r0, #4]
 801c2fc:	0052      	lsls	r2, r2, #1
 801c2fe:	e7b8      	b.n	801c272 <_dtoa_r+0x292>
 801c300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c302:	9a01      	ldr	r2, [sp, #4]
 801c304:	601a      	str	r2, [r3, #0]
 801c306:	9b03      	ldr	r3, [sp, #12]
 801c308:	2b0e      	cmp	r3, #14
 801c30a:	f200 809d 	bhi.w	801c448 <_dtoa_r+0x468>
 801c30e:	2d00      	cmp	r5, #0
 801c310:	f000 809a 	beq.w	801c448 <_dtoa_r+0x468>
 801c314:	9b00      	ldr	r3, [sp, #0]
 801c316:	2b00      	cmp	r3, #0
 801c318:	dd32      	ble.n	801c380 <_dtoa_r+0x3a0>
 801c31a:	4ab7      	ldr	r2, [pc, #732]	; (801c5f8 <_dtoa_r+0x618>)
 801c31c:	f003 030f 	and.w	r3, r3, #15
 801c320:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801c324:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c328:	9b00      	ldr	r3, [sp, #0]
 801c32a:	05d8      	lsls	r0, r3, #23
 801c32c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801c330:	d516      	bpl.n	801c360 <_dtoa_r+0x380>
 801c332:	4bb2      	ldr	r3, [pc, #712]	; (801c5fc <_dtoa_r+0x61c>)
 801c334:	ec51 0b19 	vmov	r0, r1, d9
 801c338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c33c:	f7e4 fa9e 	bl	800087c <__aeabi_ddiv>
 801c340:	f007 070f 	and.w	r7, r7, #15
 801c344:	4682      	mov	sl, r0
 801c346:	468b      	mov	fp, r1
 801c348:	2503      	movs	r5, #3
 801c34a:	4eac      	ldr	r6, [pc, #688]	; (801c5fc <_dtoa_r+0x61c>)
 801c34c:	b957      	cbnz	r7, 801c364 <_dtoa_r+0x384>
 801c34e:	4642      	mov	r2, r8
 801c350:	464b      	mov	r3, r9
 801c352:	4650      	mov	r0, sl
 801c354:	4659      	mov	r1, fp
 801c356:	f7e4 fa91 	bl	800087c <__aeabi_ddiv>
 801c35a:	4682      	mov	sl, r0
 801c35c:	468b      	mov	fp, r1
 801c35e:	e028      	b.n	801c3b2 <_dtoa_r+0x3d2>
 801c360:	2502      	movs	r5, #2
 801c362:	e7f2      	b.n	801c34a <_dtoa_r+0x36a>
 801c364:	07f9      	lsls	r1, r7, #31
 801c366:	d508      	bpl.n	801c37a <_dtoa_r+0x39a>
 801c368:	4640      	mov	r0, r8
 801c36a:	4649      	mov	r1, r9
 801c36c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c370:	f7e4 f95a 	bl	8000628 <__aeabi_dmul>
 801c374:	3501      	adds	r5, #1
 801c376:	4680      	mov	r8, r0
 801c378:	4689      	mov	r9, r1
 801c37a:	107f      	asrs	r7, r7, #1
 801c37c:	3608      	adds	r6, #8
 801c37e:	e7e5      	b.n	801c34c <_dtoa_r+0x36c>
 801c380:	f000 809b 	beq.w	801c4ba <_dtoa_r+0x4da>
 801c384:	9b00      	ldr	r3, [sp, #0]
 801c386:	4f9d      	ldr	r7, [pc, #628]	; (801c5fc <_dtoa_r+0x61c>)
 801c388:	425e      	negs	r6, r3
 801c38a:	4b9b      	ldr	r3, [pc, #620]	; (801c5f8 <_dtoa_r+0x618>)
 801c38c:	f006 020f 	and.w	r2, r6, #15
 801c390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c398:	ec51 0b19 	vmov	r0, r1, d9
 801c39c:	f7e4 f944 	bl	8000628 <__aeabi_dmul>
 801c3a0:	1136      	asrs	r6, r6, #4
 801c3a2:	4682      	mov	sl, r0
 801c3a4:	468b      	mov	fp, r1
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	2502      	movs	r5, #2
 801c3aa:	2e00      	cmp	r6, #0
 801c3ac:	d17a      	bne.n	801c4a4 <_dtoa_r+0x4c4>
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d1d3      	bne.n	801c35a <_dtoa_r+0x37a>
 801c3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	f000 8082 	beq.w	801c4be <_dtoa_r+0x4de>
 801c3ba:	4b91      	ldr	r3, [pc, #580]	; (801c600 <_dtoa_r+0x620>)
 801c3bc:	2200      	movs	r2, #0
 801c3be:	4650      	mov	r0, sl
 801c3c0:	4659      	mov	r1, fp
 801c3c2:	f7e4 fba3 	bl	8000b0c <__aeabi_dcmplt>
 801c3c6:	2800      	cmp	r0, #0
 801c3c8:	d079      	beq.n	801c4be <_dtoa_r+0x4de>
 801c3ca:	9b03      	ldr	r3, [sp, #12]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d076      	beq.n	801c4be <_dtoa_r+0x4de>
 801c3d0:	9b02      	ldr	r3, [sp, #8]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	dd36      	ble.n	801c444 <_dtoa_r+0x464>
 801c3d6:	9b00      	ldr	r3, [sp, #0]
 801c3d8:	4650      	mov	r0, sl
 801c3da:	4659      	mov	r1, fp
 801c3dc:	1e5f      	subs	r7, r3, #1
 801c3de:	2200      	movs	r2, #0
 801c3e0:	4b88      	ldr	r3, [pc, #544]	; (801c604 <_dtoa_r+0x624>)
 801c3e2:	f7e4 f921 	bl	8000628 <__aeabi_dmul>
 801c3e6:	9e02      	ldr	r6, [sp, #8]
 801c3e8:	4682      	mov	sl, r0
 801c3ea:	468b      	mov	fp, r1
 801c3ec:	3501      	adds	r5, #1
 801c3ee:	4628      	mov	r0, r5
 801c3f0:	f7e4 f8b0 	bl	8000554 <__aeabi_i2d>
 801c3f4:	4652      	mov	r2, sl
 801c3f6:	465b      	mov	r3, fp
 801c3f8:	f7e4 f916 	bl	8000628 <__aeabi_dmul>
 801c3fc:	4b82      	ldr	r3, [pc, #520]	; (801c608 <_dtoa_r+0x628>)
 801c3fe:	2200      	movs	r2, #0
 801c400:	f7e3 ff5c 	bl	80002bc <__adddf3>
 801c404:	46d0      	mov	r8, sl
 801c406:	46d9      	mov	r9, fp
 801c408:	4682      	mov	sl, r0
 801c40a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801c40e:	2e00      	cmp	r6, #0
 801c410:	d158      	bne.n	801c4c4 <_dtoa_r+0x4e4>
 801c412:	4b7e      	ldr	r3, [pc, #504]	; (801c60c <_dtoa_r+0x62c>)
 801c414:	2200      	movs	r2, #0
 801c416:	4640      	mov	r0, r8
 801c418:	4649      	mov	r1, r9
 801c41a:	f7e3 ff4d 	bl	80002b8 <__aeabi_dsub>
 801c41e:	4652      	mov	r2, sl
 801c420:	465b      	mov	r3, fp
 801c422:	4680      	mov	r8, r0
 801c424:	4689      	mov	r9, r1
 801c426:	f7e4 fb8f 	bl	8000b48 <__aeabi_dcmpgt>
 801c42a:	2800      	cmp	r0, #0
 801c42c:	f040 8295 	bne.w	801c95a <_dtoa_r+0x97a>
 801c430:	4652      	mov	r2, sl
 801c432:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c436:	4640      	mov	r0, r8
 801c438:	4649      	mov	r1, r9
 801c43a:	f7e4 fb67 	bl	8000b0c <__aeabi_dcmplt>
 801c43e:	2800      	cmp	r0, #0
 801c440:	f040 8289 	bne.w	801c956 <_dtoa_r+0x976>
 801c444:	ec5b ab19 	vmov	sl, fp, d9
 801c448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	f2c0 8148 	blt.w	801c6e0 <_dtoa_r+0x700>
 801c450:	9a00      	ldr	r2, [sp, #0]
 801c452:	2a0e      	cmp	r2, #14
 801c454:	f300 8144 	bgt.w	801c6e0 <_dtoa_r+0x700>
 801c458:	4b67      	ldr	r3, [pc, #412]	; (801c5f8 <_dtoa_r+0x618>)
 801c45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c45e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c464:	2b00      	cmp	r3, #0
 801c466:	f280 80d5 	bge.w	801c614 <_dtoa_r+0x634>
 801c46a:	9b03      	ldr	r3, [sp, #12]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	f300 80d1 	bgt.w	801c614 <_dtoa_r+0x634>
 801c472:	f040 826f 	bne.w	801c954 <_dtoa_r+0x974>
 801c476:	4b65      	ldr	r3, [pc, #404]	; (801c60c <_dtoa_r+0x62c>)
 801c478:	2200      	movs	r2, #0
 801c47a:	4640      	mov	r0, r8
 801c47c:	4649      	mov	r1, r9
 801c47e:	f7e4 f8d3 	bl	8000628 <__aeabi_dmul>
 801c482:	4652      	mov	r2, sl
 801c484:	465b      	mov	r3, fp
 801c486:	f7e4 fb55 	bl	8000b34 <__aeabi_dcmpge>
 801c48a:	9e03      	ldr	r6, [sp, #12]
 801c48c:	4637      	mov	r7, r6
 801c48e:	2800      	cmp	r0, #0
 801c490:	f040 8245 	bne.w	801c91e <_dtoa_r+0x93e>
 801c494:	9d01      	ldr	r5, [sp, #4]
 801c496:	2331      	movs	r3, #49	; 0x31
 801c498:	f805 3b01 	strb.w	r3, [r5], #1
 801c49c:	9b00      	ldr	r3, [sp, #0]
 801c49e:	3301      	adds	r3, #1
 801c4a0:	9300      	str	r3, [sp, #0]
 801c4a2:	e240      	b.n	801c926 <_dtoa_r+0x946>
 801c4a4:	07f2      	lsls	r2, r6, #31
 801c4a6:	d505      	bpl.n	801c4b4 <_dtoa_r+0x4d4>
 801c4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c4ac:	f7e4 f8bc 	bl	8000628 <__aeabi_dmul>
 801c4b0:	3501      	adds	r5, #1
 801c4b2:	2301      	movs	r3, #1
 801c4b4:	1076      	asrs	r6, r6, #1
 801c4b6:	3708      	adds	r7, #8
 801c4b8:	e777      	b.n	801c3aa <_dtoa_r+0x3ca>
 801c4ba:	2502      	movs	r5, #2
 801c4bc:	e779      	b.n	801c3b2 <_dtoa_r+0x3d2>
 801c4be:	9f00      	ldr	r7, [sp, #0]
 801c4c0:	9e03      	ldr	r6, [sp, #12]
 801c4c2:	e794      	b.n	801c3ee <_dtoa_r+0x40e>
 801c4c4:	9901      	ldr	r1, [sp, #4]
 801c4c6:	4b4c      	ldr	r3, [pc, #304]	; (801c5f8 <_dtoa_r+0x618>)
 801c4c8:	4431      	add	r1, r6
 801c4ca:	910d      	str	r1, [sp, #52]	; 0x34
 801c4cc:	9908      	ldr	r1, [sp, #32]
 801c4ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c4d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c4d6:	2900      	cmp	r1, #0
 801c4d8:	d043      	beq.n	801c562 <_dtoa_r+0x582>
 801c4da:	494d      	ldr	r1, [pc, #308]	; (801c610 <_dtoa_r+0x630>)
 801c4dc:	2000      	movs	r0, #0
 801c4de:	f7e4 f9cd 	bl	800087c <__aeabi_ddiv>
 801c4e2:	4652      	mov	r2, sl
 801c4e4:	465b      	mov	r3, fp
 801c4e6:	f7e3 fee7 	bl	80002b8 <__aeabi_dsub>
 801c4ea:	9d01      	ldr	r5, [sp, #4]
 801c4ec:	4682      	mov	sl, r0
 801c4ee:	468b      	mov	fp, r1
 801c4f0:	4649      	mov	r1, r9
 801c4f2:	4640      	mov	r0, r8
 801c4f4:	f7e4 fb48 	bl	8000b88 <__aeabi_d2iz>
 801c4f8:	4606      	mov	r6, r0
 801c4fa:	f7e4 f82b 	bl	8000554 <__aeabi_i2d>
 801c4fe:	4602      	mov	r2, r0
 801c500:	460b      	mov	r3, r1
 801c502:	4640      	mov	r0, r8
 801c504:	4649      	mov	r1, r9
 801c506:	f7e3 fed7 	bl	80002b8 <__aeabi_dsub>
 801c50a:	3630      	adds	r6, #48	; 0x30
 801c50c:	f805 6b01 	strb.w	r6, [r5], #1
 801c510:	4652      	mov	r2, sl
 801c512:	465b      	mov	r3, fp
 801c514:	4680      	mov	r8, r0
 801c516:	4689      	mov	r9, r1
 801c518:	f7e4 faf8 	bl	8000b0c <__aeabi_dcmplt>
 801c51c:	2800      	cmp	r0, #0
 801c51e:	d163      	bne.n	801c5e8 <_dtoa_r+0x608>
 801c520:	4642      	mov	r2, r8
 801c522:	464b      	mov	r3, r9
 801c524:	4936      	ldr	r1, [pc, #216]	; (801c600 <_dtoa_r+0x620>)
 801c526:	2000      	movs	r0, #0
 801c528:	f7e3 fec6 	bl	80002b8 <__aeabi_dsub>
 801c52c:	4652      	mov	r2, sl
 801c52e:	465b      	mov	r3, fp
 801c530:	f7e4 faec 	bl	8000b0c <__aeabi_dcmplt>
 801c534:	2800      	cmp	r0, #0
 801c536:	f040 80b5 	bne.w	801c6a4 <_dtoa_r+0x6c4>
 801c53a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c53c:	429d      	cmp	r5, r3
 801c53e:	d081      	beq.n	801c444 <_dtoa_r+0x464>
 801c540:	4b30      	ldr	r3, [pc, #192]	; (801c604 <_dtoa_r+0x624>)
 801c542:	2200      	movs	r2, #0
 801c544:	4650      	mov	r0, sl
 801c546:	4659      	mov	r1, fp
 801c548:	f7e4 f86e 	bl	8000628 <__aeabi_dmul>
 801c54c:	4b2d      	ldr	r3, [pc, #180]	; (801c604 <_dtoa_r+0x624>)
 801c54e:	4682      	mov	sl, r0
 801c550:	468b      	mov	fp, r1
 801c552:	4640      	mov	r0, r8
 801c554:	4649      	mov	r1, r9
 801c556:	2200      	movs	r2, #0
 801c558:	f7e4 f866 	bl	8000628 <__aeabi_dmul>
 801c55c:	4680      	mov	r8, r0
 801c55e:	4689      	mov	r9, r1
 801c560:	e7c6      	b.n	801c4f0 <_dtoa_r+0x510>
 801c562:	4650      	mov	r0, sl
 801c564:	4659      	mov	r1, fp
 801c566:	f7e4 f85f 	bl	8000628 <__aeabi_dmul>
 801c56a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c56c:	9d01      	ldr	r5, [sp, #4]
 801c56e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c570:	4682      	mov	sl, r0
 801c572:	468b      	mov	fp, r1
 801c574:	4649      	mov	r1, r9
 801c576:	4640      	mov	r0, r8
 801c578:	f7e4 fb06 	bl	8000b88 <__aeabi_d2iz>
 801c57c:	4606      	mov	r6, r0
 801c57e:	f7e3 ffe9 	bl	8000554 <__aeabi_i2d>
 801c582:	3630      	adds	r6, #48	; 0x30
 801c584:	4602      	mov	r2, r0
 801c586:	460b      	mov	r3, r1
 801c588:	4640      	mov	r0, r8
 801c58a:	4649      	mov	r1, r9
 801c58c:	f7e3 fe94 	bl	80002b8 <__aeabi_dsub>
 801c590:	f805 6b01 	strb.w	r6, [r5], #1
 801c594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c596:	429d      	cmp	r5, r3
 801c598:	4680      	mov	r8, r0
 801c59a:	4689      	mov	r9, r1
 801c59c:	f04f 0200 	mov.w	r2, #0
 801c5a0:	d124      	bne.n	801c5ec <_dtoa_r+0x60c>
 801c5a2:	4b1b      	ldr	r3, [pc, #108]	; (801c610 <_dtoa_r+0x630>)
 801c5a4:	4650      	mov	r0, sl
 801c5a6:	4659      	mov	r1, fp
 801c5a8:	f7e3 fe88 	bl	80002bc <__adddf3>
 801c5ac:	4602      	mov	r2, r0
 801c5ae:	460b      	mov	r3, r1
 801c5b0:	4640      	mov	r0, r8
 801c5b2:	4649      	mov	r1, r9
 801c5b4:	f7e4 fac8 	bl	8000b48 <__aeabi_dcmpgt>
 801c5b8:	2800      	cmp	r0, #0
 801c5ba:	d173      	bne.n	801c6a4 <_dtoa_r+0x6c4>
 801c5bc:	4652      	mov	r2, sl
 801c5be:	465b      	mov	r3, fp
 801c5c0:	4913      	ldr	r1, [pc, #76]	; (801c610 <_dtoa_r+0x630>)
 801c5c2:	2000      	movs	r0, #0
 801c5c4:	f7e3 fe78 	bl	80002b8 <__aeabi_dsub>
 801c5c8:	4602      	mov	r2, r0
 801c5ca:	460b      	mov	r3, r1
 801c5cc:	4640      	mov	r0, r8
 801c5ce:	4649      	mov	r1, r9
 801c5d0:	f7e4 fa9c 	bl	8000b0c <__aeabi_dcmplt>
 801c5d4:	2800      	cmp	r0, #0
 801c5d6:	f43f af35 	beq.w	801c444 <_dtoa_r+0x464>
 801c5da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c5dc:	1e6b      	subs	r3, r5, #1
 801c5de:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c5e4:	2b30      	cmp	r3, #48	; 0x30
 801c5e6:	d0f8      	beq.n	801c5da <_dtoa_r+0x5fa>
 801c5e8:	9700      	str	r7, [sp, #0]
 801c5ea:	e049      	b.n	801c680 <_dtoa_r+0x6a0>
 801c5ec:	4b05      	ldr	r3, [pc, #20]	; (801c604 <_dtoa_r+0x624>)
 801c5ee:	f7e4 f81b 	bl	8000628 <__aeabi_dmul>
 801c5f2:	4680      	mov	r8, r0
 801c5f4:	4689      	mov	r9, r1
 801c5f6:	e7bd      	b.n	801c574 <_dtoa_r+0x594>
 801c5f8:	08074498 	.word	0x08074498
 801c5fc:	08074470 	.word	0x08074470
 801c600:	3ff00000 	.word	0x3ff00000
 801c604:	40240000 	.word	0x40240000
 801c608:	401c0000 	.word	0x401c0000
 801c60c:	40140000 	.word	0x40140000
 801c610:	3fe00000 	.word	0x3fe00000
 801c614:	9d01      	ldr	r5, [sp, #4]
 801c616:	4656      	mov	r6, sl
 801c618:	465f      	mov	r7, fp
 801c61a:	4642      	mov	r2, r8
 801c61c:	464b      	mov	r3, r9
 801c61e:	4630      	mov	r0, r6
 801c620:	4639      	mov	r1, r7
 801c622:	f7e4 f92b 	bl	800087c <__aeabi_ddiv>
 801c626:	f7e4 faaf 	bl	8000b88 <__aeabi_d2iz>
 801c62a:	4682      	mov	sl, r0
 801c62c:	f7e3 ff92 	bl	8000554 <__aeabi_i2d>
 801c630:	4642      	mov	r2, r8
 801c632:	464b      	mov	r3, r9
 801c634:	f7e3 fff8 	bl	8000628 <__aeabi_dmul>
 801c638:	4602      	mov	r2, r0
 801c63a:	460b      	mov	r3, r1
 801c63c:	4630      	mov	r0, r6
 801c63e:	4639      	mov	r1, r7
 801c640:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801c644:	f7e3 fe38 	bl	80002b8 <__aeabi_dsub>
 801c648:	f805 6b01 	strb.w	r6, [r5], #1
 801c64c:	9e01      	ldr	r6, [sp, #4]
 801c64e:	9f03      	ldr	r7, [sp, #12]
 801c650:	1bae      	subs	r6, r5, r6
 801c652:	42b7      	cmp	r7, r6
 801c654:	4602      	mov	r2, r0
 801c656:	460b      	mov	r3, r1
 801c658:	d135      	bne.n	801c6c6 <_dtoa_r+0x6e6>
 801c65a:	f7e3 fe2f 	bl	80002bc <__adddf3>
 801c65e:	4642      	mov	r2, r8
 801c660:	464b      	mov	r3, r9
 801c662:	4606      	mov	r6, r0
 801c664:	460f      	mov	r7, r1
 801c666:	f7e4 fa6f 	bl	8000b48 <__aeabi_dcmpgt>
 801c66a:	b9d0      	cbnz	r0, 801c6a2 <_dtoa_r+0x6c2>
 801c66c:	4642      	mov	r2, r8
 801c66e:	464b      	mov	r3, r9
 801c670:	4630      	mov	r0, r6
 801c672:	4639      	mov	r1, r7
 801c674:	f7e4 fa40 	bl	8000af8 <__aeabi_dcmpeq>
 801c678:	b110      	cbz	r0, 801c680 <_dtoa_r+0x6a0>
 801c67a:	f01a 0f01 	tst.w	sl, #1
 801c67e:	d110      	bne.n	801c6a2 <_dtoa_r+0x6c2>
 801c680:	4620      	mov	r0, r4
 801c682:	ee18 1a10 	vmov	r1, s16
 801c686:	f000 fe6b 	bl	801d360 <_Bfree>
 801c68a:	2300      	movs	r3, #0
 801c68c:	9800      	ldr	r0, [sp, #0]
 801c68e:	702b      	strb	r3, [r5, #0]
 801c690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c692:	3001      	adds	r0, #1
 801c694:	6018      	str	r0, [r3, #0]
 801c696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c698:	2b00      	cmp	r3, #0
 801c69a:	f43f acf1 	beq.w	801c080 <_dtoa_r+0xa0>
 801c69e:	601d      	str	r5, [r3, #0]
 801c6a0:	e4ee      	b.n	801c080 <_dtoa_r+0xa0>
 801c6a2:	9f00      	ldr	r7, [sp, #0]
 801c6a4:	462b      	mov	r3, r5
 801c6a6:	461d      	mov	r5, r3
 801c6a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c6ac:	2a39      	cmp	r2, #57	; 0x39
 801c6ae:	d106      	bne.n	801c6be <_dtoa_r+0x6de>
 801c6b0:	9a01      	ldr	r2, [sp, #4]
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	d1f7      	bne.n	801c6a6 <_dtoa_r+0x6c6>
 801c6b6:	9901      	ldr	r1, [sp, #4]
 801c6b8:	2230      	movs	r2, #48	; 0x30
 801c6ba:	3701      	adds	r7, #1
 801c6bc:	700a      	strb	r2, [r1, #0]
 801c6be:	781a      	ldrb	r2, [r3, #0]
 801c6c0:	3201      	adds	r2, #1
 801c6c2:	701a      	strb	r2, [r3, #0]
 801c6c4:	e790      	b.n	801c5e8 <_dtoa_r+0x608>
 801c6c6:	4ba6      	ldr	r3, [pc, #664]	; (801c960 <_dtoa_r+0x980>)
 801c6c8:	2200      	movs	r2, #0
 801c6ca:	f7e3 ffad 	bl	8000628 <__aeabi_dmul>
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	4606      	mov	r6, r0
 801c6d4:	460f      	mov	r7, r1
 801c6d6:	f7e4 fa0f 	bl	8000af8 <__aeabi_dcmpeq>
 801c6da:	2800      	cmp	r0, #0
 801c6dc:	d09d      	beq.n	801c61a <_dtoa_r+0x63a>
 801c6de:	e7cf      	b.n	801c680 <_dtoa_r+0x6a0>
 801c6e0:	9a08      	ldr	r2, [sp, #32]
 801c6e2:	2a00      	cmp	r2, #0
 801c6e4:	f000 80d7 	beq.w	801c896 <_dtoa_r+0x8b6>
 801c6e8:	9a06      	ldr	r2, [sp, #24]
 801c6ea:	2a01      	cmp	r2, #1
 801c6ec:	f300 80ba 	bgt.w	801c864 <_dtoa_r+0x884>
 801c6f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c6f2:	2a00      	cmp	r2, #0
 801c6f4:	f000 80b2 	beq.w	801c85c <_dtoa_r+0x87c>
 801c6f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c6fc:	9e07      	ldr	r6, [sp, #28]
 801c6fe:	9d04      	ldr	r5, [sp, #16]
 801c700:	9a04      	ldr	r2, [sp, #16]
 801c702:	441a      	add	r2, r3
 801c704:	9204      	str	r2, [sp, #16]
 801c706:	9a05      	ldr	r2, [sp, #20]
 801c708:	2101      	movs	r1, #1
 801c70a:	441a      	add	r2, r3
 801c70c:	4620      	mov	r0, r4
 801c70e:	9205      	str	r2, [sp, #20]
 801c710:	f000 ff28 	bl	801d564 <__i2b>
 801c714:	4607      	mov	r7, r0
 801c716:	2d00      	cmp	r5, #0
 801c718:	dd0c      	ble.n	801c734 <_dtoa_r+0x754>
 801c71a:	9b05      	ldr	r3, [sp, #20]
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	dd09      	ble.n	801c734 <_dtoa_r+0x754>
 801c720:	42ab      	cmp	r3, r5
 801c722:	9a04      	ldr	r2, [sp, #16]
 801c724:	bfa8      	it	ge
 801c726:	462b      	movge	r3, r5
 801c728:	1ad2      	subs	r2, r2, r3
 801c72a:	9204      	str	r2, [sp, #16]
 801c72c:	9a05      	ldr	r2, [sp, #20]
 801c72e:	1aed      	subs	r5, r5, r3
 801c730:	1ad3      	subs	r3, r2, r3
 801c732:	9305      	str	r3, [sp, #20]
 801c734:	9b07      	ldr	r3, [sp, #28]
 801c736:	b31b      	cbz	r3, 801c780 <_dtoa_r+0x7a0>
 801c738:	9b08      	ldr	r3, [sp, #32]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	f000 80af 	beq.w	801c89e <_dtoa_r+0x8be>
 801c740:	2e00      	cmp	r6, #0
 801c742:	dd13      	ble.n	801c76c <_dtoa_r+0x78c>
 801c744:	4639      	mov	r1, r7
 801c746:	4632      	mov	r2, r6
 801c748:	4620      	mov	r0, r4
 801c74a:	f000 ffcb 	bl	801d6e4 <__pow5mult>
 801c74e:	ee18 2a10 	vmov	r2, s16
 801c752:	4601      	mov	r1, r0
 801c754:	4607      	mov	r7, r0
 801c756:	4620      	mov	r0, r4
 801c758:	f000 ff1a 	bl	801d590 <__multiply>
 801c75c:	ee18 1a10 	vmov	r1, s16
 801c760:	4680      	mov	r8, r0
 801c762:	4620      	mov	r0, r4
 801c764:	f000 fdfc 	bl	801d360 <_Bfree>
 801c768:	ee08 8a10 	vmov	s16, r8
 801c76c:	9b07      	ldr	r3, [sp, #28]
 801c76e:	1b9a      	subs	r2, r3, r6
 801c770:	d006      	beq.n	801c780 <_dtoa_r+0x7a0>
 801c772:	ee18 1a10 	vmov	r1, s16
 801c776:	4620      	mov	r0, r4
 801c778:	f000 ffb4 	bl	801d6e4 <__pow5mult>
 801c77c:	ee08 0a10 	vmov	s16, r0
 801c780:	2101      	movs	r1, #1
 801c782:	4620      	mov	r0, r4
 801c784:	f000 feee 	bl	801d564 <__i2b>
 801c788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	4606      	mov	r6, r0
 801c78e:	f340 8088 	ble.w	801c8a2 <_dtoa_r+0x8c2>
 801c792:	461a      	mov	r2, r3
 801c794:	4601      	mov	r1, r0
 801c796:	4620      	mov	r0, r4
 801c798:	f000 ffa4 	bl	801d6e4 <__pow5mult>
 801c79c:	9b06      	ldr	r3, [sp, #24]
 801c79e:	2b01      	cmp	r3, #1
 801c7a0:	4606      	mov	r6, r0
 801c7a2:	f340 8081 	ble.w	801c8a8 <_dtoa_r+0x8c8>
 801c7a6:	f04f 0800 	mov.w	r8, #0
 801c7aa:	6933      	ldr	r3, [r6, #16]
 801c7ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c7b0:	6918      	ldr	r0, [r3, #16]
 801c7b2:	f000 fe87 	bl	801d4c4 <__hi0bits>
 801c7b6:	f1c0 0020 	rsb	r0, r0, #32
 801c7ba:	9b05      	ldr	r3, [sp, #20]
 801c7bc:	4418      	add	r0, r3
 801c7be:	f010 001f 	ands.w	r0, r0, #31
 801c7c2:	f000 8092 	beq.w	801c8ea <_dtoa_r+0x90a>
 801c7c6:	f1c0 0320 	rsb	r3, r0, #32
 801c7ca:	2b04      	cmp	r3, #4
 801c7cc:	f340 808a 	ble.w	801c8e4 <_dtoa_r+0x904>
 801c7d0:	f1c0 001c 	rsb	r0, r0, #28
 801c7d4:	9b04      	ldr	r3, [sp, #16]
 801c7d6:	4403      	add	r3, r0
 801c7d8:	9304      	str	r3, [sp, #16]
 801c7da:	9b05      	ldr	r3, [sp, #20]
 801c7dc:	4403      	add	r3, r0
 801c7de:	4405      	add	r5, r0
 801c7e0:	9305      	str	r3, [sp, #20]
 801c7e2:	9b04      	ldr	r3, [sp, #16]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	dd07      	ble.n	801c7f8 <_dtoa_r+0x818>
 801c7e8:	ee18 1a10 	vmov	r1, s16
 801c7ec:	461a      	mov	r2, r3
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	f000 ffd2 	bl	801d798 <__lshift>
 801c7f4:	ee08 0a10 	vmov	s16, r0
 801c7f8:	9b05      	ldr	r3, [sp, #20]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	dd05      	ble.n	801c80a <_dtoa_r+0x82a>
 801c7fe:	4631      	mov	r1, r6
 801c800:	461a      	mov	r2, r3
 801c802:	4620      	mov	r0, r4
 801c804:	f000 ffc8 	bl	801d798 <__lshift>
 801c808:	4606      	mov	r6, r0
 801c80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d06e      	beq.n	801c8ee <_dtoa_r+0x90e>
 801c810:	ee18 0a10 	vmov	r0, s16
 801c814:	4631      	mov	r1, r6
 801c816:	f001 f82f 	bl	801d878 <__mcmp>
 801c81a:	2800      	cmp	r0, #0
 801c81c:	da67      	bge.n	801c8ee <_dtoa_r+0x90e>
 801c81e:	9b00      	ldr	r3, [sp, #0]
 801c820:	3b01      	subs	r3, #1
 801c822:	ee18 1a10 	vmov	r1, s16
 801c826:	9300      	str	r3, [sp, #0]
 801c828:	220a      	movs	r2, #10
 801c82a:	2300      	movs	r3, #0
 801c82c:	4620      	mov	r0, r4
 801c82e:	f000 fdb9 	bl	801d3a4 <__multadd>
 801c832:	9b08      	ldr	r3, [sp, #32]
 801c834:	ee08 0a10 	vmov	s16, r0
 801c838:	2b00      	cmp	r3, #0
 801c83a:	f000 81b1 	beq.w	801cba0 <_dtoa_r+0xbc0>
 801c83e:	2300      	movs	r3, #0
 801c840:	4639      	mov	r1, r7
 801c842:	220a      	movs	r2, #10
 801c844:	4620      	mov	r0, r4
 801c846:	f000 fdad 	bl	801d3a4 <__multadd>
 801c84a:	9b02      	ldr	r3, [sp, #8]
 801c84c:	2b00      	cmp	r3, #0
 801c84e:	4607      	mov	r7, r0
 801c850:	f300 808e 	bgt.w	801c970 <_dtoa_r+0x990>
 801c854:	9b06      	ldr	r3, [sp, #24]
 801c856:	2b02      	cmp	r3, #2
 801c858:	dc51      	bgt.n	801c8fe <_dtoa_r+0x91e>
 801c85a:	e089      	b.n	801c970 <_dtoa_r+0x990>
 801c85c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c85e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c862:	e74b      	b.n	801c6fc <_dtoa_r+0x71c>
 801c864:	9b03      	ldr	r3, [sp, #12]
 801c866:	1e5e      	subs	r6, r3, #1
 801c868:	9b07      	ldr	r3, [sp, #28]
 801c86a:	42b3      	cmp	r3, r6
 801c86c:	bfbf      	itttt	lt
 801c86e:	9b07      	ldrlt	r3, [sp, #28]
 801c870:	9607      	strlt	r6, [sp, #28]
 801c872:	1af2      	sublt	r2, r6, r3
 801c874:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c876:	bfb6      	itet	lt
 801c878:	189b      	addlt	r3, r3, r2
 801c87a:	1b9e      	subge	r6, r3, r6
 801c87c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c87e:	9b03      	ldr	r3, [sp, #12]
 801c880:	bfb8      	it	lt
 801c882:	2600      	movlt	r6, #0
 801c884:	2b00      	cmp	r3, #0
 801c886:	bfb7      	itett	lt
 801c888:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c88c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c890:	1a9d      	sublt	r5, r3, r2
 801c892:	2300      	movlt	r3, #0
 801c894:	e734      	b.n	801c700 <_dtoa_r+0x720>
 801c896:	9e07      	ldr	r6, [sp, #28]
 801c898:	9d04      	ldr	r5, [sp, #16]
 801c89a:	9f08      	ldr	r7, [sp, #32]
 801c89c:	e73b      	b.n	801c716 <_dtoa_r+0x736>
 801c89e:	9a07      	ldr	r2, [sp, #28]
 801c8a0:	e767      	b.n	801c772 <_dtoa_r+0x792>
 801c8a2:	9b06      	ldr	r3, [sp, #24]
 801c8a4:	2b01      	cmp	r3, #1
 801c8a6:	dc18      	bgt.n	801c8da <_dtoa_r+0x8fa>
 801c8a8:	f1ba 0f00 	cmp.w	sl, #0
 801c8ac:	d115      	bne.n	801c8da <_dtoa_r+0x8fa>
 801c8ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c8b2:	b993      	cbnz	r3, 801c8da <_dtoa_r+0x8fa>
 801c8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c8b8:	0d1b      	lsrs	r3, r3, #20
 801c8ba:	051b      	lsls	r3, r3, #20
 801c8bc:	b183      	cbz	r3, 801c8e0 <_dtoa_r+0x900>
 801c8be:	9b04      	ldr	r3, [sp, #16]
 801c8c0:	3301      	adds	r3, #1
 801c8c2:	9304      	str	r3, [sp, #16]
 801c8c4:	9b05      	ldr	r3, [sp, #20]
 801c8c6:	3301      	adds	r3, #1
 801c8c8:	9305      	str	r3, [sp, #20]
 801c8ca:	f04f 0801 	mov.w	r8, #1
 801c8ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	f47f af6a 	bne.w	801c7aa <_dtoa_r+0x7ca>
 801c8d6:	2001      	movs	r0, #1
 801c8d8:	e76f      	b.n	801c7ba <_dtoa_r+0x7da>
 801c8da:	f04f 0800 	mov.w	r8, #0
 801c8de:	e7f6      	b.n	801c8ce <_dtoa_r+0x8ee>
 801c8e0:	4698      	mov	r8, r3
 801c8e2:	e7f4      	b.n	801c8ce <_dtoa_r+0x8ee>
 801c8e4:	f43f af7d 	beq.w	801c7e2 <_dtoa_r+0x802>
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	301c      	adds	r0, #28
 801c8ec:	e772      	b.n	801c7d4 <_dtoa_r+0x7f4>
 801c8ee:	9b03      	ldr	r3, [sp, #12]
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	dc37      	bgt.n	801c964 <_dtoa_r+0x984>
 801c8f4:	9b06      	ldr	r3, [sp, #24]
 801c8f6:	2b02      	cmp	r3, #2
 801c8f8:	dd34      	ble.n	801c964 <_dtoa_r+0x984>
 801c8fa:	9b03      	ldr	r3, [sp, #12]
 801c8fc:	9302      	str	r3, [sp, #8]
 801c8fe:	9b02      	ldr	r3, [sp, #8]
 801c900:	b96b      	cbnz	r3, 801c91e <_dtoa_r+0x93e>
 801c902:	4631      	mov	r1, r6
 801c904:	2205      	movs	r2, #5
 801c906:	4620      	mov	r0, r4
 801c908:	f000 fd4c 	bl	801d3a4 <__multadd>
 801c90c:	4601      	mov	r1, r0
 801c90e:	4606      	mov	r6, r0
 801c910:	ee18 0a10 	vmov	r0, s16
 801c914:	f000 ffb0 	bl	801d878 <__mcmp>
 801c918:	2800      	cmp	r0, #0
 801c91a:	f73f adbb 	bgt.w	801c494 <_dtoa_r+0x4b4>
 801c91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c920:	9d01      	ldr	r5, [sp, #4]
 801c922:	43db      	mvns	r3, r3
 801c924:	9300      	str	r3, [sp, #0]
 801c926:	f04f 0800 	mov.w	r8, #0
 801c92a:	4631      	mov	r1, r6
 801c92c:	4620      	mov	r0, r4
 801c92e:	f000 fd17 	bl	801d360 <_Bfree>
 801c932:	2f00      	cmp	r7, #0
 801c934:	f43f aea4 	beq.w	801c680 <_dtoa_r+0x6a0>
 801c938:	f1b8 0f00 	cmp.w	r8, #0
 801c93c:	d005      	beq.n	801c94a <_dtoa_r+0x96a>
 801c93e:	45b8      	cmp	r8, r7
 801c940:	d003      	beq.n	801c94a <_dtoa_r+0x96a>
 801c942:	4641      	mov	r1, r8
 801c944:	4620      	mov	r0, r4
 801c946:	f000 fd0b 	bl	801d360 <_Bfree>
 801c94a:	4639      	mov	r1, r7
 801c94c:	4620      	mov	r0, r4
 801c94e:	f000 fd07 	bl	801d360 <_Bfree>
 801c952:	e695      	b.n	801c680 <_dtoa_r+0x6a0>
 801c954:	2600      	movs	r6, #0
 801c956:	4637      	mov	r7, r6
 801c958:	e7e1      	b.n	801c91e <_dtoa_r+0x93e>
 801c95a:	9700      	str	r7, [sp, #0]
 801c95c:	4637      	mov	r7, r6
 801c95e:	e599      	b.n	801c494 <_dtoa_r+0x4b4>
 801c960:	40240000 	.word	0x40240000
 801c964:	9b08      	ldr	r3, [sp, #32]
 801c966:	2b00      	cmp	r3, #0
 801c968:	f000 80ca 	beq.w	801cb00 <_dtoa_r+0xb20>
 801c96c:	9b03      	ldr	r3, [sp, #12]
 801c96e:	9302      	str	r3, [sp, #8]
 801c970:	2d00      	cmp	r5, #0
 801c972:	dd05      	ble.n	801c980 <_dtoa_r+0x9a0>
 801c974:	4639      	mov	r1, r7
 801c976:	462a      	mov	r2, r5
 801c978:	4620      	mov	r0, r4
 801c97a:	f000 ff0d 	bl	801d798 <__lshift>
 801c97e:	4607      	mov	r7, r0
 801c980:	f1b8 0f00 	cmp.w	r8, #0
 801c984:	d05b      	beq.n	801ca3e <_dtoa_r+0xa5e>
 801c986:	6879      	ldr	r1, [r7, #4]
 801c988:	4620      	mov	r0, r4
 801c98a:	f000 fca9 	bl	801d2e0 <_Balloc>
 801c98e:	4605      	mov	r5, r0
 801c990:	b928      	cbnz	r0, 801c99e <_dtoa_r+0x9be>
 801c992:	4b87      	ldr	r3, [pc, #540]	; (801cbb0 <_dtoa_r+0xbd0>)
 801c994:	4602      	mov	r2, r0
 801c996:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c99a:	f7ff bb3b 	b.w	801c014 <_dtoa_r+0x34>
 801c99e:	693a      	ldr	r2, [r7, #16]
 801c9a0:	3202      	adds	r2, #2
 801c9a2:	0092      	lsls	r2, r2, #2
 801c9a4:	f107 010c 	add.w	r1, r7, #12
 801c9a8:	300c      	adds	r0, #12
 801c9aa:	f7fd fbf1 	bl	801a190 <memcpy>
 801c9ae:	2201      	movs	r2, #1
 801c9b0:	4629      	mov	r1, r5
 801c9b2:	4620      	mov	r0, r4
 801c9b4:	f000 fef0 	bl	801d798 <__lshift>
 801c9b8:	9b01      	ldr	r3, [sp, #4]
 801c9ba:	f103 0901 	add.w	r9, r3, #1
 801c9be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c9c2:	4413      	add	r3, r2
 801c9c4:	9305      	str	r3, [sp, #20]
 801c9c6:	f00a 0301 	and.w	r3, sl, #1
 801c9ca:	46b8      	mov	r8, r7
 801c9cc:	9304      	str	r3, [sp, #16]
 801c9ce:	4607      	mov	r7, r0
 801c9d0:	4631      	mov	r1, r6
 801c9d2:	ee18 0a10 	vmov	r0, s16
 801c9d6:	f7ff fa77 	bl	801bec8 <quorem>
 801c9da:	4641      	mov	r1, r8
 801c9dc:	9002      	str	r0, [sp, #8]
 801c9de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c9e2:	ee18 0a10 	vmov	r0, s16
 801c9e6:	f000 ff47 	bl	801d878 <__mcmp>
 801c9ea:	463a      	mov	r2, r7
 801c9ec:	9003      	str	r0, [sp, #12]
 801c9ee:	4631      	mov	r1, r6
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	f000 ff5d 	bl	801d8b0 <__mdiff>
 801c9f6:	68c2      	ldr	r2, [r0, #12]
 801c9f8:	f109 3bff 	add.w	fp, r9, #4294967295
 801c9fc:	4605      	mov	r5, r0
 801c9fe:	bb02      	cbnz	r2, 801ca42 <_dtoa_r+0xa62>
 801ca00:	4601      	mov	r1, r0
 801ca02:	ee18 0a10 	vmov	r0, s16
 801ca06:	f000 ff37 	bl	801d878 <__mcmp>
 801ca0a:	4602      	mov	r2, r0
 801ca0c:	4629      	mov	r1, r5
 801ca0e:	4620      	mov	r0, r4
 801ca10:	9207      	str	r2, [sp, #28]
 801ca12:	f000 fca5 	bl	801d360 <_Bfree>
 801ca16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801ca1a:	ea43 0102 	orr.w	r1, r3, r2
 801ca1e:	9b04      	ldr	r3, [sp, #16]
 801ca20:	430b      	orrs	r3, r1
 801ca22:	464d      	mov	r5, r9
 801ca24:	d10f      	bne.n	801ca46 <_dtoa_r+0xa66>
 801ca26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ca2a:	d02a      	beq.n	801ca82 <_dtoa_r+0xaa2>
 801ca2c:	9b03      	ldr	r3, [sp, #12]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	dd02      	ble.n	801ca38 <_dtoa_r+0xa58>
 801ca32:	9b02      	ldr	r3, [sp, #8]
 801ca34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801ca38:	f88b a000 	strb.w	sl, [fp]
 801ca3c:	e775      	b.n	801c92a <_dtoa_r+0x94a>
 801ca3e:	4638      	mov	r0, r7
 801ca40:	e7ba      	b.n	801c9b8 <_dtoa_r+0x9d8>
 801ca42:	2201      	movs	r2, #1
 801ca44:	e7e2      	b.n	801ca0c <_dtoa_r+0xa2c>
 801ca46:	9b03      	ldr	r3, [sp, #12]
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	db04      	blt.n	801ca56 <_dtoa_r+0xa76>
 801ca4c:	9906      	ldr	r1, [sp, #24]
 801ca4e:	430b      	orrs	r3, r1
 801ca50:	9904      	ldr	r1, [sp, #16]
 801ca52:	430b      	orrs	r3, r1
 801ca54:	d122      	bne.n	801ca9c <_dtoa_r+0xabc>
 801ca56:	2a00      	cmp	r2, #0
 801ca58:	ddee      	ble.n	801ca38 <_dtoa_r+0xa58>
 801ca5a:	ee18 1a10 	vmov	r1, s16
 801ca5e:	2201      	movs	r2, #1
 801ca60:	4620      	mov	r0, r4
 801ca62:	f000 fe99 	bl	801d798 <__lshift>
 801ca66:	4631      	mov	r1, r6
 801ca68:	ee08 0a10 	vmov	s16, r0
 801ca6c:	f000 ff04 	bl	801d878 <__mcmp>
 801ca70:	2800      	cmp	r0, #0
 801ca72:	dc03      	bgt.n	801ca7c <_dtoa_r+0xa9c>
 801ca74:	d1e0      	bne.n	801ca38 <_dtoa_r+0xa58>
 801ca76:	f01a 0f01 	tst.w	sl, #1
 801ca7a:	d0dd      	beq.n	801ca38 <_dtoa_r+0xa58>
 801ca7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801ca80:	d1d7      	bne.n	801ca32 <_dtoa_r+0xa52>
 801ca82:	2339      	movs	r3, #57	; 0x39
 801ca84:	f88b 3000 	strb.w	r3, [fp]
 801ca88:	462b      	mov	r3, r5
 801ca8a:	461d      	mov	r5, r3
 801ca8c:	3b01      	subs	r3, #1
 801ca8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ca92:	2a39      	cmp	r2, #57	; 0x39
 801ca94:	d071      	beq.n	801cb7a <_dtoa_r+0xb9a>
 801ca96:	3201      	adds	r2, #1
 801ca98:	701a      	strb	r2, [r3, #0]
 801ca9a:	e746      	b.n	801c92a <_dtoa_r+0x94a>
 801ca9c:	2a00      	cmp	r2, #0
 801ca9e:	dd07      	ble.n	801cab0 <_dtoa_r+0xad0>
 801caa0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801caa4:	d0ed      	beq.n	801ca82 <_dtoa_r+0xaa2>
 801caa6:	f10a 0301 	add.w	r3, sl, #1
 801caaa:	f88b 3000 	strb.w	r3, [fp]
 801caae:	e73c      	b.n	801c92a <_dtoa_r+0x94a>
 801cab0:	9b05      	ldr	r3, [sp, #20]
 801cab2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801cab6:	4599      	cmp	r9, r3
 801cab8:	d047      	beq.n	801cb4a <_dtoa_r+0xb6a>
 801caba:	ee18 1a10 	vmov	r1, s16
 801cabe:	2300      	movs	r3, #0
 801cac0:	220a      	movs	r2, #10
 801cac2:	4620      	mov	r0, r4
 801cac4:	f000 fc6e 	bl	801d3a4 <__multadd>
 801cac8:	45b8      	cmp	r8, r7
 801caca:	ee08 0a10 	vmov	s16, r0
 801cace:	f04f 0300 	mov.w	r3, #0
 801cad2:	f04f 020a 	mov.w	r2, #10
 801cad6:	4641      	mov	r1, r8
 801cad8:	4620      	mov	r0, r4
 801cada:	d106      	bne.n	801caea <_dtoa_r+0xb0a>
 801cadc:	f000 fc62 	bl	801d3a4 <__multadd>
 801cae0:	4680      	mov	r8, r0
 801cae2:	4607      	mov	r7, r0
 801cae4:	f109 0901 	add.w	r9, r9, #1
 801cae8:	e772      	b.n	801c9d0 <_dtoa_r+0x9f0>
 801caea:	f000 fc5b 	bl	801d3a4 <__multadd>
 801caee:	4639      	mov	r1, r7
 801caf0:	4680      	mov	r8, r0
 801caf2:	2300      	movs	r3, #0
 801caf4:	220a      	movs	r2, #10
 801caf6:	4620      	mov	r0, r4
 801caf8:	f000 fc54 	bl	801d3a4 <__multadd>
 801cafc:	4607      	mov	r7, r0
 801cafe:	e7f1      	b.n	801cae4 <_dtoa_r+0xb04>
 801cb00:	9b03      	ldr	r3, [sp, #12]
 801cb02:	9302      	str	r3, [sp, #8]
 801cb04:	9d01      	ldr	r5, [sp, #4]
 801cb06:	ee18 0a10 	vmov	r0, s16
 801cb0a:	4631      	mov	r1, r6
 801cb0c:	f7ff f9dc 	bl	801bec8 <quorem>
 801cb10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801cb14:	9b01      	ldr	r3, [sp, #4]
 801cb16:	f805 ab01 	strb.w	sl, [r5], #1
 801cb1a:	1aea      	subs	r2, r5, r3
 801cb1c:	9b02      	ldr	r3, [sp, #8]
 801cb1e:	4293      	cmp	r3, r2
 801cb20:	dd09      	ble.n	801cb36 <_dtoa_r+0xb56>
 801cb22:	ee18 1a10 	vmov	r1, s16
 801cb26:	2300      	movs	r3, #0
 801cb28:	220a      	movs	r2, #10
 801cb2a:	4620      	mov	r0, r4
 801cb2c:	f000 fc3a 	bl	801d3a4 <__multadd>
 801cb30:	ee08 0a10 	vmov	s16, r0
 801cb34:	e7e7      	b.n	801cb06 <_dtoa_r+0xb26>
 801cb36:	9b02      	ldr	r3, [sp, #8]
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	bfc8      	it	gt
 801cb3c:	461d      	movgt	r5, r3
 801cb3e:	9b01      	ldr	r3, [sp, #4]
 801cb40:	bfd8      	it	le
 801cb42:	2501      	movle	r5, #1
 801cb44:	441d      	add	r5, r3
 801cb46:	f04f 0800 	mov.w	r8, #0
 801cb4a:	ee18 1a10 	vmov	r1, s16
 801cb4e:	2201      	movs	r2, #1
 801cb50:	4620      	mov	r0, r4
 801cb52:	f000 fe21 	bl	801d798 <__lshift>
 801cb56:	4631      	mov	r1, r6
 801cb58:	ee08 0a10 	vmov	s16, r0
 801cb5c:	f000 fe8c 	bl	801d878 <__mcmp>
 801cb60:	2800      	cmp	r0, #0
 801cb62:	dc91      	bgt.n	801ca88 <_dtoa_r+0xaa8>
 801cb64:	d102      	bne.n	801cb6c <_dtoa_r+0xb8c>
 801cb66:	f01a 0f01 	tst.w	sl, #1
 801cb6a:	d18d      	bne.n	801ca88 <_dtoa_r+0xaa8>
 801cb6c:	462b      	mov	r3, r5
 801cb6e:	461d      	mov	r5, r3
 801cb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cb74:	2a30      	cmp	r2, #48	; 0x30
 801cb76:	d0fa      	beq.n	801cb6e <_dtoa_r+0xb8e>
 801cb78:	e6d7      	b.n	801c92a <_dtoa_r+0x94a>
 801cb7a:	9a01      	ldr	r2, [sp, #4]
 801cb7c:	429a      	cmp	r2, r3
 801cb7e:	d184      	bne.n	801ca8a <_dtoa_r+0xaaa>
 801cb80:	9b00      	ldr	r3, [sp, #0]
 801cb82:	3301      	adds	r3, #1
 801cb84:	9300      	str	r3, [sp, #0]
 801cb86:	2331      	movs	r3, #49	; 0x31
 801cb88:	7013      	strb	r3, [r2, #0]
 801cb8a:	e6ce      	b.n	801c92a <_dtoa_r+0x94a>
 801cb8c:	4b09      	ldr	r3, [pc, #36]	; (801cbb4 <_dtoa_r+0xbd4>)
 801cb8e:	f7ff ba95 	b.w	801c0bc <_dtoa_r+0xdc>
 801cb92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	f47f aa6e 	bne.w	801c076 <_dtoa_r+0x96>
 801cb9a:	4b07      	ldr	r3, [pc, #28]	; (801cbb8 <_dtoa_r+0xbd8>)
 801cb9c:	f7ff ba8e 	b.w	801c0bc <_dtoa_r+0xdc>
 801cba0:	9b02      	ldr	r3, [sp, #8]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	dcae      	bgt.n	801cb04 <_dtoa_r+0xb24>
 801cba6:	9b06      	ldr	r3, [sp, #24]
 801cba8:	2b02      	cmp	r3, #2
 801cbaa:	f73f aea8 	bgt.w	801c8fe <_dtoa_r+0x91e>
 801cbae:	e7a9      	b.n	801cb04 <_dtoa_r+0xb24>
 801cbb0:	08074388 	.word	0x08074388
 801cbb4:	08074188 	.word	0x08074188
 801cbb8:	08074309 	.word	0x08074309

0801cbbc <rshift>:
 801cbbc:	6903      	ldr	r3, [r0, #16]
 801cbbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801cbc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cbc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801cbca:	f100 0414 	add.w	r4, r0, #20
 801cbce:	dd45      	ble.n	801cc5c <rshift+0xa0>
 801cbd0:	f011 011f 	ands.w	r1, r1, #31
 801cbd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801cbd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801cbdc:	d10c      	bne.n	801cbf8 <rshift+0x3c>
 801cbde:	f100 0710 	add.w	r7, r0, #16
 801cbe2:	4629      	mov	r1, r5
 801cbe4:	42b1      	cmp	r1, r6
 801cbe6:	d334      	bcc.n	801cc52 <rshift+0x96>
 801cbe8:	1a9b      	subs	r3, r3, r2
 801cbea:	009b      	lsls	r3, r3, #2
 801cbec:	1eea      	subs	r2, r5, #3
 801cbee:	4296      	cmp	r6, r2
 801cbf0:	bf38      	it	cc
 801cbf2:	2300      	movcc	r3, #0
 801cbf4:	4423      	add	r3, r4
 801cbf6:	e015      	b.n	801cc24 <rshift+0x68>
 801cbf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801cbfc:	f1c1 0820 	rsb	r8, r1, #32
 801cc00:	40cf      	lsrs	r7, r1
 801cc02:	f105 0e04 	add.w	lr, r5, #4
 801cc06:	46a1      	mov	r9, r4
 801cc08:	4576      	cmp	r6, lr
 801cc0a:	46f4      	mov	ip, lr
 801cc0c:	d815      	bhi.n	801cc3a <rshift+0x7e>
 801cc0e:	1a9a      	subs	r2, r3, r2
 801cc10:	0092      	lsls	r2, r2, #2
 801cc12:	3a04      	subs	r2, #4
 801cc14:	3501      	adds	r5, #1
 801cc16:	42ae      	cmp	r6, r5
 801cc18:	bf38      	it	cc
 801cc1a:	2200      	movcc	r2, #0
 801cc1c:	18a3      	adds	r3, r4, r2
 801cc1e:	50a7      	str	r7, [r4, r2]
 801cc20:	b107      	cbz	r7, 801cc24 <rshift+0x68>
 801cc22:	3304      	adds	r3, #4
 801cc24:	1b1a      	subs	r2, r3, r4
 801cc26:	42a3      	cmp	r3, r4
 801cc28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801cc2c:	bf08      	it	eq
 801cc2e:	2300      	moveq	r3, #0
 801cc30:	6102      	str	r2, [r0, #16]
 801cc32:	bf08      	it	eq
 801cc34:	6143      	streq	r3, [r0, #20]
 801cc36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc3a:	f8dc c000 	ldr.w	ip, [ip]
 801cc3e:	fa0c fc08 	lsl.w	ip, ip, r8
 801cc42:	ea4c 0707 	orr.w	r7, ip, r7
 801cc46:	f849 7b04 	str.w	r7, [r9], #4
 801cc4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801cc4e:	40cf      	lsrs	r7, r1
 801cc50:	e7da      	b.n	801cc08 <rshift+0x4c>
 801cc52:	f851 cb04 	ldr.w	ip, [r1], #4
 801cc56:	f847 cf04 	str.w	ip, [r7, #4]!
 801cc5a:	e7c3      	b.n	801cbe4 <rshift+0x28>
 801cc5c:	4623      	mov	r3, r4
 801cc5e:	e7e1      	b.n	801cc24 <rshift+0x68>

0801cc60 <__hexdig_fun>:
 801cc60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801cc64:	2b09      	cmp	r3, #9
 801cc66:	d802      	bhi.n	801cc6e <__hexdig_fun+0xe>
 801cc68:	3820      	subs	r0, #32
 801cc6a:	b2c0      	uxtb	r0, r0
 801cc6c:	4770      	bx	lr
 801cc6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801cc72:	2b05      	cmp	r3, #5
 801cc74:	d801      	bhi.n	801cc7a <__hexdig_fun+0x1a>
 801cc76:	3847      	subs	r0, #71	; 0x47
 801cc78:	e7f7      	b.n	801cc6a <__hexdig_fun+0xa>
 801cc7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801cc7e:	2b05      	cmp	r3, #5
 801cc80:	d801      	bhi.n	801cc86 <__hexdig_fun+0x26>
 801cc82:	3827      	subs	r0, #39	; 0x27
 801cc84:	e7f1      	b.n	801cc6a <__hexdig_fun+0xa>
 801cc86:	2000      	movs	r0, #0
 801cc88:	4770      	bx	lr
	...

0801cc8c <__gethex>:
 801cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc90:	ed2d 8b02 	vpush	{d8}
 801cc94:	b089      	sub	sp, #36	; 0x24
 801cc96:	ee08 0a10 	vmov	s16, r0
 801cc9a:	9304      	str	r3, [sp, #16]
 801cc9c:	4bb4      	ldr	r3, [pc, #720]	; (801cf70 <__gethex+0x2e4>)
 801cc9e:	681b      	ldr	r3, [r3, #0]
 801cca0:	9301      	str	r3, [sp, #4]
 801cca2:	4618      	mov	r0, r3
 801cca4:	468b      	mov	fp, r1
 801cca6:	4690      	mov	r8, r2
 801cca8:	f7e3 faaa 	bl	8000200 <strlen>
 801ccac:	9b01      	ldr	r3, [sp, #4]
 801ccae:	f8db 2000 	ldr.w	r2, [fp]
 801ccb2:	4403      	add	r3, r0
 801ccb4:	4682      	mov	sl, r0
 801ccb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ccba:	9305      	str	r3, [sp, #20]
 801ccbc:	1c93      	adds	r3, r2, #2
 801ccbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801ccc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ccc6:	32fe      	adds	r2, #254	; 0xfe
 801ccc8:	18d1      	adds	r1, r2, r3
 801ccca:	461f      	mov	r7, r3
 801cccc:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ccd0:	9100      	str	r1, [sp, #0]
 801ccd2:	2830      	cmp	r0, #48	; 0x30
 801ccd4:	d0f8      	beq.n	801ccc8 <__gethex+0x3c>
 801ccd6:	f7ff ffc3 	bl	801cc60 <__hexdig_fun>
 801ccda:	4604      	mov	r4, r0
 801ccdc:	2800      	cmp	r0, #0
 801ccde:	d13a      	bne.n	801cd56 <__gethex+0xca>
 801cce0:	9901      	ldr	r1, [sp, #4]
 801cce2:	4652      	mov	r2, sl
 801cce4:	4638      	mov	r0, r7
 801cce6:	f001 f94f 	bl	801df88 <strncmp>
 801ccea:	4605      	mov	r5, r0
 801ccec:	2800      	cmp	r0, #0
 801ccee:	d168      	bne.n	801cdc2 <__gethex+0x136>
 801ccf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801ccf4:	eb07 060a 	add.w	r6, r7, sl
 801ccf8:	f7ff ffb2 	bl	801cc60 <__hexdig_fun>
 801ccfc:	2800      	cmp	r0, #0
 801ccfe:	d062      	beq.n	801cdc6 <__gethex+0x13a>
 801cd00:	4633      	mov	r3, r6
 801cd02:	7818      	ldrb	r0, [r3, #0]
 801cd04:	2830      	cmp	r0, #48	; 0x30
 801cd06:	461f      	mov	r7, r3
 801cd08:	f103 0301 	add.w	r3, r3, #1
 801cd0c:	d0f9      	beq.n	801cd02 <__gethex+0x76>
 801cd0e:	f7ff ffa7 	bl	801cc60 <__hexdig_fun>
 801cd12:	2301      	movs	r3, #1
 801cd14:	fab0 f480 	clz	r4, r0
 801cd18:	0964      	lsrs	r4, r4, #5
 801cd1a:	4635      	mov	r5, r6
 801cd1c:	9300      	str	r3, [sp, #0]
 801cd1e:	463a      	mov	r2, r7
 801cd20:	4616      	mov	r6, r2
 801cd22:	3201      	adds	r2, #1
 801cd24:	7830      	ldrb	r0, [r6, #0]
 801cd26:	f7ff ff9b 	bl	801cc60 <__hexdig_fun>
 801cd2a:	2800      	cmp	r0, #0
 801cd2c:	d1f8      	bne.n	801cd20 <__gethex+0x94>
 801cd2e:	9901      	ldr	r1, [sp, #4]
 801cd30:	4652      	mov	r2, sl
 801cd32:	4630      	mov	r0, r6
 801cd34:	f001 f928 	bl	801df88 <strncmp>
 801cd38:	b980      	cbnz	r0, 801cd5c <__gethex+0xd0>
 801cd3a:	b94d      	cbnz	r5, 801cd50 <__gethex+0xc4>
 801cd3c:	eb06 050a 	add.w	r5, r6, sl
 801cd40:	462a      	mov	r2, r5
 801cd42:	4616      	mov	r6, r2
 801cd44:	3201      	adds	r2, #1
 801cd46:	7830      	ldrb	r0, [r6, #0]
 801cd48:	f7ff ff8a 	bl	801cc60 <__hexdig_fun>
 801cd4c:	2800      	cmp	r0, #0
 801cd4e:	d1f8      	bne.n	801cd42 <__gethex+0xb6>
 801cd50:	1bad      	subs	r5, r5, r6
 801cd52:	00ad      	lsls	r5, r5, #2
 801cd54:	e004      	b.n	801cd60 <__gethex+0xd4>
 801cd56:	2400      	movs	r4, #0
 801cd58:	4625      	mov	r5, r4
 801cd5a:	e7e0      	b.n	801cd1e <__gethex+0x92>
 801cd5c:	2d00      	cmp	r5, #0
 801cd5e:	d1f7      	bne.n	801cd50 <__gethex+0xc4>
 801cd60:	7833      	ldrb	r3, [r6, #0]
 801cd62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cd66:	2b50      	cmp	r3, #80	; 0x50
 801cd68:	d13b      	bne.n	801cde2 <__gethex+0x156>
 801cd6a:	7873      	ldrb	r3, [r6, #1]
 801cd6c:	2b2b      	cmp	r3, #43	; 0x2b
 801cd6e:	d02c      	beq.n	801cdca <__gethex+0x13e>
 801cd70:	2b2d      	cmp	r3, #45	; 0x2d
 801cd72:	d02e      	beq.n	801cdd2 <__gethex+0x146>
 801cd74:	1c71      	adds	r1, r6, #1
 801cd76:	f04f 0900 	mov.w	r9, #0
 801cd7a:	7808      	ldrb	r0, [r1, #0]
 801cd7c:	f7ff ff70 	bl	801cc60 <__hexdig_fun>
 801cd80:	1e43      	subs	r3, r0, #1
 801cd82:	b2db      	uxtb	r3, r3
 801cd84:	2b18      	cmp	r3, #24
 801cd86:	d82c      	bhi.n	801cde2 <__gethex+0x156>
 801cd88:	f1a0 0210 	sub.w	r2, r0, #16
 801cd8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801cd90:	f7ff ff66 	bl	801cc60 <__hexdig_fun>
 801cd94:	1e43      	subs	r3, r0, #1
 801cd96:	b2db      	uxtb	r3, r3
 801cd98:	2b18      	cmp	r3, #24
 801cd9a:	d91d      	bls.n	801cdd8 <__gethex+0x14c>
 801cd9c:	f1b9 0f00 	cmp.w	r9, #0
 801cda0:	d000      	beq.n	801cda4 <__gethex+0x118>
 801cda2:	4252      	negs	r2, r2
 801cda4:	4415      	add	r5, r2
 801cda6:	f8cb 1000 	str.w	r1, [fp]
 801cdaa:	b1e4      	cbz	r4, 801cde6 <__gethex+0x15a>
 801cdac:	9b00      	ldr	r3, [sp, #0]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	bf14      	ite	ne
 801cdb2:	2700      	movne	r7, #0
 801cdb4:	2706      	moveq	r7, #6
 801cdb6:	4638      	mov	r0, r7
 801cdb8:	b009      	add	sp, #36	; 0x24
 801cdba:	ecbd 8b02 	vpop	{d8}
 801cdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdc2:	463e      	mov	r6, r7
 801cdc4:	4625      	mov	r5, r4
 801cdc6:	2401      	movs	r4, #1
 801cdc8:	e7ca      	b.n	801cd60 <__gethex+0xd4>
 801cdca:	f04f 0900 	mov.w	r9, #0
 801cdce:	1cb1      	adds	r1, r6, #2
 801cdd0:	e7d3      	b.n	801cd7a <__gethex+0xee>
 801cdd2:	f04f 0901 	mov.w	r9, #1
 801cdd6:	e7fa      	b.n	801cdce <__gethex+0x142>
 801cdd8:	230a      	movs	r3, #10
 801cdda:	fb03 0202 	mla	r2, r3, r2, r0
 801cdde:	3a10      	subs	r2, #16
 801cde0:	e7d4      	b.n	801cd8c <__gethex+0x100>
 801cde2:	4631      	mov	r1, r6
 801cde4:	e7df      	b.n	801cda6 <__gethex+0x11a>
 801cde6:	1bf3      	subs	r3, r6, r7
 801cde8:	3b01      	subs	r3, #1
 801cdea:	4621      	mov	r1, r4
 801cdec:	2b07      	cmp	r3, #7
 801cdee:	dc0b      	bgt.n	801ce08 <__gethex+0x17c>
 801cdf0:	ee18 0a10 	vmov	r0, s16
 801cdf4:	f000 fa74 	bl	801d2e0 <_Balloc>
 801cdf8:	4604      	mov	r4, r0
 801cdfa:	b940      	cbnz	r0, 801ce0e <__gethex+0x182>
 801cdfc:	4b5d      	ldr	r3, [pc, #372]	; (801cf74 <__gethex+0x2e8>)
 801cdfe:	4602      	mov	r2, r0
 801ce00:	21de      	movs	r1, #222	; 0xde
 801ce02:	485d      	ldr	r0, [pc, #372]	; (801cf78 <__gethex+0x2ec>)
 801ce04:	f001 f8e2 	bl	801dfcc <__assert_func>
 801ce08:	3101      	adds	r1, #1
 801ce0a:	105b      	asrs	r3, r3, #1
 801ce0c:	e7ee      	b.n	801cdec <__gethex+0x160>
 801ce0e:	f100 0914 	add.w	r9, r0, #20
 801ce12:	f04f 0b00 	mov.w	fp, #0
 801ce16:	f1ca 0301 	rsb	r3, sl, #1
 801ce1a:	f8cd 9008 	str.w	r9, [sp, #8]
 801ce1e:	f8cd b000 	str.w	fp, [sp]
 801ce22:	9306      	str	r3, [sp, #24]
 801ce24:	42b7      	cmp	r7, r6
 801ce26:	d340      	bcc.n	801ceaa <__gethex+0x21e>
 801ce28:	9802      	ldr	r0, [sp, #8]
 801ce2a:	9b00      	ldr	r3, [sp, #0]
 801ce2c:	f840 3b04 	str.w	r3, [r0], #4
 801ce30:	eba0 0009 	sub.w	r0, r0, r9
 801ce34:	1080      	asrs	r0, r0, #2
 801ce36:	0146      	lsls	r6, r0, #5
 801ce38:	6120      	str	r0, [r4, #16]
 801ce3a:	4618      	mov	r0, r3
 801ce3c:	f000 fb42 	bl	801d4c4 <__hi0bits>
 801ce40:	1a30      	subs	r0, r6, r0
 801ce42:	f8d8 6000 	ldr.w	r6, [r8]
 801ce46:	42b0      	cmp	r0, r6
 801ce48:	dd63      	ble.n	801cf12 <__gethex+0x286>
 801ce4a:	1b87      	subs	r7, r0, r6
 801ce4c:	4639      	mov	r1, r7
 801ce4e:	4620      	mov	r0, r4
 801ce50:	f000 fee6 	bl	801dc20 <__any_on>
 801ce54:	4682      	mov	sl, r0
 801ce56:	b1a8      	cbz	r0, 801ce84 <__gethex+0x1f8>
 801ce58:	1e7b      	subs	r3, r7, #1
 801ce5a:	1159      	asrs	r1, r3, #5
 801ce5c:	f003 021f 	and.w	r2, r3, #31
 801ce60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ce64:	f04f 0a01 	mov.w	sl, #1
 801ce68:	fa0a f202 	lsl.w	r2, sl, r2
 801ce6c:	420a      	tst	r2, r1
 801ce6e:	d009      	beq.n	801ce84 <__gethex+0x1f8>
 801ce70:	4553      	cmp	r3, sl
 801ce72:	dd05      	ble.n	801ce80 <__gethex+0x1f4>
 801ce74:	1eb9      	subs	r1, r7, #2
 801ce76:	4620      	mov	r0, r4
 801ce78:	f000 fed2 	bl	801dc20 <__any_on>
 801ce7c:	2800      	cmp	r0, #0
 801ce7e:	d145      	bne.n	801cf0c <__gethex+0x280>
 801ce80:	f04f 0a02 	mov.w	sl, #2
 801ce84:	4639      	mov	r1, r7
 801ce86:	4620      	mov	r0, r4
 801ce88:	f7ff fe98 	bl	801cbbc <rshift>
 801ce8c:	443d      	add	r5, r7
 801ce8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ce92:	42ab      	cmp	r3, r5
 801ce94:	da4c      	bge.n	801cf30 <__gethex+0x2a4>
 801ce96:	ee18 0a10 	vmov	r0, s16
 801ce9a:	4621      	mov	r1, r4
 801ce9c:	f000 fa60 	bl	801d360 <_Bfree>
 801cea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cea2:	2300      	movs	r3, #0
 801cea4:	6013      	str	r3, [r2, #0]
 801cea6:	27a3      	movs	r7, #163	; 0xa3
 801cea8:	e785      	b.n	801cdb6 <__gethex+0x12a>
 801ceaa:	1e73      	subs	r3, r6, #1
 801ceac:	9a05      	ldr	r2, [sp, #20]
 801ceae:	9303      	str	r3, [sp, #12]
 801ceb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ceb4:	4293      	cmp	r3, r2
 801ceb6:	d019      	beq.n	801ceec <__gethex+0x260>
 801ceb8:	f1bb 0f20 	cmp.w	fp, #32
 801cebc:	d107      	bne.n	801cece <__gethex+0x242>
 801cebe:	9b02      	ldr	r3, [sp, #8]
 801cec0:	9a00      	ldr	r2, [sp, #0]
 801cec2:	f843 2b04 	str.w	r2, [r3], #4
 801cec6:	9302      	str	r3, [sp, #8]
 801cec8:	2300      	movs	r3, #0
 801ceca:	9300      	str	r3, [sp, #0]
 801cecc:	469b      	mov	fp, r3
 801cece:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ced2:	f7ff fec5 	bl	801cc60 <__hexdig_fun>
 801ced6:	9b00      	ldr	r3, [sp, #0]
 801ced8:	f000 000f 	and.w	r0, r0, #15
 801cedc:	fa00 f00b 	lsl.w	r0, r0, fp
 801cee0:	4303      	orrs	r3, r0
 801cee2:	9300      	str	r3, [sp, #0]
 801cee4:	f10b 0b04 	add.w	fp, fp, #4
 801cee8:	9b03      	ldr	r3, [sp, #12]
 801ceea:	e00d      	b.n	801cf08 <__gethex+0x27c>
 801ceec:	9b03      	ldr	r3, [sp, #12]
 801ceee:	9a06      	ldr	r2, [sp, #24]
 801cef0:	4413      	add	r3, r2
 801cef2:	42bb      	cmp	r3, r7
 801cef4:	d3e0      	bcc.n	801ceb8 <__gethex+0x22c>
 801cef6:	4618      	mov	r0, r3
 801cef8:	9901      	ldr	r1, [sp, #4]
 801cefa:	9307      	str	r3, [sp, #28]
 801cefc:	4652      	mov	r2, sl
 801cefe:	f001 f843 	bl	801df88 <strncmp>
 801cf02:	9b07      	ldr	r3, [sp, #28]
 801cf04:	2800      	cmp	r0, #0
 801cf06:	d1d7      	bne.n	801ceb8 <__gethex+0x22c>
 801cf08:	461e      	mov	r6, r3
 801cf0a:	e78b      	b.n	801ce24 <__gethex+0x198>
 801cf0c:	f04f 0a03 	mov.w	sl, #3
 801cf10:	e7b8      	b.n	801ce84 <__gethex+0x1f8>
 801cf12:	da0a      	bge.n	801cf2a <__gethex+0x29e>
 801cf14:	1a37      	subs	r7, r6, r0
 801cf16:	4621      	mov	r1, r4
 801cf18:	ee18 0a10 	vmov	r0, s16
 801cf1c:	463a      	mov	r2, r7
 801cf1e:	f000 fc3b 	bl	801d798 <__lshift>
 801cf22:	1bed      	subs	r5, r5, r7
 801cf24:	4604      	mov	r4, r0
 801cf26:	f100 0914 	add.w	r9, r0, #20
 801cf2a:	f04f 0a00 	mov.w	sl, #0
 801cf2e:	e7ae      	b.n	801ce8e <__gethex+0x202>
 801cf30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cf34:	42a8      	cmp	r0, r5
 801cf36:	dd72      	ble.n	801d01e <__gethex+0x392>
 801cf38:	1b45      	subs	r5, r0, r5
 801cf3a:	42ae      	cmp	r6, r5
 801cf3c:	dc36      	bgt.n	801cfac <__gethex+0x320>
 801cf3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cf42:	2b02      	cmp	r3, #2
 801cf44:	d02a      	beq.n	801cf9c <__gethex+0x310>
 801cf46:	2b03      	cmp	r3, #3
 801cf48:	d02c      	beq.n	801cfa4 <__gethex+0x318>
 801cf4a:	2b01      	cmp	r3, #1
 801cf4c:	d11c      	bne.n	801cf88 <__gethex+0x2fc>
 801cf4e:	42ae      	cmp	r6, r5
 801cf50:	d11a      	bne.n	801cf88 <__gethex+0x2fc>
 801cf52:	2e01      	cmp	r6, #1
 801cf54:	d112      	bne.n	801cf7c <__gethex+0x2f0>
 801cf56:	9a04      	ldr	r2, [sp, #16]
 801cf58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cf5c:	6013      	str	r3, [r2, #0]
 801cf5e:	2301      	movs	r3, #1
 801cf60:	6123      	str	r3, [r4, #16]
 801cf62:	f8c9 3000 	str.w	r3, [r9]
 801cf66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cf68:	2762      	movs	r7, #98	; 0x62
 801cf6a:	601c      	str	r4, [r3, #0]
 801cf6c:	e723      	b.n	801cdb6 <__gethex+0x12a>
 801cf6e:	bf00      	nop
 801cf70:	08074400 	.word	0x08074400
 801cf74:	08074388 	.word	0x08074388
 801cf78:	08074399 	.word	0x08074399
 801cf7c:	1e71      	subs	r1, r6, #1
 801cf7e:	4620      	mov	r0, r4
 801cf80:	f000 fe4e 	bl	801dc20 <__any_on>
 801cf84:	2800      	cmp	r0, #0
 801cf86:	d1e6      	bne.n	801cf56 <__gethex+0x2ca>
 801cf88:	ee18 0a10 	vmov	r0, s16
 801cf8c:	4621      	mov	r1, r4
 801cf8e:	f000 f9e7 	bl	801d360 <_Bfree>
 801cf92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cf94:	2300      	movs	r3, #0
 801cf96:	6013      	str	r3, [r2, #0]
 801cf98:	2750      	movs	r7, #80	; 0x50
 801cf9a:	e70c      	b.n	801cdb6 <__gethex+0x12a>
 801cf9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d1f2      	bne.n	801cf88 <__gethex+0x2fc>
 801cfa2:	e7d8      	b.n	801cf56 <__gethex+0x2ca>
 801cfa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d1d5      	bne.n	801cf56 <__gethex+0x2ca>
 801cfaa:	e7ed      	b.n	801cf88 <__gethex+0x2fc>
 801cfac:	1e6f      	subs	r7, r5, #1
 801cfae:	f1ba 0f00 	cmp.w	sl, #0
 801cfb2:	d131      	bne.n	801d018 <__gethex+0x38c>
 801cfb4:	b127      	cbz	r7, 801cfc0 <__gethex+0x334>
 801cfb6:	4639      	mov	r1, r7
 801cfb8:	4620      	mov	r0, r4
 801cfba:	f000 fe31 	bl	801dc20 <__any_on>
 801cfbe:	4682      	mov	sl, r0
 801cfc0:	117b      	asrs	r3, r7, #5
 801cfc2:	2101      	movs	r1, #1
 801cfc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cfc8:	f007 071f 	and.w	r7, r7, #31
 801cfcc:	fa01 f707 	lsl.w	r7, r1, r7
 801cfd0:	421f      	tst	r7, r3
 801cfd2:	4629      	mov	r1, r5
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	bf18      	it	ne
 801cfd8:	f04a 0a02 	orrne.w	sl, sl, #2
 801cfdc:	1b76      	subs	r6, r6, r5
 801cfde:	f7ff fded 	bl	801cbbc <rshift>
 801cfe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cfe6:	2702      	movs	r7, #2
 801cfe8:	f1ba 0f00 	cmp.w	sl, #0
 801cfec:	d048      	beq.n	801d080 <__gethex+0x3f4>
 801cfee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cff2:	2b02      	cmp	r3, #2
 801cff4:	d015      	beq.n	801d022 <__gethex+0x396>
 801cff6:	2b03      	cmp	r3, #3
 801cff8:	d017      	beq.n	801d02a <__gethex+0x39e>
 801cffa:	2b01      	cmp	r3, #1
 801cffc:	d109      	bne.n	801d012 <__gethex+0x386>
 801cffe:	f01a 0f02 	tst.w	sl, #2
 801d002:	d006      	beq.n	801d012 <__gethex+0x386>
 801d004:	f8d9 0000 	ldr.w	r0, [r9]
 801d008:	ea4a 0a00 	orr.w	sl, sl, r0
 801d00c:	f01a 0f01 	tst.w	sl, #1
 801d010:	d10e      	bne.n	801d030 <__gethex+0x3a4>
 801d012:	f047 0710 	orr.w	r7, r7, #16
 801d016:	e033      	b.n	801d080 <__gethex+0x3f4>
 801d018:	f04f 0a01 	mov.w	sl, #1
 801d01c:	e7d0      	b.n	801cfc0 <__gethex+0x334>
 801d01e:	2701      	movs	r7, #1
 801d020:	e7e2      	b.n	801cfe8 <__gethex+0x35c>
 801d022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d024:	f1c3 0301 	rsb	r3, r3, #1
 801d028:	9315      	str	r3, [sp, #84]	; 0x54
 801d02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d02c:	2b00      	cmp	r3, #0
 801d02e:	d0f0      	beq.n	801d012 <__gethex+0x386>
 801d030:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d034:	f104 0314 	add.w	r3, r4, #20
 801d038:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d03c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d040:	f04f 0c00 	mov.w	ip, #0
 801d044:	4618      	mov	r0, r3
 801d046:	f853 2b04 	ldr.w	r2, [r3], #4
 801d04a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d04e:	d01c      	beq.n	801d08a <__gethex+0x3fe>
 801d050:	3201      	adds	r2, #1
 801d052:	6002      	str	r2, [r0, #0]
 801d054:	2f02      	cmp	r7, #2
 801d056:	f104 0314 	add.w	r3, r4, #20
 801d05a:	d13f      	bne.n	801d0dc <__gethex+0x450>
 801d05c:	f8d8 2000 	ldr.w	r2, [r8]
 801d060:	3a01      	subs	r2, #1
 801d062:	42b2      	cmp	r2, r6
 801d064:	d10a      	bne.n	801d07c <__gethex+0x3f0>
 801d066:	1171      	asrs	r1, r6, #5
 801d068:	2201      	movs	r2, #1
 801d06a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d06e:	f006 061f 	and.w	r6, r6, #31
 801d072:	fa02 f606 	lsl.w	r6, r2, r6
 801d076:	421e      	tst	r6, r3
 801d078:	bf18      	it	ne
 801d07a:	4617      	movne	r7, r2
 801d07c:	f047 0720 	orr.w	r7, r7, #32
 801d080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d082:	601c      	str	r4, [r3, #0]
 801d084:	9b04      	ldr	r3, [sp, #16]
 801d086:	601d      	str	r5, [r3, #0]
 801d088:	e695      	b.n	801cdb6 <__gethex+0x12a>
 801d08a:	4299      	cmp	r1, r3
 801d08c:	f843 cc04 	str.w	ip, [r3, #-4]
 801d090:	d8d8      	bhi.n	801d044 <__gethex+0x3b8>
 801d092:	68a3      	ldr	r3, [r4, #8]
 801d094:	459b      	cmp	fp, r3
 801d096:	db19      	blt.n	801d0cc <__gethex+0x440>
 801d098:	6861      	ldr	r1, [r4, #4]
 801d09a:	ee18 0a10 	vmov	r0, s16
 801d09e:	3101      	adds	r1, #1
 801d0a0:	f000 f91e 	bl	801d2e0 <_Balloc>
 801d0a4:	4681      	mov	r9, r0
 801d0a6:	b918      	cbnz	r0, 801d0b0 <__gethex+0x424>
 801d0a8:	4b1a      	ldr	r3, [pc, #104]	; (801d114 <__gethex+0x488>)
 801d0aa:	4602      	mov	r2, r0
 801d0ac:	2184      	movs	r1, #132	; 0x84
 801d0ae:	e6a8      	b.n	801ce02 <__gethex+0x176>
 801d0b0:	6922      	ldr	r2, [r4, #16]
 801d0b2:	3202      	adds	r2, #2
 801d0b4:	f104 010c 	add.w	r1, r4, #12
 801d0b8:	0092      	lsls	r2, r2, #2
 801d0ba:	300c      	adds	r0, #12
 801d0bc:	f7fd f868 	bl	801a190 <memcpy>
 801d0c0:	4621      	mov	r1, r4
 801d0c2:	ee18 0a10 	vmov	r0, s16
 801d0c6:	f000 f94b 	bl	801d360 <_Bfree>
 801d0ca:	464c      	mov	r4, r9
 801d0cc:	6923      	ldr	r3, [r4, #16]
 801d0ce:	1c5a      	adds	r2, r3, #1
 801d0d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d0d4:	6122      	str	r2, [r4, #16]
 801d0d6:	2201      	movs	r2, #1
 801d0d8:	615a      	str	r2, [r3, #20]
 801d0da:	e7bb      	b.n	801d054 <__gethex+0x3c8>
 801d0dc:	6922      	ldr	r2, [r4, #16]
 801d0de:	455a      	cmp	r2, fp
 801d0e0:	dd0b      	ble.n	801d0fa <__gethex+0x46e>
 801d0e2:	2101      	movs	r1, #1
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	f7ff fd69 	bl	801cbbc <rshift>
 801d0ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d0ee:	3501      	adds	r5, #1
 801d0f0:	42ab      	cmp	r3, r5
 801d0f2:	f6ff aed0 	blt.w	801ce96 <__gethex+0x20a>
 801d0f6:	2701      	movs	r7, #1
 801d0f8:	e7c0      	b.n	801d07c <__gethex+0x3f0>
 801d0fa:	f016 061f 	ands.w	r6, r6, #31
 801d0fe:	d0fa      	beq.n	801d0f6 <__gethex+0x46a>
 801d100:	4453      	add	r3, sl
 801d102:	f1c6 0620 	rsb	r6, r6, #32
 801d106:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d10a:	f000 f9db 	bl	801d4c4 <__hi0bits>
 801d10e:	42b0      	cmp	r0, r6
 801d110:	dbe7      	blt.n	801d0e2 <__gethex+0x456>
 801d112:	e7f0      	b.n	801d0f6 <__gethex+0x46a>
 801d114:	08074388 	.word	0x08074388

0801d118 <L_shift>:
 801d118:	f1c2 0208 	rsb	r2, r2, #8
 801d11c:	0092      	lsls	r2, r2, #2
 801d11e:	b570      	push	{r4, r5, r6, lr}
 801d120:	f1c2 0620 	rsb	r6, r2, #32
 801d124:	6843      	ldr	r3, [r0, #4]
 801d126:	6804      	ldr	r4, [r0, #0]
 801d128:	fa03 f506 	lsl.w	r5, r3, r6
 801d12c:	432c      	orrs	r4, r5
 801d12e:	40d3      	lsrs	r3, r2
 801d130:	6004      	str	r4, [r0, #0]
 801d132:	f840 3f04 	str.w	r3, [r0, #4]!
 801d136:	4288      	cmp	r0, r1
 801d138:	d3f4      	bcc.n	801d124 <L_shift+0xc>
 801d13a:	bd70      	pop	{r4, r5, r6, pc}

0801d13c <__match>:
 801d13c:	b530      	push	{r4, r5, lr}
 801d13e:	6803      	ldr	r3, [r0, #0]
 801d140:	3301      	adds	r3, #1
 801d142:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d146:	b914      	cbnz	r4, 801d14e <__match+0x12>
 801d148:	6003      	str	r3, [r0, #0]
 801d14a:	2001      	movs	r0, #1
 801d14c:	bd30      	pop	{r4, r5, pc}
 801d14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d156:	2d19      	cmp	r5, #25
 801d158:	bf98      	it	ls
 801d15a:	3220      	addls	r2, #32
 801d15c:	42a2      	cmp	r2, r4
 801d15e:	d0f0      	beq.n	801d142 <__match+0x6>
 801d160:	2000      	movs	r0, #0
 801d162:	e7f3      	b.n	801d14c <__match+0x10>

0801d164 <__hexnan>:
 801d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d168:	680b      	ldr	r3, [r1, #0]
 801d16a:	115e      	asrs	r6, r3, #5
 801d16c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801d170:	f013 031f 	ands.w	r3, r3, #31
 801d174:	b087      	sub	sp, #28
 801d176:	bf18      	it	ne
 801d178:	3604      	addne	r6, #4
 801d17a:	2500      	movs	r5, #0
 801d17c:	1f37      	subs	r7, r6, #4
 801d17e:	4690      	mov	r8, r2
 801d180:	6802      	ldr	r2, [r0, #0]
 801d182:	9301      	str	r3, [sp, #4]
 801d184:	4682      	mov	sl, r0
 801d186:	f846 5c04 	str.w	r5, [r6, #-4]
 801d18a:	46b9      	mov	r9, r7
 801d18c:	463c      	mov	r4, r7
 801d18e:	9502      	str	r5, [sp, #8]
 801d190:	46ab      	mov	fp, r5
 801d192:	7851      	ldrb	r1, [r2, #1]
 801d194:	1c53      	adds	r3, r2, #1
 801d196:	9303      	str	r3, [sp, #12]
 801d198:	b341      	cbz	r1, 801d1ec <__hexnan+0x88>
 801d19a:	4608      	mov	r0, r1
 801d19c:	9205      	str	r2, [sp, #20]
 801d19e:	9104      	str	r1, [sp, #16]
 801d1a0:	f7ff fd5e 	bl	801cc60 <__hexdig_fun>
 801d1a4:	2800      	cmp	r0, #0
 801d1a6:	d14f      	bne.n	801d248 <__hexnan+0xe4>
 801d1a8:	9904      	ldr	r1, [sp, #16]
 801d1aa:	9a05      	ldr	r2, [sp, #20]
 801d1ac:	2920      	cmp	r1, #32
 801d1ae:	d818      	bhi.n	801d1e2 <__hexnan+0x7e>
 801d1b0:	9b02      	ldr	r3, [sp, #8]
 801d1b2:	459b      	cmp	fp, r3
 801d1b4:	dd13      	ble.n	801d1de <__hexnan+0x7a>
 801d1b6:	454c      	cmp	r4, r9
 801d1b8:	d206      	bcs.n	801d1c8 <__hexnan+0x64>
 801d1ba:	2d07      	cmp	r5, #7
 801d1bc:	dc04      	bgt.n	801d1c8 <__hexnan+0x64>
 801d1be:	462a      	mov	r2, r5
 801d1c0:	4649      	mov	r1, r9
 801d1c2:	4620      	mov	r0, r4
 801d1c4:	f7ff ffa8 	bl	801d118 <L_shift>
 801d1c8:	4544      	cmp	r4, r8
 801d1ca:	d950      	bls.n	801d26e <__hexnan+0x10a>
 801d1cc:	2300      	movs	r3, #0
 801d1ce:	f1a4 0904 	sub.w	r9, r4, #4
 801d1d2:	f844 3c04 	str.w	r3, [r4, #-4]
 801d1d6:	f8cd b008 	str.w	fp, [sp, #8]
 801d1da:	464c      	mov	r4, r9
 801d1dc:	461d      	mov	r5, r3
 801d1de:	9a03      	ldr	r2, [sp, #12]
 801d1e0:	e7d7      	b.n	801d192 <__hexnan+0x2e>
 801d1e2:	2929      	cmp	r1, #41	; 0x29
 801d1e4:	d156      	bne.n	801d294 <__hexnan+0x130>
 801d1e6:	3202      	adds	r2, #2
 801d1e8:	f8ca 2000 	str.w	r2, [sl]
 801d1ec:	f1bb 0f00 	cmp.w	fp, #0
 801d1f0:	d050      	beq.n	801d294 <__hexnan+0x130>
 801d1f2:	454c      	cmp	r4, r9
 801d1f4:	d206      	bcs.n	801d204 <__hexnan+0xa0>
 801d1f6:	2d07      	cmp	r5, #7
 801d1f8:	dc04      	bgt.n	801d204 <__hexnan+0xa0>
 801d1fa:	462a      	mov	r2, r5
 801d1fc:	4649      	mov	r1, r9
 801d1fe:	4620      	mov	r0, r4
 801d200:	f7ff ff8a 	bl	801d118 <L_shift>
 801d204:	4544      	cmp	r4, r8
 801d206:	d934      	bls.n	801d272 <__hexnan+0x10e>
 801d208:	f1a8 0204 	sub.w	r2, r8, #4
 801d20c:	4623      	mov	r3, r4
 801d20e:	f853 1b04 	ldr.w	r1, [r3], #4
 801d212:	f842 1f04 	str.w	r1, [r2, #4]!
 801d216:	429f      	cmp	r7, r3
 801d218:	d2f9      	bcs.n	801d20e <__hexnan+0xaa>
 801d21a:	1b3b      	subs	r3, r7, r4
 801d21c:	f023 0303 	bic.w	r3, r3, #3
 801d220:	3304      	adds	r3, #4
 801d222:	3401      	adds	r4, #1
 801d224:	3e03      	subs	r6, #3
 801d226:	42b4      	cmp	r4, r6
 801d228:	bf88      	it	hi
 801d22a:	2304      	movhi	r3, #4
 801d22c:	4443      	add	r3, r8
 801d22e:	2200      	movs	r2, #0
 801d230:	f843 2b04 	str.w	r2, [r3], #4
 801d234:	429f      	cmp	r7, r3
 801d236:	d2fb      	bcs.n	801d230 <__hexnan+0xcc>
 801d238:	683b      	ldr	r3, [r7, #0]
 801d23a:	b91b      	cbnz	r3, 801d244 <__hexnan+0xe0>
 801d23c:	4547      	cmp	r7, r8
 801d23e:	d127      	bne.n	801d290 <__hexnan+0x12c>
 801d240:	2301      	movs	r3, #1
 801d242:	603b      	str	r3, [r7, #0]
 801d244:	2005      	movs	r0, #5
 801d246:	e026      	b.n	801d296 <__hexnan+0x132>
 801d248:	3501      	adds	r5, #1
 801d24a:	2d08      	cmp	r5, #8
 801d24c:	f10b 0b01 	add.w	fp, fp, #1
 801d250:	dd06      	ble.n	801d260 <__hexnan+0xfc>
 801d252:	4544      	cmp	r4, r8
 801d254:	d9c3      	bls.n	801d1de <__hexnan+0x7a>
 801d256:	2300      	movs	r3, #0
 801d258:	f844 3c04 	str.w	r3, [r4, #-4]
 801d25c:	2501      	movs	r5, #1
 801d25e:	3c04      	subs	r4, #4
 801d260:	6822      	ldr	r2, [r4, #0]
 801d262:	f000 000f 	and.w	r0, r0, #15
 801d266:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801d26a:	6022      	str	r2, [r4, #0]
 801d26c:	e7b7      	b.n	801d1de <__hexnan+0x7a>
 801d26e:	2508      	movs	r5, #8
 801d270:	e7b5      	b.n	801d1de <__hexnan+0x7a>
 801d272:	9b01      	ldr	r3, [sp, #4]
 801d274:	2b00      	cmp	r3, #0
 801d276:	d0df      	beq.n	801d238 <__hexnan+0xd4>
 801d278:	f04f 32ff 	mov.w	r2, #4294967295
 801d27c:	f1c3 0320 	rsb	r3, r3, #32
 801d280:	fa22 f303 	lsr.w	r3, r2, r3
 801d284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d288:	401a      	ands	r2, r3
 801d28a:	f846 2c04 	str.w	r2, [r6, #-4]
 801d28e:	e7d3      	b.n	801d238 <__hexnan+0xd4>
 801d290:	3f04      	subs	r7, #4
 801d292:	e7d1      	b.n	801d238 <__hexnan+0xd4>
 801d294:	2004      	movs	r0, #4
 801d296:	b007      	add	sp, #28
 801d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d29c <_localeconv_r>:
 801d29c:	4800      	ldr	r0, [pc, #0]	; (801d2a0 <_localeconv_r+0x4>)
 801d29e:	4770      	bx	lr
 801d2a0:	20000a80 	.word	0x20000a80

0801d2a4 <__ascii_mbtowc>:
 801d2a4:	b082      	sub	sp, #8
 801d2a6:	b901      	cbnz	r1, 801d2aa <__ascii_mbtowc+0x6>
 801d2a8:	a901      	add	r1, sp, #4
 801d2aa:	b142      	cbz	r2, 801d2be <__ascii_mbtowc+0x1a>
 801d2ac:	b14b      	cbz	r3, 801d2c2 <__ascii_mbtowc+0x1e>
 801d2ae:	7813      	ldrb	r3, [r2, #0]
 801d2b0:	600b      	str	r3, [r1, #0]
 801d2b2:	7812      	ldrb	r2, [r2, #0]
 801d2b4:	1e10      	subs	r0, r2, #0
 801d2b6:	bf18      	it	ne
 801d2b8:	2001      	movne	r0, #1
 801d2ba:	b002      	add	sp, #8
 801d2bc:	4770      	bx	lr
 801d2be:	4610      	mov	r0, r2
 801d2c0:	e7fb      	b.n	801d2ba <__ascii_mbtowc+0x16>
 801d2c2:	f06f 0001 	mvn.w	r0, #1
 801d2c6:	e7f8      	b.n	801d2ba <__ascii_mbtowc+0x16>

0801d2c8 <__malloc_lock>:
 801d2c8:	4801      	ldr	r0, [pc, #4]	; (801d2d0 <__malloc_lock+0x8>)
 801d2ca:	f000 beb0 	b.w	801e02e <__retarget_lock_acquire_recursive>
 801d2ce:	bf00      	nop
 801d2d0:	20004244 	.word	0x20004244

0801d2d4 <__malloc_unlock>:
 801d2d4:	4801      	ldr	r0, [pc, #4]	; (801d2dc <__malloc_unlock+0x8>)
 801d2d6:	f000 beab 	b.w	801e030 <__retarget_lock_release_recursive>
 801d2da:	bf00      	nop
 801d2dc:	20004244 	.word	0x20004244

0801d2e0 <_Balloc>:
 801d2e0:	b570      	push	{r4, r5, r6, lr}
 801d2e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d2e4:	4604      	mov	r4, r0
 801d2e6:	460d      	mov	r5, r1
 801d2e8:	b976      	cbnz	r6, 801d308 <_Balloc+0x28>
 801d2ea:	2010      	movs	r0, #16
 801d2ec:	f7fc ff40 	bl	801a170 <malloc>
 801d2f0:	4602      	mov	r2, r0
 801d2f2:	6260      	str	r0, [r4, #36]	; 0x24
 801d2f4:	b920      	cbnz	r0, 801d300 <_Balloc+0x20>
 801d2f6:	4b18      	ldr	r3, [pc, #96]	; (801d358 <_Balloc+0x78>)
 801d2f8:	4818      	ldr	r0, [pc, #96]	; (801d35c <_Balloc+0x7c>)
 801d2fa:	2166      	movs	r1, #102	; 0x66
 801d2fc:	f000 fe66 	bl	801dfcc <__assert_func>
 801d300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d304:	6006      	str	r6, [r0, #0]
 801d306:	60c6      	str	r6, [r0, #12]
 801d308:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d30a:	68f3      	ldr	r3, [r6, #12]
 801d30c:	b183      	cbz	r3, 801d330 <_Balloc+0x50>
 801d30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d310:	68db      	ldr	r3, [r3, #12]
 801d312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d316:	b9b8      	cbnz	r0, 801d348 <_Balloc+0x68>
 801d318:	2101      	movs	r1, #1
 801d31a:	fa01 f605 	lsl.w	r6, r1, r5
 801d31e:	1d72      	adds	r2, r6, #5
 801d320:	0092      	lsls	r2, r2, #2
 801d322:	4620      	mov	r0, r4
 801d324:	f7fc ff4a 	bl	801a1bc <_calloc_r>
 801d328:	b160      	cbz	r0, 801d344 <_Balloc+0x64>
 801d32a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d32e:	e00e      	b.n	801d34e <_Balloc+0x6e>
 801d330:	2221      	movs	r2, #33	; 0x21
 801d332:	2104      	movs	r1, #4
 801d334:	4620      	mov	r0, r4
 801d336:	f7fc ff41 	bl	801a1bc <_calloc_r>
 801d33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d33c:	60f0      	str	r0, [r6, #12]
 801d33e:	68db      	ldr	r3, [r3, #12]
 801d340:	2b00      	cmp	r3, #0
 801d342:	d1e4      	bne.n	801d30e <_Balloc+0x2e>
 801d344:	2000      	movs	r0, #0
 801d346:	bd70      	pop	{r4, r5, r6, pc}
 801d348:	6802      	ldr	r2, [r0, #0]
 801d34a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d34e:	2300      	movs	r3, #0
 801d350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d354:	e7f7      	b.n	801d346 <_Balloc+0x66>
 801d356:	bf00      	nop
 801d358:	08074316 	.word	0x08074316
 801d35c:	08074414 	.word	0x08074414

0801d360 <_Bfree>:
 801d360:	b570      	push	{r4, r5, r6, lr}
 801d362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d364:	4605      	mov	r5, r0
 801d366:	460c      	mov	r4, r1
 801d368:	b976      	cbnz	r6, 801d388 <_Bfree+0x28>
 801d36a:	2010      	movs	r0, #16
 801d36c:	f7fc ff00 	bl	801a170 <malloc>
 801d370:	4602      	mov	r2, r0
 801d372:	6268      	str	r0, [r5, #36]	; 0x24
 801d374:	b920      	cbnz	r0, 801d380 <_Bfree+0x20>
 801d376:	4b09      	ldr	r3, [pc, #36]	; (801d39c <_Bfree+0x3c>)
 801d378:	4809      	ldr	r0, [pc, #36]	; (801d3a0 <_Bfree+0x40>)
 801d37a:	218a      	movs	r1, #138	; 0x8a
 801d37c:	f000 fe26 	bl	801dfcc <__assert_func>
 801d380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d384:	6006      	str	r6, [r0, #0]
 801d386:	60c6      	str	r6, [r0, #12]
 801d388:	b13c      	cbz	r4, 801d39a <_Bfree+0x3a>
 801d38a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d38c:	6862      	ldr	r2, [r4, #4]
 801d38e:	68db      	ldr	r3, [r3, #12]
 801d390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d394:	6021      	str	r1, [r4, #0]
 801d396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d39a:	bd70      	pop	{r4, r5, r6, pc}
 801d39c:	08074316 	.word	0x08074316
 801d3a0:	08074414 	.word	0x08074414

0801d3a4 <__multadd>:
 801d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3a8:	690d      	ldr	r5, [r1, #16]
 801d3aa:	4607      	mov	r7, r0
 801d3ac:	460c      	mov	r4, r1
 801d3ae:	461e      	mov	r6, r3
 801d3b0:	f101 0c14 	add.w	ip, r1, #20
 801d3b4:	2000      	movs	r0, #0
 801d3b6:	f8dc 3000 	ldr.w	r3, [ip]
 801d3ba:	b299      	uxth	r1, r3
 801d3bc:	fb02 6101 	mla	r1, r2, r1, r6
 801d3c0:	0c1e      	lsrs	r6, r3, #16
 801d3c2:	0c0b      	lsrs	r3, r1, #16
 801d3c4:	fb02 3306 	mla	r3, r2, r6, r3
 801d3c8:	b289      	uxth	r1, r1
 801d3ca:	3001      	adds	r0, #1
 801d3cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d3d0:	4285      	cmp	r5, r0
 801d3d2:	f84c 1b04 	str.w	r1, [ip], #4
 801d3d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d3da:	dcec      	bgt.n	801d3b6 <__multadd+0x12>
 801d3dc:	b30e      	cbz	r6, 801d422 <__multadd+0x7e>
 801d3de:	68a3      	ldr	r3, [r4, #8]
 801d3e0:	42ab      	cmp	r3, r5
 801d3e2:	dc19      	bgt.n	801d418 <__multadd+0x74>
 801d3e4:	6861      	ldr	r1, [r4, #4]
 801d3e6:	4638      	mov	r0, r7
 801d3e8:	3101      	adds	r1, #1
 801d3ea:	f7ff ff79 	bl	801d2e0 <_Balloc>
 801d3ee:	4680      	mov	r8, r0
 801d3f0:	b928      	cbnz	r0, 801d3fe <__multadd+0x5a>
 801d3f2:	4602      	mov	r2, r0
 801d3f4:	4b0c      	ldr	r3, [pc, #48]	; (801d428 <__multadd+0x84>)
 801d3f6:	480d      	ldr	r0, [pc, #52]	; (801d42c <__multadd+0x88>)
 801d3f8:	21b5      	movs	r1, #181	; 0xb5
 801d3fa:	f000 fde7 	bl	801dfcc <__assert_func>
 801d3fe:	6922      	ldr	r2, [r4, #16]
 801d400:	3202      	adds	r2, #2
 801d402:	f104 010c 	add.w	r1, r4, #12
 801d406:	0092      	lsls	r2, r2, #2
 801d408:	300c      	adds	r0, #12
 801d40a:	f7fc fec1 	bl	801a190 <memcpy>
 801d40e:	4621      	mov	r1, r4
 801d410:	4638      	mov	r0, r7
 801d412:	f7ff ffa5 	bl	801d360 <_Bfree>
 801d416:	4644      	mov	r4, r8
 801d418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d41c:	3501      	adds	r5, #1
 801d41e:	615e      	str	r6, [r3, #20]
 801d420:	6125      	str	r5, [r4, #16]
 801d422:	4620      	mov	r0, r4
 801d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d428:	08074388 	.word	0x08074388
 801d42c:	08074414 	.word	0x08074414

0801d430 <__s2b>:
 801d430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d434:	460c      	mov	r4, r1
 801d436:	4615      	mov	r5, r2
 801d438:	461f      	mov	r7, r3
 801d43a:	2209      	movs	r2, #9
 801d43c:	3308      	adds	r3, #8
 801d43e:	4606      	mov	r6, r0
 801d440:	fb93 f3f2 	sdiv	r3, r3, r2
 801d444:	2100      	movs	r1, #0
 801d446:	2201      	movs	r2, #1
 801d448:	429a      	cmp	r2, r3
 801d44a:	db09      	blt.n	801d460 <__s2b+0x30>
 801d44c:	4630      	mov	r0, r6
 801d44e:	f7ff ff47 	bl	801d2e0 <_Balloc>
 801d452:	b940      	cbnz	r0, 801d466 <__s2b+0x36>
 801d454:	4602      	mov	r2, r0
 801d456:	4b19      	ldr	r3, [pc, #100]	; (801d4bc <__s2b+0x8c>)
 801d458:	4819      	ldr	r0, [pc, #100]	; (801d4c0 <__s2b+0x90>)
 801d45a:	21ce      	movs	r1, #206	; 0xce
 801d45c:	f000 fdb6 	bl	801dfcc <__assert_func>
 801d460:	0052      	lsls	r2, r2, #1
 801d462:	3101      	adds	r1, #1
 801d464:	e7f0      	b.n	801d448 <__s2b+0x18>
 801d466:	9b08      	ldr	r3, [sp, #32]
 801d468:	6143      	str	r3, [r0, #20]
 801d46a:	2d09      	cmp	r5, #9
 801d46c:	f04f 0301 	mov.w	r3, #1
 801d470:	6103      	str	r3, [r0, #16]
 801d472:	dd16      	ble.n	801d4a2 <__s2b+0x72>
 801d474:	f104 0909 	add.w	r9, r4, #9
 801d478:	46c8      	mov	r8, r9
 801d47a:	442c      	add	r4, r5
 801d47c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d480:	4601      	mov	r1, r0
 801d482:	3b30      	subs	r3, #48	; 0x30
 801d484:	220a      	movs	r2, #10
 801d486:	4630      	mov	r0, r6
 801d488:	f7ff ff8c 	bl	801d3a4 <__multadd>
 801d48c:	45a0      	cmp	r8, r4
 801d48e:	d1f5      	bne.n	801d47c <__s2b+0x4c>
 801d490:	f1a5 0408 	sub.w	r4, r5, #8
 801d494:	444c      	add	r4, r9
 801d496:	1b2d      	subs	r5, r5, r4
 801d498:	1963      	adds	r3, r4, r5
 801d49a:	42bb      	cmp	r3, r7
 801d49c:	db04      	blt.n	801d4a8 <__s2b+0x78>
 801d49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4a2:	340a      	adds	r4, #10
 801d4a4:	2509      	movs	r5, #9
 801d4a6:	e7f6      	b.n	801d496 <__s2b+0x66>
 801d4a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d4ac:	4601      	mov	r1, r0
 801d4ae:	3b30      	subs	r3, #48	; 0x30
 801d4b0:	220a      	movs	r2, #10
 801d4b2:	4630      	mov	r0, r6
 801d4b4:	f7ff ff76 	bl	801d3a4 <__multadd>
 801d4b8:	e7ee      	b.n	801d498 <__s2b+0x68>
 801d4ba:	bf00      	nop
 801d4bc:	08074388 	.word	0x08074388
 801d4c0:	08074414 	.word	0x08074414

0801d4c4 <__hi0bits>:
 801d4c4:	0c03      	lsrs	r3, r0, #16
 801d4c6:	041b      	lsls	r3, r3, #16
 801d4c8:	b9d3      	cbnz	r3, 801d500 <__hi0bits+0x3c>
 801d4ca:	0400      	lsls	r0, r0, #16
 801d4cc:	2310      	movs	r3, #16
 801d4ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d4d2:	bf04      	itt	eq
 801d4d4:	0200      	lsleq	r0, r0, #8
 801d4d6:	3308      	addeq	r3, #8
 801d4d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d4dc:	bf04      	itt	eq
 801d4de:	0100      	lsleq	r0, r0, #4
 801d4e0:	3304      	addeq	r3, #4
 801d4e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d4e6:	bf04      	itt	eq
 801d4e8:	0080      	lsleq	r0, r0, #2
 801d4ea:	3302      	addeq	r3, #2
 801d4ec:	2800      	cmp	r0, #0
 801d4ee:	db05      	blt.n	801d4fc <__hi0bits+0x38>
 801d4f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d4f4:	f103 0301 	add.w	r3, r3, #1
 801d4f8:	bf08      	it	eq
 801d4fa:	2320      	moveq	r3, #32
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	4770      	bx	lr
 801d500:	2300      	movs	r3, #0
 801d502:	e7e4      	b.n	801d4ce <__hi0bits+0xa>

0801d504 <__lo0bits>:
 801d504:	6803      	ldr	r3, [r0, #0]
 801d506:	f013 0207 	ands.w	r2, r3, #7
 801d50a:	4601      	mov	r1, r0
 801d50c:	d00b      	beq.n	801d526 <__lo0bits+0x22>
 801d50e:	07da      	lsls	r2, r3, #31
 801d510:	d423      	bmi.n	801d55a <__lo0bits+0x56>
 801d512:	0798      	lsls	r0, r3, #30
 801d514:	bf49      	itett	mi
 801d516:	085b      	lsrmi	r3, r3, #1
 801d518:	089b      	lsrpl	r3, r3, #2
 801d51a:	2001      	movmi	r0, #1
 801d51c:	600b      	strmi	r3, [r1, #0]
 801d51e:	bf5c      	itt	pl
 801d520:	600b      	strpl	r3, [r1, #0]
 801d522:	2002      	movpl	r0, #2
 801d524:	4770      	bx	lr
 801d526:	b298      	uxth	r0, r3
 801d528:	b9a8      	cbnz	r0, 801d556 <__lo0bits+0x52>
 801d52a:	0c1b      	lsrs	r3, r3, #16
 801d52c:	2010      	movs	r0, #16
 801d52e:	b2da      	uxtb	r2, r3
 801d530:	b90a      	cbnz	r2, 801d536 <__lo0bits+0x32>
 801d532:	3008      	adds	r0, #8
 801d534:	0a1b      	lsrs	r3, r3, #8
 801d536:	071a      	lsls	r2, r3, #28
 801d538:	bf04      	itt	eq
 801d53a:	091b      	lsreq	r3, r3, #4
 801d53c:	3004      	addeq	r0, #4
 801d53e:	079a      	lsls	r2, r3, #30
 801d540:	bf04      	itt	eq
 801d542:	089b      	lsreq	r3, r3, #2
 801d544:	3002      	addeq	r0, #2
 801d546:	07da      	lsls	r2, r3, #31
 801d548:	d403      	bmi.n	801d552 <__lo0bits+0x4e>
 801d54a:	085b      	lsrs	r3, r3, #1
 801d54c:	f100 0001 	add.w	r0, r0, #1
 801d550:	d005      	beq.n	801d55e <__lo0bits+0x5a>
 801d552:	600b      	str	r3, [r1, #0]
 801d554:	4770      	bx	lr
 801d556:	4610      	mov	r0, r2
 801d558:	e7e9      	b.n	801d52e <__lo0bits+0x2a>
 801d55a:	2000      	movs	r0, #0
 801d55c:	4770      	bx	lr
 801d55e:	2020      	movs	r0, #32
 801d560:	4770      	bx	lr
	...

0801d564 <__i2b>:
 801d564:	b510      	push	{r4, lr}
 801d566:	460c      	mov	r4, r1
 801d568:	2101      	movs	r1, #1
 801d56a:	f7ff feb9 	bl	801d2e0 <_Balloc>
 801d56e:	4602      	mov	r2, r0
 801d570:	b928      	cbnz	r0, 801d57e <__i2b+0x1a>
 801d572:	4b05      	ldr	r3, [pc, #20]	; (801d588 <__i2b+0x24>)
 801d574:	4805      	ldr	r0, [pc, #20]	; (801d58c <__i2b+0x28>)
 801d576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d57a:	f000 fd27 	bl	801dfcc <__assert_func>
 801d57e:	2301      	movs	r3, #1
 801d580:	6144      	str	r4, [r0, #20]
 801d582:	6103      	str	r3, [r0, #16]
 801d584:	bd10      	pop	{r4, pc}
 801d586:	bf00      	nop
 801d588:	08074388 	.word	0x08074388
 801d58c:	08074414 	.word	0x08074414

0801d590 <__multiply>:
 801d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d594:	4691      	mov	r9, r2
 801d596:	690a      	ldr	r2, [r1, #16]
 801d598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d59c:	429a      	cmp	r2, r3
 801d59e:	bfb8      	it	lt
 801d5a0:	460b      	movlt	r3, r1
 801d5a2:	460c      	mov	r4, r1
 801d5a4:	bfbc      	itt	lt
 801d5a6:	464c      	movlt	r4, r9
 801d5a8:	4699      	movlt	r9, r3
 801d5aa:	6927      	ldr	r7, [r4, #16]
 801d5ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d5b0:	68a3      	ldr	r3, [r4, #8]
 801d5b2:	6861      	ldr	r1, [r4, #4]
 801d5b4:	eb07 060a 	add.w	r6, r7, sl
 801d5b8:	42b3      	cmp	r3, r6
 801d5ba:	b085      	sub	sp, #20
 801d5bc:	bfb8      	it	lt
 801d5be:	3101      	addlt	r1, #1
 801d5c0:	f7ff fe8e 	bl	801d2e0 <_Balloc>
 801d5c4:	b930      	cbnz	r0, 801d5d4 <__multiply+0x44>
 801d5c6:	4602      	mov	r2, r0
 801d5c8:	4b44      	ldr	r3, [pc, #272]	; (801d6dc <__multiply+0x14c>)
 801d5ca:	4845      	ldr	r0, [pc, #276]	; (801d6e0 <__multiply+0x150>)
 801d5cc:	f240 115d 	movw	r1, #349	; 0x15d
 801d5d0:	f000 fcfc 	bl	801dfcc <__assert_func>
 801d5d4:	f100 0514 	add.w	r5, r0, #20
 801d5d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d5dc:	462b      	mov	r3, r5
 801d5de:	2200      	movs	r2, #0
 801d5e0:	4543      	cmp	r3, r8
 801d5e2:	d321      	bcc.n	801d628 <__multiply+0x98>
 801d5e4:	f104 0314 	add.w	r3, r4, #20
 801d5e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d5ec:	f109 0314 	add.w	r3, r9, #20
 801d5f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d5f4:	9202      	str	r2, [sp, #8]
 801d5f6:	1b3a      	subs	r2, r7, r4
 801d5f8:	3a15      	subs	r2, #21
 801d5fa:	f022 0203 	bic.w	r2, r2, #3
 801d5fe:	3204      	adds	r2, #4
 801d600:	f104 0115 	add.w	r1, r4, #21
 801d604:	428f      	cmp	r7, r1
 801d606:	bf38      	it	cc
 801d608:	2204      	movcc	r2, #4
 801d60a:	9201      	str	r2, [sp, #4]
 801d60c:	9a02      	ldr	r2, [sp, #8]
 801d60e:	9303      	str	r3, [sp, #12]
 801d610:	429a      	cmp	r2, r3
 801d612:	d80c      	bhi.n	801d62e <__multiply+0x9e>
 801d614:	2e00      	cmp	r6, #0
 801d616:	dd03      	ble.n	801d620 <__multiply+0x90>
 801d618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d05a      	beq.n	801d6d6 <__multiply+0x146>
 801d620:	6106      	str	r6, [r0, #16]
 801d622:	b005      	add	sp, #20
 801d624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d628:	f843 2b04 	str.w	r2, [r3], #4
 801d62c:	e7d8      	b.n	801d5e0 <__multiply+0x50>
 801d62e:	f8b3 a000 	ldrh.w	sl, [r3]
 801d632:	f1ba 0f00 	cmp.w	sl, #0
 801d636:	d024      	beq.n	801d682 <__multiply+0xf2>
 801d638:	f104 0e14 	add.w	lr, r4, #20
 801d63c:	46a9      	mov	r9, r5
 801d63e:	f04f 0c00 	mov.w	ip, #0
 801d642:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d646:	f8d9 1000 	ldr.w	r1, [r9]
 801d64a:	fa1f fb82 	uxth.w	fp, r2
 801d64e:	b289      	uxth	r1, r1
 801d650:	fb0a 110b 	mla	r1, sl, fp, r1
 801d654:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d658:	f8d9 2000 	ldr.w	r2, [r9]
 801d65c:	4461      	add	r1, ip
 801d65e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d662:	fb0a c20b 	mla	r2, sl, fp, ip
 801d666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d66a:	b289      	uxth	r1, r1
 801d66c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d670:	4577      	cmp	r7, lr
 801d672:	f849 1b04 	str.w	r1, [r9], #4
 801d676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d67a:	d8e2      	bhi.n	801d642 <__multiply+0xb2>
 801d67c:	9a01      	ldr	r2, [sp, #4]
 801d67e:	f845 c002 	str.w	ip, [r5, r2]
 801d682:	9a03      	ldr	r2, [sp, #12]
 801d684:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d688:	3304      	adds	r3, #4
 801d68a:	f1b9 0f00 	cmp.w	r9, #0
 801d68e:	d020      	beq.n	801d6d2 <__multiply+0x142>
 801d690:	6829      	ldr	r1, [r5, #0]
 801d692:	f104 0c14 	add.w	ip, r4, #20
 801d696:	46ae      	mov	lr, r5
 801d698:	f04f 0a00 	mov.w	sl, #0
 801d69c:	f8bc b000 	ldrh.w	fp, [ip]
 801d6a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d6a4:	fb09 220b 	mla	r2, r9, fp, r2
 801d6a8:	4492      	add	sl, r2
 801d6aa:	b289      	uxth	r1, r1
 801d6ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801d6b0:	f84e 1b04 	str.w	r1, [lr], #4
 801d6b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d6b8:	f8be 1000 	ldrh.w	r1, [lr]
 801d6bc:	0c12      	lsrs	r2, r2, #16
 801d6be:	fb09 1102 	mla	r1, r9, r2, r1
 801d6c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801d6c6:	4567      	cmp	r7, ip
 801d6c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d6cc:	d8e6      	bhi.n	801d69c <__multiply+0x10c>
 801d6ce:	9a01      	ldr	r2, [sp, #4]
 801d6d0:	50a9      	str	r1, [r5, r2]
 801d6d2:	3504      	adds	r5, #4
 801d6d4:	e79a      	b.n	801d60c <__multiply+0x7c>
 801d6d6:	3e01      	subs	r6, #1
 801d6d8:	e79c      	b.n	801d614 <__multiply+0x84>
 801d6da:	bf00      	nop
 801d6dc:	08074388 	.word	0x08074388
 801d6e0:	08074414 	.word	0x08074414

0801d6e4 <__pow5mult>:
 801d6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d6e8:	4615      	mov	r5, r2
 801d6ea:	f012 0203 	ands.w	r2, r2, #3
 801d6ee:	4606      	mov	r6, r0
 801d6f0:	460f      	mov	r7, r1
 801d6f2:	d007      	beq.n	801d704 <__pow5mult+0x20>
 801d6f4:	4c25      	ldr	r4, [pc, #148]	; (801d78c <__pow5mult+0xa8>)
 801d6f6:	3a01      	subs	r2, #1
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d6fe:	f7ff fe51 	bl	801d3a4 <__multadd>
 801d702:	4607      	mov	r7, r0
 801d704:	10ad      	asrs	r5, r5, #2
 801d706:	d03d      	beq.n	801d784 <__pow5mult+0xa0>
 801d708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d70a:	b97c      	cbnz	r4, 801d72c <__pow5mult+0x48>
 801d70c:	2010      	movs	r0, #16
 801d70e:	f7fc fd2f 	bl	801a170 <malloc>
 801d712:	4602      	mov	r2, r0
 801d714:	6270      	str	r0, [r6, #36]	; 0x24
 801d716:	b928      	cbnz	r0, 801d724 <__pow5mult+0x40>
 801d718:	4b1d      	ldr	r3, [pc, #116]	; (801d790 <__pow5mult+0xac>)
 801d71a:	481e      	ldr	r0, [pc, #120]	; (801d794 <__pow5mult+0xb0>)
 801d71c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d720:	f000 fc54 	bl	801dfcc <__assert_func>
 801d724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d728:	6004      	str	r4, [r0, #0]
 801d72a:	60c4      	str	r4, [r0, #12]
 801d72c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d734:	b94c      	cbnz	r4, 801d74a <__pow5mult+0x66>
 801d736:	f240 2171 	movw	r1, #625	; 0x271
 801d73a:	4630      	mov	r0, r6
 801d73c:	f7ff ff12 	bl	801d564 <__i2b>
 801d740:	2300      	movs	r3, #0
 801d742:	f8c8 0008 	str.w	r0, [r8, #8]
 801d746:	4604      	mov	r4, r0
 801d748:	6003      	str	r3, [r0, #0]
 801d74a:	f04f 0900 	mov.w	r9, #0
 801d74e:	07eb      	lsls	r3, r5, #31
 801d750:	d50a      	bpl.n	801d768 <__pow5mult+0x84>
 801d752:	4639      	mov	r1, r7
 801d754:	4622      	mov	r2, r4
 801d756:	4630      	mov	r0, r6
 801d758:	f7ff ff1a 	bl	801d590 <__multiply>
 801d75c:	4639      	mov	r1, r7
 801d75e:	4680      	mov	r8, r0
 801d760:	4630      	mov	r0, r6
 801d762:	f7ff fdfd 	bl	801d360 <_Bfree>
 801d766:	4647      	mov	r7, r8
 801d768:	106d      	asrs	r5, r5, #1
 801d76a:	d00b      	beq.n	801d784 <__pow5mult+0xa0>
 801d76c:	6820      	ldr	r0, [r4, #0]
 801d76e:	b938      	cbnz	r0, 801d780 <__pow5mult+0x9c>
 801d770:	4622      	mov	r2, r4
 801d772:	4621      	mov	r1, r4
 801d774:	4630      	mov	r0, r6
 801d776:	f7ff ff0b 	bl	801d590 <__multiply>
 801d77a:	6020      	str	r0, [r4, #0]
 801d77c:	f8c0 9000 	str.w	r9, [r0]
 801d780:	4604      	mov	r4, r0
 801d782:	e7e4      	b.n	801d74e <__pow5mult+0x6a>
 801d784:	4638      	mov	r0, r7
 801d786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d78a:	bf00      	nop
 801d78c:	08074560 	.word	0x08074560
 801d790:	08074316 	.word	0x08074316
 801d794:	08074414 	.word	0x08074414

0801d798 <__lshift>:
 801d798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d79c:	460c      	mov	r4, r1
 801d79e:	6849      	ldr	r1, [r1, #4]
 801d7a0:	6923      	ldr	r3, [r4, #16]
 801d7a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d7a6:	68a3      	ldr	r3, [r4, #8]
 801d7a8:	4607      	mov	r7, r0
 801d7aa:	4691      	mov	r9, r2
 801d7ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d7b0:	f108 0601 	add.w	r6, r8, #1
 801d7b4:	42b3      	cmp	r3, r6
 801d7b6:	db0b      	blt.n	801d7d0 <__lshift+0x38>
 801d7b8:	4638      	mov	r0, r7
 801d7ba:	f7ff fd91 	bl	801d2e0 <_Balloc>
 801d7be:	4605      	mov	r5, r0
 801d7c0:	b948      	cbnz	r0, 801d7d6 <__lshift+0x3e>
 801d7c2:	4602      	mov	r2, r0
 801d7c4:	4b2a      	ldr	r3, [pc, #168]	; (801d870 <__lshift+0xd8>)
 801d7c6:	482b      	ldr	r0, [pc, #172]	; (801d874 <__lshift+0xdc>)
 801d7c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d7cc:	f000 fbfe 	bl	801dfcc <__assert_func>
 801d7d0:	3101      	adds	r1, #1
 801d7d2:	005b      	lsls	r3, r3, #1
 801d7d4:	e7ee      	b.n	801d7b4 <__lshift+0x1c>
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	f100 0114 	add.w	r1, r0, #20
 801d7dc:	f100 0210 	add.w	r2, r0, #16
 801d7e0:	4618      	mov	r0, r3
 801d7e2:	4553      	cmp	r3, sl
 801d7e4:	db37      	blt.n	801d856 <__lshift+0xbe>
 801d7e6:	6920      	ldr	r0, [r4, #16]
 801d7e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d7ec:	f104 0314 	add.w	r3, r4, #20
 801d7f0:	f019 091f 	ands.w	r9, r9, #31
 801d7f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d7f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d7fc:	d02f      	beq.n	801d85e <__lshift+0xc6>
 801d7fe:	f1c9 0e20 	rsb	lr, r9, #32
 801d802:	468a      	mov	sl, r1
 801d804:	f04f 0c00 	mov.w	ip, #0
 801d808:	681a      	ldr	r2, [r3, #0]
 801d80a:	fa02 f209 	lsl.w	r2, r2, r9
 801d80e:	ea42 020c 	orr.w	r2, r2, ip
 801d812:	f84a 2b04 	str.w	r2, [sl], #4
 801d816:	f853 2b04 	ldr.w	r2, [r3], #4
 801d81a:	4298      	cmp	r0, r3
 801d81c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801d820:	d8f2      	bhi.n	801d808 <__lshift+0x70>
 801d822:	1b03      	subs	r3, r0, r4
 801d824:	3b15      	subs	r3, #21
 801d826:	f023 0303 	bic.w	r3, r3, #3
 801d82a:	3304      	adds	r3, #4
 801d82c:	f104 0215 	add.w	r2, r4, #21
 801d830:	4290      	cmp	r0, r2
 801d832:	bf38      	it	cc
 801d834:	2304      	movcc	r3, #4
 801d836:	f841 c003 	str.w	ip, [r1, r3]
 801d83a:	f1bc 0f00 	cmp.w	ip, #0
 801d83e:	d001      	beq.n	801d844 <__lshift+0xac>
 801d840:	f108 0602 	add.w	r6, r8, #2
 801d844:	3e01      	subs	r6, #1
 801d846:	4638      	mov	r0, r7
 801d848:	612e      	str	r6, [r5, #16]
 801d84a:	4621      	mov	r1, r4
 801d84c:	f7ff fd88 	bl	801d360 <_Bfree>
 801d850:	4628      	mov	r0, r5
 801d852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d856:	f842 0f04 	str.w	r0, [r2, #4]!
 801d85a:	3301      	adds	r3, #1
 801d85c:	e7c1      	b.n	801d7e2 <__lshift+0x4a>
 801d85e:	3904      	subs	r1, #4
 801d860:	f853 2b04 	ldr.w	r2, [r3], #4
 801d864:	f841 2f04 	str.w	r2, [r1, #4]!
 801d868:	4298      	cmp	r0, r3
 801d86a:	d8f9      	bhi.n	801d860 <__lshift+0xc8>
 801d86c:	e7ea      	b.n	801d844 <__lshift+0xac>
 801d86e:	bf00      	nop
 801d870:	08074388 	.word	0x08074388
 801d874:	08074414 	.word	0x08074414

0801d878 <__mcmp>:
 801d878:	b530      	push	{r4, r5, lr}
 801d87a:	6902      	ldr	r2, [r0, #16]
 801d87c:	690c      	ldr	r4, [r1, #16]
 801d87e:	1b12      	subs	r2, r2, r4
 801d880:	d10e      	bne.n	801d8a0 <__mcmp+0x28>
 801d882:	f100 0314 	add.w	r3, r0, #20
 801d886:	3114      	adds	r1, #20
 801d888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d88c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d898:	42a5      	cmp	r5, r4
 801d89a:	d003      	beq.n	801d8a4 <__mcmp+0x2c>
 801d89c:	d305      	bcc.n	801d8aa <__mcmp+0x32>
 801d89e:	2201      	movs	r2, #1
 801d8a0:	4610      	mov	r0, r2
 801d8a2:	bd30      	pop	{r4, r5, pc}
 801d8a4:	4283      	cmp	r3, r0
 801d8a6:	d3f3      	bcc.n	801d890 <__mcmp+0x18>
 801d8a8:	e7fa      	b.n	801d8a0 <__mcmp+0x28>
 801d8aa:	f04f 32ff 	mov.w	r2, #4294967295
 801d8ae:	e7f7      	b.n	801d8a0 <__mcmp+0x28>

0801d8b0 <__mdiff>:
 801d8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8b4:	460c      	mov	r4, r1
 801d8b6:	4606      	mov	r6, r0
 801d8b8:	4611      	mov	r1, r2
 801d8ba:	4620      	mov	r0, r4
 801d8bc:	4690      	mov	r8, r2
 801d8be:	f7ff ffdb 	bl	801d878 <__mcmp>
 801d8c2:	1e05      	subs	r5, r0, #0
 801d8c4:	d110      	bne.n	801d8e8 <__mdiff+0x38>
 801d8c6:	4629      	mov	r1, r5
 801d8c8:	4630      	mov	r0, r6
 801d8ca:	f7ff fd09 	bl	801d2e0 <_Balloc>
 801d8ce:	b930      	cbnz	r0, 801d8de <__mdiff+0x2e>
 801d8d0:	4b3a      	ldr	r3, [pc, #232]	; (801d9bc <__mdiff+0x10c>)
 801d8d2:	4602      	mov	r2, r0
 801d8d4:	f240 2132 	movw	r1, #562	; 0x232
 801d8d8:	4839      	ldr	r0, [pc, #228]	; (801d9c0 <__mdiff+0x110>)
 801d8da:	f000 fb77 	bl	801dfcc <__assert_func>
 801d8de:	2301      	movs	r3, #1
 801d8e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d8e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8e8:	bfa4      	itt	ge
 801d8ea:	4643      	movge	r3, r8
 801d8ec:	46a0      	movge	r8, r4
 801d8ee:	4630      	mov	r0, r6
 801d8f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d8f4:	bfa6      	itte	ge
 801d8f6:	461c      	movge	r4, r3
 801d8f8:	2500      	movge	r5, #0
 801d8fa:	2501      	movlt	r5, #1
 801d8fc:	f7ff fcf0 	bl	801d2e0 <_Balloc>
 801d900:	b920      	cbnz	r0, 801d90c <__mdiff+0x5c>
 801d902:	4b2e      	ldr	r3, [pc, #184]	; (801d9bc <__mdiff+0x10c>)
 801d904:	4602      	mov	r2, r0
 801d906:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d90a:	e7e5      	b.n	801d8d8 <__mdiff+0x28>
 801d90c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d910:	6926      	ldr	r6, [r4, #16]
 801d912:	60c5      	str	r5, [r0, #12]
 801d914:	f104 0914 	add.w	r9, r4, #20
 801d918:	f108 0514 	add.w	r5, r8, #20
 801d91c:	f100 0e14 	add.w	lr, r0, #20
 801d920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d928:	f108 0210 	add.w	r2, r8, #16
 801d92c:	46f2      	mov	sl, lr
 801d92e:	2100      	movs	r1, #0
 801d930:	f859 3b04 	ldr.w	r3, [r9], #4
 801d934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d938:	fa1f f883 	uxth.w	r8, r3
 801d93c:	fa11 f18b 	uxtah	r1, r1, fp
 801d940:	0c1b      	lsrs	r3, r3, #16
 801d942:	eba1 0808 	sub.w	r8, r1, r8
 801d946:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d94a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d94e:	fa1f f888 	uxth.w	r8, r8
 801d952:	1419      	asrs	r1, r3, #16
 801d954:	454e      	cmp	r6, r9
 801d956:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d95a:	f84a 3b04 	str.w	r3, [sl], #4
 801d95e:	d8e7      	bhi.n	801d930 <__mdiff+0x80>
 801d960:	1b33      	subs	r3, r6, r4
 801d962:	3b15      	subs	r3, #21
 801d964:	f023 0303 	bic.w	r3, r3, #3
 801d968:	3304      	adds	r3, #4
 801d96a:	3415      	adds	r4, #21
 801d96c:	42a6      	cmp	r6, r4
 801d96e:	bf38      	it	cc
 801d970:	2304      	movcc	r3, #4
 801d972:	441d      	add	r5, r3
 801d974:	4473      	add	r3, lr
 801d976:	469e      	mov	lr, r3
 801d978:	462e      	mov	r6, r5
 801d97a:	4566      	cmp	r6, ip
 801d97c:	d30e      	bcc.n	801d99c <__mdiff+0xec>
 801d97e:	f10c 0203 	add.w	r2, ip, #3
 801d982:	1b52      	subs	r2, r2, r5
 801d984:	f022 0203 	bic.w	r2, r2, #3
 801d988:	3d03      	subs	r5, #3
 801d98a:	45ac      	cmp	ip, r5
 801d98c:	bf38      	it	cc
 801d98e:	2200      	movcc	r2, #0
 801d990:	441a      	add	r2, r3
 801d992:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d996:	b17b      	cbz	r3, 801d9b8 <__mdiff+0x108>
 801d998:	6107      	str	r7, [r0, #16]
 801d99a:	e7a3      	b.n	801d8e4 <__mdiff+0x34>
 801d99c:	f856 8b04 	ldr.w	r8, [r6], #4
 801d9a0:	fa11 f288 	uxtah	r2, r1, r8
 801d9a4:	1414      	asrs	r4, r2, #16
 801d9a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d9aa:	b292      	uxth	r2, r2
 801d9ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d9b0:	f84e 2b04 	str.w	r2, [lr], #4
 801d9b4:	1421      	asrs	r1, r4, #16
 801d9b6:	e7e0      	b.n	801d97a <__mdiff+0xca>
 801d9b8:	3f01      	subs	r7, #1
 801d9ba:	e7ea      	b.n	801d992 <__mdiff+0xe2>
 801d9bc:	08074388 	.word	0x08074388
 801d9c0:	08074414 	.word	0x08074414

0801d9c4 <__ulp>:
 801d9c4:	b082      	sub	sp, #8
 801d9c6:	ed8d 0b00 	vstr	d0, [sp]
 801d9ca:	9b01      	ldr	r3, [sp, #4]
 801d9cc:	4912      	ldr	r1, [pc, #72]	; (801da18 <__ulp+0x54>)
 801d9ce:	4019      	ands	r1, r3
 801d9d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d9d4:	2900      	cmp	r1, #0
 801d9d6:	dd05      	ble.n	801d9e4 <__ulp+0x20>
 801d9d8:	2200      	movs	r2, #0
 801d9da:	460b      	mov	r3, r1
 801d9dc:	ec43 2b10 	vmov	d0, r2, r3
 801d9e0:	b002      	add	sp, #8
 801d9e2:	4770      	bx	lr
 801d9e4:	4249      	negs	r1, r1
 801d9e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d9ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d9ee:	f04f 0200 	mov.w	r2, #0
 801d9f2:	f04f 0300 	mov.w	r3, #0
 801d9f6:	da04      	bge.n	801da02 <__ulp+0x3e>
 801d9f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d9fc:	fa41 f300 	asr.w	r3, r1, r0
 801da00:	e7ec      	b.n	801d9dc <__ulp+0x18>
 801da02:	f1a0 0114 	sub.w	r1, r0, #20
 801da06:	291e      	cmp	r1, #30
 801da08:	bfda      	itte	le
 801da0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801da0e:	fa20 f101 	lsrle.w	r1, r0, r1
 801da12:	2101      	movgt	r1, #1
 801da14:	460a      	mov	r2, r1
 801da16:	e7e1      	b.n	801d9dc <__ulp+0x18>
 801da18:	7ff00000 	.word	0x7ff00000

0801da1c <__b2d>:
 801da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da1e:	6905      	ldr	r5, [r0, #16]
 801da20:	f100 0714 	add.w	r7, r0, #20
 801da24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801da28:	1f2e      	subs	r6, r5, #4
 801da2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801da2e:	4620      	mov	r0, r4
 801da30:	f7ff fd48 	bl	801d4c4 <__hi0bits>
 801da34:	f1c0 0320 	rsb	r3, r0, #32
 801da38:	280a      	cmp	r0, #10
 801da3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801dab8 <__b2d+0x9c>
 801da3e:	600b      	str	r3, [r1, #0]
 801da40:	dc14      	bgt.n	801da6c <__b2d+0x50>
 801da42:	f1c0 0e0b 	rsb	lr, r0, #11
 801da46:	fa24 f10e 	lsr.w	r1, r4, lr
 801da4a:	42b7      	cmp	r7, r6
 801da4c:	ea41 030c 	orr.w	r3, r1, ip
 801da50:	bf34      	ite	cc
 801da52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801da56:	2100      	movcs	r1, #0
 801da58:	3015      	adds	r0, #21
 801da5a:	fa04 f000 	lsl.w	r0, r4, r0
 801da5e:	fa21 f10e 	lsr.w	r1, r1, lr
 801da62:	ea40 0201 	orr.w	r2, r0, r1
 801da66:	ec43 2b10 	vmov	d0, r2, r3
 801da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da6c:	42b7      	cmp	r7, r6
 801da6e:	bf3a      	itte	cc
 801da70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801da74:	f1a5 0608 	subcc.w	r6, r5, #8
 801da78:	2100      	movcs	r1, #0
 801da7a:	380b      	subs	r0, #11
 801da7c:	d017      	beq.n	801daae <__b2d+0x92>
 801da7e:	f1c0 0c20 	rsb	ip, r0, #32
 801da82:	fa04 f500 	lsl.w	r5, r4, r0
 801da86:	42be      	cmp	r6, r7
 801da88:	fa21 f40c 	lsr.w	r4, r1, ip
 801da8c:	ea45 0504 	orr.w	r5, r5, r4
 801da90:	bf8c      	ite	hi
 801da92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801da96:	2400      	movls	r4, #0
 801da98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801da9c:	fa01 f000 	lsl.w	r0, r1, r0
 801daa0:	fa24 f40c 	lsr.w	r4, r4, ip
 801daa4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801daa8:	ea40 0204 	orr.w	r2, r0, r4
 801daac:	e7db      	b.n	801da66 <__b2d+0x4a>
 801daae:	ea44 030c 	orr.w	r3, r4, ip
 801dab2:	460a      	mov	r2, r1
 801dab4:	e7d7      	b.n	801da66 <__b2d+0x4a>
 801dab6:	bf00      	nop
 801dab8:	3ff00000 	.word	0x3ff00000

0801dabc <__d2b>:
 801dabc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dac0:	4689      	mov	r9, r1
 801dac2:	2101      	movs	r1, #1
 801dac4:	ec57 6b10 	vmov	r6, r7, d0
 801dac8:	4690      	mov	r8, r2
 801daca:	f7ff fc09 	bl	801d2e0 <_Balloc>
 801dace:	4604      	mov	r4, r0
 801dad0:	b930      	cbnz	r0, 801dae0 <__d2b+0x24>
 801dad2:	4602      	mov	r2, r0
 801dad4:	4b25      	ldr	r3, [pc, #148]	; (801db6c <__d2b+0xb0>)
 801dad6:	4826      	ldr	r0, [pc, #152]	; (801db70 <__d2b+0xb4>)
 801dad8:	f240 310a 	movw	r1, #778	; 0x30a
 801dadc:	f000 fa76 	bl	801dfcc <__assert_func>
 801dae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801dae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801dae8:	bb35      	cbnz	r5, 801db38 <__d2b+0x7c>
 801daea:	2e00      	cmp	r6, #0
 801daec:	9301      	str	r3, [sp, #4]
 801daee:	d028      	beq.n	801db42 <__d2b+0x86>
 801daf0:	4668      	mov	r0, sp
 801daf2:	9600      	str	r6, [sp, #0]
 801daf4:	f7ff fd06 	bl	801d504 <__lo0bits>
 801daf8:	9900      	ldr	r1, [sp, #0]
 801dafa:	b300      	cbz	r0, 801db3e <__d2b+0x82>
 801dafc:	9a01      	ldr	r2, [sp, #4]
 801dafe:	f1c0 0320 	rsb	r3, r0, #32
 801db02:	fa02 f303 	lsl.w	r3, r2, r3
 801db06:	430b      	orrs	r3, r1
 801db08:	40c2      	lsrs	r2, r0
 801db0a:	6163      	str	r3, [r4, #20]
 801db0c:	9201      	str	r2, [sp, #4]
 801db0e:	9b01      	ldr	r3, [sp, #4]
 801db10:	61a3      	str	r3, [r4, #24]
 801db12:	2b00      	cmp	r3, #0
 801db14:	bf14      	ite	ne
 801db16:	2202      	movne	r2, #2
 801db18:	2201      	moveq	r2, #1
 801db1a:	6122      	str	r2, [r4, #16]
 801db1c:	b1d5      	cbz	r5, 801db54 <__d2b+0x98>
 801db1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801db22:	4405      	add	r5, r0
 801db24:	f8c9 5000 	str.w	r5, [r9]
 801db28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801db2c:	f8c8 0000 	str.w	r0, [r8]
 801db30:	4620      	mov	r0, r4
 801db32:	b003      	add	sp, #12
 801db34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801db3c:	e7d5      	b.n	801daea <__d2b+0x2e>
 801db3e:	6161      	str	r1, [r4, #20]
 801db40:	e7e5      	b.n	801db0e <__d2b+0x52>
 801db42:	a801      	add	r0, sp, #4
 801db44:	f7ff fcde 	bl	801d504 <__lo0bits>
 801db48:	9b01      	ldr	r3, [sp, #4]
 801db4a:	6163      	str	r3, [r4, #20]
 801db4c:	2201      	movs	r2, #1
 801db4e:	6122      	str	r2, [r4, #16]
 801db50:	3020      	adds	r0, #32
 801db52:	e7e3      	b.n	801db1c <__d2b+0x60>
 801db54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801db58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801db5c:	f8c9 0000 	str.w	r0, [r9]
 801db60:	6918      	ldr	r0, [r3, #16]
 801db62:	f7ff fcaf 	bl	801d4c4 <__hi0bits>
 801db66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801db6a:	e7df      	b.n	801db2c <__d2b+0x70>
 801db6c:	08074388 	.word	0x08074388
 801db70:	08074414 	.word	0x08074414

0801db74 <__ratio>:
 801db74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db78:	4688      	mov	r8, r1
 801db7a:	4669      	mov	r1, sp
 801db7c:	4681      	mov	r9, r0
 801db7e:	f7ff ff4d 	bl	801da1c <__b2d>
 801db82:	a901      	add	r1, sp, #4
 801db84:	4640      	mov	r0, r8
 801db86:	ec55 4b10 	vmov	r4, r5, d0
 801db8a:	f7ff ff47 	bl	801da1c <__b2d>
 801db8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801db92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801db96:	eba3 0c02 	sub.w	ip, r3, r2
 801db9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801db9e:	1a9b      	subs	r3, r3, r2
 801dba0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801dba4:	ec51 0b10 	vmov	r0, r1, d0
 801dba8:	2b00      	cmp	r3, #0
 801dbaa:	bfd6      	itet	le
 801dbac:	460a      	movle	r2, r1
 801dbae:	462a      	movgt	r2, r5
 801dbb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801dbb4:	468b      	mov	fp, r1
 801dbb6:	462f      	mov	r7, r5
 801dbb8:	bfd4      	ite	le
 801dbba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801dbbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801dbc2:	4620      	mov	r0, r4
 801dbc4:	ee10 2a10 	vmov	r2, s0
 801dbc8:	465b      	mov	r3, fp
 801dbca:	4639      	mov	r1, r7
 801dbcc:	f7e2 fe56 	bl	800087c <__aeabi_ddiv>
 801dbd0:	ec41 0b10 	vmov	d0, r0, r1
 801dbd4:	b003      	add	sp, #12
 801dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dbda <__copybits>:
 801dbda:	3901      	subs	r1, #1
 801dbdc:	b570      	push	{r4, r5, r6, lr}
 801dbde:	1149      	asrs	r1, r1, #5
 801dbe0:	6914      	ldr	r4, [r2, #16]
 801dbe2:	3101      	adds	r1, #1
 801dbe4:	f102 0314 	add.w	r3, r2, #20
 801dbe8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801dbec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801dbf0:	1f05      	subs	r5, r0, #4
 801dbf2:	42a3      	cmp	r3, r4
 801dbf4:	d30c      	bcc.n	801dc10 <__copybits+0x36>
 801dbf6:	1aa3      	subs	r3, r4, r2
 801dbf8:	3b11      	subs	r3, #17
 801dbfa:	f023 0303 	bic.w	r3, r3, #3
 801dbfe:	3211      	adds	r2, #17
 801dc00:	42a2      	cmp	r2, r4
 801dc02:	bf88      	it	hi
 801dc04:	2300      	movhi	r3, #0
 801dc06:	4418      	add	r0, r3
 801dc08:	2300      	movs	r3, #0
 801dc0a:	4288      	cmp	r0, r1
 801dc0c:	d305      	bcc.n	801dc1a <__copybits+0x40>
 801dc0e:	bd70      	pop	{r4, r5, r6, pc}
 801dc10:	f853 6b04 	ldr.w	r6, [r3], #4
 801dc14:	f845 6f04 	str.w	r6, [r5, #4]!
 801dc18:	e7eb      	b.n	801dbf2 <__copybits+0x18>
 801dc1a:	f840 3b04 	str.w	r3, [r0], #4
 801dc1e:	e7f4      	b.n	801dc0a <__copybits+0x30>

0801dc20 <__any_on>:
 801dc20:	f100 0214 	add.w	r2, r0, #20
 801dc24:	6900      	ldr	r0, [r0, #16]
 801dc26:	114b      	asrs	r3, r1, #5
 801dc28:	4298      	cmp	r0, r3
 801dc2a:	b510      	push	{r4, lr}
 801dc2c:	db11      	blt.n	801dc52 <__any_on+0x32>
 801dc2e:	dd0a      	ble.n	801dc46 <__any_on+0x26>
 801dc30:	f011 011f 	ands.w	r1, r1, #31
 801dc34:	d007      	beq.n	801dc46 <__any_on+0x26>
 801dc36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801dc3a:	fa24 f001 	lsr.w	r0, r4, r1
 801dc3e:	fa00 f101 	lsl.w	r1, r0, r1
 801dc42:	428c      	cmp	r4, r1
 801dc44:	d10b      	bne.n	801dc5e <__any_on+0x3e>
 801dc46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801dc4a:	4293      	cmp	r3, r2
 801dc4c:	d803      	bhi.n	801dc56 <__any_on+0x36>
 801dc4e:	2000      	movs	r0, #0
 801dc50:	bd10      	pop	{r4, pc}
 801dc52:	4603      	mov	r3, r0
 801dc54:	e7f7      	b.n	801dc46 <__any_on+0x26>
 801dc56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dc5a:	2900      	cmp	r1, #0
 801dc5c:	d0f5      	beq.n	801dc4a <__any_on+0x2a>
 801dc5e:	2001      	movs	r0, #1
 801dc60:	e7f6      	b.n	801dc50 <__any_on+0x30>

0801dc62 <_realloc_r>:
 801dc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc66:	4680      	mov	r8, r0
 801dc68:	4614      	mov	r4, r2
 801dc6a:	460e      	mov	r6, r1
 801dc6c:	b921      	cbnz	r1, 801dc78 <_realloc_r+0x16>
 801dc6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc72:	4611      	mov	r1, r2
 801dc74:	f7fc bb24 	b.w	801a2c0 <_malloc_r>
 801dc78:	b92a      	cbnz	r2, 801dc86 <_realloc_r+0x24>
 801dc7a:	f7fc fab5 	bl	801a1e8 <_free_r>
 801dc7e:	4625      	mov	r5, r4
 801dc80:	4628      	mov	r0, r5
 801dc82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc86:	f000 f9ee 	bl	801e066 <_malloc_usable_size_r>
 801dc8a:	4284      	cmp	r4, r0
 801dc8c:	4607      	mov	r7, r0
 801dc8e:	d802      	bhi.n	801dc96 <_realloc_r+0x34>
 801dc90:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801dc94:	d812      	bhi.n	801dcbc <_realloc_r+0x5a>
 801dc96:	4621      	mov	r1, r4
 801dc98:	4640      	mov	r0, r8
 801dc9a:	f7fc fb11 	bl	801a2c0 <_malloc_r>
 801dc9e:	4605      	mov	r5, r0
 801dca0:	2800      	cmp	r0, #0
 801dca2:	d0ed      	beq.n	801dc80 <_realloc_r+0x1e>
 801dca4:	42bc      	cmp	r4, r7
 801dca6:	4622      	mov	r2, r4
 801dca8:	4631      	mov	r1, r6
 801dcaa:	bf28      	it	cs
 801dcac:	463a      	movcs	r2, r7
 801dcae:	f7fc fa6f 	bl	801a190 <memcpy>
 801dcb2:	4631      	mov	r1, r6
 801dcb4:	4640      	mov	r0, r8
 801dcb6:	f7fc fa97 	bl	801a1e8 <_free_r>
 801dcba:	e7e1      	b.n	801dc80 <_realloc_r+0x1e>
 801dcbc:	4635      	mov	r5, r6
 801dcbe:	e7df      	b.n	801dc80 <_realloc_r+0x1e>

0801dcc0 <__ssputs_r>:
 801dcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcc4:	688e      	ldr	r6, [r1, #8]
 801dcc6:	429e      	cmp	r6, r3
 801dcc8:	4682      	mov	sl, r0
 801dcca:	460c      	mov	r4, r1
 801dccc:	4690      	mov	r8, r2
 801dcce:	461f      	mov	r7, r3
 801dcd0:	d838      	bhi.n	801dd44 <__ssputs_r+0x84>
 801dcd2:	898a      	ldrh	r2, [r1, #12]
 801dcd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dcd8:	d032      	beq.n	801dd40 <__ssputs_r+0x80>
 801dcda:	6825      	ldr	r5, [r4, #0]
 801dcdc:	6909      	ldr	r1, [r1, #16]
 801dcde:	eba5 0901 	sub.w	r9, r5, r1
 801dce2:	6965      	ldr	r5, [r4, #20]
 801dce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dcec:	3301      	adds	r3, #1
 801dcee:	444b      	add	r3, r9
 801dcf0:	106d      	asrs	r5, r5, #1
 801dcf2:	429d      	cmp	r5, r3
 801dcf4:	bf38      	it	cc
 801dcf6:	461d      	movcc	r5, r3
 801dcf8:	0553      	lsls	r3, r2, #21
 801dcfa:	d531      	bpl.n	801dd60 <__ssputs_r+0xa0>
 801dcfc:	4629      	mov	r1, r5
 801dcfe:	f7fc fadf 	bl	801a2c0 <_malloc_r>
 801dd02:	4606      	mov	r6, r0
 801dd04:	b950      	cbnz	r0, 801dd1c <__ssputs_r+0x5c>
 801dd06:	230c      	movs	r3, #12
 801dd08:	f8ca 3000 	str.w	r3, [sl]
 801dd0c:	89a3      	ldrh	r3, [r4, #12]
 801dd0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd12:	81a3      	strh	r3, [r4, #12]
 801dd14:	f04f 30ff 	mov.w	r0, #4294967295
 801dd18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd1c:	6921      	ldr	r1, [r4, #16]
 801dd1e:	464a      	mov	r2, r9
 801dd20:	f7fc fa36 	bl	801a190 <memcpy>
 801dd24:	89a3      	ldrh	r3, [r4, #12]
 801dd26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dd2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd2e:	81a3      	strh	r3, [r4, #12]
 801dd30:	6126      	str	r6, [r4, #16]
 801dd32:	6165      	str	r5, [r4, #20]
 801dd34:	444e      	add	r6, r9
 801dd36:	eba5 0509 	sub.w	r5, r5, r9
 801dd3a:	6026      	str	r6, [r4, #0]
 801dd3c:	60a5      	str	r5, [r4, #8]
 801dd3e:	463e      	mov	r6, r7
 801dd40:	42be      	cmp	r6, r7
 801dd42:	d900      	bls.n	801dd46 <__ssputs_r+0x86>
 801dd44:	463e      	mov	r6, r7
 801dd46:	6820      	ldr	r0, [r4, #0]
 801dd48:	4632      	mov	r2, r6
 801dd4a:	4641      	mov	r1, r8
 801dd4c:	f000 f971 	bl	801e032 <memmove>
 801dd50:	68a3      	ldr	r3, [r4, #8]
 801dd52:	1b9b      	subs	r3, r3, r6
 801dd54:	60a3      	str	r3, [r4, #8]
 801dd56:	6823      	ldr	r3, [r4, #0]
 801dd58:	4433      	add	r3, r6
 801dd5a:	6023      	str	r3, [r4, #0]
 801dd5c:	2000      	movs	r0, #0
 801dd5e:	e7db      	b.n	801dd18 <__ssputs_r+0x58>
 801dd60:	462a      	mov	r2, r5
 801dd62:	f7ff ff7e 	bl	801dc62 <_realloc_r>
 801dd66:	4606      	mov	r6, r0
 801dd68:	2800      	cmp	r0, #0
 801dd6a:	d1e1      	bne.n	801dd30 <__ssputs_r+0x70>
 801dd6c:	6921      	ldr	r1, [r4, #16]
 801dd6e:	4650      	mov	r0, sl
 801dd70:	f7fc fa3a 	bl	801a1e8 <_free_r>
 801dd74:	e7c7      	b.n	801dd06 <__ssputs_r+0x46>
	...

0801dd78 <_svfiprintf_r>:
 801dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd7c:	4698      	mov	r8, r3
 801dd7e:	898b      	ldrh	r3, [r1, #12]
 801dd80:	061b      	lsls	r3, r3, #24
 801dd82:	b09d      	sub	sp, #116	; 0x74
 801dd84:	4607      	mov	r7, r0
 801dd86:	460d      	mov	r5, r1
 801dd88:	4614      	mov	r4, r2
 801dd8a:	d50e      	bpl.n	801ddaa <_svfiprintf_r+0x32>
 801dd8c:	690b      	ldr	r3, [r1, #16]
 801dd8e:	b963      	cbnz	r3, 801ddaa <_svfiprintf_r+0x32>
 801dd90:	2140      	movs	r1, #64	; 0x40
 801dd92:	f7fc fa95 	bl	801a2c0 <_malloc_r>
 801dd96:	6028      	str	r0, [r5, #0]
 801dd98:	6128      	str	r0, [r5, #16]
 801dd9a:	b920      	cbnz	r0, 801dda6 <_svfiprintf_r+0x2e>
 801dd9c:	230c      	movs	r3, #12
 801dd9e:	603b      	str	r3, [r7, #0]
 801dda0:	f04f 30ff 	mov.w	r0, #4294967295
 801dda4:	e0d1      	b.n	801df4a <_svfiprintf_r+0x1d2>
 801dda6:	2340      	movs	r3, #64	; 0x40
 801dda8:	616b      	str	r3, [r5, #20]
 801ddaa:	2300      	movs	r3, #0
 801ddac:	9309      	str	r3, [sp, #36]	; 0x24
 801ddae:	2320      	movs	r3, #32
 801ddb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ddb4:	f8cd 800c 	str.w	r8, [sp, #12]
 801ddb8:	2330      	movs	r3, #48	; 0x30
 801ddba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801df64 <_svfiprintf_r+0x1ec>
 801ddbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ddc2:	f04f 0901 	mov.w	r9, #1
 801ddc6:	4623      	mov	r3, r4
 801ddc8:	469a      	mov	sl, r3
 801ddca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ddce:	b10a      	cbz	r2, 801ddd4 <_svfiprintf_r+0x5c>
 801ddd0:	2a25      	cmp	r2, #37	; 0x25
 801ddd2:	d1f9      	bne.n	801ddc8 <_svfiprintf_r+0x50>
 801ddd4:	ebba 0b04 	subs.w	fp, sl, r4
 801ddd8:	d00b      	beq.n	801ddf2 <_svfiprintf_r+0x7a>
 801ddda:	465b      	mov	r3, fp
 801dddc:	4622      	mov	r2, r4
 801ddde:	4629      	mov	r1, r5
 801dde0:	4638      	mov	r0, r7
 801dde2:	f7ff ff6d 	bl	801dcc0 <__ssputs_r>
 801dde6:	3001      	adds	r0, #1
 801dde8:	f000 80aa 	beq.w	801df40 <_svfiprintf_r+0x1c8>
 801ddec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ddee:	445a      	add	r2, fp
 801ddf0:	9209      	str	r2, [sp, #36]	; 0x24
 801ddf2:	f89a 3000 	ldrb.w	r3, [sl]
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	f000 80a2 	beq.w	801df40 <_svfiprintf_r+0x1c8>
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	f04f 32ff 	mov.w	r2, #4294967295
 801de02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de06:	f10a 0a01 	add.w	sl, sl, #1
 801de0a:	9304      	str	r3, [sp, #16]
 801de0c:	9307      	str	r3, [sp, #28]
 801de0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801de12:	931a      	str	r3, [sp, #104]	; 0x68
 801de14:	4654      	mov	r4, sl
 801de16:	2205      	movs	r2, #5
 801de18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de1c:	4851      	ldr	r0, [pc, #324]	; (801df64 <_svfiprintf_r+0x1ec>)
 801de1e:	f7e2 f9f7 	bl	8000210 <memchr>
 801de22:	9a04      	ldr	r2, [sp, #16]
 801de24:	b9d8      	cbnz	r0, 801de5e <_svfiprintf_r+0xe6>
 801de26:	06d0      	lsls	r0, r2, #27
 801de28:	bf44      	itt	mi
 801de2a:	2320      	movmi	r3, #32
 801de2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de30:	0711      	lsls	r1, r2, #28
 801de32:	bf44      	itt	mi
 801de34:	232b      	movmi	r3, #43	; 0x2b
 801de36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de3a:	f89a 3000 	ldrb.w	r3, [sl]
 801de3e:	2b2a      	cmp	r3, #42	; 0x2a
 801de40:	d015      	beq.n	801de6e <_svfiprintf_r+0xf6>
 801de42:	9a07      	ldr	r2, [sp, #28]
 801de44:	4654      	mov	r4, sl
 801de46:	2000      	movs	r0, #0
 801de48:	f04f 0c0a 	mov.w	ip, #10
 801de4c:	4621      	mov	r1, r4
 801de4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de52:	3b30      	subs	r3, #48	; 0x30
 801de54:	2b09      	cmp	r3, #9
 801de56:	d94e      	bls.n	801def6 <_svfiprintf_r+0x17e>
 801de58:	b1b0      	cbz	r0, 801de88 <_svfiprintf_r+0x110>
 801de5a:	9207      	str	r2, [sp, #28]
 801de5c:	e014      	b.n	801de88 <_svfiprintf_r+0x110>
 801de5e:	eba0 0308 	sub.w	r3, r0, r8
 801de62:	fa09 f303 	lsl.w	r3, r9, r3
 801de66:	4313      	orrs	r3, r2
 801de68:	9304      	str	r3, [sp, #16]
 801de6a:	46a2      	mov	sl, r4
 801de6c:	e7d2      	b.n	801de14 <_svfiprintf_r+0x9c>
 801de6e:	9b03      	ldr	r3, [sp, #12]
 801de70:	1d19      	adds	r1, r3, #4
 801de72:	681b      	ldr	r3, [r3, #0]
 801de74:	9103      	str	r1, [sp, #12]
 801de76:	2b00      	cmp	r3, #0
 801de78:	bfbb      	ittet	lt
 801de7a:	425b      	neglt	r3, r3
 801de7c:	f042 0202 	orrlt.w	r2, r2, #2
 801de80:	9307      	strge	r3, [sp, #28]
 801de82:	9307      	strlt	r3, [sp, #28]
 801de84:	bfb8      	it	lt
 801de86:	9204      	strlt	r2, [sp, #16]
 801de88:	7823      	ldrb	r3, [r4, #0]
 801de8a:	2b2e      	cmp	r3, #46	; 0x2e
 801de8c:	d10c      	bne.n	801dea8 <_svfiprintf_r+0x130>
 801de8e:	7863      	ldrb	r3, [r4, #1]
 801de90:	2b2a      	cmp	r3, #42	; 0x2a
 801de92:	d135      	bne.n	801df00 <_svfiprintf_r+0x188>
 801de94:	9b03      	ldr	r3, [sp, #12]
 801de96:	1d1a      	adds	r2, r3, #4
 801de98:	681b      	ldr	r3, [r3, #0]
 801de9a:	9203      	str	r2, [sp, #12]
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	bfb8      	it	lt
 801dea0:	f04f 33ff 	movlt.w	r3, #4294967295
 801dea4:	3402      	adds	r4, #2
 801dea6:	9305      	str	r3, [sp, #20]
 801dea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801df74 <_svfiprintf_r+0x1fc>
 801deac:	7821      	ldrb	r1, [r4, #0]
 801deae:	2203      	movs	r2, #3
 801deb0:	4650      	mov	r0, sl
 801deb2:	f7e2 f9ad 	bl	8000210 <memchr>
 801deb6:	b140      	cbz	r0, 801deca <_svfiprintf_r+0x152>
 801deb8:	2340      	movs	r3, #64	; 0x40
 801deba:	eba0 000a 	sub.w	r0, r0, sl
 801debe:	fa03 f000 	lsl.w	r0, r3, r0
 801dec2:	9b04      	ldr	r3, [sp, #16]
 801dec4:	4303      	orrs	r3, r0
 801dec6:	3401      	adds	r4, #1
 801dec8:	9304      	str	r3, [sp, #16]
 801deca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dece:	4826      	ldr	r0, [pc, #152]	; (801df68 <_svfiprintf_r+0x1f0>)
 801ded0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ded4:	2206      	movs	r2, #6
 801ded6:	f7e2 f99b 	bl	8000210 <memchr>
 801deda:	2800      	cmp	r0, #0
 801dedc:	d038      	beq.n	801df50 <_svfiprintf_r+0x1d8>
 801dede:	4b23      	ldr	r3, [pc, #140]	; (801df6c <_svfiprintf_r+0x1f4>)
 801dee0:	bb1b      	cbnz	r3, 801df2a <_svfiprintf_r+0x1b2>
 801dee2:	9b03      	ldr	r3, [sp, #12]
 801dee4:	3307      	adds	r3, #7
 801dee6:	f023 0307 	bic.w	r3, r3, #7
 801deea:	3308      	adds	r3, #8
 801deec:	9303      	str	r3, [sp, #12]
 801deee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801def0:	4433      	add	r3, r6
 801def2:	9309      	str	r3, [sp, #36]	; 0x24
 801def4:	e767      	b.n	801ddc6 <_svfiprintf_r+0x4e>
 801def6:	fb0c 3202 	mla	r2, ip, r2, r3
 801defa:	460c      	mov	r4, r1
 801defc:	2001      	movs	r0, #1
 801defe:	e7a5      	b.n	801de4c <_svfiprintf_r+0xd4>
 801df00:	2300      	movs	r3, #0
 801df02:	3401      	adds	r4, #1
 801df04:	9305      	str	r3, [sp, #20]
 801df06:	4619      	mov	r1, r3
 801df08:	f04f 0c0a 	mov.w	ip, #10
 801df0c:	4620      	mov	r0, r4
 801df0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801df12:	3a30      	subs	r2, #48	; 0x30
 801df14:	2a09      	cmp	r2, #9
 801df16:	d903      	bls.n	801df20 <_svfiprintf_r+0x1a8>
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d0c5      	beq.n	801dea8 <_svfiprintf_r+0x130>
 801df1c:	9105      	str	r1, [sp, #20]
 801df1e:	e7c3      	b.n	801dea8 <_svfiprintf_r+0x130>
 801df20:	fb0c 2101 	mla	r1, ip, r1, r2
 801df24:	4604      	mov	r4, r0
 801df26:	2301      	movs	r3, #1
 801df28:	e7f0      	b.n	801df0c <_svfiprintf_r+0x194>
 801df2a:	ab03      	add	r3, sp, #12
 801df2c:	9300      	str	r3, [sp, #0]
 801df2e:	462a      	mov	r2, r5
 801df30:	4b0f      	ldr	r3, [pc, #60]	; (801df70 <_svfiprintf_r+0x1f8>)
 801df32:	a904      	add	r1, sp, #16
 801df34:	4638      	mov	r0, r7
 801df36:	f7fc fad7 	bl	801a4e8 <_printf_float>
 801df3a:	1c42      	adds	r2, r0, #1
 801df3c:	4606      	mov	r6, r0
 801df3e:	d1d6      	bne.n	801deee <_svfiprintf_r+0x176>
 801df40:	89ab      	ldrh	r3, [r5, #12]
 801df42:	065b      	lsls	r3, r3, #25
 801df44:	f53f af2c 	bmi.w	801dda0 <_svfiprintf_r+0x28>
 801df48:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df4a:	b01d      	add	sp, #116	; 0x74
 801df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df50:	ab03      	add	r3, sp, #12
 801df52:	9300      	str	r3, [sp, #0]
 801df54:	462a      	mov	r2, r5
 801df56:	4b06      	ldr	r3, [pc, #24]	; (801df70 <_svfiprintf_r+0x1f8>)
 801df58:	a904      	add	r1, sp, #16
 801df5a:	4638      	mov	r0, r7
 801df5c:	f7fc fd68 	bl	801aa30 <_printf_i>
 801df60:	e7eb      	b.n	801df3a <_svfiprintf_r+0x1c2>
 801df62:	bf00      	nop
 801df64:	0807456c 	.word	0x0807456c
 801df68:	08074576 	.word	0x08074576
 801df6c:	0801a4e9 	.word	0x0801a4e9
 801df70:	0801dcc1 	.word	0x0801dcc1
 801df74:	08074572 	.word	0x08074572

0801df78 <nan>:
 801df78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801df80 <nan+0x8>
 801df7c:	4770      	bx	lr
 801df7e:	bf00      	nop
 801df80:	00000000 	.word	0x00000000
 801df84:	7ff80000 	.word	0x7ff80000

0801df88 <strncmp>:
 801df88:	b510      	push	{r4, lr}
 801df8a:	b17a      	cbz	r2, 801dfac <strncmp+0x24>
 801df8c:	4603      	mov	r3, r0
 801df8e:	3901      	subs	r1, #1
 801df90:	1884      	adds	r4, r0, r2
 801df92:	f813 0b01 	ldrb.w	r0, [r3], #1
 801df96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801df9a:	4290      	cmp	r0, r2
 801df9c:	d101      	bne.n	801dfa2 <strncmp+0x1a>
 801df9e:	42a3      	cmp	r3, r4
 801dfa0:	d101      	bne.n	801dfa6 <strncmp+0x1e>
 801dfa2:	1a80      	subs	r0, r0, r2
 801dfa4:	bd10      	pop	{r4, pc}
 801dfa6:	2800      	cmp	r0, #0
 801dfa8:	d1f3      	bne.n	801df92 <strncmp+0xa>
 801dfaa:	e7fa      	b.n	801dfa2 <strncmp+0x1a>
 801dfac:	4610      	mov	r0, r2
 801dfae:	e7f9      	b.n	801dfa4 <strncmp+0x1c>

0801dfb0 <__ascii_wctomb>:
 801dfb0:	b149      	cbz	r1, 801dfc6 <__ascii_wctomb+0x16>
 801dfb2:	2aff      	cmp	r2, #255	; 0xff
 801dfb4:	bf85      	ittet	hi
 801dfb6:	238a      	movhi	r3, #138	; 0x8a
 801dfb8:	6003      	strhi	r3, [r0, #0]
 801dfba:	700a      	strbls	r2, [r1, #0]
 801dfbc:	f04f 30ff 	movhi.w	r0, #4294967295
 801dfc0:	bf98      	it	ls
 801dfc2:	2001      	movls	r0, #1
 801dfc4:	4770      	bx	lr
 801dfc6:	4608      	mov	r0, r1
 801dfc8:	4770      	bx	lr
	...

0801dfcc <__assert_func>:
 801dfcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dfce:	4614      	mov	r4, r2
 801dfd0:	461a      	mov	r2, r3
 801dfd2:	4b09      	ldr	r3, [pc, #36]	; (801dff8 <__assert_func+0x2c>)
 801dfd4:	681b      	ldr	r3, [r3, #0]
 801dfd6:	4605      	mov	r5, r0
 801dfd8:	68d8      	ldr	r0, [r3, #12]
 801dfda:	b14c      	cbz	r4, 801dff0 <__assert_func+0x24>
 801dfdc:	4b07      	ldr	r3, [pc, #28]	; (801dffc <__assert_func+0x30>)
 801dfde:	9100      	str	r1, [sp, #0]
 801dfe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dfe4:	4906      	ldr	r1, [pc, #24]	; (801e000 <__assert_func+0x34>)
 801dfe6:	462b      	mov	r3, r5
 801dfe8:	f000 f80e 	bl	801e008 <fiprintf>
 801dfec:	f000 fa5c 	bl	801e4a8 <abort>
 801dff0:	4b04      	ldr	r3, [pc, #16]	; (801e004 <__assert_func+0x38>)
 801dff2:	461c      	mov	r4, r3
 801dff4:	e7f3      	b.n	801dfde <__assert_func+0x12>
 801dff6:	bf00      	nop
 801dff8:	20000928 	.word	0x20000928
 801dffc:	0807457d 	.word	0x0807457d
 801e000:	0807458a 	.word	0x0807458a
 801e004:	080745b8 	.word	0x080745b8

0801e008 <fiprintf>:
 801e008:	b40e      	push	{r1, r2, r3}
 801e00a:	b503      	push	{r0, r1, lr}
 801e00c:	4601      	mov	r1, r0
 801e00e:	ab03      	add	r3, sp, #12
 801e010:	4805      	ldr	r0, [pc, #20]	; (801e028 <fiprintf+0x20>)
 801e012:	f853 2b04 	ldr.w	r2, [r3], #4
 801e016:	6800      	ldr	r0, [r0, #0]
 801e018:	9301      	str	r3, [sp, #4]
 801e01a:	f000 f855 	bl	801e0c8 <_vfiprintf_r>
 801e01e:	b002      	add	sp, #8
 801e020:	f85d eb04 	ldr.w	lr, [sp], #4
 801e024:	b003      	add	sp, #12
 801e026:	4770      	bx	lr
 801e028:	20000928 	.word	0x20000928

0801e02c <__retarget_lock_init_recursive>:
 801e02c:	4770      	bx	lr

0801e02e <__retarget_lock_acquire_recursive>:
 801e02e:	4770      	bx	lr

0801e030 <__retarget_lock_release_recursive>:
 801e030:	4770      	bx	lr

0801e032 <memmove>:
 801e032:	4288      	cmp	r0, r1
 801e034:	b510      	push	{r4, lr}
 801e036:	eb01 0402 	add.w	r4, r1, r2
 801e03a:	d902      	bls.n	801e042 <memmove+0x10>
 801e03c:	4284      	cmp	r4, r0
 801e03e:	4623      	mov	r3, r4
 801e040:	d807      	bhi.n	801e052 <memmove+0x20>
 801e042:	1e43      	subs	r3, r0, #1
 801e044:	42a1      	cmp	r1, r4
 801e046:	d008      	beq.n	801e05a <memmove+0x28>
 801e048:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e04c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e050:	e7f8      	b.n	801e044 <memmove+0x12>
 801e052:	4402      	add	r2, r0
 801e054:	4601      	mov	r1, r0
 801e056:	428a      	cmp	r2, r1
 801e058:	d100      	bne.n	801e05c <memmove+0x2a>
 801e05a:	bd10      	pop	{r4, pc}
 801e05c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e060:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e064:	e7f7      	b.n	801e056 <memmove+0x24>

0801e066 <_malloc_usable_size_r>:
 801e066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e06a:	1f18      	subs	r0, r3, #4
 801e06c:	2b00      	cmp	r3, #0
 801e06e:	bfbc      	itt	lt
 801e070:	580b      	ldrlt	r3, [r1, r0]
 801e072:	18c0      	addlt	r0, r0, r3
 801e074:	4770      	bx	lr

0801e076 <__sfputc_r>:
 801e076:	6893      	ldr	r3, [r2, #8]
 801e078:	3b01      	subs	r3, #1
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	b410      	push	{r4}
 801e07e:	6093      	str	r3, [r2, #8]
 801e080:	da08      	bge.n	801e094 <__sfputc_r+0x1e>
 801e082:	6994      	ldr	r4, [r2, #24]
 801e084:	42a3      	cmp	r3, r4
 801e086:	db01      	blt.n	801e08c <__sfputc_r+0x16>
 801e088:	290a      	cmp	r1, #10
 801e08a:	d103      	bne.n	801e094 <__sfputc_r+0x1e>
 801e08c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e090:	f000 b94a 	b.w	801e328 <__swbuf_r>
 801e094:	6813      	ldr	r3, [r2, #0]
 801e096:	1c58      	adds	r0, r3, #1
 801e098:	6010      	str	r0, [r2, #0]
 801e09a:	7019      	strb	r1, [r3, #0]
 801e09c:	4608      	mov	r0, r1
 801e09e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0a2:	4770      	bx	lr

0801e0a4 <__sfputs_r>:
 801e0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0a6:	4606      	mov	r6, r0
 801e0a8:	460f      	mov	r7, r1
 801e0aa:	4614      	mov	r4, r2
 801e0ac:	18d5      	adds	r5, r2, r3
 801e0ae:	42ac      	cmp	r4, r5
 801e0b0:	d101      	bne.n	801e0b6 <__sfputs_r+0x12>
 801e0b2:	2000      	movs	r0, #0
 801e0b4:	e007      	b.n	801e0c6 <__sfputs_r+0x22>
 801e0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0ba:	463a      	mov	r2, r7
 801e0bc:	4630      	mov	r0, r6
 801e0be:	f7ff ffda 	bl	801e076 <__sfputc_r>
 801e0c2:	1c43      	adds	r3, r0, #1
 801e0c4:	d1f3      	bne.n	801e0ae <__sfputs_r+0xa>
 801e0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e0c8 <_vfiprintf_r>:
 801e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0cc:	460d      	mov	r5, r1
 801e0ce:	b09d      	sub	sp, #116	; 0x74
 801e0d0:	4614      	mov	r4, r2
 801e0d2:	4698      	mov	r8, r3
 801e0d4:	4606      	mov	r6, r0
 801e0d6:	b118      	cbz	r0, 801e0e0 <_vfiprintf_r+0x18>
 801e0d8:	6983      	ldr	r3, [r0, #24]
 801e0da:	b90b      	cbnz	r3, 801e0e0 <_vfiprintf_r+0x18>
 801e0dc:	f000 fb06 	bl	801e6ec <__sinit>
 801e0e0:	4b89      	ldr	r3, [pc, #548]	; (801e308 <_vfiprintf_r+0x240>)
 801e0e2:	429d      	cmp	r5, r3
 801e0e4:	d11b      	bne.n	801e11e <_vfiprintf_r+0x56>
 801e0e6:	6875      	ldr	r5, [r6, #4]
 801e0e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e0ea:	07d9      	lsls	r1, r3, #31
 801e0ec:	d405      	bmi.n	801e0fa <_vfiprintf_r+0x32>
 801e0ee:	89ab      	ldrh	r3, [r5, #12]
 801e0f0:	059a      	lsls	r2, r3, #22
 801e0f2:	d402      	bmi.n	801e0fa <_vfiprintf_r+0x32>
 801e0f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e0f6:	f7ff ff9a 	bl	801e02e <__retarget_lock_acquire_recursive>
 801e0fa:	89ab      	ldrh	r3, [r5, #12]
 801e0fc:	071b      	lsls	r3, r3, #28
 801e0fe:	d501      	bpl.n	801e104 <_vfiprintf_r+0x3c>
 801e100:	692b      	ldr	r3, [r5, #16]
 801e102:	b9eb      	cbnz	r3, 801e140 <_vfiprintf_r+0x78>
 801e104:	4629      	mov	r1, r5
 801e106:	4630      	mov	r0, r6
 801e108:	f000 f960 	bl	801e3cc <__swsetup_r>
 801e10c:	b1c0      	cbz	r0, 801e140 <_vfiprintf_r+0x78>
 801e10e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e110:	07dc      	lsls	r4, r3, #31
 801e112:	d50e      	bpl.n	801e132 <_vfiprintf_r+0x6a>
 801e114:	f04f 30ff 	mov.w	r0, #4294967295
 801e118:	b01d      	add	sp, #116	; 0x74
 801e11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e11e:	4b7b      	ldr	r3, [pc, #492]	; (801e30c <_vfiprintf_r+0x244>)
 801e120:	429d      	cmp	r5, r3
 801e122:	d101      	bne.n	801e128 <_vfiprintf_r+0x60>
 801e124:	68b5      	ldr	r5, [r6, #8]
 801e126:	e7df      	b.n	801e0e8 <_vfiprintf_r+0x20>
 801e128:	4b79      	ldr	r3, [pc, #484]	; (801e310 <_vfiprintf_r+0x248>)
 801e12a:	429d      	cmp	r5, r3
 801e12c:	bf08      	it	eq
 801e12e:	68f5      	ldreq	r5, [r6, #12]
 801e130:	e7da      	b.n	801e0e8 <_vfiprintf_r+0x20>
 801e132:	89ab      	ldrh	r3, [r5, #12]
 801e134:	0598      	lsls	r0, r3, #22
 801e136:	d4ed      	bmi.n	801e114 <_vfiprintf_r+0x4c>
 801e138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e13a:	f7ff ff79 	bl	801e030 <__retarget_lock_release_recursive>
 801e13e:	e7e9      	b.n	801e114 <_vfiprintf_r+0x4c>
 801e140:	2300      	movs	r3, #0
 801e142:	9309      	str	r3, [sp, #36]	; 0x24
 801e144:	2320      	movs	r3, #32
 801e146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e14a:	f8cd 800c 	str.w	r8, [sp, #12]
 801e14e:	2330      	movs	r3, #48	; 0x30
 801e150:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e314 <_vfiprintf_r+0x24c>
 801e154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e158:	f04f 0901 	mov.w	r9, #1
 801e15c:	4623      	mov	r3, r4
 801e15e:	469a      	mov	sl, r3
 801e160:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e164:	b10a      	cbz	r2, 801e16a <_vfiprintf_r+0xa2>
 801e166:	2a25      	cmp	r2, #37	; 0x25
 801e168:	d1f9      	bne.n	801e15e <_vfiprintf_r+0x96>
 801e16a:	ebba 0b04 	subs.w	fp, sl, r4
 801e16e:	d00b      	beq.n	801e188 <_vfiprintf_r+0xc0>
 801e170:	465b      	mov	r3, fp
 801e172:	4622      	mov	r2, r4
 801e174:	4629      	mov	r1, r5
 801e176:	4630      	mov	r0, r6
 801e178:	f7ff ff94 	bl	801e0a4 <__sfputs_r>
 801e17c:	3001      	adds	r0, #1
 801e17e:	f000 80aa 	beq.w	801e2d6 <_vfiprintf_r+0x20e>
 801e182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e184:	445a      	add	r2, fp
 801e186:	9209      	str	r2, [sp, #36]	; 0x24
 801e188:	f89a 3000 	ldrb.w	r3, [sl]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	f000 80a2 	beq.w	801e2d6 <_vfiprintf_r+0x20e>
 801e192:	2300      	movs	r3, #0
 801e194:	f04f 32ff 	mov.w	r2, #4294967295
 801e198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e19c:	f10a 0a01 	add.w	sl, sl, #1
 801e1a0:	9304      	str	r3, [sp, #16]
 801e1a2:	9307      	str	r3, [sp, #28]
 801e1a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e1a8:	931a      	str	r3, [sp, #104]	; 0x68
 801e1aa:	4654      	mov	r4, sl
 801e1ac:	2205      	movs	r2, #5
 801e1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e1b2:	4858      	ldr	r0, [pc, #352]	; (801e314 <_vfiprintf_r+0x24c>)
 801e1b4:	f7e2 f82c 	bl	8000210 <memchr>
 801e1b8:	9a04      	ldr	r2, [sp, #16]
 801e1ba:	b9d8      	cbnz	r0, 801e1f4 <_vfiprintf_r+0x12c>
 801e1bc:	06d1      	lsls	r1, r2, #27
 801e1be:	bf44      	itt	mi
 801e1c0:	2320      	movmi	r3, #32
 801e1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e1c6:	0713      	lsls	r3, r2, #28
 801e1c8:	bf44      	itt	mi
 801e1ca:	232b      	movmi	r3, #43	; 0x2b
 801e1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e1d0:	f89a 3000 	ldrb.w	r3, [sl]
 801e1d4:	2b2a      	cmp	r3, #42	; 0x2a
 801e1d6:	d015      	beq.n	801e204 <_vfiprintf_r+0x13c>
 801e1d8:	9a07      	ldr	r2, [sp, #28]
 801e1da:	4654      	mov	r4, sl
 801e1dc:	2000      	movs	r0, #0
 801e1de:	f04f 0c0a 	mov.w	ip, #10
 801e1e2:	4621      	mov	r1, r4
 801e1e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e1e8:	3b30      	subs	r3, #48	; 0x30
 801e1ea:	2b09      	cmp	r3, #9
 801e1ec:	d94e      	bls.n	801e28c <_vfiprintf_r+0x1c4>
 801e1ee:	b1b0      	cbz	r0, 801e21e <_vfiprintf_r+0x156>
 801e1f0:	9207      	str	r2, [sp, #28]
 801e1f2:	e014      	b.n	801e21e <_vfiprintf_r+0x156>
 801e1f4:	eba0 0308 	sub.w	r3, r0, r8
 801e1f8:	fa09 f303 	lsl.w	r3, r9, r3
 801e1fc:	4313      	orrs	r3, r2
 801e1fe:	9304      	str	r3, [sp, #16]
 801e200:	46a2      	mov	sl, r4
 801e202:	e7d2      	b.n	801e1aa <_vfiprintf_r+0xe2>
 801e204:	9b03      	ldr	r3, [sp, #12]
 801e206:	1d19      	adds	r1, r3, #4
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	9103      	str	r1, [sp, #12]
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	bfbb      	ittet	lt
 801e210:	425b      	neglt	r3, r3
 801e212:	f042 0202 	orrlt.w	r2, r2, #2
 801e216:	9307      	strge	r3, [sp, #28]
 801e218:	9307      	strlt	r3, [sp, #28]
 801e21a:	bfb8      	it	lt
 801e21c:	9204      	strlt	r2, [sp, #16]
 801e21e:	7823      	ldrb	r3, [r4, #0]
 801e220:	2b2e      	cmp	r3, #46	; 0x2e
 801e222:	d10c      	bne.n	801e23e <_vfiprintf_r+0x176>
 801e224:	7863      	ldrb	r3, [r4, #1]
 801e226:	2b2a      	cmp	r3, #42	; 0x2a
 801e228:	d135      	bne.n	801e296 <_vfiprintf_r+0x1ce>
 801e22a:	9b03      	ldr	r3, [sp, #12]
 801e22c:	1d1a      	adds	r2, r3, #4
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	9203      	str	r2, [sp, #12]
 801e232:	2b00      	cmp	r3, #0
 801e234:	bfb8      	it	lt
 801e236:	f04f 33ff 	movlt.w	r3, #4294967295
 801e23a:	3402      	adds	r4, #2
 801e23c:	9305      	str	r3, [sp, #20]
 801e23e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e324 <_vfiprintf_r+0x25c>
 801e242:	7821      	ldrb	r1, [r4, #0]
 801e244:	2203      	movs	r2, #3
 801e246:	4650      	mov	r0, sl
 801e248:	f7e1 ffe2 	bl	8000210 <memchr>
 801e24c:	b140      	cbz	r0, 801e260 <_vfiprintf_r+0x198>
 801e24e:	2340      	movs	r3, #64	; 0x40
 801e250:	eba0 000a 	sub.w	r0, r0, sl
 801e254:	fa03 f000 	lsl.w	r0, r3, r0
 801e258:	9b04      	ldr	r3, [sp, #16]
 801e25a:	4303      	orrs	r3, r0
 801e25c:	3401      	adds	r4, #1
 801e25e:	9304      	str	r3, [sp, #16]
 801e260:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e264:	482c      	ldr	r0, [pc, #176]	; (801e318 <_vfiprintf_r+0x250>)
 801e266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e26a:	2206      	movs	r2, #6
 801e26c:	f7e1 ffd0 	bl	8000210 <memchr>
 801e270:	2800      	cmp	r0, #0
 801e272:	d03f      	beq.n	801e2f4 <_vfiprintf_r+0x22c>
 801e274:	4b29      	ldr	r3, [pc, #164]	; (801e31c <_vfiprintf_r+0x254>)
 801e276:	bb1b      	cbnz	r3, 801e2c0 <_vfiprintf_r+0x1f8>
 801e278:	9b03      	ldr	r3, [sp, #12]
 801e27a:	3307      	adds	r3, #7
 801e27c:	f023 0307 	bic.w	r3, r3, #7
 801e280:	3308      	adds	r3, #8
 801e282:	9303      	str	r3, [sp, #12]
 801e284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e286:	443b      	add	r3, r7
 801e288:	9309      	str	r3, [sp, #36]	; 0x24
 801e28a:	e767      	b.n	801e15c <_vfiprintf_r+0x94>
 801e28c:	fb0c 3202 	mla	r2, ip, r2, r3
 801e290:	460c      	mov	r4, r1
 801e292:	2001      	movs	r0, #1
 801e294:	e7a5      	b.n	801e1e2 <_vfiprintf_r+0x11a>
 801e296:	2300      	movs	r3, #0
 801e298:	3401      	adds	r4, #1
 801e29a:	9305      	str	r3, [sp, #20]
 801e29c:	4619      	mov	r1, r3
 801e29e:	f04f 0c0a 	mov.w	ip, #10
 801e2a2:	4620      	mov	r0, r4
 801e2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e2a8:	3a30      	subs	r2, #48	; 0x30
 801e2aa:	2a09      	cmp	r2, #9
 801e2ac:	d903      	bls.n	801e2b6 <_vfiprintf_r+0x1ee>
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d0c5      	beq.n	801e23e <_vfiprintf_r+0x176>
 801e2b2:	9105      	str	r1, [sp, #20]
 801e2b4:	e7c3      	b.n	801e23e <_vfiprintf_r+0x176>
 801e2b6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e2ba:	4604      	mov	r4, r0
 801e2bc:	2301      	movs	r3, #1
 801e2be:	e7f0      	b.n	801e2a2 <_vfiprintf_r+0x1da>
 801e2c0:	ab03      	add	r3, sp, #12
 801e2c2:	9300      	str	r3, [sp, #0]
 801e2c4:	462a      	mov	r2, r5
 801e2c6:	4b16      	ldr	r3, [pc, #88]	; (801e320 <_vfiprintf_r+0x258>)
 801e2c8:	a904      	add	r1, sp, #16
 801e2ca:	4630      	mov	r0, r6
 801e2cc:	f7fc f90c 	bl	801a4e8 <_printf_float>
 801e2d0:	4607      	mov	r7, r0
 801e2d2:	1c78      	adds	r0, r7, #1
 801e2d4:	d1d6      	bne.n	801e284 <_vfiprintf_r+0x1bc>
 801e2d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e2d8:	07d9      	lsls	r1, r3, #31
 801e2da:	d405      	bmi.n	801e2e8 <_vfiprintf_r+0x220>
 801e2dc:	89ab      	ldrh	r3, [r5, #12]
 801e2de:	059a      	lsls	r2, r3, #22
 801e2e0:	d402      	bmi.n	801e2e8 <_vfiprintf_r+0x220>
 801e2e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e2e4:	f7ff fea4 	bl	801e030 <__retarget_lock_release_recursive>
 801e2e8:	89ab      	ldrh	r3, [r5, #12]
 801e2ea:	065b      	lsls	r3, r3, #25
 801e2ec:	f53f af12 	bmi.w	801e114 <_vfiprintf_r+0x4c>
 801e2f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e2f2:	e711      	b.n	801e118 <_vfiprintf_r+0x50>
 801e2f4:	ab03      	add	r3, sp, #12
 801e2f6:	9300      	str	r3, [sp, #0]
 801e2f8:	462a      	mov	r2, r5
 801e2fa:	4b09      	ldr	r3, [pc, #36]	; (801e320 <_vfiprintf_r+0x258>)
 801e2fc:	a904      	add	r1, sp, #16
 801e2fe:	4630      	mov	r0, r6
 801e300:	f7fc fb96 	bl	801aa30 <_printf_i>
 801e304:	e7e4      	b.n	801e2d0 <_vfiprintf_r+0x208>
 801e306:	bf00      	nop
 801e308:	080745dc 	.word	0x080745dc
 801e30c:	080745fc 	.word	0x080745fc
 801e310:	080745bc 	.word	0x080745bc
 801e314:	0807456c 	.word	0x0807456c
 801e318:	08074576 	.word	0x08074576
 801e31c:	0801a4e9 	.word	0x0801a4e9
 801e320:	0801e0a5 	.word	0x0801e0a5
 801e324:	08074572 	.word	0x08074572

0801e328 <__swbuf_r>:
 801e328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e32a:	460e      	mov	r6, r1
 801e32c:	4614      	mov	r4, r2
 801e32e:	4605      	mov	r5, r0
 801e330:	b118      	cbz	r0, 801e33a <__swbuf_r+0x12>
 801e332:	6983      	ldr	r3, [r0, #24]
 801e334:	b90b      	cbnz	r3, 801e33a <__swbuf_r+0x12>
 801e336:	f000 f9d9 	bl	801e6ec <__sinit>
 801e33a:	4b21      	ldr	r3, [pc, #132]	; (801e3c0 <__swbuf_r+0x98>)
 801e33c:	429c      	cmp	r4, r3
 801e33e:	d12b      	bne.n	801e398 <__swbuf_r+0x70>
 801e340:	686c      	ldr	r4, [r5, #4]
 801e342:	69a3      	ldr	r3, [r4, #24]
 801e344:	60a3      	str	r3, [r4, #8]
 801e346:	89a3      	ldrh	r3, [r4, #12]
 801e348:	071a      	lsls	r2, r3, #28
 801e34a:	d52f      	bpl.n	801e3ac <__swbuf_r+0x84>
 801e34c:	6923      	ldr	r3, [r4, #16]
 801e34e:	b36b      	cbz	r3, 801e3ac <__swbuf_r+0x84>
 801e350:	6923      	ldr	r3, [r4, #16]
 801e352:	6820      	ldr	r0, [r4, #0]
 801e354:	1ac0      	subs	r0, r0, r3
 801e356:	6963      	ldr	r3, [r4, #20]
 801e358:	b2f6      	uxtb	r6, r6
 801e35a:	4283      	cmp	r3, r0
 801e35c:	4637      	mov	r7, r6
 801e35e:	dc04      	bgt.n	801e36a <__swbuf_r+0x42>
 801e360:	4621      	mov	r1, r4
 801e362:	4628      	mov	r0, r5
 801e364:	f000 f92e 	bl	801e5c4 <_fflush_r>
 801e368:	bb30      	cbnz	r0, 801e3b8 <__swbuf_r+0x90>
 801e36a:	68a3      	ldr	r3, [r4, #8]
 801e36c:	3b01      	subs	r3, #1
 801e36e:	60a3      	str	r3, [r4, #8]
 801e370:	6823      	ldr	r3, [r4, #0]
 801e372:	1c5a      	adds	r2, r3, #1
 801e374:	6022      	str	r2, [r4, #0]
 801e376:	701e      	strb	r6, [r3, #0]
 801e378:	6963      	ldr	r3, [r4, #20]
 801e37a:	3001      	adds	r0, #1
 801e37c:	4283      	cmp	r3, r0
 801e37e:	d004      	beq.n	801e38a <__swbuf_r+0x62>
 801e380:	89a3      	ldrh	r3, [r4, #12]
 801e382:	07db      	lsls	r3, r3, #31
 801e384:	d506      	bpl.n	801e394 <__swbuf_r+0x6c>
 801e386:	2e0a      	cmp	r6, #10
 801e388:	d104      	bne.n	801e394 <__swbuf_r+0x6c>
 801e38a:	4621      	mov	r1, r4
 801e38c:	4628      	mov	r0, r5
 801e38e:	f000 f919 	bl	801e5c4 <_fflush_r>
 801e392:	b988      	cbnz	r0, 801e3b8 <__swbuf_r+0x90>
 801e394:	4638      	mov	r0, r7
 801e396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e398:	4b0a      	ldr	r3, [pc, #40]	; (801e3c4 <__swbuf_r+0x9c>)
 801e39a:	429c      	cmp	r4, r3
 801e39c:	d101      	bne.n	801e3a2 <__swbuf_r+0x7a>
 801e39e:	68ac      	ldr	r4, [r5, #8]
 801e3a0:	e7cf      	b.n	801e342 <__swbuf_r+0x1a>
 801e3a2:	4b09      	ldr	r3, [pc, #36]	; (801e3c8 <__swbuf_r+0xa0>)
 801e3a4:	429c      	cmp	r4, r3
 801e3a6:	bf08      	it	eq
 801e3a8:	68ec      	ldreq	r4, [r5, #12]
 801e3aa:	e7ca      	b.n	801e342 <__swbuf_r+0x1a>
 801e3ac:	4621      	mov	r1, r4
 801e3ae:	4628      	mov	r0, r5
 801e3b0:	f000 f80c 	bl	801e3cc <__swsetup_r>
 801e3b4:	2800      	cmp	r0, #0
 801e3b6:	d0cb      	beq.n	801e350 <__swbuf_r+0x28>
 801e3b8:	f04f 37ff 	mov.w	r7, #4294967295
 801e3bc:	e7ea      	b.n	801e394 <__swbuf_r+0x6c>
 801e3be:	bf00      	nop
 801e3c0:	080745dc 	.word	0x080745dc
 801e3c4:	080745fc 	.word	0x080745fc
 801e3c8:	080745bc 	.word	0x080745bc

0801e3cc <__swsetup_r>:
 801e3cc:	4b32      	ldr	r3, [pc, #200]	; (801e498 <__swsetup_r+0xcc>)
 801e3ce:	b570      	push	{r4, r5, r6, lr}
 801e3d0:	681d      	ldr	r5, [r3, #0]
 801e3d2:	4606      	mov	r6, r0
 801e3d4:	460c      	mov	r4, r1
 801e3d6:	b125      	cbz	r5, 801e3e2 <__swsetup_r+0x16>
 801e3d8:	69ab      	ldr	r3, [r5, #24]
 801e3da:	b913      	cbnz	r3, 801e3e2 <__swsetup_r+0x16>
 801e3dc:	4628      	mov	r0, r5
 801e3de:	f000 f985 	bl	801e6ec <__sinit>
 801e3e2:	4b2e      	ldr	r3, [pc, #184]	; (801e49c <__swsetup_r+0xd0>)
 801e3e4:	429c      	cmp	r4, r3
 801e3e6:	d10f      	bne.n	801e408 <__swsetup_r+0x3c>
 801e3e8:	686c      	ldr	r4, [r5, #4]
 801e3ea:	89a3      	ldrh	r3, [r4, #12]
 801e3ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3f0:	0719      	lsls	r1, r3, #28
 801e3f2:	d42c      	bmi.n	801e44e <__swsetup_r+0x82>
 801e3f4:	06dd      	lsls	r5, r3, #27
 801e3f6:	d411      	bmi.n	801e41c <__swsetup_r+0x50>
 801e3f8:	2309      	movs	r3, #9
 801e3fa:	6033      	str	r3, [r6, #0]
 801e3fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e400:	81a3      	strh	r3, [r4, #12]
 801e402:	f04f 30ff 	mov.w	r0, #4294967295
 801e406:	e03e      	b.n	801e486 <__swsetup_r+0xba>
 801e408:	4b25      	ldr	r3, [pc, #148]	; (801e4a0 <__swsetup_r+0xd4>)
 801e40a:	429c      	cmp	r4, r3
 801e40c:	d101      	bne.n	801e412 <__swsetup_r+0x46>
 801e40e:	68ac      	ldr	r4, [r5, #8]
 801e410:	e7eb      	b.n	801e3ea <__swsetup_r+0x1e>
 801e412:	4b24      	ldr	r3, [pc, #144]	; (801e4a4 <__swsetup_r+0xd8>)
 801e414:	429c      	cmp	r4, r3
 801e416:	bf08      	it	eq
 801e418:	68ec      	ldreq	r4, [r5, #12]
 801e41a:	e7e6      	b.n	801e3ea <__swsetup_r+0x1e>
 801e41c:	0758      	lsls	r0, r3, #29
 801e41e:	d512      	bpl.n	801e446 <__swsetup_r+0x7a>
 801e420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e422:	b141      	cbz	r1, 801e436 <__swsetup_r+0x6a>
 801e424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e428:	4299      	cmp	r1, r3
 801e42a:	d002      	beq.n	801e432 <__swsetup_r+0x66>
 801e42c:	4630      	mov	r0, r6
 801e42e:	f7fb fedb 	bl	801a1e8 <_free_r>
 801e432:	2300      	movs	r3, #0
 801e434:	6363      	str	r3, [r4, #52]	; 0x34
 801e436:	89a3      	ldrh	r3, [r4, #12]
 801e438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e43c:	81a3      	strh	r3, [r4, #12]
 801e43e:	2300      	movs	r3, #0
 801e440:	6063      	str	r3, [r4, #4]
 801e442:	6923      	ldr	r3, [r4, #16]
 801e444:	6023      	str	r3, [r4, #0]
 801e446:	89a3      	ldrh	r3, [r4, #12]
 801e448:	f043 0308 	orr.w	r3, r3, #8
 801e44c:	81a3      	strh	r3, [r4, #12]
 801e44e:	6923      	ldr	r3, [r4, #16]
 801e450:	b94b      	cbnz	r3, 801e466 <__swsetup_r+0x9a>
 801e452:	89a3      	ldrh	r3, [r4, #12]
 801e454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e45c:	d003      	beq.n	801e466 <__swsetup_r+0x9a>
 801e45e:	4621      	mov	r1, r4
 801e460:	4630      	mov	r0, r6
 801e462:	f000 fa05 	bl	801e870 <__smakebuf_r>
 801e466:	89a0      	ldrh	r0, [r4, #12]
 801e468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e46c:	f010 0301 	ands.w	r3, r0, #1
 801e470:	d00a      	beq.n	801e488 <__swsetup_r+0xbc>
 801e472:	2300      	movs	r3, #0
 801e474:	60a3      	str	r3, [r4, #8]
 801e476:	6963      	ldr	r3, [r4, #20]
 801e478:	425b      	negs	r3, r3
 801e47a:	61a3      	str	r3, [r4, #24]
 801e47c:	6923      	ldr	r3, [r4, #16]
 801e47e:	b943      	cbnz	r3, 801e492 <__swsetup_r+0xc6>
 801e480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e484:	d1ba      	bne.n	801e3fc <__swsetup_r+0x30>
 801e486:	bd70      	pop	{r4, r5, r6, pc}
 801e488:	0781      	lsls	r1, r0, #30
 801e48a:	bf58      	it	pl
 801e48c:	6963      	ldrpl	r3, [r4, #20]
 801e48e:	60a3      	str	r3, [r4, #8]
 801e490:	e7f4      	b.n	801e47c <__swsetup_r+0xb0>
 801e492:	2000      	movs	r0, #0
 801e494:	e7f7      	b.n	801e486 <__swsetup_r+0xba>
 801e496:	bf00      	nop
 801e498:	20000928 	.word	0x20000928
 801e49c:	080745dc 	.word	0x080745dc
 801e4a0:	080745fc 	.word	0x080745fc
 801e4a4:	080745bc 	.word	0x080745bc

0801e4a8 <abort>:
 801e4a8:	b508      	push	{r3, lr}
 801e4aa:	2006      	movs	r0, #6
 801e4ac:	f000 fa48 	bl	801e940 <raise>
 801e4b0:	2001      	movs	r0, #1
 801e4b2:	f7e4 feb5 	bl	8003220 <_exit>
	...

0801e4b8 <__sflush_r>:
 801e4b8:	898a      	ldrh	r2, [r1, #12]
 801e4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4be:	4605      	mov	r5, r0
 801e4c0:	0710      	lsls	r0, r2, #28
 801e4c2:	460c      	mov	r4, r1
 801e4c4:	d458      	bmi.n	801e578 <__sflush_r+0xc0>
 801e4c6:	684b      	ldr	r3, [r1, #4]
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	dc05      	bgt.n	801e4d8 <__sflush_r+0x20>
 801e4cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	dc02      	bgt.n	801e4d8 <__sflush_r+0x20>
 801e4d2:	2000      	movs	r0, #0
 801e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e4da:	2e00      	cmp	r6, #0
 801e4dc:	d0f9      	beq.n	801e4d2 <__sflush_r+0x1a>
 801e4de:	2300      	movs	r3, #0
 801e4e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e4e4:	682f      	ldr	r7, [r5, #0]
 801e4e6:	602b      	str	r3, [r5, #0]
 801e4e8:	d032      	beq.n	801e550 <__sflush_r+0x98>
 801e4ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e4ec:	89a3      	ldrh	r3, [r4, #12]
 801e4ee:	075a      	lsls	r2, r3, #29
 801e4f0:	d505      	bpl.n	801e4fe <__sflush_r+0x46>
 801e4f2:	6863      	ldr	r3, [r4, #4]
 801e4f4:	1ac0      	subs	r0, r0, r3
 801e4f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e4f8:	b10b      	cbz	r3, 801e4fe <__sflush_r+0x46>
 801e4fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e4fc:	1ac0      	subs	r0, r0, r3
 801e4fe:	2300      	movs	r3, #0
 801e500:	4602      	mov	r2, r0
 801e502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e504:	6a21      	ldr	r1, [r4, #32]
 801e506:	4628      	mov	r0, r5
 801e508:	47b0      	blx	r6
 801e50a:	1c43      	adds	r3, r0, #1
 801e50c:	89a3      	ldrh	r3, [r4, #12]
 801e50e:	d106      	bne.n	801e51e <__sflush_r+0x66>
 801e510:	6829      	ldr	r1, [r5, #0]
 801e512:	291d      	cmp	r1, #29
 801e514:	d82c      	bhi.n	801e570 <__sflush_r+0xb8>
 801e516:	4a2a      	ldr	r2, [pc, #168]	; (801e5c0 <__sflush_r+0x108>)
 801e518:	40ca      	lsrs	r2, r1
 801e51a:	07d6      	lsls	r6, r2, #31
 801e51c:	d528      	bpl.n	801e570 <__sflush_r+0xb8>
 801e51e:	2200      	movs	r2, #0
 801e520:	6062      	str	r2, [r4, #4]
 801e522:	04d9      	lsls	r1, r3, #19
 801e524:	6922      	ldr	r2, [r4, #16]
 801e526:	6022      	str	r2, [r4, #0]
 801e528:	d504      	bpl.n	801e534 <__sflush_r+0x7c>
 801e52a:	1c42      	adds	r2, r0, #1
 801e52c:	d101      	bne.n	801e532 <__sflush_r+0x7a>
 801e52e:	682b      	ldr	r3, [r5, #0]
 801e530:	b903      	cbnz	r3, 801e534 <__sflush_r+0x7c>
 801e532:	6560      	str	r0, [r4, #84]	; 0x54
 801e534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e536:	602f      	str	r7, [r5, #0]
 801e538:	2900      	cmp	r1, #0
 801e53a:	d0ca      	beq.n	801e4d2 <__sflush_r+0x1a>
 801e53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e540:	4299      	cmp	r1, r3
 801e542:	d002      	beq.n	801e54a <__sflush_r+0x92>
 801e544:	4628      	mov	r0, r5
 801e546:	f7fb fe4f 	bl	801a1e8 <_free_r>
 801e54a:	2000      	movs	r0, #0
 801e54c:	6360      	str	r0, [r4, #52]	; 0x34
 801e54e:	e7c1      	b.n	801e4d4 <__sflush_r+0x1c>
 801e550:	6a21      	ldr	r1, [r4, #32]
 801e552:	2301      	movs	r3, #1
 801e554:	4628      	mov	r0, r5
 801e556:	47b0      	blx	r6
 801e558:	1c41      	adds	r1, r0, #1
 801e55a:	d1c7      	bne.n	801e4ec <__sflush_r+0x34>
 801e55c:	682b      	ldr	r3, [r5, #0]
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d0c4      	beq.n	801e4ec <__sflush_r+0x34>
 801e562:	2b1d      	cmp	r3, #29
 801e564:	d001      	beq.n	801e56a <__sflush_r+0xb2>
 801e566:	2b16      	cmp	r3, #22
 801e568:	d101      	bne.n	801e56e <__sflush_r+0xb6>
 801e56a:	602f      	str	r7, [r5, #0]
 801e56c:	e7b1      	b.n	801e4d2 <__sflush_r+0x1a>
 801e56e:	89a3      	ldrh	r3, [r4, #12]
 801e570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e574:	81a3      	strh	r3, [r4, #12]
 801e576:	e7ad      	b.n	801e4d4 <__sflush_r+0x1c>
 801e578:	690f      	ldr	r7, [r1, #16]
 801e57a:	2f00      	cmp	r7, #0
 801e57c:	d0a9      	beq.n	801e4d2 <__sflush_r+0x1a>
 801e57e:	0793      	lsls	r3, r2, #30
 801e580:	680e      	ldr	r6, [r1, #0]
 801e582:	bf08      	it	eq
 801e584:	694b      	ldreq	r3, [r1, #20]
 801e586:	600f      	str	r7, [r1, #0]
 801e588:	bf18      	it	ne
 801e58a:	2300      	movne	r3, #0
 801e58c:	eba6 0807 	sub.w	r8, r6, r7
 801e590:	608b      	str	r3, [r1, #8]
 801e592:	f1b8 0f00 	cmp.w	r8, #0
 801e596:	dd9c      	ble.n	801e4d2 <__sflush_r+0x1a>
 801e598:	6a21      	ldr	r1, [r4, #32]
 801e59a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e59c:	4643      	mov	r3, r8
 801e59e:	463a      	mov	r2, r7
 801e5a0:	4628      	mov	r0, r5
 801e5a2:	47b0      	blx	r6
 801e5a4:	2800      	cmp	r0, #0
 801e5a6:	dc06      	bgt.n	801e5b6 <__sflush_r+0xfe>
 801e5a8:	89a3      	ldrh	r3, [r4, #12]
 801e5aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e5ae:	81a3      	strh	r3, [r4, #12]
 801e5b0:	f04f 30ff 	mov.w	r0, #4294967295
 801e5b4:	e78e      	b.n	801e4d4 <__sflush_r+0x1c>
 801e5b6:	4407      	add	r7, r0
 801e5b8:	eba8 0800 	sub.w	r8, r8, r0
 801e5bc:	e7e9      	b.n	801e592 <__sflush_r+0xda>
 801e5be:	bf00      	nop
 801e5c0:	20400001 	.word	0x20400001

0801e5c4 <_fflush_r>:
 801e5c4:	b538      	push	{r3, r4, r5, lr}
 801e5c6:	690b      	ldr	r3, [r1, #16]
 801e5c8:	4605      	mov	r5, r0
 801e5ca:	460c      	mov	r4, r1
 801e5cc:	b913      	cbnz	r3, 801e5d4 <_fflush_r+0x10>
 801e5ce:	2500      	movs	r5, #0
 801e5d0:	4628      	mov	r0, r5
 801e5d2:	bd38      	pop	{r3, r4, r5, pc}
 801e5d4:	b118      	cbz	r0, 801e5de <_fflush_r+0x1a>
 801e5d6:	6983      	ldr	r3, [r0, #24]
 801e5d8:	b90b      	cbnz	r3, 801e5de <_fflush_r+0x1a>
 801e5da:	f000 f887 	bl	801e6ec <__sinit>
 801e5de:	4b14      	ldr	r3, [pc, #80]	; (801e630 <_fflush_r+0x6c>)
 801e5e0:	429c      	cmp	r4, r3
 801e5e2:	d11b      	bne.n	801e61c <_fflush_r+0x58>
 801e5e4:	686c      	ldr	r4, [r5, #4]
 801e5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d0ef      	beq.n	801e5ce <_fflush_r+0xa>
 801e5ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e5f0:	07d0      	lsls	r0, r2, #31
 801e5f2:	d404      	bmi.n	801e5fe <_fflush_r+0x3a>
 801e5f4:	0599      	lsls	r1, r3, #22
 801e5f6:	d402      	bmi.n	801e5fe <_fflush_r+0x3a>
 801e5f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5fa:	f7ff fd18 	bl	801e02e <__retarget_lock_acquire_recursive>
 801e5fe:	4628      	mov	r0, r5
 801e600:	4621      	mov	r1, r4
 801e602:	f7ff ff59 	bl	801e4b8 <__sflush_r>
 801e606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e608:	07da      	lsls	r2, r3, #31
 801e60a:	4605      	mov	r5, r0
 801e60c:	d4e0      	bmi.n	801e5d0 <_fflush_r+0xc>
 801e60e:	89a3      	ldrh	r3, [r4, #12]
 801e610:	059b      	lsls	r3, r3, #22
 801e612:	d4dd      	bmi.n	801e5d0 <_fflush_r+0xc>
 801e614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e616:	f7ff fd0b 	bl	801e030 <__retarget_lock_release_recursive>
 801e61a:	e7d9      	b.n	801e5d0 <_fflush_r+0xc>
 801e61c:	4b05      	ldr	r3, [pc, #20]	; (801e634 <_fflush_r+0x70>)
 801e61e:	429c      	cmp	r4, r3
 801e620:	d101      	bne.n	801e626 <_fflush_r+0x62>
 801e622:	68ac      	ldr	r4, [r5, #8]
 801e624:	e7df      	b.n	801e5e6 <_fflush_r+0x22>
 801e626:	4b04      	ldr	r3, [pc, #16]	; (801e638 <_fflush_r+0x74>)
 801e628:	429c      	cmp	r4, r3
 801e62a:	bf08      	it	eq
 801e62c:	68ec      	ldreq	r4, [r5, #12]
 801e62e:	e7da      	b.n	801e5e6 <_fflush_r+0x22>
 801e630:	080745dc 	.word	0x080745dc
 801e634:	080745fc 	.word	0x080745fc
 801e638:	080745bc 	.word	0x080745bc

0801e63c <std>:
 801e63c:	2300      	movs	r3, #0
 801e63e:	b510      	push	{r4, lr}
 801e640:	4604      	mov	r4, r0
 801e642:	e9c0 3300 	strd	r3, r3, [r0]
 801e646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e64a:	6083      	str	r3, [r0, #8]
 801e64c:	8181      	strh	r1, [r0, #12]
 801e64e:	6643      	str	r3, [r0, #100]	; 0x64
 801e650:	81c2      	strh	r2, [r0, #14]
 801e652:	6183      	str	r3, [r0, #24]
 801e654:	4619      	mov	r1, r3
 801e656:	2208      	movs	r2, #8
 801e658:	305c      	adds	r0, #92	; 0x5c
 801e65a:	f7fb fda7 	bl	801a1ac <memset>
 801e65e:	4b05      	ldr	r3, [pc, #20]	; (801e674 <std+0x38>)
 801e660:	6263      	str	r3, [r4, #36]	; 0x24
 801e662:	4b05      	ldr	r3, [pc, #20]	; (801e678 <std+0x3c>)
 801e664:	62a3      	str	r3, [r4, #40]	; 0x28
 801e666:	4b05      	ldr	r3, [pc, #20]	; (801e67c <std+0x40>)
 801e668:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e66a:	4b05      	ldr	r3, [pc, #20]	; (801e680 <std+0x44>)
 801e66c:	6224      	str	r4, [r4, #32]
 801e66e:	6323      	str	r3, [r4, #48]	; 0x30
 801e670:	bd10      	pop	{r4, pc}
 801e672:	bf00      	nop
 801e674:	0801e979 	.word	0x0801e979
 801e678:	0801e99b 	.word	0x0801e99b
 801e67c:	0801e9d3 	.word	0x0801e9d3
 801e680:	0801e9f7 	.word	0x0801e9f7

0801e684 <_cleanup_r>:
 801e684:	4901      	ldr	r1, [pc, #4]	; (801e68c <_cleanup_r+0x8>)
 801e686:	f000 b8af 	b.w	801e7e8 <_fwalk_reent>
 801e68a:	bf00      	nop
 801e68c:	0801e5c5 	.word	0x0801e5c5

0801e690 <__sfmoreglue>:
 801e690:	b570      	push	{r4, r5, r6, lr}
 801e692:	2268      	movs	r2, #104	; 0x68
 801e694:	1e4d      	subs	r5, r1, #1
 801e696:	4355      	muls	r5, r2
 801e698:	460e      	mov	r6, r1
 801e69a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e69e:	f7fb fe0f 	bl	801a2c0 <_malloc_r>
 801e6a2:	4604      	mov	r4, r0
 801e6a4:	b140      	cbz	r0, 801e6b8 <__sfmoreglue+0x28>
 801e6a6:	2100      	movs	r1, #0
 801e6a8:	e9c0 1600 	strd	r1, r6, [r0]
 801e6ac:	300c      	adds	r0, #12
 801e6ae:	60a0      	str	r0, [r4, #8]
 801e6b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e6b4:	f7fb fd7a 	bl	801a1ac <memset>
 801e6b8:	4620      	mov	r0, r4
 801e6ba:	bd70      	pop	{r4, r5, r6, pc}

0801e6bc <__sfp_lock_acquire>:
 801e6bc:	4801      	ldr	r0, [pc, #4]	; (801e6c4 <__sfp_lock_acquire+0x8>)
 801e6be:	f7ff bcb6 	b.w	801e02e <__retarget_lock_acquire_recursive>
 801e6c2:	bf00      	nop
 801e6c4:	20004245 	.word	0x20004245

0801e6c8 <__sfp_lock_release>:
 801e6c8:	4801      	ldr	r0, [pc, #4]	; (801e6d0 <__sfp_lock_release+0x8>)
 801e6ca:	f7ff bcb1 	b.w	801e030 <__retarget_lock_release_recursive>
 801e6ce:	bf00      	nop
 801e6d0:	20004245 	.word	0x20004245

0801e6d4 <__sinit_lock_acquire>:
 801e6d4:	4801      	ldr	r0, [pc, #4]	; (801e6dc <__sinit_lock_acquire+0x8>)
 801e6d6:	f7ff bcaa 	b.w	801e02e <__retarget_lock_acquire_recursive>
 801e6da:	bf00      	nop
 801e6dc:	20004246 	.word	0x20004246

0801e6e0 <__sinit_lock_release>:
 801e6e0:	4801      	ldr	r0, [pc, #4]	; (801e6e8 <__sinit_lock_release+0x8>)
 801e6e2:	f7ff bca5 	b.w	801e030 <__retarget_lock_release_recursive>
 801e6e6:	bf00      	nop
 801e6e8:	20004246 	.word	0x20004246

0801e6ec <__sinit>:
 801e6ec:	b510      	push	{r4, lr}
 801e6ee:	4604      	mov	r4, r0
 801e6f0:	f7ff fff0 	bl	801e6d4 <__sinit_lock_acquire>
 801e6f4:	69a3      	ldr	r3, [r4, #24]
 801e6f6:	b11b      	cbz	r3, 801e700 <__sinit+0x14>
 801e6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6fc:	f7ff bff0 	b.w	801e6e0 <__sinit_lock_release>
 801e700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e704:	6523      	str	r3, [r4, #80]	; 0x50
 801e706:	4b13      	ldr	r3, [pc, #76]	; (801e754 <__sinit+0x68>)
 801e708:	4a13      	ldr	r2, [pc, #76]	; (801e758 <__sinit+0x6c>)
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	62a2      	str	r2, [r4, #40]	; 0x28
 801e70e:	42a3      	cmp	r3, r4
 801e710:	bf04      	itt	eq
 801e712:	2301      	moveq	r3, #1
 801e714:	61a3      	streq	r3, [r4, #24]
 801e716:	4620      	mov	r0, r4
 801e718:	f000 f820 	bl	801e75c <__sfp>
 801e71c:	6060      	str	r0, [r4, #4]
 801e71e:	4620      	mov	r0, r4
 801e720:	f000 f81c 	bl	801e75c <__sfp>
 801e724:	60a0      	str	r0, [r4, #8]
 801e726:	4620      	mov	r0, r4
 801e728:	f000 f818 	bl	801e75c <__sfp>
 801e72c:	2200      	movs	r2, #0
 801e72e:	60e0      	str	r0, [r4, #12]
 801e730:	2104      	movs	r1, #4
 801e732:	6860      	ldr	r0, [r4, #4]
 801e734:	f7ff ff82 	bl	801e63c <std>
 801e738:	68a0      	ldr	r0, [r4, #8]
 801e73a:	2201      	movs	r2, #1
 801e73c:	2109      	movs	r1, #9
 801e73e:	f7ff ff7d 	bl	801e63c <std>
 801e742:	68e0      	ldr	r0, [r4, #12]
 801e744:	2202      	movs	r2, #2
 801e746:	2112      	movs	r1, #18
 801e748:	f7ff ff78 	bl	801e63c <std>
 801e74c:	2301      	movs	r3, #1
 801e74e:	61a3      	str	r3, [r4, #24]
 801e750:	e7d2      	b.n	801e6f8 <__sinit+0xc>
 801e752:	bf00      	nop
 801e754:	08074174 	.word	0x08074174
 801e758:	0801e685 	.word	0x0801e685

0801e75c <__sfp>:
 801e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e75e:	4607      	mov	r7, r0
 801e760:	f7ff ffac 	bl	801e6bc <__sfp_lock_acquire>
 801e764:	4b1e      	ldr	r3, [pc, #120]	; (801e7e0 <__sfp+0x84>)
 801e766:	681e      	ldr	r6, [r3, #0]
 801e768:	69b3      	ldr	r3, [r6, #24]
 801e76a:	b913      	cbnz	r3, 801e772 <__sfp+0x16>
 801e76c:	4630      	mov	r0, r6
 801e76e:	f7ff ffbd 	bl	801e6ec <__sinit>
 801e772:	3648      	adds	r6, #72	; 0x48
 801e774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e778:	3b01      	subs	r3, #1
 801e77a:	d503      	bpl.n	801e784 <__sfp+0x28>
 801e77c:	6833      	ldr	r3, [r6, #0]
 801e77e:	b30b      	cbz	r3, 801e7c4 <__sfp+0x68>
 801e780:	6836      	ldr	r6, [r6, #0]
 801e782:	e7f7      	b.n	801e774 <__sfp+0x18>
 801e784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e788:	b9d5      	cbnz	r5, 801e7c0 <__sfp+0x64>
 801e78a:	4b16      	ldr	r3, [pc, #88]	; (801e7e4 <__sfp+0x88>)
 801e78c:	60e3      	str	r3, [r4, #12]
 801e78e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e792:	6665      	str	r5, [r4, #100]	; 0x64
 801e794:	f7ff fc4a 	bl	801e02c <__retarget_lock_init_recursive>
 801e798:	f7ff ff96 	bl	801e6c8 <__sfp_lock_release>
 801e79c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e7a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e7a4:	6025      	str	r5, [r4, #0]
 801e7a6:	61a5      	str	r5, [r4, #24]
 801e7a8:	2208      	movs	r2, #8
 801e7aa:	4629      	mov	r1, r5
 801e7ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e7b0:	f7fb fcfc 	bl	801a1ac <memset>
 801e7b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e7b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e7bc:	4620      	mov	r0, r4
 801e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7c0:	3468      	adds	r4, #104	; 0x68
 801e7c2:	e7d9      	b.n	801e778 <__sfp+0x1c>
 801e7c4:	2104      	movs	r1, #4
 801e7c6:	4638      	mov	r0, r7
 801e7c8:	f7ff ff62 	bl	801e690 <__sfmoreglue>
 801e7cc:	4604      	mov	r4, r0
 801e7ce:	6030      	str	r0, [r6, #0]
 801e7d0:	2800      	cmp	r0, #0
 801e7d2:	d1d5      	bne.n	801e780 <__sfp+0x24>
 801e7d4:	f7ff ff78 	bl	801e6c8 <__sfp_lock_release>
 801e7d8:	230c      	movs	r3, #12
 801e7da:	603b      	str	r3, [r7, #0]
 801e7dc:	e7ee      	b.n	801e7bc <__sfp+0x60>
 801e7de:	bf00      	nop
 801e7e0:	08074174 	.word	0x08074174
 801e7e4:	ffff0001 	.word	0xffff0001

0801e7e8 <_fwalk_reent>:
 801e7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e7ec:	4606      	mov	r6, r0
 801e7ee:	4688      	mov	r8, r1
 801e7f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e7f4:	2700      	movs	r7, #0
 801e7f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e7fa:	f1b9 0901 	subs.w	r9, r9, #1
 801e7fe:	d505      	bpl.n	801e80c <_fwalk_reent+0x24>
 801e800:	6824      	ldr	r4, [r4, #0]
 801e802:	2c00      	cmp	r4, #0
 801e804:	d1f7      	bne.n	801e7f6 <_fwalk_reent+0xe>
 801e806:	4638      	mov	r0, r7
 801e808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e80c:	89ab      	ldrh	r3, [r5, #12]
 801e80e:	2b01      	cmp	r3, #1
 801e810:	d907      	bls.n	801e822 <_fwalk_reent+0x3a>
 801e812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e816:	3301      	adds	r3, #1
 801e818:	d003      	beq.n	801e822 <_fwalk_reent+0x3a>
 801e81a:	4629      	mov	r1, r5
 801e81c:	4630      	mov	r0, r6
 801e81e:	47c0      	blx	r8
 801e820:	4307      	orrs	r7, r0
 801e822:	3568      	adds	r5, #104	; 0x68
 801e824:	e7e9      	b.n	801e7fa <_fwalk_reent+0x12>

0801e826 <__swhatbuf_r>:
 801e826:	b570      	push	{r4, r5, r6, lr}
 801e828:	460e      	mov	r6, r1
 801e82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e82e:	2900      	cmp	r1, #0
 801e830:	b096      	sub	sp, #88	; 0x58
 801e832:	4614      	mov	r4, r2
 801e834:	461d      	mov	r5, r3
 801e836:	da08      	bge.n	801e84a <__swhatbuf_r+0x24>
 801e838:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e83c:	2200      	movs	r2, #0
 801e83e:	602a      	str	r2, [r5, #0]
 801e840:	061a      	lsls	r2, r3, #24
 801e842:	d410      	bmi.n	801e866 <__swhatbuf_r+0x40>
 801e844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e848:	e00e      	b.n	801e868 <__swhatbuf_r+0x42>
 801e84a:	466a      	mov	r2, sp
 801e84c:	f000 f8fa 	bl	801ea44 <_fstat_r>
 801e850:	2800      	cmp	r0, #0
 801e852:	dbf1      	blt.n	801e838 <__swhatbuf_r+0x12>
 801e854:	9a01      	ldr	r2, [sp, #4]
 801e856:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e85a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e85e:	425a      	negs	r2, r3
 801e860:	415a      	adcs	r2, r3
 801e862:	602a      	str	r2, [r5, #0]
 801e864:	e7ee      	b.n	801e844 <__swhatbuf_r+0x1e>
 801e866:	2340      	movs	r3, #64	; 0x40
 801e868:	2000      	movs	r0, #0
 801e86a:	6023      	str	r3, [r4, #0]
 801e86c:	b016      	add	sp, #88	; 0x58
 801e86e:	bd70      	pop	{r4, r5, r6, pc}

0801e870 <__smakebuf_r>:
 801e870:	898b      	ldrh	r3, [r1, #12]
 801e872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e874:	079d      	lsls	r5, r3, #30
 801e876:	4606      	mov	r6, r0
 801e878:	460c      	mov	r4, r1
 801e87a:	d507      	bpl.n	801e88c <__smakebuf_r+0x1c>
 801e87c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e880:	6023      	str	r3, [r4, #0]
 801e882:	6123      	str	r3, [r4, #16]
 801e884:	2301      	movs	r3, #1
 801e886:	6163      	str	r3, [r4, #20]
 801e888:	b002      	add	sp, #8
 801e88a:	bd70      	pop	{r4, r5, r6, pc}
 801e88c:	ab01      	add	r3, sp, #4
 801e88e:	466a      	mov	r2, sp
 801e890:	f7ff ffc9 	bl	801e826 <__swhatbuf_r>
 801e894:	9900      	ldr	r1, [sp, #0]
 801e896:	4605      	mov	r5, r0
 801e898:	4630      	mov	r0, r6
 801e89a:	f7fb fd11 	bl	801a2c0 <_malloc_r>
 801e89e:	b948      	cbnz	r0, 801e8b4 <__smakebuf_r+0x44>
 801e8a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e8a4:	059a      	lsls	r2, r3, #22
 801e8a6:	d4ef      	bmi.n	801e888 <__smakebuf_r+0x18>
 801e8a8:	f023 0303 	bic.w	r3, r3, #3
 801e8ac:	f043 0302 	orr.w	r3, r3, #2
 801e8b0:	81a3      	strh	r3, [r4, #12]
 801e8b2:	e7e3      	b.n	801e87c <__smakebuf_r+0xc>
 801e8b4:	4b0d      	ldr	r3, [pc, #52]	; (801e8ec <__smakebuf_r+0x7c>)
 801e8b6:	62b3      	str	r3, [r6, #40]	; 0x28
 801e8b8:	89a3      	ldrh	r3, [r4, #12]
 801e8ba:	6020      	str	r0, [r4, #0]
 801e8bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e8c0:	81a3      	strh	r3, [r4, #12]
 801e8c2:	9b00      	ldr	r3, [sp, #0]
 801e8c4:	6163      	str	r3, [r4, #20]
 801e8c6:	9b01      	ldr	r3, [sp, #4]
 801e8c8:	6120      	str	r0, [r4, #16]
 801e8ca:	b15b      	cbz	r3, 801e8e4 <__smakebuf_r+0x74>
 801e8cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e8d0:	4630      	mov	r0, r6
 801e8d2:	f000 f8c9 	bl	801ea68 <_isatty_r>
 801e8d6:	b128      	cbz	r0, 801e8e4 <__smakebuf_r+0x74>
 801e8d8:	89a3      	ldrh	r3, [r4, #12]
 801e8da:	f023 0303 	bic.w	r3, r3, #3
 801e8de:	f043 0301 	orr.w	r3, r3, #1
 801e8e2:	81a3      	strh	r3, [r4, #12]
 801e8e4:	89a0      	ldrh	r0, [r4, #12]
 801e8e6:	4305      	orrs	r5, r0
 801e8e8:	81a5      	strh	r5, [r4, #12]
 801e8ea:	e7cd      	b.n	801e888 <__smakebuf_r+0x18>
 801e8ec:	0801e685 	.word	0x0801e685

0801e8f0 <_raise_r>:
 801e8f0:	291f      	cmp	r1, #31
 801e8f2:	b538      	push	{r3, r4, r5, lr}
 801e8f4:	4604      	mov	r4, r0
 801e8f6:	460d      	mov	r5, r1
 801e8f8:	d904      	bls.n	801e904 <_raise_r+0x14>
 801e8fa:	2316      	movs	r3, #22
 801e8fc:	6003      	str	r3, [r0, #0]
 801e8fe:	f04f 30ff 	mov.w	r0, #4294967295
 801e902:	bd38      	pop	{r3, r4, r5, pc}
 801e904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e906:	b112      	cbz	r2, 801e90e <_raise_r+0x1e>
 801e908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e90c:	b94b      	cbnz	r3, 801e922 <_raise_r+0x32>
 801e90e:	4620      	mov	r0, r4
 801e910:	f000 f830 	bl	801e974 <_getpid_r>
 801e914:	462a      	mov	r2, r5
 801e916:	4601      	mov	r1, r0
 801e918:	4620      	mov	r0, r4
 801e91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e91e:	f000 b817 	b.w	801e950 <_kill_r>
 801e922:	2b01      	cmp	r3, #1
 801e924:	d00a      	beq.n	801e93c <_raise_r+0x4c>
 801e926:	1c59      	adds	r1, r3, #1
 801e928:	d103      	bne.n	801e932 <_raise_r+0x42>
 801e92a:	2316      	movs	r3, #22
 801e92c:	6003      	str	r3, [r0, #0]
 801e92e:	2001      	movs	r0, #1
 801e930:	e7e7      	b.n	801e902 <_raise_r+0x12>
 801e932:	2400      	movs	r4, #0
 801e934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e938:	4628      	mov	r0, r5
 801e93a:	4798      	blx	r3
 801e93c:	2000      	movs	r0, #0
 801e93e:	e7e0      	b.n	801e902 <_raise_r+0x12>

0801e940 <raise>:
 801e940:	4b02      	ldr	r3, [pc, #8]	; (801e94c <raise+0xc>)
 801e942:	4601      	mov	r1, r0
 801e944:	6818      	ldr	r0, [r3, #0]
 801e946:	f7ff bfd3 	b.w	801e8f0 <_raise_r>
 801e94a:	bf00      	nop
 801e94c:	20000928 	.word	0x20000928

0801e950 <_kill_r>:
 801e950:	b538      	push	{r3, r4, r5, lr}
 801e952:	4d07      	ldr	r5, [pc, #28]	; (801e970 <_kill_r+0x20>)
 801e954:	2300      	movs	r3, #0
 801e956:	4604      	mov	r4, r0
 801e958:	4608      	mov	r0, r1
 801e95a:	4611      	mov	r1, r2
 801e95c:	602b      	str	r3, [r5, #0]
 801e95e:	f7e4 fc4f 	bl	8003200 <_kill>
 801e962:	1c43      	adds	r3, r0, #1
 801e964:	d102      	bne.n	801e96c <_kill_r+0x1c>
 801e966:	682b      	ldr	r3, [r5, #0]
 801e968:	b103      	cbz	r3, 801e96c <_kill_r+0x1c>
 801e96a:	6023      	str	r3, [r4, #0]
 801e96c:	bd38      	pop	{r3, r4, r5, pc}
 801e96e:	bf00      	nop
 801e970:	20004240 	.word	0x20004240

0801e974 <_getpid_r>:
 801e974:	f7e4 bc3c 	b.w	80031f0 <_getpid>

0801e978 <__sread>:
 801e978:	b510      	push	{r4, lr}
 801e97a:	460c      	mov	r4, r1
 801e97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e980:	f000 f894 	bl	801eaac <_read_r>
 801e984:	2800      	cmp	r0, #0
 801e986:	bfab      	itete	ge
 801e988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e98a:	89a3      	ldrhlt	r3, [r4, #12]
 801e98c:	181b      	addge	r3, r3, r0
 801e98e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e992:	bfac      	ite	ge
 801e994:	6563      	strge	r3, [r4, #84]	; 0x54
 801e996:	81a3      	strhlt	r3, [r4, #12]
 801e998:	bd10      	pop	{r4, pc}

0801e99a <__swrite>:
 801e99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e99e:	461f      	mov	r7, r3
 801e9a0:	898b      	ldrh	r3, [r1, #12]
 801e9a2:	05db      	lsls	r3, r3, #23
 801e9a4:	4605      	mov	r5, r0
 801e9a6:	460c      	mov	r4, r1
 801e9a8:	4616      	mov	r6, r2
 801e9aa:	d505      	bpl.n	801e9b8 <__swrite+0x1e>
 801e9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9b0:	2302      	movs	r3, #2
 801e9b2:	2200      	movs	r2, #0
 801e9b4:	f000 f868 	bl	801ea88 <_lseek_r>
 801e9b8:	89a3      	ldrh	r3, [r4, #12]
 801e9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e9be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e9c2:	81a3      	strh	r3, [r4, #12]
 801e9c4:	4632      	mov	r2, r6
 801e9c6:	463b      	mov	r3, r7
 801e9c8:	4628      	mov	r0, r5
 801e9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e9ce:	f000 b817 	b.w	801ea00 <_write_r>

0801e9d2 <__sseek>:
 801e9d2:	b510      	push	{r4, lr}
 801e9d4:	460c      	mov	r4, r1
 801e9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9da:	f000 f855 	bl	801ea88 <_lseek_r>
 801e9de:	1c43      	adds	r3, r0, #1
 801e9e0:	89a3      	ldrh	r3, [r4, #12]
 801e9e2:	bf15      	itete	ne
 801e9e4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e9e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e9ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e9ee:	81a3      	strheq	r3, [r4, #12]
 801e9f0:	bf18      	it	ne
 801e9f2:	81a3      	strhne	r3, [r4, #12]
 801e9f4:	bd10      	pop	{r4, pc}

0801e9f6 <__sclose>:
 801e9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e9fa:	f000 b813 	b.w	801ea24 <_close_r>
	...

0801ea00 <_write_r>:
 801ea00:	b538      	push	{r3, r4, r5, lr}
 801ea02:	4d07      	ldr	r5, [pc, #28]	; (801ea20 <_write_r+0x20>)
 801ea04:	4604      	mov	r4, r0
 801ea06:	4608      	mov	r0, r1
 801ea08:	4611      	mov	r1, r2
 801ea0a:	2200      	movs	r2, #0
 801ea0c:	602a      	str	r2, [r5, #0]
 801ea0e:	461a      	mov	r2, r3
 801ea10:	f7e4 fc2d 	bl	800326e <_write>
 801ea14:	1c43      	adds	r3, r0, #1
 801ea16:	d102      	bne.n	801ea1e <_write_r+0x1e>
 801ea18:	682b      	ldr	r3, [r5, #0]
 801ea1a:	b103      	cbz	r3, 801ea1e <_write_r+0x1e>
 801ea1c:	6023      	str	r3, [r4, #0]
 801ea1e:	bd38      	pop	{r3, r4, r5, pc}
 801ea20:	20004240 	.word	0x20004240

0801ea24 <_close_r>:
 801ea24:	b538      	push	{r3, r4, r5, lr}
 801ea26:	4d06      	ldr	r5, [pc, #24]	; (801ea40 <_close_r+0x1c>)
 801ea28:	2300      	movs	r3, #0
 801ea2a:	4604      	mov	r4, r0
 801ea2c:	4608      	mov	r0, r1
 801ea2e:	602b      	str	r3, [r5, #0]
 801ea30:	f7e4 fc39 	bl	80032a6 <_close>
 801ea34:	1c43      	adds	r3, r0, #1
 801ea36:	d102      	bne.n	801ea3e <_close_r+0x1a>
 801ea38:	682b      	ldr	r3, [r5, #0]
 801ea3a:	b103      	cbz	r3, 801ea3e <_close_r+0x1a>
 801ea3c:	6023      	str	r3, [r4, #0]
 801ea3e:	bd38      	pop	{r3, r4, r5, pc}
 801ea40:	20004240 	.word	0x20004240

0801ea44 <_fstat_r>:
 801ea44:	b538      	push	{r3, r4, r5, lr}
 801ea46:	4d07      	ldr	r5, [pc, #28]	; (801ea64 <_fstat_r+0x20>)
 801ea48:	2300      	movs	r3, #0
 801ea4a:	4604      	mov	r4, r0
 801ea4c:	4608      	mov	r0, r1
 801ea4e:	4611      	mov	r1, r2
 801ea50:	602b      	str	r3, [r5, #0]
 801ea52:	f7e4 fc34 	bl	80032be <_fstat>
 801ea56:	1c43      	adds	r3, r0, #1
 801ea58:	d102      	bne.n	801ea60 <_fstat_r+0x1c>
 801ea5a:	682b      	ldr	r3, [r5, #0]
 801ea5c:	b103      	cbz	r3, 801ea60 <_fstat_r+0x1c>
 801ea5e:	6023      	str	r3, [r4, #0]
 801ea60:	bd38      	pop	{r3, r4, r5, pc}
 801ea62:	bf00      	nop
 801ea64:	20004240 	.word	0x20004240

0801ea68 <_isatty_r>:
 801ea68:	b538      	push	{r3, r4, r5, lr}
 801ea6a:	4d06      	ldr	r5, [pc, #24]	; (801ea84 <_isatty_r+0x1c>)
 801ea6c:	2300      	movs	r3, #0
 801ea6e:	4604      	mov	r4, r0
 801ea70:	4608      	mov	r0, r1
 801ea72:	602b      	str	r3, [r5, #0]
 801ea74:	f7e4 fc33 	bl	80032de <_isatty>
 801ea78:	1c43      	adds	r3, r0, #1
 801ea7a:	d102      	bne.n	801ea82 <_isatty_r+0x1a>
 801ea7c:	682b      	ldr	r3, [r5, #0]
 801ea7e:	b103      	cbz	r3, 801ea82 <_isatty_r+0x1a>
 801ea80:	6023      	str	r3, [r4, #0]
 801ea82:	bd38      	pop	{r3, r4, r5, pc}
 801ea84:	20004240 	.word	0x20004240

0801ea88 <_lseek_r>:
 801ea88:	b538      	push	{r3, r4, r5, lr}
 801ea8a:	4d07      	ldr	r5, [pc, #28]	; (801eaa8 <_lseek_r+0x20>)
 801ea8c:	4604      	mov	r4, r0
 801ea8e:	4608      	mov	r0, r1
 801ea90:	4611      	mov	r1, r2
 801ea92:	2200      	movs	r2, #0
 801ea94:	602a      	str	r2, [r5, #0]
 801ea96:	461a      	mov	r2, r3
 801ea98:	f7e4 fc2c 	bl	80032f4 <_lseek>
 801ea9c:	1c43      	adds	r3, r0, #1
 801ea9e:	d102      	bne.n	801eaa6 <_lseek_r+0x1e>
 801eaa0:	682b      	ldr	r3, [r5, #0]
 801eaa2:	b103      	cbz	r3, 801eaa6 <_lseek_r+0x1e>
 801eaa4:	6023      	str	r3, [r4, #0]
 801eaa6:	bd38      	pop	{r3, r4, r5, pc}
 801eaa8:	20004240 	.word	0x20004240

0801eaac <_read_r>:
 801eaac:	b538      	push	{r3, r4, r5, lr}
 801eaae:	4d07      	ldr	r5, [pc, #28]	; (801eacc <_read_r+0x20>)
 801eab0:	4604      	mov	r4, r0
 801eab2:	4608      	mov	r0, r1
 801eab4:	4611      	mov	r1, r2
 801eab6:	2200      	movs	r2, #0
 801eab8:	602a      	str	r2, [r5, #0]
 801eaba:	461a      	mov	r2, r3
 801eabc:	f7e4 fbba 	bl	8003234 <_read>
 801eac0:	1c43      	adds	r3, r0, #1
 801eac2:	d102      	bne.n	801eaca <_read_r+0x1e>
 801eac4:	682b      	ldr	r3, [r5, #0]
 801eac6:	b103      	cbz	r3, 801eaca <_read_r+0x1e>
 801eac8:	6023      	str	r3, [r4, #0]
 801eaca:	bd38      	pop	{r3, r4, r5, pc}
 801eacc:	20004240 	.word	0x20004240

0801ead0 <round>:
 801ead0:	ec51 0b10 	vmov	r0, r1, d0
 801ead4:	b570      	push	{r4, r5, r6, lr}
 801ead6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801eada:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801eade:	2c13      	cmp	r4, #19
 801eae0:	ee10 2a10 	vmov	r2, s0
 801eae4:	460b      	mov	r3, r1
 801eae6:	dc19      	bgt.n	801eb1c <round+0x4c>
 801eae8:	2c00      	cmp	r4, #0
 801eaea:	da09      	bge.n	801eb00 <round+0x30>
 801eaec:	3401      	adds	r4, #1
 801eaee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801eaf2:	d103      	bne.n	801eafc <round+0x2c>
 801eaf4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801eaf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801eafc:	2200      	movs	r2, #0
 801eafe:	e028      	b.n	801eb52 <round+0x82>
 801eb00:	4d15      	ldr	r5, [pc, #84]	; (801eb58 <round+0x88>)
 801eb02:	4125      	asrs	r5, r4
 801eb04:	ea01 0605 	and.w	r6, r1, r5
 801eb08:	4332      	orrs	r2, r6
 801eb0a:	d00e      	beq.n	801eb2a <round+0x5a>
 801eb0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801eb10:	fa42 f404 	asr.w	r4, r2, r4
 801eb14:	4423      	add	r3, r4
 801eb16:	ea23 0305 	bic.w	r3, r3, r5
 801eb1a:	e7ef      	b.n	801eafc <round+0x2c>
 801eb1c:	2c33      	cmp	r4, #51	; 0x33
 801eb1e:	dd07      	ble.n	801eb30 <round+0x60>
 801eb20:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801eb24:	d101      	bne.n	801eb2a <round+0x5a>
 801eb26:	f7e1 fbc9 	bl	80002bc <__adddf3>
 801eb2a:	ec41 0b10 	vmov	d0, r0, r1
 801eb2e:	bd70      	pop	{r4, r5, r6, pc}
 801eb30:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801eb34:	f04f 35ff 	mov.w	r5, #4294967295
 801eb38:	40f5      	lsrs	r5, r6
 801eb3a:	4228      	tst	r0, r5
 801eb3c:	d0f5      	beq.n	801eb2a <round+0x5a>
 801eb3e:	2101      	movs	r1, #1
 801eb40:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801eb44:	fa01 f404 	lsl.w	r4, r1, r4
 801eb48:	1912      	adds	r2, r2, r4
 801eb4a:	bf28      	it	cs
 801eb4c:	185b      	addcs	r3, r3, r1
 801eb4e:	ea22 0205 	bic.w	r2, r2, r5
 801eb52:	4619      	mov	r1, r3
 801eb54:	4610      	mov	r0, r2
 801eb56:	e7e8      	b.n	801eb2a <round+0x5a>
 801eb58:	000fffff 	.word	0x000fffff
 801eb5c:	00000000 	.word	0x00000000

0801eb60 <log10>:
 801eb60:	b538      	push	{r3, r4, r5, lr}
 801eb62:	ed2d 8b02 	vpush	{d8}
 801eb66:	ec55 4b10 	vmov	r4, r5, d0
 801eb6a:	f000 f88d 	bl	801ec88 <__ieee754_log10>
 801eb6e:	4622      	mov	r2, r4
 801eb70:	462b      	mov	r3, r5
 801eb72:	4620      	mov	r0, r4
 801eb74:	4629      	mov	r1, r5
 801eb76:	eeb0 8a40 	vmov.f32	s16, s0
 801eb7a:	eef0 8a60 	vmov.f32	s17, s1
 801eb7e:	f7e1 ffed 	bl	8000b5c <__aeabi_dcmpun>
 801eb82:	b998      	cbnz	r0, 801ebac <log10+0x4c>
 801eb84:	2200      	movs	r2, #0
 801eb86:	2300      	movs	r3, #0
 801eb88:	4620      	mov	r0, r4
 801eb8a:	4629      	mov	r1, r5
 801eb8c:	f7e1 ffc8 	bl	8000b20 <__aeabi_dcmple>
 801eb90:	b160      	cbz	r0, 801ebac <log10+0x4c>
 801eb92:	2200      	movs	r2, #0
 801eb94:	2300      	movs	r3, #0
 801eb96:	4620      	mov	r0, r4
 801eb98:	4629      	mov	r1, r5
 801eb9a:	f7e1 ffad 	bl	8000af8 <__aeabi_dcmpeq>
 801eb9e:	b160      	cbz	r0, 801ebba <log10+0x5a>
 801eba0:	f7fb fabc 	bl	801a11c <__errno>
 801eba4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801ebd0 <log10+0x70>
 801eba8:	2322      	movs	r3, #34	; 0x22
 801ebaa:	6003      	str	r3, [r0, #0]
 801ebac:	eeb0 0a48 	vmov.f32	s0, s16
 801ebb0:	eef0 0a68 	vmov.f32	s1, s17
 801ebb4:	ecbd 8b02 	vpop	{d8}
 801ebb8:	bd38      	pop	{r3, r4, r5, pc}
 801ebba:	f7fb faaf 	bl	801a11c <__errno>
 801ebbe:	ecbd 8b02 	vpop	{d8}
 801ebc2:	2321      	movs	r3, #33	; 0x21
 801ebc4:	6003      	str	r3, [r0, #0]
 801ebc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ebca:	4803      	ldr	r0, [pc, #12]	; (801ebd8 <log10+0x78>)
 801ebcc:	f7ff b9d4 	b.w	801df78 <nan>
 801ebd0:	00000000 	.word	0x00000000
 801ebd4:	fff00000 	.word	0xfff00000
 801ebd8:	080745b8 	.word	0x080745b8

0801ebdc <expf>:
 801ebdc:	b508      	push	{r3, lr}
 801ebde:	ed2d 8b02 	vpush	{d8}
 801ebe2:	eef0 8a40 	vmov.f32	s17, s0
 801ebe6:	f000 f8d9 	bl	801ed9c <__ieee754_expf>
 801ebea:	eeb0 8a40 	vmov.f32	s16, s0
 801ebee:	eeb0 0a68 	vmov.f32	s0, s17
 801ebf2:	f000 f9c7 	bl	801ef84 <finitef>
 801ebf6:	b160      	cbz	r0, 801ec12 <expf+0x36>
 801ebf8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801ec38 <expf+0x5c>
 801ebfc:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ec00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec04:	dd0a      	ble.n	801ec1c <expf+0x40>
 801ec06:	f7fb fa89 	bl	801a11c <__errno>
 801ec0a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801ec3c <expf+0x60>
 801ec0e:	2322      	movs	r3, #34	; 0x22
 801ec10:	6003      	str	r3, [r0, #0]
 801ec12:	eeb0 0a48 	vmov.f32	s0, s16
 801ec16:	ecbd 8b02 	vpop	{d8}
 801ec1a:	bd08      	pop	{r3, pc}
 801ec1c:	eddf 7a08 	vldr	s15, [pc, #32]	; 801ec40 <expf+0x64>
 801ec20:	eef4 8ae7 	vcmpe.f32	s17, s15
 801ec24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec28:	d5f3      	bpl.n	801ec12 <expf+0x36>
 801ec2a:	f7fb fa77 	bl	801a11c <__errno>
 801ec2e:	2322      	movs	r3, #34	; 0x22
 801ec30:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801ec44 <expf+0x68>
 801ec34:	6003      	str	r3, [r0, #0]
 801ec36:	e7ec      	b.n	801ec12 <expf+0x36>
 801ec38:	42b17180 	.word	0x42b17180
 801ec3c:	7f800000 	.word	0x7f800000
 801ec40:	c2cff1b5 	.word	0xc2cff1b5
 801ec44:	00000000 	.word	0x00000000

0801ec48 <sqrtf>:
 801ec48:	b508      	push	{r3, lr}
 801ec4a:	ed2d 8b02 	vpush	{d8}
 801ec4e:	eeb0 8a40 	vmov.f32	s16, s0
 801ec52:	f000 f971 	bl	801ef38 <__ieee754_sqrtf>
 801ec56:	eeb4 8a48 	vcmp.f32	s16, s16
 801ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec5e:	d60c      	bvs.n	801ec7a <sqrtf+0x32>
 801ec60:	eddf 8a07 	vldr	s17, [pc, #28]	; 801ec80 <sqrtf+0x38>
 801ec64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ec68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec6c:	d505      	bpl.n	801ec7a <sqrtf+0x32>
 801ec6e:	f7fb fa55 	bl	801a11c <__errno>
 801ec72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801ec76:	2321      	movs	r3, #33	; 0x21
 801ec78:	6003      	str	r3, [r0, #0]
 801ec7a:	ecbd 8b02 	vpop	{d8}
 801ec7e:	bd08      	pop	{r3, pc}
	...

0801ec88 <__ieee754_log10>:
 801ec88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec8c:	ec55 4b10 	vmov	r4, r5, d0
 801ec90:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801ec94:	462b      	mov	r3, r5
 801ec96:	da2f      	bge.n	801ecf8 <__ieee754_log10+0x70>
 801ec98:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801ec9c:	4322      	orrs	r2, r4
 801ec9e:	d109      	bne.n	801ecb4 <__ieee754_log10+0x2c>
 801eca0:	493b      	ldr	r1, [pc, #236]	; (801ed90 <__ieee754_log10+0x108>)
 801eca2:	2200      	movs	r2, #0
 801eca4:	2300      	movs	r3, #0
 801eca6:	2000      	movs	r0, #0
 801eca8:	f7e1 fde8 	bl	800087c <__aeabi_ddiv>
 801ecac:	ec41 0b10 	vmov	d0, r0, r1
 801ecb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ecb4:	2d00      	cmp	r5, #0
 801ecb6:	da09      	bge.n	801eccc <__ieee754_log10+0x44>
 801ecb8:	ee10 2a10 	vmov	r2, s0
 801ecbc:	ee10 0a10 	vmov	r0, s0
 801ecc0:	4629      	mov	r1, r5
 801ecc2:	f7e1 faf9 	bl	80002b8 <__aeabi_dsub>
 801ecc6:	2200      	movs	r2, #0
 801ecc8:	2300      	movs	r3, #0
 801ecca:	e7ed      	b.n	801eca8 <__ieee754_log10+0x20>
 801eccc:	4b31      	ldr	r3, [pc, #196]	; (801ed94 <__ieee754_log10+0x10c>)
 801ecce:	2200      	movs	r2, #0
 801ecd0:	4629      	mov	r1, r5
 801ecd2:	ee10 0a10 	vmov	r0, s0
 801ecd6:	f7e1 fca7 	bl	8000628 <__aeabi_dmul>
 801ecda:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801ecde:	4604      	mov	r4, r0
 801ece0:	460d      	mov	r5, r1
 801ece2:	460b      	mov	r3, r1
 801ece4:	492c      	ldr	r1, [pc, #176]	; (801ed98 <__ieee754_log10+0x110>)
 801ece6:	428b      	cmp	r3, r1
 801ece8:	dd08      	ble.n	801ecfc <__ieee754_log10+0x74>
 801ecea:	4622      	mov	r2, r4
 801ecec:	462b      	mov	r3, r5
 801ecee:	4620      	mov	r0, r4
 801ecf0:	4629      	mov	r1, r5
 801ecf2:	f7e1 fae3 	bl	80002bc <__adddf3>
 801ecf6:	e7d9      	b.n	801ecac <__ieee754_log10+0x24>
 801ecf8:	2200      	movs	r2, #0
 801ecfa:	e7f3      	b.n	801ece4 <__ieee754_log10+0x5c>
 801ecfc:	1518      	asrs	r0, r3, #20
 801ecfe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801ed02:	4410      	add	r0, r2
 801ed04:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 801ed08:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 801ed0c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801ed10:	f7e1 fc20 	bl	8000554 <__aeabi_i2d>
 801ed14:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801ed18:	3303      	adds	r3, #3
 801ed1a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801ed1e:	ec45 4b10 	vmov	d0, r4, r5
 801ed22:	4606      	mov	r6, r0
 801ed24:	460f      	mov	r7, r1
 801ed26:	f000 f93b 	bl	801efa0 <__ieee754_log>
 801ed2a:	a313      	add	r3, pc, #76	; (adr r3, 801ed78 <__ieee754_log10+0xf0>)
 801ed2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed30:	4630      	mov	r0, r6
 801ed32:	4639      	mov	r1, r7
 801ed34:	ec59 8b10 	vmov	r8, r9, d0
 801ed38:	f7e1 fc76 	bl	8000628 <__aeabi_dmul>
 801ed3c:	a310      	add	r3, pc, #64	; (adr r3, 801ed80 <__ieee754_log10+0xf8>)
 801ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed42:	4604      	mov	r4, r0
 801ed44:	460d      	mov	r5, r1
 801ed46:	4640      	mov	r0, r8
 801ed48:	4649      	mov	r1, r9
 801ed4a:	f7e1 fc6d 	bl	8000628 <__aeabi_dmul>
 801ed4e:	4602      	mov	r2, r0
 801ed50:	460b      	mov	r3, r1
 801ed52:	4620      	mov	r0, r4
 801ed54:	4629      	mov	r1, r5
 801ed56:	f7e1 fab1 	bl	80002bc <__adddf3>
 801ed5a:	a30b      	add	r3, pc, #44	; (adr r3, 801ed88 <__ieee754_log10+0x100>)
 801ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed60:	4604      	mov	r4, r0
 801ed62:	460d      	mov	r5, r1
 801ed64:	4630      	mov	r0, r6
 801ed66:	4639      	mov	r1, r7
 801ed68:	f7e1 fc5e 	bl	8000628 <__aeabi_dmul>
 801ed6c:	4602      	mov	r2, r0
 801ed6e:	460b      	mov	r3, r1
 801ed70:	4620      	mov	r0, r4
 801ed72:	4629      	mov	r1, r5
 801ed74:	e7bd      	b.n	801ecf2 <__ieee754_log10+0x6a>
 801ed76:	bf00      	nop
 801ed78:	11f12b36 	.word	0x11f12b36
 801ed7c:	3d59fef3 	.word	0x3d59fef3
 801ed80:	1526e50e 	.word	0x1526e50e
 801ed84:	3fdbcb7b 	.word	0x3fdbcb7b
 801ed88:	509f6000 	.word	0x509f6000
 801ed8c:	3fd34413 	.word	0x3fd34413
 801ed90:	c3500000 	.word	0xc3500000
 801ed94:	43500000 	.word	0x43500000
 801ed98:	7fefffff 	.word	0x7fefffff

0801ed9c <__ieee754_expf>:
 801ed9c:	ee10 2a10 	vmov	r2, s0
 801eda0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801eda4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801eda8:	d902      	bls.n	801edb0 <__ieee754_expf+0x14>
 801edaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 801edae:	4770      	bx	lr
 801edb0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801edb4:	d106      	bne.n	801edc4 <__ieee754_expf+0x28>
 801edb6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 801eef0 <__ieee754_expf+0x154>
 801edba:	2b00      	cmp	r3, #0
 801edbc:	bf18      	it	ne
 801edbe:	eeb0 0a67 	vmovne.f32	s0, s15
 801edc2:	4770      	bx	lr
 801edc4:	484b      	ldr	r0, [pc, #300]	; (801eef4 <__ieee754_expf+0x158>)
 801edc6:	4282      	cmp	r2, r0
 801edc8:	dd02      	ble.n	801edd0 <__ieee754_expf+0x34>
 801edca:	2000      	movs	r0, #0
 801edcc:	f000 b8d4 	b.w	801ef78 <__math_oflowf>
 801edd0:	2a00      	cmp	r2, #0
 801edd2:	da05      	bge.n	801ede0 <__ieee754_expf+0x44>
 801edd4:	4a48      	ldr	r2, [pc, #288]	; (801eef8 <__ieee754_expf+0x15c>)
 801edd6:	4291      	cmp	r1, r2
 801edd8:	d902      	bls.n	801ede0 <__ieee754_expf+0x44>
 801edda:	2000      	movs	r0, #0
 801eddc:	f000 b8c6 	b.w	801ef6c <__math_uflowf>
 801ede0:	4a46      	ldr	r2, [pc, #280]	; (801eefc <__ieee754_expf+0x160>)
 801ede2:	4291      	cmp	r1, r2
 801ede4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801ede8:	d952      	bls.n	801ee90 <__ieee754_expf+0xf4>
 801edea:	4a45      	ldr	r2, [pc, #276]	; (801ef00 <__ieee754_expf+0x164>)
 801edec:	4291      	cmp	r1, r2
 801edee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801edf2:	d834      	bhi.n	801ee5e <__ieee754_expf+0xc2>
 801edf4:	4943      	ldr	r1, [pc, #268]	; (801ef04 <__ieee754_expf+0x168>)
 801edf6:	4411      	add	r1, r2
 801edf8:	ed91 7a00 	vldr	s14, [r1]
 801edfc:	4942      	ldr	r1, [pc, #264]	; (801ef08 <__ieee754_expf+0x16c>)
 801edfe:	440a      	add	r2, r1
 801ee00:	edd2 7a00 	vldr	s15, [r2]
 801ee04:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ee08:	f1c3 0201 	rsb	r2, r3, #1
 801ee0c:	1ad2      	subs	r2, r2, r3
 801ee0e:	ee37 0a67 	vsub.f32	s0, s14, s15
 801ee12:	ee20 6a00 	vmul.f32	s12, s0, s0
 801ee16:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801ef0c <__ieee754_expf+0x170>
 801ee1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801ef10 <__ieee754_expf+0x174>
 801ee1e:	eee6 6a05 	vfma.f32	s13, s12, s10
 801ee22:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801ef14 <__ieee754_expf+0x178>
 801ee26:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ee2a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801ef18 <__ieee754_expf+0x17c>
 801ee2e:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ee32:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801ef1c <__ieee754_expf+0x180>
 801ee36:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ee3a:	eef0 6a40 	vmov.f32	s13, s0
 801ee3e:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ee42:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801ee46:	ee20 5a26 	vmul.f32	s10, s0, s13
 801ee4a:	bb92      	cbnz	r2, 801eeb2 <__ieee754_expf+0x116>
 801ee4c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ee50:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ee54:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ee58:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801ee5c:	4770      	bx	lr
 801ee5e:	4b30      	ldr	r3, [pc, #192]	; (801ef20 <__ieee754_expf+0x184>)
 801ee60:	ed9f 7a30 	vldr	s14, [pc, #192]	; 801ef24 <__ieee754_expf+0x188>
 801ee64:	eddf 6a30 	vldr	s13, [pc, #192]	; 801ef28 <__ieee754_expf+0x18c>
 801ee68:	4413      	add	r3, r2
 801ee6a:	edd3 7a00 	vldr	s15, [r3]
 801ee6e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ee72:	eeb0 7a40 	vmov.f32	s14, s0
 801ee76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ee7a:	ee17 2a90 	vmov	r2, s15
 801ee7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ee82:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ee86:	eddf 6a29 	vldr	s13, [pc, #164]	; 801ef2c <__ieee754_expf+0x190>
 801ee8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ee8e:	e7be      	b.n	801ee0e <__ieee754_expf+0x72>
 801ee90:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 801ee94:	d20b      	bcs.n	801eeae <__ieee754_expf+0x112>
 801ee96:	eddf 6a26 	vldr	s13, [pc, #152]	; 801ef30 <__ieee754_expf+0x194>
 801ee9a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ee9e:	eef4 6ae5 	vcmpe.f32	s13, s11
 801eea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eea6:	dd02      	ble.n	801eeae <__ieee754_expf+0x112>
 801eea8:	ee30 0a25 	vadd.f32	s0, s0, s11
 801eeac:	4770      	bx	lr
 801eeae:	2200      	movs	r2, #0
 801eeb0:	e7af      	b.n	801ee12 <__ieee754_expf+0x76>
 801eeb2:	ee76 6a66 	vsub.f32	s13, s12, s13
 801eeb6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801eeba:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801eebe:	bfb8      	it	lt
 801eec0:	3264      	addlt	r2, #100	; 0x64
 801eec2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801eec6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801eeca:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801eece:	ee17 3a90 	vmov	r3, s15
 801eed2:	bfab      	itete	ge
 801eed4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801eed8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801eedc:	ee00 3a10 	vmovge	s0, r3
 801eee0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 801ef34 <__ieee754_expf+0x198>
 801eee4:	bfbc      	itt	lt
 801eee6:	ee00 3a10 	vmovlt	s0, r3
 801eeea:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801eeee:	4770      	bx	lr
 801eef0:	00000000 	.word	0x00000000
 801eef4:	42b17217 	.word	0x42b17217
 801eef8:	42cff1b5 	.word	0x42cff1b5
 801eefc:	3eb17218 	.word	0x3eb17218
 801ef00:	3f851591 	.word	0x3f851591
 801ef04:	08074624 	.word	0x08074624
 801ef08:	0807462c 	.word	0x0807462c
 801ef0c:	3331bb4c 	.word	0x3331bb4c
 801ef10:	b5ddea0e 	.word	0xb5ddea0e
 801ef14:	388ab355 	.word	0x388ab355
 801ef18:	bb360b61 	.word	0xbb360b61
 801ef1c:	3e2aaaab 	.word	0x3e2aaaab
 801ef20:	0807461c 	.word	0x0807461c
 801ef24:	3fb8aa3b 	.word	0x3fb8aa3b
 801ef28:	3f317180 	.word	0x3f317180
 801ef2c:	3717f7d1 	.word	0x3717f7d1
 801ef30:	7149f2ca 	.word	0x7149f2ca
 801ef34:	0d800000 	.word	0x0d800000

0801ef38 <__ieee754_sqrtf>:
 801ef38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801ef3c:	4770      	bx	lr

0801ef3e <with_errnof>:
 801ef3e:	b513      	push	{r0, r1, r4, lr}
 801ef40:	4604      	mov	r4, r0
 801ef42:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ef46:	f7fb f8e9 	bl	801a11c <__errno>
 801ef4a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ef4e:	6004      	str	r4, [r0, #0]
 801ef50:	b002      	add	sp, #8
 801ef52:	bd10      	pop	{r4, pc}

0801ef54 <xflowf>:
 801ef54:	b130      	cbz	r0, 801ef64 <xflowf+0x10>
 801ef56:	eef1 7a40 	vneg.f32	s15, s0
 801ef5a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ef5e:	2022      	movs	r0, #34	; 0x22
 801ef60:	f7ff bfed 	b.w	801ef3e <with_errnof>
 801ef64:	eef0 7a40 	vmov.f32	s15, s0
 801ef68:	e7f7      	b.n	801ef5a <xflowf+0x6>
	...

0801ef6c <__math_uflowf>:
 801ef6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ef74 <__math_uflowf+0x8>
 801ef70:	f7ff bff0 	b.w	801ef54 <xflowf>
 801ef74:	10000000 	.word	0x10000000

0801ef78 <__math_oflowf>:
 801ef78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ef80 <__math_oflowf+0x8>
 801ef7c:	f7ff bfea 	b.w	801ef54 <xflowf>
 801ef80:	70000000 	.word	0x70000000

0801ef84 <finitef>:
 801ef84:	b082      	sub	sp, #8
 801ef86:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ef8a:	9801      	ldr	r0, [sp, #4]
 801ef8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ef90:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801ef94:	bfac      	ite	ge
 801ef96:	2000      	movge	r0, #0
 801ef98:	2001      	movlt	r0, #1
 801ef9a:	b002      	add	sp, #8
 801ef9c:	4770      	bx	lr
	...

0801efa0 <__ieee754_log>:
 801efa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efa4:	ec51 0b10 	vmov	r0, r1, d0
 801efa8:	ed2d 8b04 	vpush	{d8-d9}
 801efac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801efb0:	b083      	sub	sp, #12
 801efb2:	460d      	mov	r5, r1
 801efb4:	da29      	bge.n	801f00a <__ieee754_log+0x6a>
 801efb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801efba:	4303      	orrs	r3, r0
 801efbc:	ee10 2a10 	vmov	r2, s0
 801efc0:	d10c      	bne.n	801efdc <__ieee754_log+0x3c>
 801efc2:	49cf      	ldr	r1, [pc, #828]	; (801f300 <__ieee754_log+0x360>)
 801efc4:	2200      	movs	r2, #0
 801efc6:	2300      	movs	r3, #0
 801efc8:	2000      	movs	r0, #0
 801efca:	f7e1 fc57 	bl	800087c <__aeabi_ddiv>
 801efce:	ec41 0b10 	vmov	d0, r0, r1
 801efd2:	b003      	add	sp, #12
 801efd4:	ecbd 8b04 	vpop	{d8-d9}
 801efd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efdc:	2900      	cmp	r1, #0
 801efde:	da05      	bge.n	801efec <__ieee754_log+0x4c>
 801efe0:	460b      	mov	r3, r1
 801efe2:	f7e1 f969 	bl	80002b8 <__aeabi_dsub>
 801efe6:	2200      	movs	r2, #0
 801efe8:	2300      	movs	r3, #0
 801efea:	e7ee      	b.n	801efca <__ieee754_log+0x2a>
 801efec:	4bc5      	ldr	r3, [pc, #788]	; (801f304 <__ieee754_log+0x364>)
 801efee:	2200      	movs	r2, #0
 801eff0:	f7e1 fb1a 	bl	8000628 <__aeabi_dmul>
 801eff4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801eff8:	460d      	mov	r5, r1
 801effa:	4ac3      	ldr	r2, [pc, #780]	; (801f308 <__ieee754_log+0x368>)
 801effc:	4295      	cmp	r5, r2
 801effe:	dd06      	ble.n	801f00e <__ieee754_log+0x6e>
 801f000:	4602      	mov	r2, r0
 801f002:	460b      	mov	r3, r1
 801f004:	f7e1 f95a 	bl	80002bc <__adddf3>
 801f008:	e7e1      	b.n	801efce <__ieee754_log+0x2e>
 801f00a:	2300      	movs	r3, #0
 801f00c:	e7f5      	b.n	801effa <__ieee754_log+0x5a>
 801f00e:	152c      	asrs	r4, r5, #20
 801f010:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801f014:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801f018:	441c      	add	r4, r3
 801f01a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801f01e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801f022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f026:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801f02a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801f02e:	ea42 0105 	orr.w	r1, r2, r5
 801f032:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801f036:	2200      	movs	r2, #0
 801f038:	4bb4      	ldr	r3, [pc, #720]	; (801f30c <__ieee754_log+0x36c>)
 801f03a:	f7e1 f93d 	bl	80002b8 <__aeabi_dsub>
 801f03e:	1cab      	adds	r3, r5, #2
 801f040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f044:	2b02      	cmp	r3, #2
 801f046:	4682      	mov	sl, r0
 801f048:	468b      	mov	fp, r1
 801f04a:	f04f 0200 	mov.w	r2, #0
 801f04e:	dc53      	bgt.n	801f0f8 <__ieee754_log+0x158>
 801f050:	2300      	movs	r3, #0
 801f052:	f7e1 fd51 	bl	8000af8 <__aeabi_dcmpeq>
 801f056:	b1d0      	cbz	r0, 801f08e <__ieee754_log+0xee>
 801f058:	2c00      	cmp	r4, #0
 801f05a:	f000 8122 	beq.w	801f2a2 <__ieee754_log+0x302>
 801f05e:	4620      	mov	r0, r4
 801f060:	f7e1 fa78 	bl	8000554 <__aeabi_i2d>
 801f064:	a390      	add	r3, pc, #576	; (adr r3, 801f2a8 <__ieee754_log+0x308>)
 801f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f06a:	4606      	mov	r6, r0
 801f06c:	460f      	mov	r7, r1
 801f06e:	f7e1 fadb 	bl	8000628 <__aeabi_dmul>
 801f072:	a38f      	add	r3, pc, #572	; (adr r3, 801f2b0 <__ieee754_log+0x310>)
 801f074:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f078:	4604      	mov	r4, r0
 801f07a:	460d      	mov	r5, r1
 801f07c:	4630      	mov	r0, r6
 801f07e:	4639      	mov	r1, r7
 801f080:	f7e1 fad2 	bl	8000628 <__aeabi_dmul>
 801f084:	4602      	mov	r2, r0
 801f086:	460b      	mov	r3, r1
 801f088:	4620      	mov	r0, r4
 801f08a:	4629      	mov	r1, r5
 801f08c:	e7ba      	b.n	801f004 <__ieee754_log+0x64>
 801f08e:	a38a      	add	r3, pc, #552	; (adr r3, 801f2b8 <__ieee754_log+0x318>)
 801f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f094:	4650      	mov	r0, sl
 801f096:	4659      	mov	r1, fp
 801f098:	f7e1 fac6 	bl	8000628 <__aeabi_dmul>
 801f09c:	4602      	mov	r2, r0
 801f09e:	460b      	mov	r3, r1
 801f0a0:	2000      	movs	r0, #0
 801f0a2:	499b      	ldr	r1, [pc, #620]	; (801f310 <__ieee754_log+0x370>)
 801f0a4:	f7e1 f908 	bl	80002b8 <__aeabi_dsub>
 801f0a8:	4652      	mov	r2, sl
 801f0aa:	4606      	mov	r6, r0
 801f0ac:	460f      	mov	r7, r1
 801f0ae:	465b      	mov	r3, fp
 801f0b0:	4650      	mov	r0, sl
 801f0b2:	4659      	mov	r1, fp
 801f0b4:	f7e1 fab8 	bl	8000628 <__aeabi_dmul>
 801f0b8:	4602      	mov	r2, r0
 801f0ba:	460b      	mov	r3, r1
 801f0bc:	4630      	mov	r0, r6
 801f0be:	4639      	mov	r1, r7
 801f0c0:	f7e1 fab2 	bl	8000628 <__aeabi_dmul>
 801f0c4:	4606      	mov	r6, r0
 801f0c6:	460f      	mov	r7, r1
 801f0c8:	b914      	cbnz	r4, 801f0d0 <__ieee754_log+0x130>
 801f0ca:	4632      	mov	r2, r6
 801f0cc:	463b      	mov	r3, r7
 801f0ce:	e0a2      	b.n	801f216 <__ieee754_log+0x276>
 801f0d0:	4620      	mov	r0, r4
 801f0d2:	f7e1 fa3f 	bl	8000554 <__aeabi_i2d>
 801f0d6:	a374      	add	r3, pc, #464	; (adr r3, 801f2a8 <__ieee754_log+0x308>)
 801f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0dc:	4680      	mov	r8, r0
 801f0de:	4689      	mov	r9, r1
 801f0e0:	f7e1 faa2 	bl	8000628 <__aeabi_dmul>
 801f0e4:	a372      	add	r3, pc, #456	; (adr r3, 801f2b0 <__ieee754_log+0x310>)
 801f0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0ea:	4604      	mov	r4, r0
 801f0ec:	460d      	mov	r5, r1
 801f0ee:	4640      	mov	r0, r8
 801f0f0:	4649      	mov	r1, r9
 801f0f2:	f7e1 fa99 	bl	8000628 <__aeabi_dmul>
 801f0f6:	e0a7      	b.n	801f248 <__ieee754_log+0x2a8>
 801f0f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f0fc:	f7e1 f8de 	bl	80002bc <__adddf3>
 801f100:	4602      	mov	r2, r0
 801f102:	460b      	mov	r3, r1
 801f104:	4650      	mov	r0, sl
 801f106:	4659      	mov	r1, fp
 801f108:	f7e1 fbb8 	bl	800087c <__aeabi_ddiv>
 801f10c:	ec41 0b18 	vmov	d8, r0, r1
 801f110:	4620      	mov	r0, r4
 801f112:	f7e1 fa1f 	bl	8000554 <__aeabi_i2d>
 801f116:	ec53 2b18 	vmov	r2, r3, d8
 801f11a:	ec41 0b19 	vmov	d9, r0, r1
 801f11e:	ec51 0b18 	vmov	r0, r1, d8
 801f122:	f7e1 fa81 	bl	8000628 <__aeabi_dmul>
 801f126:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801f12a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801f12e:	9301      	str	r3, [sp, #4]
 801f130:	4602      	mov	r2, r0
 801f132:	460b      	mov	r3, r1
 801f134:	4680      	mov	r8, r0
 801f136:	4689      	mov	r9, r1
 801f138:	f7e1 fa76 	bl	8000628 <__aeabi_dmul>
 801f13c:	a360      	add	r3, pc, #384	; (adr r3, 801f2c0 <__ieee754_log+0x320>)
 801f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f142:	4606      	mov	r6, r0
 801f144:	460f      	mov	r7, r1
 801f146:	f7e1 fa6f 	bl	8000628 <__aeabi_dmul>
 801f14a:	a35f      	add	r3, pc, #380	; (adr r3, 801f2c8 <__ieee754_log+0x328>)
 801f14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f150:	f7e1 f8b4 	bl	80002bc <__adddf3>
 801f154:	4632      	mov	r2, r6
 801f156:	463b      	mov	r3, r7
 801f158:	f7e1 fa66 	bl	8000628 <__aeabi_dmul>
 801f15c:	a35c      	add	r3, pc, #368	; (adr r3, 801f2d0 <__ieee754_log+0x330>)
 801f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f162:	f7e1 f8ab 	bl	80002bc <__adddf3>
 801f166:	4632      	mov	r2, r6
 801f168:	463b      	mov	r3, r7
 801f16a:	f7e1 fa5d 	bl	8000628 <__aeabi_dmul>
 801f16e:	a35a      	add	r3, pc, #360	; (adr r3, 801f2d8 <__ieee754_log+0x338>)
 801f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f174:	f7e1 f8a2 	bl	80002bc <__adddf3>
 801f178:	4642      	mov	r2, r8
 801f17a:	464b      	mov	r3, r9
 801f17c:	f7e1 fa54 	bl	8000628 <__aeabi_dmul>
 801f180:	a357      	add	r3, pc, #348	; (adr r3, 801f2e0 <__ieee754_log+0x340>)
 801f182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f186:	4680      	mov	r8, r0
 801f188:	4689      	mov	r9, r1
 801f18a:	4630      	mov	r0, r6
 801f18c:	4639      	mov	r1, r7
 801f18e:	f7e1 fa4b 	bl	8000628 <__aeabi_dmul>
 801f192:	a355      	add	r3, pc, #340	; (adr r3, 801f2e8 <__ieee754_log+0x348>)
 801f194:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f198:	f7e1 f890 	bl	80002bc <__adddf3>
 801f19c:	4632      	mov	r2, r6
 801f19e:	463b      	mov	r3, r7
 801f1a0:	f7e1 fa42 	bl	8000628 <__aeabi_dmul>
 801f1a4:	a352      	add	r3, pc, #328	; (adr r3, 801f2f0 <__ieee754_log+0x350>)
 801f1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1aa:	f7e1 f887 	bl	80002bc <__adddf3>
 801f1ae:	4632      	mov	r2, r6
 801f1b0:	463b      	mov	r3, r7
 801f1b2:	f7e1 fa39 	bl	8000628 <__aeabi_dmul>
 801f1b6:	460b      	mov	r3, r1
 801f1b8:	4602      	mov	r2, r0
 801f1ba:	4649      	mov	r1, r9
 801f1bc:	4640      	mov	r0, r8
 801f1be:	f7e1 f87d 	bl	80002bc <__adddf3>
 801f1c2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801f1c6:	9b01      	ldr	r3, [sp, #4]
 801f1c8:	3551      	adds	r5, #81	; 0x51
 801f1ca:	431d      	orrs	r5, r3
 801f1cc:	2d00      	cmp	r5, #0
 801f1ce:	4680      	mov	r8, r0
 801f1d0:	4689      	mov	r9, r1
 801f1d2:	dd48      	ble.n	801f266 <__ieee754_log+0x2c6>
 801f1d4:	4b4e      	ldr	r3, [pc, #312]	; (801f310 <__ieee754_log+0x370>)
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	4650      	mov	r0, sl
 801f1da:	4659      	mov	r1, fp
 801f1dc:	f7e1 fa24 	bl	8000628 <__aeabi_dmul>
 801f1e0:	4652      	mov	r2, sl
 801f1e2:	465b      	mov	r3, fp
 801f1e4:	f7e1 fa20 	bl	8000628 <__aeabi_dmul>
 801f1e8:	4602      	mov	r2, r0
 801f1ea:	460b      	mov	r3, r1
 801f1ec:	4606      	mov	r6, r0
 801f1ee:	460f      	mov	r7, r1
 801f1f0:	4640      	mov	r0, r8
 801f1f2:	4649      	mov	r1, r9
 801f1f4:	f7e1 f862 	bl	80002bc <__adddf3>
 801f1f8:	ec53 2b18 	vmov	r2, r3, d8
 801f1fc:	f7e1 fa14 	bl	8000628 <__aeabi_dmul>
 801f200:	4680      	mov	r8, r0
 801f202:	4689      	mov	r9, r1
 801f204:	b964      	cbnz	r4, 801f220 <__ieee754_log+0x280>
 801f206:	4602      	mov	r2, r0
 801f208:	460b      	mov	r3, r1
 801f20a:	4630      	mov	r0, r6
 801f20c:	4639      	mov	r1, r7
 801f20e:	f7e1 f853 	bl	80002b8 <__aeabi_dsub>
 801f212:	4602      	mov	r2, r0
 801f214:	460b      	mov	r3, r1
 801f216:	4650      	mov	r0, sl
 801f218:	4659      	mov	r1, fp
 801f21a:	f7e1 f84d 	bl	80002b8 <__aeabi_dsub>
 801f21e:	e6d6      	b.n	801efce <__ieee754_log+0x2e>
 801f220:	a321      	add	r3, pc, #132	; (adr r3, 801f2a8 <__ieee754_log+0x308>)
 801f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f226:	ec51 0b19 	vmov	r0, r1, d9
 801f22a:	f7e1 f9fd 	bl	8000628 <__aeabi_dmul>
 801f22e:	a320      	add	r3, pc, #128	; (adr r3, 801f2b0 <__ieee754_log+0x310>)
 801f230:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f234:	4604      	mov	r4, r0
 801f236:	460d      	mov	r5, r1
 801f238:	ec51 0b19 	vmov	r0, r1, d9
 801f23c:	f7e1 f9f4 	bl	8000628 <__aeabi_dmul>
 801f240:	4642      	mov	r2, r8
 801f242:	464b      	mov	r3, r9
 801f244:	f7e1 f83a 	bl	80002bc <__adddf3>
 801f248:	4602      	mov	r2, r0
 801f24a:	460b      	mov	r3, r1
 801f24c:	4630      	mov	r0, r6
 801f24e:	4639      	mov	r1, r7
 801f250:	f7e1 f832 	bl	80002b8 <__aeabi_dsub>
 801f254:	4652      	mov	r2, sl
 801f256:	465b      	mov	r3, fp
 801f258:	f7e1 f82e 	bl	80002b8 <__aeabi_dsub>
 801f25c:	4602      	mov	r2, r0
 801f25e:	460b      	mov	r3, r1
 801f260:	4620      	mov	r0, r4
 801f262:	4629      	mov	r1, r5
 801f264:	e7d9      	b.n	801f21a <__ieee754_log+0x27a>
 801f266:	4602      	mov	r2, r0
 801f268:	460b      	mov	r3, r1
 801f26a:	4650      	mov	r0, sl
 801f26c:	4659      	mov	r1, fp
 801f26e:	f7e1 f823 	bl	80002b8 <__aeabi_dsub>
 801f272:	ec53 2b18 	vmov	r2, r3, d8
 801f276:	f7e1 f9d7 	bl	8000628 <__aeabi_dmul>
 801f27a:	4606      	mov	r6, r0
 801f27c:	460f      	mov	r7, r1
 801f27e:	2c00      	cmp	r4, #0
 801f280:	f43f af23 	beq.w	801f0ca <__ieee754_log+0x12a>
 801f284:	a308      	add	r3, pc, #32	; (adr r3, 801f2a8 <__ieee754_log+0x308>)
 801f286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f28a:	ec51 0b19 	vmov	r0, r1, d9
 801f28e:	f7e1 f9cb 	bl	8000628 <__aeabi_dmul>
 801f292:	a307      	add	r3, pc, #28	; (adr r3, 801f2b0 <__ieee754_log+0x310>)
 801f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f298:	4604      	mov	r4, r0
 801f29a:	460d      	mov	r5, r1
 801f29c:	ec51 0b19 	vmov	r0, r1, d9
 801f2a0:	e727      	b.n	801f0f2 <__ieee754_log+0x152>
 801f2a2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801f2f8 <__ieee754_log+0x358>
 801f2a6:	e694      	b.n	801efd2 <__ieee754_log+0x32>
 801f2a8:	fee00000 	.word	0xfee00000
 801f2ac:	3fe62e42 	.word	0x3fe62e42
 801f2b0:	35793c76 	.word	0x35793c76
 801f2b4:	3dea39ef 	.word	0x3dea39ef
 801f2b8:	55555555 	.word	0x55555555
 801f2bc:	3fd55555 	.word	0x3fd55555
 801f2c0:	df3e5244 	.word	0xdf3e5244
 801f2c4:	3fc2f112 	.word	0x3fc2f112
 801f2c8:	96cb03de 	.word	0x96cb03de
 801f2cc:	3fc74664 	.word	0x3fc74664
 801f2d0:	94229359 	.word	0x94229359
 801f2d4:	3fd24924 	.word	0x3fd24924
 801f2d8:	55555593 	.word	0x55555593
 801f2dc:	3fe55555 	.word	0x3fe55555
 801f2e0:	d078c69f 	.word	0xd078c69f
 801f2e4:	3fc39a09 	.word	0x3fc39a09
 801f2e8:	1d8e78af 	.word	0x1d8e78af
 801f2ec:	3fcc71c5 	.word	0x3fcc71c5
 801f2f0:	9997fa04 	.word	0x9997fa04
 801f2f4:	3fd99999 	.word	0x3fd99999
	...
 801f300:	c3500000 	.word	0xc3500000
 801f304:	43500000 	.word	0x43500000
 801f308:	7fefffff 	.word	0x7fefffff
 801f30c:	3ff00000 	.word	0x3ff00000
 801f310:	3fe00000 	.word	0x3fe00000

0801f314 <_init>:
 801f314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f316:	bf00      	nop
 801f318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f31a:	bc08      	pop	{r3}
 801f31c:	469e      	mov	lr, r3
 801f31e:	4770      	bx	lr

0801f320 <_fini>:
 801f320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f322:	bf00      	nop
 801f324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f326:	bc08      	pop	{r3}
 801f328:	469e      	mov	lr, r3
 801f32a:	4770      	bx	lr
